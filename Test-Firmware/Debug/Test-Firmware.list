
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08007808  08007808  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007808  08007808  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08007810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000034  08007844  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08007844  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016522  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c54  00000000  00000000  0003657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018634  00000000  00000000  0004ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074f59  00000000  00000000  00067488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc3e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  000dc434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007714 	.word	0x08007714

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08007714 	.word	0x08007714

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003f8:	f3bf 8f4f 	dsb	sy
}
 80003fc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <__NVIC_SystemReset+0x1c>)
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <__NVIC_SystemReset+0x20>)
 8000402:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000404:	f3bf 8f4f 	dsb	sy
}
 8000408:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	e7fd      	b.n	800040a <__NVIC_SystemReset+0x16>
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	05fa0004 	.word	0x05fa0004

08000418 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b097      	sub	sp, #92	; 0x5c
 800041c:	af02      	add	r7, sp, #8
 800041e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4bde      	ldr	r3, [pc, #888]	; (800079c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d001      	beq.n	800042c <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000428:	f000 fbda 	bl	8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x7c8>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 800042c:	4bdc      	ldr	r3, [pc, #880]	; (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d100      	bne.n	8000436 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
 8000434:	e0e5      	b.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1ea>
      {
    	int es = ERPA_SAMPLE_COUNTER;
 8000436:	4bdb      	ldr	r3, [pc, #876]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	643b      	str	r3, [r7, #64]	; 0x40
    	int ec = ERPA_SAMPLE_CADENCE;
 800043c:	4bda      	ldr	r3, [pc, #872]	; (80007a8 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	63fb      	str	r3, [r7, #60]	; 0x3c
    	if (ERPA_SAMPLE_COUNTER == ERPA_SAMPLE_CADENCE) {
 8000442:	4bd9      	ldr	r3, [pc, #868]	; (80007a8 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	001a      	movs	r2, r3
 8000448:	4bd6      	ldr	r3, [pc, #856]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	429a      	cmp	r2, r3
 800044e:	d000      	beq.n	8000452 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 8000450:	e0d7      	b.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1ea>
			 * +/- 0.5v Every 100ms
			 */

			/* Write to SPI (begin transfer?) */

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	4ad4      	ldr	r2, [pc, #848]	; (80007ac <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f002 ff7d 	bl	800335c <HAL_GPIO_ReadPin>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d1f6      	bne.n	8000454 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			 * Steps DAC
			 * +/- 0.5v Every 100ms
			*/

			  /* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000466:	49d2      	ldr	r1, [pc, #840]	; (80007b0 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000468:	48d2      	ldr	r0, [pc, #840]	; (80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800046a:	2301      	movs	r3, #1
 800046c:	2201      	movs	r2, #1
 800046e:	f004 fb1b 	bl	8004aa8 <HAL_SPI_Transmit>
			SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000472:	4bd1      	ldr	r3, [pc, #836]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4bd0      	ldr	r3, [pc, #832]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000478:	49d0      	ldr	r1, [pc, #832]	; (80007bc <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800047a:	400a      	ands	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
			while (!(SPI2->SR));
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	4bcd      	ldr	r3, [pc, #820]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0fb      	beq.n	8000480 <HAL_TIM_OC_DelayElapsedCallback+0x68>
			erpa_raw = SPI2->DR;
 8000488:	4bcb      	ldr	r3, [pc, #812]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	001a      	movs	r2, r3
 800048e:	4bcc      	ldr	r3, [pc, #816]	; (80007c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000490:	601a      	str	r2, [r3, #0]

			ERPA_ADC_AVG += erpa_raw;
 8000492:	4bcc      	ldr	r3, [pc, #816]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4bca      	ldr	r3, [pc, #808]	; (80007c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	18d2      	adds	r2, r2, r3
 800049c:	4bc9      	ldr	r3, [pc, #804]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800049e:	601a      	str	r2, [r3, #0]
			times_added++;
 80004a0:	4bc9      	ldr	r3, [pc, #804]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	4bc8      	ldr	r3, [pc, #800]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80004a8:	601a      	str	r2, [r3, #0]


			int pc = ERPA_PACKET_COUNTER;
 80004aa:	4bc8      	ldr	r3, [pc, #800]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	63bb      	str	r3, [r7, #56]	; 0x38
			int ps = ERPA_PACKET_SPEED;
 80004b0:	2364      	movs	r3, #100	; 0x64
 80004b2:	637b      	str	r3, [r7, #52]	; 0x34

			if (ERPA_PACKET_COUNTER == ERPA_PACKET_SPEED) {
 80004b4:	2364      	movs	r3, #100	; 0x64
 80004b6:	001a      	movs	r2, r3
 80004b8:	4bc4      	ldr	r3, [pc, #784]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d000      	beq.n	80004c2 <HAL_TIM_OC_DelayElapsedCallback+0xaa>
 80004c0:	e094      	b.n	80005ec <HAL_TIM_OC_DelayElapsedCallback+0x1d4>

				DAC->DHR12R1 = DAC_OUT[step];
 80004c2:	4bc3      	ldr	r3, [pc, #780]	; (80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	0019      	movs	r1, r3
 80004c8:	4bc2      	ldr	r3, [pc, #776]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80004ca:	4ac3      	ldr	r2, [pc, #780]	; (80007d8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80004cc:	0089      	lsls	r1, r1, #2
 80004ce:	588a      	ldr	r2, [r1, r2]
 80004d0:	609a      	str	r2, [r3, #8]

				HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80004d2:	2311      	movs	r3, #17
 80004d4:	001a      	movs	r2, r3
 80004d6:	49c1      	ldr	r1, [pc, #772]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004d8:	4bc1      	ldr	r3, [pc, #772]	; (80007e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 ff90 	bl	8002400 <HAL_ADC_Start_DMA>
								  adcChannelCount);
				uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80004e0:	2432      	movs	r4, #50	; 0x32
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4abd      	ldr	r2, [pc, #756]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004e6:	8812      	ldrh	r2, [r2, #0]
 80004e8:	801a      	strh	r2, [r3, #0]
				uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80004ea:	2530      	movs	r5, #48	; 0x30
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	4abb      	ldr	r2, [pc, #748]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004f0:	8992      	ldrh	r2, [r2, #12]
 80004f2:	801a      	strh	r2, [r3, #0]
				uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80004f4:	262e      	movs	r6, #46	; 0x2e
 80004f6:	19bb      	adds	r3, r7, r6
 80004f8:	4ab8      	ldr	r2, [pc, #736]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004fa:	89d2      	ldrh	r2, [r2, #14]
 80004fc:	801a      	strh	r2, [r3, #0]
				uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80004fe:	212c      	movs	r1, #44	; 0x2c
 8000500:	187b      	adds	r3, r7, r1
 8000502:	4ab6      	ldr	r2, [pc, #728]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000504:	8a12      	ldrh	r2, [r2, #16]
 8000506:	801a      	strh	r2, [r3, #0]

				ERPA_ADC_AVG = ERPA_ADC_AVG / times_added;
 8000508:	4bae      	ldr	r3, [pc, #696]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4bae      	ldr	r3, [pc, #696]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f7ff fe82 	bl	800021c <__divsi3>
 8000518:	0003      	movs	r3, r0
 800051a:	001a      	movs	r2, r3
 800051c:	4ba9      	ldr	r3, [pc, #676]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800051e:	601a      	str	r2, [r3, #0]
				int check = ERPA_ADC_AVG;
 8000520:	4ba8      	ldr	r3, [pc, #672]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28

				erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000526:	22aa      	movs	r2, #170	; 0xaa
 8000528:	4bae      	ldr	r3, [pc, #696]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800052a:	701a      	strb	r2, [r3, #0]
				erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800052c:	22aa      	movs	r2, #170	; 0xaa
 800052e:	4bad      	ldr	r3, [pc, #692]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000530:	705a      	strb	r2, [r3, #1]
				erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000532:	4bad      	ldr	r3, [pc, #692]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	0a1b      	lsrs	r3, r3, #8
 8000538:	b29b      	uxth	r3, r3
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4ba9      	ldr	r3, [pc, #676]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800053e:	709a      	strb	r2, [r3, #2]
				erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000540:	4ba9      	ldr	r3, [pc, #676]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4ba7      	ldr	r3, [pc, #668]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000548:	70da      	strb	r2, [r3, #3]
				erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800054a:	193b      	adds	r3, r7, r4
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	b29b      	uxth	r3, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4ba3      	ldr	r3, [pc, #652]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000556:	711a      	strb	r2, [r3, #4]
				erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 8000558:	193b      	adds	r3, r7, r4
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4ba1      	ldr	r3, [pc, #644]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000560:	715a      	strb	r2, [r3, #5]
				erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000562:	197b      	adds	r3, r7, r5
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	0a1b      	lsrs	r3, r3, #8
 8000568:	b29b      	uxth	r3, r3
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b9d      	ldr	r3, [pc, #628]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800056e:	719a      	strb	r2, [r3, #6]
				erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 8000570:	197b      	adds	r3, r7, r5
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b9b      	ldr	r3, [pc, #620]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000578:	71da      	strb	r2, [r3, #7]
				erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29b      	uxth	r3, r3
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b97      	ldr	r3, [pc, #604]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000586:	721a      	strb	r2, [r3, #8]
				erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000588:	19bb      	adds	r3, r7, r6
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b95      	ldr	r3, [pc, #596]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000590:	725a      	strb	r2, [r3, #9]
				erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000592:	212c      	movs	r1, #44	; 0x2c
 8000594:	187b      	adds	r3, r7, r1
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b29b      	uxth	r3, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b91      	ldr	r3, [pc, #580]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005a0:	729a      	strb	r2, [r3, #10]
				erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b8e      	ldr	r3, [pc, #568]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005aa:	72da      	strb	r2, [r3, #11]
				erpa_buf[12] = ((ERPA_ADC_AVG & 0xFF00) >> 8);      // ERPA eADC MSB
 80005ac:	4b85      	ldr	r3, [pc, #532]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	121b      	asrs	r3, r3, #8
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b8b      	ldr	r3, [pc, #556]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005b6:	731a      	strb	r2, [r3, #12]
				erpa_buf[13] = (ERPA_ADC_AVG & 0xFF);               // ERPA eADC LSB
 80005b8:	4b82      	ldr	r3, [pc, #520]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b89      	ldr	r3, [pc, #548]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005c0:	735a      	strb	r2, [r3, #13]

				ERPA_ADC_AVG = 0;
 80005c2:	4b80      	ldr	r3, [pc, #512]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
				times_added = 0;
 80005c8:	4b7f      	ldr	r3, [pc, #508]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80005ce:	4985      	ldr	r1, [pc, #532]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005d0:	4886      	ldr	r0, [pc, #536]	; (80007ec <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	220e      	movs	r2, #14
 80005d6:	f005 fe07 	bl	80061e8 <HAL_UART_Transmit>
				ERPA_PACKET_COUNTER = 0;
 80005da:	4b7c      	ldr	r3, [pc, #496]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
				erpa_seq++;
 80005e0:	4b81      	ldr	r3, [pc, #516]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b7f      	ldr	r3, [pc, #508]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005ea:	801a      	strh	r2, [r3, #0]
			}

			ERPA_SAMPLE_COUNTER = 0;
 80005ec:	4b6d      	ldr	r3, [pc, #436]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
			if (erpa_seq == 65535) {
 80005f2:	4b7d      	ldr	r3, [pc, #500]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4a7e      	ldr	r2, [pc, #504]	; (80007f0 <HAL_TIM_OC_DelayElapsedCallback+0x3d8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d102      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1ea>
				erpa_seq = 0;
 80005fc:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	801a      	strh	r2, [r3, #0]
			}

    	}
      }
      ERPA_SAMPLE_COUNTER++;
 8000602:	4b68      	ldr	r3, [pc, #416]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	4b66      	ldr	r3, [pc, #408]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800060a:	601a      	str	r2, [r3, #0]
      ERPA_PACKET_COUNTER++;
 800060c:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000614:	601a      	str	r2, [r3, #0]
      if (HK_ON)
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d100      	bne.n	8000620 <HAL_TIM_OC_DelayElapsedCallback+0x208>
 800061e:	e344      	b.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
      {
        if (HK_COUNTER == HK_CADENCE)
 8000620:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	001a      	movs	r2, r3
 8000626:	4b75      	ldr	r3, [pc, #468]	; (80007fc <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d000      	beq.n	8000630 <HAL_TIM_OC_DelayElapsedCallback+0x218>
 800062e:	e2c2      	b.n	8000bb6 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000630:	2200      	movs	r2, #0
 8000632:	2508      	movs	r5, #8
 8000634:	197b      	adds	r3, r7, r5
 8000636:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000638:	2390      	movs	r3, #144	; 0x90
 800063a:	b299      	uxth	r1, r3
 800063c:	2627      	movs	r6, #39	; 0x27
 800063e:	19bc      	adds	r4, r7, r6
 8000640:	197a      	adds	r2, r7, r5
 8000642:	486f      	ldr	r0, [pc, #444]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000644:	23fa      	movs	r3, #250	; 0xfa
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	f002 ff56 	bl	80034fc <HAL_I2C_Master_Transmit>
 8000650:	0003      	movs	r3, r0
 8000652:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 8000654:	19bb      	adds	r3, r7, r6
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <HAL_TIM_OC_DelayElapsedCallback+0x256>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800065c:	197b      	adds	r3, r7, r5
 800065e:	4a69      	ldr	r2, [pc, #420]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 8000660:	ca03      	ldmia	r2!, {r0, r1}
 8000662:	c303      	stmia	r3!, {r0, r1}
 8000664:	8811      	ldrh	r1, [r2, #0]
 8000666:	8019      	strh	r1, [r3, #0]
 8000668:	7892      	ldrb	r2, [r2, #2]
 800066a:	709a      	strb	r2, [r3, #2]
 800066c:	e02b      	b.n	80006c6 <HAL_TIM_OC_DelayElapsedCallback+0x2ae>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	b299      	uxth	r1, r3
 8000672:	2527      	movs	r5, #39	; 0x27
 8000674:	197c      	adds	r4, r7, r5
 8000676:	2608      	movs	r6, #8
 8000678:	19ba      	adds	r2, r7, r6
 800067a:	4861      	ldr	r0, [pc, #388]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 800067c:	23fa      	movs	r3, #250	; 0xfa
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2302      	movs	r3, #2
 8000684:	f003 f842 	bl	800370c <HAL_I2C_Master_Receive>
 8000688:	0003      	movs	r3, r0
 800068a:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800068c:	197b      	adds	r3, r7, r5
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d008      	beq.n	80006a6 <HAL_TIM_OC_DelayElapsedCallback+0x28e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000694:	19bb      	adds	r3, r7, r6
 8000696:	4a5c      	ldr	r2, [pc, #368]	; (8000808 <HAL_TIM_OC_DelayElapsedCallback+0x3f0>)
 8000698:	ca03      	ldmia	r2!, {r0, r1}
 800069a:	c303      	stmia	r3!, {r0, r1}
 800069c:	8811      	ldrh	r1, [r2, #0]
 800069e:	8019      	strh	r1, [r3, #0]
 80006a0:	7892      	ldrb	r2, [r2, #2]
 80006a2:	709a      	strb	r2, [r3, #2]
 80006a4:	e00f      	b.n	80006c6 <HAL_TIM_OC_DelayElapsedCallback+0x2ae>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80006a6:	2008      	movs	r0, #8
 80006a8:	183b      	adds	r3, r7, r0
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	214e      	movs	r1, #78	; 0x4e
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	5e9b      	ldrsh	r3, [r3, r2]
 80006ba:	183a      	adds	r2, r7, r0
 80006bc:	7852      	ldrb	r2, [r2, #1]
 80006be:	4313      	orrs	r3, r2
 80006c0:	10da      	asrs	r2, r3, #3
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80006c6:	2200      	movs	r2, #0
 80006c8:	2508      	movs	r5, #8
 80006ca:	197b      	adds	r3, r7, r5
 80006cc:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80006ce:	2394      	movs	r3, #148	; 0x94
 80006d0:	b299      	uxth	r1, r3
 80006d2:	2627      	movs	r6, #39	; 0x27
 80006d4:	19bc      	adds	r4, r7, r6
 80006d6:	197a      	adds	r2, r7, r5
 80006d8:	4849      	ldr	r0, [pc, #292]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 80006da:	23fa      	movs	r3, #250	; 0xfa
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	f002 ff0b 	bl	80034fc <HAL_I2C_Master_Transmit>
 80006e6:	0003      	movs	r3, r0
 80006e8:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80006ea:	19bb      	adds	r3, r7, r6
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80006f2:	197b      	adds	r3, r7, r5
 80006f4:	4a43      	ldr	r2, [pc, #268]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 80006f6:	ca03      	ldmia	r2!, {r0, r1}
 80006f8:	c303      	stmia	r3!, {r0, r1}
 80006fa:	8811      	ldrh	r1, [r2, #0]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	7892      	ldrb	r2, [r2, #2]
 8000700:	709a      	strb	r2, [r3, #2]
 8000702:	e02b      	b.n	800075c <HAL_TIM_OC_DelayElapsedCallback+0x344>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000704:	2394      	movs	r3, #148	; 0x94
 8000706:	b299      	uxth	r1, r3
 8000708:	2527      	movs	r5, #39	; 0x27
 800070a:	197c      	adds	r4, r7, r5
 800070c:	2608      	movs	r6, #8
 800070e:	19ba      	adds	r2, r7, r6
 8000710:	483b      	ldr	r0, [pc, #236]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000712:	23fa      	movs	r3, #250	; 0xfa
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2302      	movs	r3, #2
 800071a:	f002 fff7 	bl	800370c <HAL_I2C_Master_Receive>
 800071e:	0003      	movs	r3, r0
 8000720:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000722:	197b      	adds	r3, r7, r5
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d008      	beq.n	800073c <HAL_TIM_OC_DelayElapsedCallback+0x324>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a36      	ldr	r2, [pc, #216]	; (8000808 <HAL_TIM_OC_DelayElapsedCallback+0x3f0>)
 800072e:	ca03      	ldmia	r2!, {r0, r1}
 8000730:	c303      	stmia	r3!, {r0, r1}
 8000732:	8811      	ldrh	r1, [r2, #0]
 8000734:	8019      	strh	r1, [r3, #0]
 8000736:	7892      	ldrb	r2, [r2, #2]
 8000738:	709a      	strb	r2, [r3, #2]
 800073a:	e00f      	b.n	800075c <HAL_TIM_OC_DelayElapsedCallback+0x344>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800073c:	2008      	movs	r0, #8
 800073e:	183b      	adds	r3, r7, r0
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021a      	lsls	r2, r3, #8
 8000744:	214c      	movs	r1, #76	; 0x4c
 8000746:	187b      	adds	r3, r7, r1
 8000748:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	5e9b      	ldrsh	r3, [r3, r2]
 8000750:	183a      	adds	r2, r7, r0
 8000752:	7852      	ldrb	r2, [r2, #1]
 8000754:	4313      	orrs	r3, r2
 8000756:	10da      	asrs	r2, r3, #3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800075c:	2200      	movs	r2, #0
 800075e:	2508      	movs	r5, #8
 8000760:	197b      	adds	r3, r7, r5
 8000762:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000764:	2392      	movs	r3, #146	; 0x92
 8000766:	b299      	uxth	r1, r3
 8000768:	2627      	movs	r6, #39	; 0x27
 800076a:	19bc      	adds	r4, r7, r6
 800076c:	197a      	adds	r2, r7, r5
 800076e:	4824      	ldr	r0, [pc, #144]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000770:	23fa      	movs	r3, #250	; 0xfa
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	f002 fec0 	bl	80034fc <HAL_I2C_Master_Transmit>
 800077c:	0003      	movs	r3, r0
 800077e:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000780:	19bb      	adds	r3, r7, r6
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d041      	beq.n	800080c <HAL_TIM_OC_DelayElapsedCallback+0x3f4>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000788:	197b      	adds	r3, r7, r5
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 800078c:	ca03      	ldmia	r2!, {r0, r1}
 800078e:	c303      	stmia	r3!, {r0, r1}
 8000790:	8811      	ldrh	r1, [r2, #0]
 8000792:	8019      	strh	r1, [r3, #0]
 8000794:	7892      	ldrb	r2, [r2, #2]
 8000796:	709a      	strb	r2, [r3, #2]
 8000798:	e064      	b.n	8000864 <HAL_TIM_OC_DelayElapsedCallback+0x44c>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000244 	.word	0x20000244
 80007a0:	20000021 	.word	0x20000021
 80007a4:	2000038c 	.word	0x2000038c
 80007a8:	20000023 	.word	0x20000023
 80007ac:	48000400 	.word	0x48000400
 80007b0:	08007764 	.word	0x08007764
 80007b4:	20000198 	.word	0x20000198
 80007b8:	40003800 	.word	0x40003800
 80007bc:	fffffbff 	.word	0xfffffbff
 80007c0:	20000344 	.word	0x20000344
 80007c4:	20000394 	.word	0x20000394
 80007c8:	20000390 	.word	0x20000390
 80007cc:	20000388 	.word	0x20000388
 80007d0:	2000033e 	.word	0x2000033e
 80007d4:	40007400 	.word	0x40007400
 80007d8:	20000000 	.word	0x20000000
 80007dc:	2000031c 	.word	0x2000031c
 80007e0:	20000050 	.word	0x20000050
 80007e4:	20000348 	.word	0x20000348
 80007e8:	20000356 	.word	0x20000356
 80007ec:	2000028c 	.word	0x2000028c
 80007f0:	0000ffff 	.word	0x0000ffff
 80007f4:	20000022 	.word	0x20000022
 80007f8:	20000025 	.word	0x20000025
 80007fc:	2000039c 	.word	0x2000039c
 8000800:	200000e8 	.word	0x200000e8
 8000804:	0800772c 	.word	0x0800772c
 8000808:	08007738 	.word	0x08007738
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800080c:	2392      	movs	r3, #146	; 0x92
 800080e:	b299      	uxth	r1, r3
 8000810:	2527      	movs	r5, #39	; 0x27
 8000812:	197c      	adds	r4, r7, r5
 8000814:	2608      	movs	r6, #8
 8000816:	19ba      	adds	r2, r7, r6
 8000818:	4830      	ldr	r0, [pc, #192]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	f002 ff73 	bl	800370c <HAL_I2C_Master_Receive>
 8000826:	0003      	movs	r3, r0
 8000828:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800082a:	197b      	adds	r3, r7, r5
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <HAL_TIM_OC_DelayElapsedCallback+0x42c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000832:	19bb      	adds	r3, r7, r6
 8000834:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000836:	ca03      	ldmia	r2!, {r0, r1}
 8000838:	c303      	stmia	r3!, {r0, r1}
 800083a:	8811      	ldrh	r1, [r2, #0]
 800083c:	8019      	strh	r1, [r3, #0]
 800083e:	7892      	ldrb	r2, [r2, #2]
 8000840:	709a      	strb	r2, [r3, #2]
 8000842:	e00f      	b.n	8000864 <HAL_TIM_OC_DelayElapsedCallback+0x44c>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000844:	2008      	movs	r0, #8
 8000846:	183b      	adds	r3, r7, r0
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	021a      	lsls	r2, r3, #8
 800084c:	214a      	movs	r1, #74	; 0x4a
 800084e:	187b      	adds	r3, r7, r1
 8000850:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	5e9b      	ldrsh	r3, [r3, r2]
 8000858:	183a      	adds	r2, r7, r0
 800085a:	7852      	ldrb	r2, [r2, #1]
 800085c:	4313      	orrs	r3, r2
 800085e:	10da      	asrs	r2, r3, #3
 8000860:	187b      	adds	r3, r7, r1
 8000862:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000864:	2200      	movs	r2, #0
 8000866:	2508      	movs	r5, #8
 8000868:	197b      	adds	r3, r7, r5
 800086a:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800086c:	2396      	movs	r3, #150	; 0x96
 800086e:	b299      	uxth	r1, r3
 8000870:	2627      	movs	r6, #39	; 0x27
 8000872:	19bc      	adds	r4, r7, r6
 8000874:	197a      	adds	r2, r7, r5
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 8000878:	23fa      	movs	r3, #250	; 0xfa
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	f002 fe3c 	bl	80034fc <HAL_I2C_Master_Transmit>
 8000884:	0003      	movs	r3, r0
 8000886:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000888:	19bb      	adds	r3, r7, r6
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d008      	beq.n	80008a2 <HAL_TIM_OC_DelayElapsedCallback+0x48a>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000890:	197b      	adds	r3, r7, r5
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x4cc>)
 8000894:	ca03      	ldmia	r2!, {r0, r1}
 8000896:	c303      	stmia	r3!, {r0, r1}
 8000898:	8811      	ldrh	r1, [r2, #0]
 800089a:	8019      	strh	r1, [r3, #0]
 800089c:	7892      	ldrb	r2, [r2, #2]
 800089e:	709a      	strb	r2, [r3, #2]
 80008a0:	e032      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80008a2:	2396      	movs	r3, #150	; 0x96
 80008a4:	b299      	uxth	r1, r3
 80008a6:	2527      	movs	r5, #39	; 0x27
 80008a8:	197c      	adds	r4, r7, r5
 80008aa:	2608      	movs	r6, #8
 80008ac:	19ba      	adds	r2, r7, r6
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 80008b0:	23fa      	movs	r3, #250	; 0xfa
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	f002 ff28 	bl	800370c <HAL_I2C_Master_Receive>
 80008bc:	0003      	movs	r3, r0
 80008be:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80008c0:	197b      	adds	r3, r7, r5
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00f      	beq.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x4d0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008c8:	19bb      	adds	r3, r7, r6
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 80008cc:	ca03      	ldmia	r2!, {r0, r1}
 80008ce:	c303      	stmia	r3!, {r0, r1}
 80008d0:	8811      	ldrh	r1, [r2, #0]
 80008d2:	8019      	strh	r1, [r3, #0]
 80008d4:	7892      	ldrb	r2, [r2, #2]
 80008d6:	709a      	strb	r2, [r3, #2]
 80008d8:	e016      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	08007738 	.word	0x08007738
 80008e4:	0800772c 	.word	0x0800772c
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80008e8:	2008      	movs	r0, #8
 80008ea:	183b      	adds	r3, r7, r0
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	021a      	lsls	r2, r3, #8
 80008f0:	2148      	movs	r1, #72	; 0x48
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	5e9b      	ldrsh	r3, [r3, r2]
 80008fc:	183a      	adds	r2, r7, r0
 80008fe:	7852      	ldrb	r2, [r2, #1]
 8000900:	4313      	orrs	r3, r2
 8000902:	10da      	asrs	r2, r3, #3
 8000904:	187b      	adds	r3, r7, r1
 8000906:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000908:	2311      	movs	r3, #17
 800090a:	001a      	movs	r2, r3
 800090c:	49ad      	ldr	r1, [pc, #692]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800090e:	4bae      	ldr	r3, [pc, #696]	; (8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fd75 	bl	8002400 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000916:	2124      	movs	r1, #36	; 0x24
 8000918:	187b      	adds	r3, r7, r1
 800091a:	4aaa      	ldr	r2, [pc, #680]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800091c:	8852      	ldrh	r2, [r2, #2]
 800091e:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 8000920:	2022      	movs	r0, #34	; 0x22
 8000922:	183b      	adds	r3, r7, r0
 8000924:	4aa7      	ldr	r2, [pc, #668]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000926:	8892      	ldrh	r2, [r2, #4]
 8000928:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 800092a:	2420      	movs	r4, #32
 800092c:	193b      	adds	r3, r7, r4
 800092e:	4aa5      	ldr	r2, [pc, #660]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000930:	88d2      	ldrh	r2, [r2, #6]
 8000932:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000934:	251e      	movs	r5, #30
 8000936:	197b      	adds	r3, r7, r5
 8000938:	4aa2      	ldr	r2, [pc, #648]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800093a:	8912      	ldrh	r2, [r2, #8]
 800093c:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800093e:	261c      	movs	r6, #28
 8000940:	19bb      	adds	r3, r7, r6
 8000942:	4aa0      	ldr	r2, [pc, #640]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000944:	8952      	ldrh	r2, [r2, #10]
 8000946:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000948:	231a      	movs	r3, #26
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	4a9d      	ldr	r2, [pc, #628]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800094e:	8a52      	ldrh	r2, [r2, #18]
 8000950:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 8000952:	2218      	movs	r2, #24
 8000954:	18bb      	adds	r3, r7, r2
 8000956:	4a9b      	ldr	r2, [pc, #620]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000958:	8a92      	ldrh	r2, [r2, #20]
 800095a:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 800095c:	2316      	movs	r3, #22
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	4a98      	ldr	r2, [pc, #608]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000962:	8ad2      	ldrh	r2, [r2, #22]
 8000964:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000966:	2214      	movs	r2, #20
 8000968:	18bb      	adds	r3, r7, r2
 800096a:	4a96      	ldr	r2, [pc, #600]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800096c:	8b12      	ldrh	r2, [r2, #24]
 800096e:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 8000970:	2312      	movs	r3, #18
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	4a93      	ldr	r2, [pc, #588]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000976:	8b52      	ldrh	r2, [r2, #26]
 8000978:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 800097a:	2210      	movs	r2, #16
 800097c:	18bb      	adds	r3, r7, r2
 800097e:	4a91      	ldr	r2, [pc, #580]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000980:	8b92      	ldrh	r2, [r2, #28]
 8000982:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000984:	230e      	movs	r3, #14
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	4a8e      	ldr	r2, [pc, #568]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 800098a:	8bd2      	ldrh	r2, [r2, #30]
 800098c:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800098e:	220c      	movs	r2, #12
 8000990:	18bb      	adds	r3, r7, r2
 8000992:	4a8c      	ldr	r2, [pc, #560]	; (8000bc4 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000994:	8c12      	ldrh	r2, [r2, #32]
 8000996:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000998:	22cc      	movs	r2, #204	; 0xcc
 800099a:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 800099c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800099e:	22cc      	movs	r2, #204	; 0xcc
 80009a0:	4b8a      	ldr	r3, [pc, #552]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009a2:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 80009a4:	4b8a      	ldr	r3, [pc, #552]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b87      	ldr	r3, [pc, #540]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009b0:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 80009b2:	4b87      	ldr	r3, [pc, #540]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b84      	ldr	r3, [pc, #528]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009ba:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80009bc:	230e      	movs	r3, #14
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009ca:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 80009cc:	230e      	movs	r3, #14
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009d6:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 80009d8:	220c      	movs	r2, #12
 80009da:	18bb      	adds	r3, r7, r2
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009e6:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 80009e8:	220c      	movs	r2, #12
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 80009f2:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 80009f4:	234e      	movs	r3, #78	; 0x4e
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	5e9b      	ldrsh	r3, [r3, r2]
 80009fc:	121b      	asrs	r3, r3, #8
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a02:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000a04:	234e      	movs	r3, #78	; 0x4e
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a0e:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000a10:	234c      	movs	r3, #76	; 0x4c
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	5e9b      	ldrsh	r3, [r3, r2]
 8000a18:	121b      	asrs	r3, r3, #8
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a1e:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000a20:	234c      	movs	r3, #76	; 0x4c
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a2a:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000a2c:	234a      	movs	r3, #74	; 0x4a
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	5e9b      	ldrsh	r3, [r3, r2]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a3a:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000a3c:	234a      	movs	r3, #74	; 0x4a
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a46:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000a48:	2348      	movs	r3, #72	; 0x48
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	5e9b      	ldrsh	r3, [r3, r2]
 8000a50:	121b      	asrs	r3, r3, #8
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a56:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000a58:	2348      	movs	r3, #72	; 0x48
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a62:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a70:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a7a:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000a7c:	183b      	adds	r3, r7, r0
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a88:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000a8a:	183b      	adds	r3, r7, r0
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000a92:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000a94:	211a      	movs	r1, #26
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000aa2:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000aac:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000aba:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000ac4:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000ac6:	2016      	movs	r0, #22
 8000ac8:	183b      	adds	r3, r7, r0
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000ad4:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000ade:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000ae0:	2014      	movs	r0, #20
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000aee:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000af0:	183b      	adds	r3, r7, r0
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000af8:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000afa:	2118      	movs	r1, #24
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b08:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b12:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000b14:	2110      	movs	r1, #16
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b22:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b2c:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000b2e:	2012      	movs	r0, #18
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000b40:	183b      	adds	r3, r7, r0
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b48:	2221      	movs	r2, #33	; 0x21
 8000b4a:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000b4c:	197b      	adds	r3, r7, r5
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2d9      	uxtb	r1, r3
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b58:	2222      	movs	r2, #34	; 0x22
 8000b5a:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000b5c:	197b      	adds	r3, r7, r5
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2d9      	uxtb	r1, r3
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b64:	2223      	movs	r2, #35	; 0x23
 8000b66:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000b68:	19bb      	adds	r3, r7, r6
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2d9      	uxtb	r1, r3
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b74:	2224      	movs	r2, #36	; 0x24
 8000b76:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000b78:	19bb      	adds	r3, r7, r6
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b80:	2225      	movs	r2, #37	; 0x25
 8000b82:	5499      	strb	r1, [r3, r2]


          HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2226      	movs	r2, #38	; 0x26
 8000b8c:	f005 fb2c 	bl	80061e8 <HAL_UART_Transmit>


          hk_seq++;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000b9a:	801a      	strh	r2, [r3, #0]
          HK_COUNTER = 0;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
          if (hk_seq == 65535) {
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d000      	beq.n	8000bae <HAL_TIM_OC_DelayElapsedCallback+0x796>
 8000bac:	e07d      	b.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
        	  hk_seq = 0;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000bb4:	e079      	b.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
          HK_COUNTER++;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	e073      	b.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	2000031c 	.word	0x2000031c
 8000bc8:	20000050 	.word	0x20000050
 8000bcc:	20000360 	.word	0x20000360
 8000bd0:	20000386 	.word	0x20000386
 8000bd4:	2000028c 	.word	0x2000028c
 8000bd8:	2000039c 	.word	0x2000039c
 8000bdc:	0000ffff 	.word	0x0000ffff
  else if (htim == &htim1)
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_TIM_OC_DelayElapsedCallback+0x89c>)
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d160      	bne.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
      if (PMT_ON)
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x8a0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d05c      	beq.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
    	if (PMT_COUNTER == PMT_CADENCE) {
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <HAL_TIM_OC_DelayElapsedCallback+0x8a4>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d150      	bne.n	8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x888>
    		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	005a      	lsls	r2, r3, #1
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fba6 	bl	800335c <HAL_GPIO_ReadPin>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d1f5      	bne.n	8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x7e8>
    		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000c14:	492b      	ldr	r1, [pc, #172]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c16:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x8b0>)
 8000c18:	2301      	movs	r3, #1
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f003 ff44 	bl	8004aa8 <HAL_SPI_Transmit>
    		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x8b4>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x8b4>)
 8000c26:	492a      	ldr	r1, [pc, #168]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0x8b8>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
    		while (!(SPI1->SR));
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x8b4>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0fb      	beq.n	8000c2e <HAL_TIM_OC_DelayElapsedCallback+0x816>
    		pmt_raw = SPI1->DR;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x8b4>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x8bc>)
 8000c3e:	601a      	str	r2, [r3, #0]
    		int r = pmt_raw;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x8bc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	647b      	str	r3, [r7, #68]	; 0x44
    		pmt_buf[0] = pmt_sync;
 8000c46:	22bb      	movs	r2, #187	; 0xbb
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c4a:	701a      	strb	r2, [r3, #0]
    		pmt_buf[1] = pmt_sync;
 8000c4c:	22bb      	movs	r2, #187	; 0xbb
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c50:	705a      	strb	r2, [r3, #1]
    		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c4>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c5e:	709a      	strb	r2, [r3, #2]
    		pmt_buf[3] = (pmt_seq & 0xFF);
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c68:	70da      	strb	r2, [r3, #3]
    		pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x8bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	121b      	asrs	r3, r3, #8
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c74:	711a      	strb	r2, [r3, #4]
    		pmt_buf[5] = (pmt_raw & 0xFF);
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0x8bc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c7e:	715a      	strb	r2, [r3, #5]
        	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c80:	4915      	ldr	r1, [pc, #84]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0x8c0>)
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x8c8>)
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2206      	movs	r2, #6
 8000c88:	f005 faae 	bl	80061e8 <HAL_UART_Transmit>
    		pmt_seq++;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c4>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c4>)
 8000c96:	801a      	strh	r2, [r3, #0]
    		PMT_COUNTER = 0;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	e004      	b.n	8000caa <HAL_TIM_OC_DelayElapsedCallback+0x892>
    		PMT_COUNTER++;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000ca8:	601a      	str	r2, [r3, #0]
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b015      	add	sp, #84	; 0x54
 8000cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200001fc 	.word	0x200001fc
 8000cb8:	20000020 	.word	0x20000020
 8000cbc:	20000024 	.word	0x20000024
 8000cc0:	20000398 	.word	0x20000398
 8000cc4:	08007764 	.word	0x08007764
 8000cc8:	20000134 	.word	0x20000134
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	fffffbff 	.word	0xfffffbff
 8000cd4:	20000340 	.word	0x20000340
 8000cd8:	20000358 	.word	0x20000358
 8000cdc:	2000035e 	.word	0x2000035e
 8000ce0:	2000028c 	.word	0x2000028c

08000ce4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 8000cec:	4983      	ldr	r1, [pc, #524]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000cee:	4b84      	ldr	r3, [pc, #528]	; (8000f00 <HAL_UART_RxCpltCallback+0x21c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f005 fb21 	bl	800633a <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	4a7f      	ldr	r2, [pc, #508]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	701a      	strb	r2, [r3, #0]
  unsigned char second = rx_buf[1];
 8000d02:	230e      	movs	r3, #14
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	4a7d      	ldr	r2, [pc, #500]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000d08:	7852      	ldrb	r2, [r2, #1]
 8000d0a:	701a      	strb	r2, [r3, #0]
  switch (key)
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b21      	cmp	r3, #33	; 0x21
 8000d12:	d900      	bls.n	8000d16 <HAL_UART_RxCpltCallback+0x32>
 8000d14:	e0ee      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
 8000d16:	009a      	lsls	r2, r3, #2
 8000d18:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <HAL_UART_RxCpltCallback+0x220>)
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d20:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <HAL_UART_RxCpltCallback+0x224>)
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	2201      	movs	r2, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 fb35 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000d2c:	e0e2      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <HAL_UART_RxCpltCallback+0x224>)
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 fb2e 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000d3a:	e0db      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000d3c:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <HAL_UART_RxCpltCallback+0x224>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	2201      	movs	r2, #1
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fb27 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000d48:	e0d4      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <HAL_UART_RxCpltCallback+0x224>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	2200      	movs	r2, #0
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fb20 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000d56:	e0cd      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x1B:
  {
    if (step < 7)
 8000d58:	4b6c      	ldr	r3, [pc, #432]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	d900      	bls.n	8000d62 <HAL_UART_RxCpltCallback+0x7e>
 8000d60:	e0c5      	b.n	8000eee <HAL_UART_RxCpltCallback+0x20a>
    {
      step++;
 8000d62:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d6c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d6e:	e0be      	b.n	8000eee <HAL_UART_RxCpltCallback+0x20a>
  }
  case 0x1C:
  {
    if (step > 0)
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d100      	bne.n	8000d7a <HAL_UART_RxCpltCallback+0x96>
 8000d78:	e0bb      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x20e>
    {
      step--;
 8000d7a:	4b64      	ldr	r3, [pc, #400]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <HAL_UART_RxCpltCallback+0x228>)
 8000d84:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d86:	e0b4      	b.n	8000ef2 <HAL_UART_RxCpltCallback+0x20e>
  }
  case 0x1E: { // ERPA Cadence Multiplier
	  ERPA_SAMPLE_CADENCE = rx_buf[1];
 8000d88:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000d8a:	785a      	ldrb	r2, [r3, #1]
 8000d8c:	4b60      	ldr	r3, [pc, #384]	; (8000f10 <HAL_UART_RxCpltCallback+0x22c>)
 8000d8e:	701a      	strb	r2, [r3, #0]
	  ERPA_SAMPLE_COUNTER = 0;
 8000d90:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <HAL_UART_RxCpltCallback+0x230>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
	  ERPA_PACKET_COUNTER = 0;
 8000d96:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <HAL_UART_RxCpltCallback+0x234>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
	  break;
 8000d9c:	e0aa      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x1F: { // PMT Cadence Multiplier
	  PMT_CADENCE = rx_buf[1];
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000da0:	785a      	ldrb	r2, [r3, #1]
 8000da2:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <HAL_UART_RxCpltCallback+0x238>)
 8000da4:	701a      	strb	r2, [r3, #0]
	  PMT_COUNTER = 0;
 8000da6:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <HAL_UART_RxCpltCallback+0x23c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
	  break;
 8000dac:	e0a2      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x20: { // HK Cadence Multiplier
	  HK_CADENCE = rx_buf[1];
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <HAL_UART_RxCpltCallback+0x218>)
 8000db0:	785a      	ldrb	r2, [r3, #1]
 8000db2:	4b5c      	ldr	r3, [pc, #368]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000db4:	701a      	strb	r2, [r3, #0]
	  HK_COUNTER = 0;
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <HAL_UART_RxCpltCallback+0x244>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
	  break;
 8000dbc:	e09a      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x21:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000dbe:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <HAL_UART_RxCpltCallback+0x248>)
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fae6 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000dca:	e093      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x13:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000dcc:	4b57      	ldr	r3, [pc, #348]	; (8000f2c <HAL_UART_RxCpltCallback+0x248>)
 8000dce:	2120      	movs	r1, #32
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 fadf 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000dd8:	e08c      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000dda:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <HAL_UART_RxCpltCallback+0x248>)
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	2201      	movs	r2, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fad8 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000de6:	e085      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000de8:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <HAL_UART_RxCpltCallback+0x248>)
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 fad1 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000df4:	e07e      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000df6:	484e      	ldr	r0, [pc, #312]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f002 fac9 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e04:	e076      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e06:	484a      	ldr	r0, [pc, #296]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0019      	movs	r1, r3
 8000e10:	f002 fac1 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e14:	e06e      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e16:	4846      	ldr	r0, [pc, #280]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	019b      	lsls	r3, r3, #6
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	0019      	movs	r1, r3
 8000e20:	f002 fab9 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e24:	e066      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e26:	4842      	ldr	r0, [pc, #264]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f002 fab1 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e34:	e05e      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 faaa 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e42:	e057      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 faa3 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e50:	e050      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e52:	4837      	ldr	r0, [pc, #220]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	f002 fa9b 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e60:	e048      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e62:	4833      	ldr	r0, [pc, #204]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	f002 fa93 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e70:	e040      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000e72:	482f      	ldr	r0, [pc, #188]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	2201      	movs	r2, #1
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	f002 fa8b 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e80:	e038      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000e82:	482b      	ldr	r0, [pc, #172]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f002 fa83 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e90:	e030      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	2201      	movs	r2, #1
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 fa7c 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000e9e:	e029      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f002 fa75 	bl	8003396 <HAL_GPIO_WritePin>
    break;
 8000eac:	e022      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000eae:	f001 f959 	bl	8002164 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f002 ffc1 	bl	8003e3c <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000eba:	f7ff fa9b 	bl	80003f4 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    break;
 8000ec4:	e016      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
    break;
 8000ecc:	e012      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_UART_RxCpltCallback+0x254>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
    break;
 8000ed4:	e00e      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_RxCpltCallback+0x254>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
    break;
 8000edc:	e00a      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_RxCpltCallback+0x258>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
    break;
 8000ee4:	e006      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_RxCpltCallback+0x258>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    break;
 8000eec:	e002      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
    break;
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	e000      	b.n	8000ef4 <HAL_UART_RxCpltCallback+0x210>
    break;
 8000ef2:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b004      	add	sp, #16
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000310 	.word	0x20000310
 8000f00:	2000028c 	.word	0x2000028c
 8000f04:	08007768 	.word	0x08007768
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	2000033e 	.word	0x2000033e
 8000f10:	20000023 	.word	0x20000023
 8000f14:	2000038c 	.word	0x2000038c
 8000f18:	20000388 	.word	0x20000388
 8000f1c:	20000024 	.word	0x20000024
 8000f20:	20000398 	.word	0x20000398
 8000f24:	20000025 	.word	0x20000025
 8000f28:	2000039c 	.word	0x2000039c
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	48000800 	.word	0x48000800
 8000f34:	20000020 	.word	0x20000020
 8000f38:	20000021 	.word	0x20000021
 8000f3c:	20000022 	.word	0x20000022

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f001 f8aa 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f86c 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 fc84 	bl	8001858 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f000 fc64 	bl	800181c <MX_DMA_Init>
  MX_SPI2_Init();
 8000f54:	f000 faae 	bl	80014b4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f58:	f000 faec 	bl	8001534 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f5c:	f000 fba0 	bl	80016a0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f60:	f000 fa68 	bl	8001434 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 fc1a 	bl	800179c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000f68:	f000 f9f2 	bl	8001350 <MX_DAC1_Init>
  MX_ADC_Init();
 8000f6c:	f000 f8c4 	bl	80010f8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000f70:	f000 fa20 	bl	80013b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <main+0xcc>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 fe30 	bl	8002bde <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <main+0xd0>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f004 f8ae 	bl	80050e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <main+0xd4>)
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f004 f8a9 	bl	80050e4 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <main+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69da      	ldr	r2, [r3, #28]
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d0f5      	beq.n	8000f94 <main+0x54>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <main+0xd8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69da      	ldr	r2, [r3, #28]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	03db      	lsls	r3, r3, #15
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	03db      	lsls	r3, r3, #15
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d1f5      	bne.n	8000faa <main+0x6a>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <main+0xdc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <main+0xdc>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <main+0xdc>)
 8000fcc:	225b      	movs	r2, #91	; 0x5b
 8000fce:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <main+0xdc>)
 8000fd2:	4811      	ldr	r0, [pc, #68]	; (8001018 <main+0xd8>)
 8000fd4:	6819      	ldr	r1, [r3, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	f006 fab4 	bl	8007544 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <main+0xa4>
      Error_Handler();
 8000fe0:	f000 fcd4 	bl	800198c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <main+0xd8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	03c9      	lsls	r1, r1, #15
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <main+0xd8>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f006 fb09 	bl	8007610 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <main+0xe0>)
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <main+0xd8>)
 8001002:	2202      	movs	r2, #2
 8001004:	0018      	movs	r0, r3
 8001006:	f005 f998 	bl	800633a <HAL_UART_Receive_IT>
 800100a:	e7f8      	b.n	8000ffe <main+0xbe>
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200001fc 	.word	0x200001fc
 8001014:	20000244 	.word	0x20000244
 8001018:	2000028c 	.word	0x2000028c
 800101c:	20000314 	.word	0x20000314
 8001020:	20000310 	.word	0x20000310

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b097      	sub	sp, #92	; 0x5c
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	2428      	movs	r4, #40	; 0x28
 800102c:	193b      	adds	r3, r7, r4
 800102e:	0018      	movs	r0, r3
 8001030:	2330      	movs	r3, #48	; 0x30
 8001032:	001a      	movs	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	f006 fb65 	bl	8007704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103a:	2318      	movs	r3, #24
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	0018      	movs	r0, r3
 8001040:	2310      	movs	r3, #16
 8001042:	001a      	movs	r2, r3
 8001044:	2100      	movs	r1, #0
 8001046:	f006 fb5d 	bl	8007704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	0018      	movs	r0, r3
 800104e:	2314      	movs	r3, #20
 8001050:	001a      	movs	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	f006 fb56 	bl	8007704 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001058:	0021      	movs	r1, r4
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2212      	movs	r2, #18
 800105e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2201      	movs	r2, #1
 8001064:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2210      	movs	r2, #16
 8001070:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2210      	movs	r2, #16
 8001076:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	22a0      	movs	r2, #160	; 0xa0
 8001088:	0392      	lsls	r2, r2, #14
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	187b      	adds	r3, r7, r1
 8001094:	0018      	movs	r0, r3
 8001096:	f002 ff05 	bl	8003ea4 <HAL_RCC_OscConfig>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800109e:	f000 fc75 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	2118      	movs	r1, #24
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2207      	movs	r2, #7
 80010a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2101      	movs	r1, #1
 80010c0:	0018      	movs	r0, r3
 80010c2:	f003 fa09 	bl	80044d8 <HAL_RCC_ClockConfig>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ca:	f000 fc5f 	bl	800198c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2221      	movs	r2, #33	; 0x21
 80010d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2203      	movs	r2, #3
 80010d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	0018      	movs	r0, r3
 80010e4:	f003 fb4a 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010ec:	f000 fc4e 	bl	800198c <Error_Handler>
  }
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b017      	add	sp, #92	; 0x5c
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	0018      	movs	r0, r3
 8001102:	230c      	movs	r3, #12
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f006 fafc 	bl	8007704 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800110c:	4b8e      	ldr	r3, [pc, #568]	; (8001348 <MX_ADC_Init+0x250>)
 800110e:	4a8f      	ldr	r2, [pc, #572]	; (800134c <MX_ADC_Init+0x254>)
 8001110:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001112:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <MX_ADC_Init+0x250>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <MX_ADC_Init+0x250>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <MX_ADC_Init+0x250>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <MX_ADC_Init+0x250>)
 8001126:	2201      	movs	r2, #1
 8001128:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b87      	ldr	r3, [pc, #540]	; (8001348 <MX_ADC_Init+0x250>)
 800112c:	2204      	movs	r2, #4
 800112e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001130:	4b85      	ldr	r3, [pc, #532]	; (8001348 <MX_ADC_Init+0x250>)
 8001132:	2200      	movs	r2, #0
 8001134:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001136:	4b84      	ldr	r3, [pc, #528]	; (8001348 <MX_ADC_Init+0x250>)
 8001138:	2200      	movs	r2, #0
 800113a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800113c:	4b82      	ldr	r3, [pc, #520]	; (8001348 <MX_ADC_Init+0x250>)
 800113e:	2200      	movs	r2, #0
 8001140:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b81      	ldr	r3, [pc, #516]	; (8001348 <MX_ADC_Init+0x250>)
 8001144:	2200      	movs	r2, #0
 8001146:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <MX_ADC_Init+0x250>)
 800114a:	22c2      	movs	r2, #194	; 0xc2
 800114c:	32ff      	adds	r2, #255	; 0xff
 800114e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001150:	4b7d      	ldr	r3, [pc, #500]	; (8001348 <MX_ADC_Init+0x250>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <MX_ADC_Init+0x250>)
 8001158:	2224      	movs	r2, #36	; 0x24
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <MX_ADC_Init+0x250>)
 8001160:	2201      	movs	r2, #1
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001164:	4b78      	ldr	r3, [pc, #480]	; (8001348 <MX_ADC_Init+0x250>)
 8001166:	0018      	movs	r0, r3
 8001168:	f001 f80a 	bl	8002180 <HAL_ADC_Init>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001170:	f000 fc0c 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0152      	lsls	r2, r2, #5
 8001180:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	0552      	lsls	r2, r2, #21
 8001188:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <MX_ADC_Init+0x250>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f001 f9cf 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800119a:	f000 fbf7 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011a4:	1d3a      	adds	r2, r7, #4
 80011a6:	4b68      	ldr	r3, [pc, #416]	; (8001348 <MX_ADC_Init+0x250>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f001 f9c2 	bl	8002534 <HAL_ADC_ConfigChannel>
 80011b0:	1e03      	subs	r3, r0, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80011b4:	f000 fbea 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2202      	movs	r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	4b61      	ldr	r3, [pc, #388]	; (8001348 <MX_ADC_Init+0x250>)
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 f9b5 	bl	8002534 <HAL_ADC_ConfigChannel>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80011ce:	f000 fbdd 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2203      	movs	r2, #3
 80011d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011d8:	1d3a      	adds	r2, r7, #4
 80011da:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <MX_ADC_Init+0x250>)
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 f9a8 	bl	8002534 <HAL_ADC_ConfigChannel>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80011e8:	f000 fbd0 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2205      	movs	r2, #5
 80011f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011f2:	1d3a      	adds	r2, r7, #4
 80011f4:	4b54      	ldr	r3, [pc, #336]	; (8001348 <MX_ADC_Init+0x250>)
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 f99b 	bl	8002534 <HAL_ADC_ConfigChannel>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001202:	f000 fbc3 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2206      	movs	r2, #6
 800120a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800120c:	1d3a      	adds	r2, r7, #4
 800120e:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <MX_ADC_Init+0x250>)
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f001 f98e 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 800121c:	f000 fbb6 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2207      	movs	r2, #7
 8001224:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001226:	1d3a      	adds	r2, r7, #4
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <MX_ADC_Init+0x250>)
 800122a:	0011      	movs	r1, r2
 800122c:	0018      	movs	r0, r3
 800122e:	f001 f981 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001236:	f000 fba9 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2208      	movs	r2, #8
 800123e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001240:	1d3a      	adds	r2, r7, #4
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <MX_ADC_Init+0x250>)
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f001 f974 	bl	8002534 <HAL_ADC_ConfigChannel>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8001250:	f000 fb9c 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2209      	movs	r2, #9
 8001258:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <MX_ADC_Init+0x250>)
 800125e:	0011      	movs	r1, r2
 8001260:	0018      	movs	r0, r3
 8001262:	f001 f967 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d001      	beq.n	800126e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800126a:	f000 fb8f 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	220a      	movs	r2, #10
 8001272:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001274:	1d3a      	adds	r2, r7, #4
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MX_ADC_Init+0x250>)
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f95a 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001284:	f000 fb82 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	220b      	movs	r2, #11
 800128c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128e:	1d3a      	adds	r2, r7, #4
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_ADC_Init+0x250>)
 8001292:	0011      	movs	r1, r2
 8001294:	0018      	movs	r0, r3
 8001296:	f001 f94d 	bl	8002534 <HAL_ADC_ConfigChannel>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800129e:	f000 fb75 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	220c      	movs	r2, #12
 80012a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012a8:	1d3a      	adds	r2, r7, #4
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_ADC_Init+0x250>)
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 f940 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80012b8:	f000 fb68 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	220d      	movs	r2, #13
 80012c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012c2:	1d3a      	adds	r2, r7, #4
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_ADC_Init+0x250>)
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 f933 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80012d2:	f000 fb5b 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	220e      	movs	r2, #14
 80012da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012dc:	1d3a      	adds	r2, r7, #4
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADC_Init+0x250>)
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 f926 	bl	8002534 <HAL_ADC_ConfigChannel>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80012ec:	f000 fb4e 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	220f      	movs	r2, #15
 80012f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012f6:	1d3a      	adds	r2, r7, #4
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_ADC_Init+0x250>)
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 f919 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d001      	beq.n	800130a <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8001306:	f000 fb41 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2210      	movs	r2, #16
 800130e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_ADC_Init+0x250>)
 8001314:	0011      	movs	r1, r2
 8001316:	0018      	movs	r0, r3
 8001318:	f001 f90c 	bl	8002534 <HAL_ADC_ConfigChannel>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8001320:	f000 fb34 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2211      	movs	r2, #17
 8001328:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800132a:	1d3a      	adds	r2, r7, #4
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_ADC_Init+0x250>)
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f001 f8ff 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d001      	beq.n	800133e <MX_ADC_Init+0x246>
  {
    Error_Handler();
 800133a:	f000 fb27 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	20000050 	.word	0x20000050
 800134c:	40012400 	.word	0x40012400

08001350 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_DAC1_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800135c:	003b      	movs	r3, r7
 800135e:	0018      	movs	r0, r3
 8001360:	2308      	movs	r3, #8
 8001362:	001a      	movs	r2, r3
 8001364:	2100      	movs	r1, #0
 8001366:	f006 f9cd 	bl	8007704 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_DAC1_Init+0x5c>)
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <MX_DAC1_Init+0x60>)
 800136e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_DAC1_Init+0x5c>)
 8001372:	0018      	movs	r0, r3
 8001374:	f001 fbd2 	bl	8002b1c <HAL_DAC_Init>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 800137c:	f000 fb06 	bl	800198c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001380:	003b      	movs	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001386:	003b      	movs	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800138c:	0039      	movs	r1, r7
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MX_DAC1_Init+0x5c>)
 8001390:	2200      	movs	r2, #0
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fbe5 	bl	8002b62 <HAL_DAC_ConfigChannel>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 800139c:	f000 faf6 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000033e 	.word	0x2000033e
 80013ac:	200000d4 	.word	0x200000d4
 80013b0:	40007400 	.word	0x40007400

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_I2C1_Init+0x74>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <MX_I2C1_Init+0x78>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_I2C1_Init+0x74>)
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_I2C1_Init+0x7c>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_I2C1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_I2C1_Init+0x74>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_I2C1_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_I2C1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_I2C1_Init+0x74>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f001 ffed 	bl	80033d0 <HAL_I2C_Init>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013fa:	f000 fac7 	bl	800198c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_I2C1_Init+0x74>)
 8001400:	2100      	movs	r1, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f002 fc82 	bl	8003d0c <HAL_I2CEx_ConfigAnalogFilter>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800140c:	f000 fabe 	bl	800198c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MX_I2C1_Init+0x74>)
 8001412:	2100      	movs	r1, #0
 8001414:	0018      	movs	r0, r3
 8001416:	f002 fcc5 	bl	8003da4 <HAL_I2CEx_ConfigDigitalFilter>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800141e:	f000 fab5 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000e8 	.word	0x200000e8
 800142c:	40005400 	.word	0x40005400
 8001430:	2000090e 	.word	0x2000090e

08001434 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_SPI1_Init+0x78>)
 800143a:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <MX_SPI1_Init+0x7c>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_SPI1_Init+0x78>)
 8001440:	2282      	movs	r2, #130	; 0x82
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_SPI1_Init+0x78>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_SPI1_Init+0x78>)
 8001450:	22f0      	movs	r2, #240	; 0xf0
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_SPI1_Init+0x78>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_SPI1_Init+0x78>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SPI1_Init+0x78>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_SPI1_Init+0x78>)
 800146c:	2230      	movs	r2, #48	; 0x30
 800146e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI1_Init+0x78>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_SPI1_Init+0x78>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_SPI1_Init+0x78>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SPI1_Init+0x78>)
 8001484:	2207      	movs	r2, #7
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_SPI1_Init+0x78>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_SPI1_Init+0x78>)
 8001490:	2208      	movs	r2, #8
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <MX_SPI1_Init+0x78>)
 8001496:	0018      	movs	r0, r3
 8001498:	f003 fa4e 	bl	8004938 <HAL_SPI_Init>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 fa74 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	20000134 	.word	0x20000134
 80014b0:	40013000 	.word	0x40013000

080014b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_SPI2_Init+0x78>)
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <MX_SPI2_Init+0x7c>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_SPI2_Init+0x78>)
 80014c0:	2282      	movs	r2, #130	; 0x82
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_SPI2_Init+0x78>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	00d2      	lsls	r2, r2, #3
 80014cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_SPI2_Init+0x78>)
 80014d0:	22f0      	movs	r2, #240	; 0xf0
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_SPI2_Init+0x78>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_SPI2_Init+0x78>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_SPI2_Init+0x78>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_SPI2_Init+0x78>)
 80014ec:	2230      	movs	r2, #48	; 0x30
 80014ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI2_Init+0x78>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_SPI2_Init+0x78>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_SPI2_Init+0x78>)
 80014fe:	2200      	movs	r2, #0
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_SPI2_Init+0x78>)
 8001504:	2207      	movs	r2, #7
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_SPI2_Init+0x78>)
 800150a:	2200      	movs	r2, #0
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_SPI2_Init+0x78>)
 8001510:	2208      	movs	r2, #8
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <MX_SPI2_Init+0x78>)
 8001516:	0018      	movs	r0, r3
 8001518:	f003 fa0e 	bl	8004938 <HAL_SPI_Init>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 fa34 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	20000198 	.word	0x20000198
 8001530:	40003800 	.word	0x40003800

08001534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	2348      	movs	r3, #72	; 0x48
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	0018      	movs	r0, r3
 8001540:	2310      	movs	r3, #16
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f006 f8dd 	bl	8007704 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	0018      	movs	r0, r3
 8001550:	2308      	movs	r3, #8
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f006 f8d5 	bl	8007704 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	2324      	movs	r3, #36	; 0x24
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	0018      	movs	r0, r3
 8001560:	231c      	movs	r3, #28
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f006 f8cd 	bl	8007704 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	0018      	movs	r0, r3
 800156e:	2320      	movs	r3, #32
 8001570:	001a      	movs	r2, r3
 8001572:	2100      	movs	r1, #0
 8001574:	f006 f8c6 	bl	8007704 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001578:	4b46      	ldr	r3, [pc, #280]	; (8001694 <MX_TIM1_Init+0x160>)
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <MX_TIM1_Init+0x164>)
 800157c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800157e:	4b45      	ldr	r3, [pc, #276]	; (8001694 <MX_TIM1_Init+0x160>)
 8001580:	2263      	movs	r2, #99	; 0x63
 8001582:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <MX_TIM1_Init+0x160>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 600 - 1;
 800158a:	4b42      	ldr	r3, [pc, #264]	; (8001694 <MX_TIM1_Init+0x160>)
 800158c:	4a43      	ldr	r2, [pc, #268]	; (800169c <MX_TIM1_Init+0x168>)
 800158e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <MX_TIM1_Init+0x160>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <MX_TIM1_Init+0x160>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <MX_TIM1_Init+0x160>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <MX_TIM1_Init+0x160>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f003 fd4d 	bl	8005044 <HAL_TIM_Base_Init>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015ae:	f000 f9ed 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	2148      	movs	r1, #72	; 0x48
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	0152      	lsls	r2, r2, #5
 80015ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015bc:	187a      	adds	r2, r7, r1
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <MX_TIM1_Init+0x160>)
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f004 f8c2 	bl	800574c <HAL_TIM_ConfigClockSource>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015cc:	f000 f9de 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <MX_TIM1_Init+0x160>)
 80015d2:	0018      	movs	r0, r3
 80015d4:	f003 fe86 	bl	80052e4 <HAL_TIM_PWM_Init>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80015dc:	f000 f9d6 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ee:	187a      	adds	r2, r7, r1
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_TIM1_Init+0x160>)
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f004 fcd7 	bl	8005fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80015fe:	f000 f9c5 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2124      	movs	r1, #36	; 0x24
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2260      	movs	r2, #96	; 0x60
 8001608:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7 -1;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2206      	movs	r2, #6
 800160e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162e:	1879      	adds	r1, r7, r1
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_TIM1_Init+0x160>)
 8001632:	2200      	movs	r2, #0
 8001634:	0018      	movs	r0, r3
 8001636:	f003 ffc3 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 800163a:	1e03      	subs	r3, r0, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800163e:	f000 f9a5 	bl	800198c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	0192      	lsls	r2, r2, #6
 8001666:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_TIM1_Init+0x160>)
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f004 fcf5 	bl	8006064 <HAL_TIMEx_ConfigBreakDeadTime>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800167e:	f000 f985 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <MX_TIM1_Init+0x160>)
 8001684:	0018      	movs	r0, r3
 8001686:	f000 fbc1 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b016      	add	sp, #88	; 0x58
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	200001fc 	.word	0x200001fc
 8001698:	40012c00 	.word	0x40012c00
 800169c:	00000257 	.word	0x00000257

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	2328      	movs	r3, #40	; 0x28
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	0018      	movs	r0, r3
 80016ac:	2310      	movs	r3, #16
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f006 f827 	bl	8007704 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	2320      	movs	r3, #32
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	0018      	movs	r0, r3
 80016bc:	2308      	movs	r3, #8
 80016be:	001a      	movs	r2, r3
 80016c0:	2100      	movs	r1, #0
 80016c2:	f006 f81f 	bl	8007704 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	0018      	movs	r0, r3
 80016ca:	231c      	movs	r3, #28
 80016cc:	001a      	movs	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	f006 f818 	bl	8007704 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	05d2      	lsls	r2, r2, #23
 80016da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016de:	2263      	movs	r2, #99	; 0x63
 80016e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 480 - 1;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016ea:	22e0      	movs	r2, #224	; 0xe0
 80016ec:	32ff      	adds	r2, #255	; 0xff
 80016ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_TIM2_Init+0xf8>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f003 fca0 	bl	8005044 <HAL_TIM_Base_Init>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001708:	f000 f940 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170c:	2128      	movs	r1, #40	; 0x28
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0152      	lsls	r2, r2, #5
 8001714:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001716:	187a      	adds	r2, r7, r1
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_TIM2_Init+0xf8>)
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f004 f815 	bl	800574c <HAL_TIM_ConfigClockSource>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001726:	f000 f931 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_TIM2_Init+0xf8>)
 800172c:	0018      	movs	r0, r3
 800172e:	f003 fdd9 	bl	80052e4 <HAL_TIM_PWM_Init>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001736:	f000 f929 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2120      	movs	r1, #32
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001748:	187a      	adds	r2, r7, r1
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_TIM2_Init+0xf8>)
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f004 fc2a 	bl	8005fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001758:	f000 f918 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2260      	movs	r2, #96	; 0x60
 8001760:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5 - 1;
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2204      	movs	r2, #4
 8001766:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001774:	1d39      	adds	r1, r7, #4
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_TIM2_Init+0xf8>)
 8001778:	220c      	movs	r2, #12
 800177a:	0018      	movs	r0, r3
 800177c:	f003 ff20 	bl	80055c0 <HAL_TIM_PWM_ConfigChannel>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001784:	f000 f902 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <MX_TIM2_Init+0xf8>)
 800178a:	0018      	movs	r0, r3
 800178c:	f000 fb3e 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b00e      	add	sp, #56	; 0x38
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000244 	.word	0x20000244

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_USART1_UART_Init+0x6c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_USART1_UART_Init+0x70>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_USART1_UART_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_USART1_UART_Init+0x7c>)
 80017b6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017ba:	22e1      	movs	r2, #225	; 0xe1
 80017bc:	0212      	lsls	r2, r2, #8
 80017be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017d4:	220c      	movs	r2, #12
 80017d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART1_UART_Init+0x78>)
 80017f2:	0018      	movs	r0, r3
 80017f4:	f004 fca4 	bl	8006140 <HAL_UART_Init>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80017fc:	f000 f8c6 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	20000356 	.word	0x20000356
 800180c:	2000035e 	.word	0x2000035e
 8001810:	20000386 	.word	0x20000386
 8001814:	2000028c 	.word	0x2000028c
 8001818:	40013800 	.word	0x40013800

0800181c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_DMA_Init+0x38>)
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_DMA_Init+0x38>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_DMA_Init+0x38>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2009      	movs	r0, #9
 8001840:	f001 f93a 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001844:	2009      	movs	r0, #9
 8001846:	f001 f94c 	bl	8002ae2 <HAL_NVIC_EnableIRQ>

}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08b      	sub	sp, #44	; 0x2c
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	2414      	movs	r4, #20
 8001860:	193b      	adds	r3, r7, r4
 8001862:	0018      	movs	r0, r3
 8001864:	2314      	movs	r3, #20
 8001866:	001a      	movs	r2, r3
 8001868:	2100      	movs	r1, #0
 800186a:	f005 ff4b 	bl	8007704 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <MX_GPIO_Init+0x124>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <MX_GPIO_Init+0x124>)
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0309      	lsls	r1, r1, #12
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <MX_GPIO_Init+0x124>)
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	031b      	lsls	r3, r3, #12
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <MX_GPIO_Init+0x124>)
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <MX_GPIO_Init+0x124>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	03c9      	lsls	r1, r1, #15
 8001894:	430a      	orrs	r2, r1
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <MX_GPIO_Init+0x124>)
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	03db      	lsls	r3, r3, #15
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <MX_GPIO_Init+0x124>)
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <MX_GPIO_Init+0x124>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0289      	lsls	r1, r1, #10
 80018b0:	430a      	orrs	r2, r1
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <MX_GPIO_Init+0x124>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <MX_GPIO_Init+0x124>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_GPIO_Init+0x124>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	02c9      	lsls	r1, r1, #11
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <MX_GPIO_Init+0x124>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	02db      	lsls	r3, r3, #11
 80018d8:	4013      	ands	r3, r2
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018de:	239f      	movs	r3, #159	; 0x9f
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	4827      	ldr	r0, [pc, #156]	; (8001980 <MX_GPIO_Init+0x128>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	0019      	movs	r1, r3
 80018e8:	f001 fd55 	bl	8003396 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_GPIO_Init+0x12c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	21c0      	movs	r1, #192	; 0xc0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f001 fd4f 	bl	8003396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <MX_GPIO_Init+0x130>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	2160      	movs	r1, #96	; 0x60
 80018fe:	0018      	movs	r0, r3
 8001900:	f001 fd49 	bl	8003396 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001904:	193b      	adds	r3, r7, r4
 8001906:	229f      	movs	r2, #159	; 0x9f
 8001908:	0192      	lsls	r2, r2, #6
 800190a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	193b      	adds	r3, r7, r4
 800190e:	2201      	movs	r2, #1
 8001910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	193b      	adds	r3, r7, r4
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	193b      	adds	r3, r7, r4
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	193b      	adds	r3, r7, r4
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <MX_GPIO_Init+0x128>)
 8001922:	0019      	movs	r1, r3
 8001924:	0010      	movs	r0, r2
 8001926:	f001 fba9 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	22c0      	movs	r2, #192	; 0xc0
 800192e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	193b      	adds	r3, r7, r4
 8001932:	2201      	movs	r2, #1
 8001934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	193b      	adds	r3, r7, r4
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	193b      	adds	r3, r7, r4
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001942:	193b      	adds	r3, r7, r4
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <MX_GPIO_Init+0x12c>)
 8001946:	0019      	movs	r1, r3
 8001948:	0010      	movs	r0, r2
 800194a:	f001 fb97 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800194e:	0021      	movs	r1, r4
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2260      	movs	r2, #96	; 0x60
 8001954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2201      	movs	r2, #1
 800195a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	187b      	adds	r3, r7, r1
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <MX_GPIO_Init+0x130>)
 800196c:	0019      	movs	r1, r3
 800196e:	0010      	movs	r0, r2
 8001970:	f001 fb84 	bl	800307c <HAL_GPIO_Init>

}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b00b      	add	sp, #44	; 0x2c
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	48000800 	.word	0x48000800
 8001984:	48001400 	.word	0x48001400
 8001988:	48000400 	.word	0x48000400

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_MspInit+0x44>)
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_MspInit+0x44>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_MspInit+0x44>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_MspInit+0x44>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_MspInit+0x44>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0549      	lsls	r1, r1, #21
 80019c0:	430a      	orrs	r2, r1
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_MspInit+0x44>)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	055b      	lsls	r3, r3, #21
 80019cc:	4013      	ands	r3, r2
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b08d      	sub	sp, #52	; 0x34
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	241c      	movs	r4, #28
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	0018      	movs	r0, r3
 80019ee:	2314      	movs	r3, #20
 80019f0:	001a      	movs	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	f005 fe86 	bl	8007704 <memset>
  if(hadc->Instance==ADC1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_ADC_MspInit+0x148>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d000      	beq.n	8001a04 <HAL_ADC_MspInit+0x24>
 8001a02:	e08d      	b.n	8001b20 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a04:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0089      	lsls	r1, r1, #2
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	619a      	str	r2, [r3, #24]
 8001a12:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0309      	lsls	r1, r1, #12
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	615a      	str	r2, [r3, #20]
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	031b      	lsls	r3, r3, #12
 8001a36:	4013      	ands	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0289      	lsls	r1, r1, #10
 8001a46:	430a      	orrs	r2, r1
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	02c9      	lsls	r1, r1, #11
 8001a62:	430a      	orrs	r2, r1
 8001a64:	615a      	str	r2, [r3, #20]
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_ADC_MspInit+0x14c>)
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	02db      	lsls	r3, r3, #11
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	223f      	movs	r2, #63	; 0x3f
 8001a78:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <HAL_ADC_MspInit+0x150>)
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	f001 faf5 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	22ef      	movs	r2, #239	; 0xef
 8001a96:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	193a      	adds	r2, r7, r4
 8001aa6:	2390      	movs	r3, #144	; 0x90
 8001aa8:	05db      	lsls	r3, r3, #23
 8001aaa:	0011      	movs	r1, r2
 8001aac:	0018      	movs	r0, r3
 8001aae:	f001 fae5 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	2203      	movs	r2, #3
 8001abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_ADC_MspInit+0x154>)
 8001ac8:	0019      	movs	r1, r3
 8001aca:	0010      	movs	r0, r2
 8001acc:	f001 fad6 	bl	800307c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_ADC_MspInit+0x15c>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	00d2      	lsls	r2, r2, #3
 8001af6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 f8a2 	bl	8002c50 <HAL_DMA_Init>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001b10:	f7ff ff3c 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_ADC_MspInit+0x158>)
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b00d      	add	sp, #52	; 0x34
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	40012400 	.word	0x40012400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000400 	.word	0x48000400
 8001b38:	20000090 	.word	0x20000090
 8001b3c:	40020008 	.word	0x40020008

08001b40 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b08b      	sub	sp, #44	; 0x2c
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	2414      	movs	r4, #20
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	2314      	movs	r3, #20
 8001b50:	001a      	movs	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	f005 fdd6 	bl	8007704 <memset>
  if(hdac->Instance==DAC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_DAC_MspInit+0x84>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12b      	bne.n	8001bba <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0589      	lsls	r1, r1, #22
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	61da      	str	r2, [r3, #28]
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	059b      	lsls	r3, r3, #22
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0289      	lsls	r1, r1, #10
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_DAC_MspInit+0x88>)
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	193a      	adds	r2, r7, r4
 8001bae:	2390      	movs	r3, #144	; 0x90
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f001 fa61 	bl	800307c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b00b      	add	sp, #44	; 0x2c
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40007400 	.word	0x40007400
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b08b      	sub	sp, #44	; 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	2414      	movs	r4, #20
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	0018      	movs	r0, r3
 8001bda:	2314      	movs	r3, #20
 8001bdc:	001a      	movs	r2, r3
 8001bde:	2100      	movs	r1, #0
 8001be0:	f005 fd90 	bl	8007704 <memset>
  if(hi2c->Instance==I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_I2C_MspInit+0x90>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d132      	bne.n	8001c54 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	02c9      	lsls	r1, r1, #11
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	02db      	lsls	r3, r3, #11
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	22c0      	movs	r2, #192	; 0xc0
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	0021      	movs	r1, r4
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2212      	movs	r2, #18
 8001c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2203      	movs	r2, #3
 8001c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2201      	movs	r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_I2C_MspInit+0x98>)
 8001c30:	0019      	movs	r1, r3
 8001c32:	0010      	movs	r0, r2
 8001c34:	f001 fa22 	bl	800307c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	0389      	lsls	r1, r1, #14
 8001c42:	430a      	orrs	r2, r1
 8001c44:	61da      	str	r2, [r3, #28]
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	039b      	lsls	r3, r3, #14
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b00b      	add	sp, #44	; 0x2c
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400

08001c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b08d      	sub	sp, #52	; 0x34
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	241c      	movs	r4, #28
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	0018      	movs	r0, r3
 8001c76:	2314      	movs	r3, #20
 8001c78:	001a      	movs	r2, r3
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f005 fd42 	bl	8007704 <memset>
  if(hspi->Instance==SPI1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_SPI_MspInit+0x100>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d132      	bne.n	8001cf0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0149      	lsls	r1, r1, #5
 8001c94:	430a      	orrs	r2, r1
 8001c96:	619a      	str	r2, [r3, #24]
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	02c9      	lsls	r1, r1, #11
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	02db      	lsls	r3, r3, #11
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001cc2:	0021      	movs	r1, r4
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2218      	movs	r2, #24
 8001cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2202      	movs	r2, #2
 8001cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_SPI_MspInit+0x108>)
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	0010      	movs	r0, r2
 8001cea:	f001 f9c7 	bl	800307c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cee:	e037      	b.n	8001d60 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_SPI_MspInit+0x10c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d132      	bne.n	8001d60 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	01c9      	lsls	r1, r1, #7
 8001d04:	430a      	orrs	r2, r1
 8001d06:	61da      	str	r2, [r3, #28]
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	02c9      	lsls	r1, r1, #11
 8001d20:	430a      	orrs	r2, r1
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_SPI_MspInit+0x104>)
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	02db      	lsls	r3, r3, #11
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d32:	211c      	movs	r1, #28
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	22c0      	movs	r2, #192	; 0xc0
 8001d38:	01d2      	lsls	r2, r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2202      	movs	r2, #2
 8001d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_SPI_MspInit+0x108>)
 8001d58:	0019      	movs	r1, r3
 8001d5a:	0010      	movs	r0, r2
 8001d5c:	f001 f98e 	bl	800307c <HAL_GPIO_Init>
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b00d      	add	sp, #52	; 0x34
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	40013000 	.word	0x40013000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	40003800 	.word	0x40003800

08001d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_TIM_Base_MspInit+0x8c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d11e      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0109      	lsls	r1, r1, #4
 8001d94:	430a      	orrs	r2, r1
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2101      	movs	r1, #1
 8001daa:	200d      	movs	r0, #13
 8001dac:	f000 fe84 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001db0:	200d      	movs	r0, #13
 8001db2:	f000 fe96 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2101      	movs	r1, #1
 8001dba:	200e      	movs	r0, #14
 8001dbc:	f000 fe7c 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001dc0:	200e      	movs	r0, #14
 8001dc2:	f000 fe8e 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dc6:	e019      	b.n	8001dfc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d113      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	61da      	str	r2, [r3, #28]
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_TIM_Base_MspInit+0x90>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2101      	movs	r1, #1
 8001df0:	200f      	movs	r0, #15
 8001df2:	f000 fe61 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 fe73 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	2414      	movs	r4, #20
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	0018      	movs	r0, r3
 8001e1a:	2314      	movs	r3, #20
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f005 fc70 	bl	8007704 <memset>
  if(htim->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <HAL_TIM_MspPostInit+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d126      	bne.n	8001e7c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0289      	lsls	r1, r1, #10
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	0052      	lsls	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	0021      	movs	r1, r4
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2202      	movs	r2, #2
 8001e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2202      	movs	r2, #2
 8001e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	187a      	adds	r2, r7, r1
 8001e6e:	2390      	movs	r3, #144	; 0x90
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f001 f901 	bl	800307c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e7a:	e02a      	b.n	8001ed2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	05db      	lsls	r3, r3, #23
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d124      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	02c9      	lsls	r1, r1, #11
 8001e92:	430a      	orrs	r2, r1
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_TIM_MspPostInit+0xd4>)
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	02db      	lsls	r3, r3, #11
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ea4:	2114      	movs	r1, #20
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_TIM_MspPostInit+0xd8>)
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f001 f8d5 	bl	800307c <HAL_GPIO_Init>
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b00b      	add	sp, #44	; 0x2c
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	2414      	movs	r4, #20
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	2314      	movs	r3, #20
 8001ef8:	001a      	movs	r2, r3
 8001efa:	2100      	movs	r1, #0
 8001efc:	f005 fc02 	bl	8007704 <memset>
  if(huart->Instance==USART1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_UART_MspInit+0xa4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d13b      	bne.n	8001f82 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	01c9      	lsls	r1, r1, #7
 8001f14:	430a      	orrs	r2, r1
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0289      	lsls	r1, r1, #10
 8001f30:	430a      	orrs	r2, r1
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0xa8>)
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	22c0      	movs	r2, #192	; 0xc0
 8001f46:	00d2      	lsls	r2, r2, #3
 8001f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	0021      	movs	r1, r4
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2202      	movs	r2, #2
 8001f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2201      	movs	r2, #1
 8001f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	187a      	adds	r2, r7, r1
 8001f66:	2390      	movs	r3, #144	; 0x90
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f001 f885 	bl	800307c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	201b      	movs	r0, #27
 8001f78:	f000 fd9e 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f7c:	201b      	movs	r0, #27
 8001f7e:	f000 fdb0 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b00b      	add	sp, #44	; 0x2c
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40021000 	.word	0x40021000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 f8b8 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <DMA1_Channel1_IRQHandler+0x14>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 ff6b 	bl	8002ea6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000090 	.word	0x20000090

08001fdc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f003 f9d6 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	200001fc 	.word	0x200001fc

08001ff4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <TIM1_CC_IRQHandler+0x14>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f003 f9ca 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	200001fc 	.word	0x200001fc

0800200c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <TIM2_IRQHandler+0x14>)
 8002012:	0018      	movs	r0, r3
 8002014:	f003 f9be 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	20000244 	.word	0x20000244

08002024 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <USART1_IRQHandler+0x14>)
 800202a:	0018      	movs	r0, r3
 800202c:	f004 f9e6 	bl	80063fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000028c 	.word	0x2000028c

0800203c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <Reset_Handler>:
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <LoopForever+0x2>)
 800204a:	4685      	mov	sp, r0
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopForever+0x6>)
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopForever+0xa>)
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopForever+0xe>)
 8002052:	2300      	movs	r3, #0
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:
 8002056:	58d4      	ldr	r4, [r2, r3]
 8002058:	50c4      	str	r4, [r0, r3]
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:
 800205c:	18c4      	adds	r4, r0, r3
 800205e:	428c      	cmp	r4, r1
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopForever+0x12>)
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopForever+0x16>)
 8002066:	2300      	movs	r3, #0
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:
 800206e:	42a2      	cmp	r2, r4
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>
 8002072:	f7ff ffe3 	bl	800203c <SystemInit>
 8002076:	f005 fb21 	bl	80076bc <__libc_init_array>
 800207a:	f7fe ff61 	bl	8000f40 <main>

0800207e <LoopForever>:
 800207e:	e7fe      	b.n	800207e <LoopForever>
 8002080:	20002000 	.word	0x20002000
 8002084:	20000000 	.word	0x20000000
 8002088:	20000034 	.word	0x20000034
 800208c:	08007810 	.word	0x08007810
 8002090:	20000034 	.word	0x20000034
 8002094:	200003a4 	.word	0x200003a4

08002098 <ADC1_COMP_IRQHandler>:
 8002098:	e7fe      	b.n	8002098 <ADC1_COMP_IRQHandler>
	...

0800209c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_Init+0x24>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_Init+0x24>)
 80020a6:	2110      	movs	r1, #16
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f809 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b2:	f7ff fc71 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_InitTick+0x5c>)
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_InitTick+0x60>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	0019      	movs	r1, r3
 80020d6:	23fa      	movs	r3, #250	; 0xfa
 80020d8:	0098      	lsls	r0, r3, #2
 80020da:	f7fe f815 	bl	8000108 <__udivsi3>
 80020de:	0003      	movs	r3, r0
 80020e0:	0019      	movs	r1, r3
 80020e2:	0020      	movs	r0, r4
 80020e4:	f7fe f810 	bl	8000108 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fd09 	bl	8002b02 <HAL_SYSTICK_Config>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e00f      	b.n	8002118 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d80b      	bhi.n	8002116 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	2301      	movs	r3, #1
 8002102:	425b      	negs	r3, r3
 8002104:	2200      	movs	r2, #0
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fcd6 	bl	8002ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_InitTick+0x64>)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b003      	add	sp, #12
 800211e:	bd90      	pop	{r4, r7, pc}
 8002120:	20000028 	.word	0x20000028
 8002124:	20000030 	.word	0x20000030
 8002128:	2000002c 	.word	0x2000002c

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x1c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	001a      	movs	r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x20>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	18d2      	adds	r2, r2, r3
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_IncTick+0x20>)
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	20000030 	.word	0x20000030
 800214c:	200003a0 	.word	0x200003a0

08002150 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <HAL_GetTick+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	200003a0 	.word	0x200003a0

08002164 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_SuspendTick+0x18>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_SuspendTick+0x18>)
 800216e:	2102      	movs	r1, #2
 8002170:	438a      	bics	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	230f      	movs	r3, #15
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e125      	b.n	80023ea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2234      	movs	r2, #52	; 0x34
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff fc12 	bl	80019e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	2210      	movs	r2, #16
 80021c2:	4013      	ands	r3, r2
 80021c4:	d000      	beq.n	80021c8 <HAL_ADC_Init+0x48>
 80021c6:	e103      	b.n	80023d0 <HAL_ADC_Init+0x250>
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d000      	beq.n	80021d4 <HAL_ADC_Init+0x54>
 80021d2:	e0fd      	b.n	80023d0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80021de:	d000      	beq.n	80021e2 <HAL_ADC_Init+0x62>
 80021e0:	e0f6      	b.n	80023d0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <HAL_ADC_Init+0x274>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	2202      	movs	r2, #2
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d112      	bne.n	8002226 <HAL_ADC_Init+0xa6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	4013      	ands	r3, r2
 800220a:	2b01      	cmp	r3, #1
 800220c:	d009      	beq.n	8002222 <HAL_ADC_Init+0xa2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	401a      	ands	r2, r3
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	429a      	cmp	r2, r3
 8002220:	d101      	bne.n	8002226 <HAL_ADC_Init+0xa6>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_ADC_Init+0xa8>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d116      	bne.n	800225a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2218      	movs	r2, #24
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	0899      	lsrs	r1, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4964      	ldr	r1, [pc, #400]	; (80023f8 <HAL_ADC_Init+0x278>)
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e1b      	ldrb	r3, [r3, #24]
 800226e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e5b      	ldrb	r3, [r3, #25]
 8002274:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002276:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e9b      	ldrb	r3, [r3, #26]
 800227c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800227e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	2b01      	cmp	r3, #1
 8002286:	d002      	beq.n	800228e <HAL_ADC_Init+0x10e>
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	015b      	lsls	r3, r3, #5
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x110>
 800228e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002290:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002296:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_Init+0x124>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_Init+0x126>
 80022a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80022a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2124      	movs	r1, #36	; 0x24
 80022ac:	5c5b      	ldrb	r3, [r3, r1]
 80022ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7edb      	ldrb	r3, [r3, #27]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7e9b      	ldrb	r3, [r3, #26]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	0252      	lsls	r2, r2, #9
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	e00b      	b.n	80022ec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	2220      	movs	r2, #32
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	2201      	movs	r2, #1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	23c2      	movs	r3, #194	; 0xc2
 80022f2:	33ff      	adds	r3, #255	; 0xff
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d007      	beq.n	8002308 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002300:	4313      	orrs	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4313      	orrs	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	430a      	orrs	r2, r1
 8002316:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	055b      	lsls	r3, r3, #21
 8002320:	429a      	cmp	r2, r3
 8002322:	d01b      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d017      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	2b02      	cmp	r3, #2
 8002332:	d013      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	2b03      	cmp	r3, #3
 800233a:	d00f      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	2b04      	cmp	r3, #4
 8002342:	d00b      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	2b05      	cmp	r3, #5
 800234a:	d007      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	2b06      	cmp	r3, #6
 8002352:	d003      	beq.n	800235c <HAL_ADC_Init+0x1dc>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	2b07      	cmp	r3, #7
 800235a:	d112      	bne.n	8002382 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2107      	movs	r1, #7
 8002368:	438a      	bics	r2, r1
 800236a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6959      	ldr	r1, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	2207      	movs	r2, #7
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <HAL_ADC_Init+0x27c>)
 800238a:	4013      	ands	r3, r2
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d10b      	bne.n	80023aa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	2203      	movs	r2, #3
 800239e:	4393      	bics	r3, r2
 80023a0:	2201      	movs	r2, #1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023a8:	e01c      	b.n	80023e4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2212      	movs	r2, #18
 80023b0:	4393      	bics	r3, r2
 80023b2:	2210      	movs	r2, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2201      	movs	r2, #1
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80023c6:	230f      	movs	r3, #15
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023ce:	e009      	b.n	80023e4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	2210      	movs	r2, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80023dc:	230f      	movs	r3, #15
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023e4:	230f      	movs	r3, #15
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	781b      	ldrb	r3, [r3, #0]
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	fffffefd 	.word	0xfffffefd
 80023f8:	fffe0219 	.word	0xfffe0219
 80023fc:	833fffe7 	.word	0x833fffe7

08002400 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2317      	movs	r3, #23
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d15e      	bne.n	80024de <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2234      	movs	r2, #52	; 0x34
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_Start_DMA+0x2e>
 800242a:	2302      	movs	r3, #2
 800242c:	e05e      	b.n	80024ec <HAL_ADC_Start_DMA+0xec>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2234      	movs	r2, #52	; 0x34
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	7e5b      	ldrb	r3, [r3, #25]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d007      	beq.n	800244e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800243e:	2317      	movs	r3, #23
 8002440:	18fc      	adds	r4, r7, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f983 	bl	8002750 <ADC_Enable>
 800244a:	0003      	movs	r3, r0
 800244c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800244e:	2317      	movs	r3, #23
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d146      	bne.n	80024e6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_ADC_Start_DMA+0xf4>)
 800245e:	4013      	ands	r3, r2
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	0052      	lsls	r2, r2, #1
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2234      	movs	r2, #52	; 0x34
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <HAL_ADC_Start_DMA+0xf8>)
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_ADC_Start_DMA+0xfc>)
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <HAL_ADC_Start_DMA+0x100>)
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	221c      	movs	r2, #28
 8002496:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2110      	movs	r1, #16
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3340      	adds	r3, #64	; 0x40
 80024c2:	0019      	movs	r1, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f000 fc0a 	bl	8002ce0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2104      	movs	r1, #4
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024de:	2317      	movs	r3, #23
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024e6:	2317      	movs	r3, #23
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b007      	add	sp, #28
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	fffff0fe 	.word	0xfffff0fe
 80024f8:	08002859 	.word	0x08002859
 80024fc:	0800290d 	.word	0x0800290d
 8002500:	0800292b 	.word	0x0800292b

08002504 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253e:	230f      	movs	r3, #15
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	429a      	cmp	r2, r3
 8002554:	d011      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00d      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	2b02      	cmp	r3, #2
 8002564:	d009      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2b03      	cmp	r3, #3
 800256c:	d005      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2b04      	cmp	r3, #4
 8002574:	d001      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2234      	movs	r2, #52	; 0x34
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x54>
 8002584:	2302      	movs	r3, #2
 8002586:	e0d0      	b.n	800272a <HAL_ADC_ConfigChannel+0x1f6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2234      	movs	r2, #52	; 0x34
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d000      	beq.n	800259e <HAL_ADC_ConfigChannel+0x6a>
 800259c:	e0b4      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4a64      	ldr	r2, [pc, #400]	; (8002734 <HAL_ADC_ConfigChannel+0x200>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x76>
 80025a8:	e082      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d037      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d033      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d02f      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d02b      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d027      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d023      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d01f      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b07      	cmp	r3, #7
 8002602:	d01b      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2107      	movs	r1, #7
 8002610:	400b      	ands	r3, r1
 8002612:	429a      	cmp	r2, r3
 8002614:	d012      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2107      	movs	r1, #7
 8002622:	438a      	bics	r2, r1
 8002624:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2207      	movs	r2, #7
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d007      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x120>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d003      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x120>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d163      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_ADC_ConfigChannel+0x204>)
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b10      	cmp	r3, #16
 800265e:	d009      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x140>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b11      	cmp	r3, #17
 8002666:	d102      	bne.n	800266e <HAL_ADC_ConfigChannel+0x13a>
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	03db      	lsls	r3, r3, #15
 800266c:	e004      	b.n	8002678 <HAL_ADC_ConfigChannel+0x144>
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	045b      	lsls	r3, r3, #17
 8002672:	e001      	b.n	8002678 <HAL_ADC_ConfigChannel+0x144>
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	041b      	lsls	r3, r3, #16
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_ADC_ConfigChannel+0x204>)
 800267a:	430b      	orrs	r3, r1
 800267c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d14a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_ADC_ConfigChannel+0x208>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	492d      	ldr	r1, [pc, #180]	; (8002740 <HAL_ADC_ConfigChannel+0x20c>)
 800268c:	0018      	movs	r0, r3
 800268e:	f7fd fd3b 	bl	8000108 <__udivsi3>
 8002692:	0003      	movs	r3, r0
 8002694:	001a      	movs	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	189b      	adds	r3, r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x16e>
 80026ae:	e035      	b.n	800271c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	4099      	lsls	r1, r3
 80026be:	000b      	movs	r3, r1
 80026c0:	43d9      	mvns	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d007      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0x1ae>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d003      	beq.n	80026e2 <HAL_ADC_ConfigChannel+0x1ae>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d11c      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_ADC_ConfigChannel+0x204>)
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d007      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x1ca>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b11      	cmp	r3, #17
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x1c6>
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_ConfigChannel+0x210>)
 80026f8:	e002      	b.n	8002700 <HAL_ADC_ConfigChannel+0x1cc>
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_ADC_ConfigChannel+0x214>)
 80026fc:	e000      	b.n	8002700 <HAL_ADC_ConfigChannel+0x1cc>
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_ADC_ConfigChannel+0x218>)
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_ADC_ConfigChannel+0x204>)
 8002702:	400b      	ands	r3, r1
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e009      	b.n	800271c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	2220      	movs	r2, #32
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2234      	movs	r2, #52	; 0x34
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002724:	230f      	movs	r3, #15
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	00001001 	.word	0x00001001
 8002738:	40012708 	.word	0x40012708
 800273c:	20000028 	.word	0x20000028
 8002740:	000f4240 	.word	0x000f4240
 8002744:	ffbfffff 	.word	0xffbfffff
 8002748:	feffffff 	.word	0xfeffffff
 800274c:	ff7fffff 	.word	0xff7fffff

08002750 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	2b01      	cmp	r3, #1
 800276c:	d112      	bne.n	8002794 <ADC_Enable+0x44>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	2b01      	cmp	r3, #1
 800277a:	d009      	beq.n	8002790 <ADC_Enable+0x40>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	429a      	cmp	r2, r3
 800278e:	d101      	bne.n	8002794 <ADC_Enable+0x44>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <ADC_Enable+0x46>
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d152      	bne.n	8002840 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <ADC_Enable+0xfc>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00d      	beq.n	80027c2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	2210      	movs	r2, #16
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2201      	movs	r2, #1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03f      	b.n	8002842 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <ADC_Enable+0x100>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	491f      	ldr	r1, [pc, #124]	; (8002854 <ADC_Enable+0x104>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fd fc95 	bl	8000108 <__udivsi3>
 80027de:	0003      	movs	r3, r0
 80027e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027e2:	e002      	b.n	80027ea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fcae 	bl	8002150 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027f8:	e01b      	b.n	8002832 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027fa:	f7ff fca9 	bl	8002150 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d914      	bls.n	8002832 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	4013      	ands	r3, r2
 8002812:	2b01      	cmp	r3, #1
 8002814:	d00d      	beq.n	8002832 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	2210      	movs	r2, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2201      	movs	r2, #1
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4013      	ands	r3, r2
 800283c:	2b01      	cmp	r3, #1
 800283e:	d1dc      	bne.n	80027fa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	80000017 	.word	0x80000017
 8002850:	20000028 	.word	0x20000028
 8002854:	000f4240 	.word	0x000f4240

08002858 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	2250      	movs	r2, #80	; 0x50
 800286c:	4013      	ands	r3, r2
 800286e:	d140      	bne.n	80028f2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	23c0      	movs	r3, #192	; 0xc0
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4013      	ands	r3, r2
 800288a:	d12d      	bne.n	80028e8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002890:	2b00      	cmp	r3, #0
 8002892:	d129      	bne.n	80028e8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2208      	movs	r2, #8
 800289c:	4013      	ands	r3, r2
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d122      	bne.n	80028e8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2204      	movs	r2, #4
 80028aa:	4013      	ands	r3, r2
 80028ac:	d110      	bne.n	80028d0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	210c      	movs	r1, #12
 80028ba:	438a      	bics	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <ADC_DMAConvCplt+0xb0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	2201      	movs	r2, #1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
 80028ce:	e00b      	b.n	80028e8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	2220      	movs	r2, #32
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2201      	movs	r2, #1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff fe0a 	bl	8002504 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80028f0:	e005      	b.n	80028fe <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	0010      	movs	r0, r2
 80028fc:	4798      	blx	r3
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	fffffefe 	.word	0xfffffefe

0800290c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fdf9 	bl	8002514 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	2240      	movs	r2, #64	; 0x40
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2204      	movs	r2, #4
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0018      	movs	r0, r3
 8002954:	f7ff fde6 	bl	8002524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}

08002960 <__NVIC_EnableIRQ>:
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	0002      	movs	r2, r0
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b7f      	cmp	r3, #127	; 0x7f
 8002972:	d809      	bhi.n	8002988 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	001a      	movs	r2, r3
 800297a:	231f      	movs	r3, #31
 800297c:	401a      	ands	r2, r3
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <__NVIC_EnableIRQ+0x30>)
 8002980:	2101      	movs	r1, #1
 8002982:	4091      	lsls	r1, r2
 8002984:	000a      	movs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	0002      	movs	r2, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b7f      	cmp	r3, #127	; 0x7f
 80029a8:	d828      	bhi.n	80029fc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029aa:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <__NVIC_SetPriority+0xd4>)
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	33c0      	adds	r3, #192	; 0xc0
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	589b      	ldr	r3, [r3, r2]
 80029ba:	1dfa      	adds	r2, r7, #7
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	0011      	movs	r1, r2
 80029c0:	2203      	movs	r2, #3
 80029c2:	400a      	ands	r2, r1
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	21ff      	movs	r1, #255	; 0xff
 80029c8:	4091      	lsls	r1, r2
 80029ca:	000a      	movs	r2, r1
 80029cc:	43d2      	mvns	r2, r2
 80029ce:	401a      	ands	r2, r3
 80029d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	401a      	ands	r2, r3
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	0018      	movs	r0, r3
 80029e0:	2303      	movs	r3, #3
 80029e2:	4003      	ands	r3, r0
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e8:	481f      	ldr	r0, [pc, #124]	; (8002a68 <__NVIC_SetPriority+0xd4>)
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	430a      	orrs	r2, r1
 80029f4:	33c0      	adds	r3, #192	; 0xc0
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	501a      	str	r2, [r3, r0]
}
 80029fa:	e031      	b.n	8002a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <__NVIC_SetPriority+0xd8>)
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0019      	movs	r1, r3
 8002a04:	230f      	movs	r3, #15
 8002a06:	400b      	ands	r3, r1
 8002a08:	3b08      	subs	r3, #8
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3306      	adds	r3, #6
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	18d3      	adds	r3, r2, r3
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1dfa      	adds	r2, r7, #7
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	400a      	ands	r2, r1
 8002a20:	00d2      	lsls	r2, r2, #3
 8002a22:	21ff      	movs	r1, #255	; 0xff
 8002a24:	4091      	lsls	r1, r2
 8002a26:	000a      	movs	r2, r1
 8002a28:	43d2      	mvns	r2, r2
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	019b      	lsls	r3, r3, #6
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	401a      	ands	r2, r3
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	4003      	ands	r3, r0
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a44:	4809      	ldr	r0, [pc, #36]	; (8002a6c <__NVIC_SetPriority+0xd8>)
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	001c      	movs	r4, r3
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	4023      	ands	r3, r4
 8002a50:	3b08      	subs	r3, #8
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	430a      	orrs	r2, r1
 8002a56:	3306      	adds	r3, #6
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	18c3      	adds	r3, r0, r3
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b003      	add	sp, #12
 8002a66:	bd90      	pop	{r4, r7, pc}
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	045b      	lsls	r3, r3, #17
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d301      	bcc.n	8002a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a84:	2301      	movs	r3, #1
 8002a86:	e010      	b.n	8002aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <SysTick_Config+0x44>)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a90:	2301      	movs	r3, #1
 8002a92:	425b      	negs	r3, r3
 8002a94:	2103      	movs	r1, #3
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff ff7c 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x44>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x44>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	1c02      	adds	r2, r0, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	0002      	movs	r2, r0
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aee:	1dfb      	adds	r3, r7, #7
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff ff33 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b002      	add	sp, #8
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ffaf 	bl	8002a70 <SysTick_Config>
 8002b12:	0003      	movs	r3, r0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e015      	b.n	8002b5a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	791b      	ldrb	r3, [r3, #4]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe fffd 	bl	8001b40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	795b      	ldrb	r3, [r3, #5]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_DAC_ConfigChannel+0x20>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e029      	b.n	8002bd6 <HAL_DAC_ConfigChannel+0x74>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002b96:	223e      	movs	r2, #62	; 0x3e
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	795b      	ldrb	r3, [r3, #5]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_DAC_Start+0x16>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e028      	b.n	8002c46 <HAL_DAC_Start+0x68>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10e      	bne.n	8002c38 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	223c      	movs	r2, #60	; 0x3c
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b3c      	cmp	r3, #60	; 0x3c
 8002c26:	d107      	bne.n	8002c38 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e036      	b.n	8002cd4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_DMA_Init+0x8c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f9c4 	bl	8003044 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}  
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	ffffc00f 	.word	0xffffc00f

08002ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_DMA_Start_IT+0x24>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e04f      	b.n	8002da4 <HAL_DMA_Start_IT+0xc4>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2221      	movs	r2, #33	; 0x21
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d13a      	bne.n	8002d8e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2221      	movs	r2, #33	; 0x21
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	438a      	bics	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f954 	bl	8002fea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	210e      	movs	r1, #14
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e00f      	b.n	8002d7c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	210a      	movs	r1, #10
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2104      	movs	r1, #4
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e007      	b.n	8002d9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d96:	2317      	movs	r3, #23
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002d9e:	2317      	movs	r3, #23
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
} 
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2221      	movs	r2, #33	; 0x21
 8002db8:	5c9b      	ldrb	r3, [r3, r2]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e020      	b.n	8002e14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	210e      	movs	r1, #14
 8002dde:	438a      	bics	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	438a      	bics	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4091      	lsls	r1, r2
 8002dfe:	000a      	movs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	210f      	movs	r1, #15
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2221      	movs	r2, #33	; 0x21
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d006      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e028      	b.n	8002e98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	210e      	movs	r1, #14
 8002e52:	438a      	bics	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	438a      	bics	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4091      	lsls	r1, r2
 8002e72:	000a      	movs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2221      	movs	r2, #33	; 0x21
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	0010      	movs	r0, r2
 8002e96:	4798      	blx	r3
    } 
  }
  return status;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d024      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x72>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d020      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2220      	movs	r2, #32
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d107      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2104      	movs	r1, #4
 8002eee:	438a      	bics	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2104      	movs	r1, #4
 8002efc:	4091      	lsls	r1, r2
 8002efe:	000a      	movs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d100      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x66>
 8002f0a:	e06a      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	0010      	movs	r0, r2
 8002f14:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f16:	e064      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	d02b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xda>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d027      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10b      	bne.n	8002f54 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	210a      	movs	r1, #10
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2221      	movs	r2, #33	; 0x21
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4091      	lsls	r1, r2
 8002f60:	000a      	movs	r2, r1
 8002f62:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002f7e:	e030      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2208      	movs	r2, #8
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d028      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2208      	movs	r2, #8
 8002f94:	4013      	ands	r3, r2
 8002f96:	d024      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	210e      	movs	r1, #14
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4091      	lsls	r1, r2
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	2100      	movs	r1, #0
 8002fcc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	0010      	movs	r0, r2
 8002fde:	4798      	blx	r3
    }
   }
}  
 8002fe0:	e7ff      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x13c>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b004      	add	sp, #16
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	2101      	movs	r1, #1
 8003002:	4091      	lsls	r1, r2
 8003004:	000a      	movs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d108      	bne.n	800302a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003028:	e007      	b.n	800303a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	60da      	str	r2, [r3, #12]
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <DMA_CalcBaseAndBitshift+0x30>)
 8003052:	4694      	mov	ip, r2
 8003054:	4463      	add	r3, ip
 8003056:	2114      	movs	r1, #20
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd f855 	bl	8000108 <__udivsi3>
 800305e:	0003      	movs	r3, r0
 8003060:	009a      	lsls	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a03      	ldr	r2, [pc, #12]	; (8003078 <DMA_CalcBaseAndBitshift+0x34>)
 800306a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}
 8003074:	bffdfff8 	.word	0xbffdfff8
 8003078:	40020000 	.word	0x40020000

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	e14f      	b.n	800332c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4091      	lsls	r1, r2
 8003096:	000a      	movs	r2, r1
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d100      	bne.n	80030a4 <HAL_GPIO_Init+0x28>
 80030a2:	e140      	b.n	8003326 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	2201      	movs	r2, #1
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b03      	cmp	r3, #3
 8003128:	d017      	beq.n	800315a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	43da      	mvns	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d123      	bne.n	80031ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	58d3      	ldr	r3, [r2, r3]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	409a      	lsls	r2, r3
 8003180:	0013      	movs	r3, r2
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2107      	movs	r1, #7
 8003192:	400b      	ands	r3, r1
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	409a      	lsls	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	401a      	ands	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	029b      	lsls	r3, r3, #10
 80031ea:	4013      	ands	r3, r2
 80031ec:	d100      	bne.n	80031f0 <HAL_GPIO_Init+0x174>
 80031ee:	e09a      	b.n	8003326 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f0:	4b54      	ldr	r3, [pc, #336]	; (8003344 <HAL_GPIO_Init+0x2c8>)
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_GPIO_Init+0x2c8>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_GPIO_Init+0x2c8>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003208:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_GPIO_Init+0x2cc>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	589b      	ldr	r3, [r3, r2]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2203      	movs	r2, #3
 800321a:	4013      	ands	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	43da      	mvns	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	2390      	movs	r3, #144	; 0x90
 8003230:	05db      	lsls	r3, r3, #23
 8003232:	429a      	cmp	r2, r3
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x1e2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a44      	ldr	r2, [pc, #272]	; (800334c <HAL_GPIO_Init+0x2d0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x1de>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a43      	ldr	r2, [pc, #268]	; (8003350 <HAL_GPIO_Init+0x2d4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x1da>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x1d6>
 800324e:	2303      	movs	r3, #3
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x1e4>
 8003252:	2305      	movs	r3, #5
 8003254:	e004      	b.n	8003260 <HAL_GPIO_Init+0x1e4>
 8003256:	2302      	movs	r3, #2
 8003258:	e002      	b.n	8003260 <HAL_GPIO_Init+0x1e4>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x1e4>
 800325e:	2300      	movs	r3, #0
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	2103      	movs	r1, #3
 8003264:	400a      	ands	r2, r1
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	4093      	lsls	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003270:	4935      	ldr	r1, [pc, #212]	; (8003348 <HAL_GPIO_Init+0x2cc>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43da      	mvns	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	025b      	lsls	r3, r3, #9
 8003296:	4013      	ands	r3, r2
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	43da      	mvns	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	4013      	ands	r3, r2
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43da      	mvns	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	035b      	lsls	r3, r3, #13
 80032ea:	4013      	ands	r3, r2
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43da      	mvns	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	039b      	lsls	r3, r3, #14
 8003314:	4013      	ands	r3, r2
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_GPIO_Init+0x2dc>)
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3301      	adds	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	40da      	lsrs	r2, r3
 8003334:	1e13      	subs	r3, r2, #0
 8003336:	d000      	beq.n	800333a <HAL_GPIO_Init+0x2be>
 8003338:	e6a8      	b.n	800308c <HAL_GPIO_Init+0x10>
  } 
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b006      	add	sp, #24
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	40010000 	.word	0x40010000
 800334c:	48000400 	.word	0x48000400
 8003350:	48000800 	.word	0x48000800
 8003354:	48000c00 	.word	0x48000c00
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	000a      	movs	r2, r1
 8003366:	1cbb      	adds	r3, r7, #2
 8003368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	1cba      	adds	r2, r7, #2
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	4013      	ands	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003376:	230f      	movs	r3, #15
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e003      	b.n	8003388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003380:	230f      	movs	r3, #15
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
  }
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	0008      	movs	r0, r1
 80033a0:	0011      	movs	r1, r2
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	1c02      	adds	r2, r0, #0
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	1c7b      	adds	r3, r7, #1
 80033aa:	1c0a      	adds	r2, r1, #0
 80033ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ae:	1c7b      	adds	r3, r7, #1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033be:	e003      	b.n	80033c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e082      	b.n	80034e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2241      	movs	r2, #65	; 0x41
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fe fbe7 	bl	8001bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	2124      	movs	r1, #36	; 0x24
 8003404:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4934      	ldr	r1, [pc, #208]	; (80034f0 <HAL_I2C_Init+0x120>)
 8003420:	400a      	ands	r2, r1
 8003422:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4931      	ldr	r1, [pc, #196]	; (80034f4 <HAL_I2C_Init+0x124>)
 8003430:	400a      	ands	r2, r1
 8003432:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d108      	bne.n	800344e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	0209      	lsls	r1, r1, #8
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e007      	b.n	800345e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2184      	movs	r1, #132	; 0x84
 8003458:	0209      	lsls	r1, r1, #8
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d104      	bne.n	8003470 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	491f      	ldr	r1, [pc, #124]	; (80034f8 <HAL_I2C_Init+0x128>)
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	491a      	ldr	r1, [pc, #104]	; (80034f4 <HAL_I2C_Init+0x124>)
 800348c:	400a      	ands	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	431a      	orrs	r2, r3
 800349a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69d9      	ldr	r1, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2241      	movs	r2, #65	; 0x41
 80034d4:	2120      	movs	r1, #32
 80034d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2242      	movs	r2, #66	; 0x42
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	f0ffffff 	.word	0xf0ffffff
 80034f4:	ffff7fff 	.word	0xffff7fff
 80034f8:	02008000 	.word	0x02008000

080034fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	0008      	movs	r0, r1
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	0019      	movs	r1, r3
 800350a:	230a      	movs	r3, #10
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	1c02      	adds	r2, r0, #0
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	2308      	movs	r3, #8
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	1c0a      	adds	r2, r1, #0
 8003518:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	d000      	beq.n	8003528 <HAL_I2C_Master_Transmit+0x2c>
 8003526:	e0e7      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Master_Transmit+0x3a>
 8003532:	2302      	movs	r3, #2
 8003534:	e0e1      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2240      	movs	r2, #64	; 0x40
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800353e:	f7fe fe07 	bl	8002150 <HAL_GetTick>
 8003542:	0003      	movs	r3, r0
 8003544:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	0219      	lsls	r1, r3, #8
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	f000 fa04 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0cc      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2241      	movs	r2, #65	; 0x41
 8003564:	2121      	movs	r1, #33	; 0x21
 8003566:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2242      	movs	r2, #66	; 0x42
 800356c:	2110      	movs	r1, #16
 800356e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2208      	movs	r2, #8
 8003580:	18ba      	adds	r2, r7, r2
 8003582:	8812      	ldrh	r2, [r2, #0]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2bff      	cmp	r3, #255	; 0xff
 8003594:	d911      	bls.n	80035ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	22ff      	movs	r2, #255	; 0xff
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	045c      	lsls	r4, r3, #17
 80035a6:	230a      	movs	r3, #10
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	8819      	ldrh	r1, [r3, #0]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	4b55      	ldr	r3, [pc, #340]	; (8003704 <HAL_I2C_Master_Transmit+0x208>)
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0023      	movs	r3, r4
 80035b4:	f000 fb74 	bl	8003ca0 <I2C_TransferConfig>
 80035b8:	e075      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	049c      	lsls	r4, r3, #18
 80035ce:	230a      	movs	r3, #10
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	8819      	ldrh	r1, [r3, #0]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_I2C_Master_Transmit+0x208>)
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	0023      	movs	r3, r4
 80035dc:	f000 fb60 	bl	8003ca0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035e0:	e061      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f9f8 	bl	80039de <I2C_WaitOnTXISFlagUntilTimeout>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e081      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03a      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x1aa>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d136      	bne.n	80036a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0013      	movs	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	f000 f98b 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e053      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2bff      	cmp	r3, #255	; 0xff
 800365a:	d911      	bls.n	8003680 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	045c      	lsls	r4, r3, #17
 800366c:	230a      	movs	r3, #10
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	8819      	ldrh	r1, [r3, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0023      	movs	r3, r4
 800367a:	f000 fb11 	bl	8003ca0 <I2C_TransferConfig>
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	b2da      	uxtb	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	049c      	lsls	r4, r3, #18
 8003694:	230a      	movs	r3, #10
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	8819      	ldrh	r1, [r3, #0]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	2300      	movs	r3, #0
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	0023      	movs	r3, r4
 80036a2:	f000 fafd 	bl	8003ca0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d198      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f9d0 	bl	8003a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01a      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2220      	movs	r2, #32
 80036ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	490c      	ldr	r1, [pc, #48]	; (8003708 <HAL_I2C_Master_Transmit+0x20c>)
 80036d8:	400a      	ands	r2, r1
 80036da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2241      	movs	r2, #65	; 0x41
 80036e0:	2120      	movs	r1, #32
 80036e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2242      	movs	r2, #66	; 0x42
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b007      	add	sp, #28
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	80002000 	.word	0x80002000
 8003708:	fe00e800 	.word	0xfe00e800

0800370c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	0008      	movs	r0, r1
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	0019      	movs	r1, r3
 800371a:	230a      	movs	r3, #10
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	1c02      	adds	r2, r0, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	2308      	movs	r3, #8
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	1c0a      	adds	r2, r1, #0
 8003728:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2241      	movs	r2, #65	; 0x41
 800372e:	5c9b      	ldrb	r3, [r3, r2]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	d000      	beq.n	8003738 <HAL_I2C_Master_Receive+0x2c>
 8003736:	e0e8      	b.n	800390a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Master_Receive+0x3a>
 8003742:	2302      	movs	r3, #2
 8003744:	e0e2      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374e:	f7fe fcff 	bl	8002150 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	0219      	lsls	r1, r3, #8
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2319      	movs	r3, #25
 8003762:	2201      	movs	r2, #1
 8003764:	f000 f8fc 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0cd      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2241      	movs	r2, #65	; 0x41
 8003774:	2122      	movs	r1, #34	; 0x22
 8003776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2242      	movs	r2, #66	; 0x42
 800377c:	2110      	movs	r1, #16
 800377e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2208      	movs	r2, #8
 8003790:	18ba      	adds	r2, r7, r2
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2bff      	cmp	r3, #255	; 0xff
 80037a4:	d911      	bls.n	80037ca <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	045c      	lsls	r4, r3, #17
 80037b6:	230a      	movs	r3, #10
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	8819      	ldrh	r1, [r3, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	4b55      	ldr	r3, [pc, #340]	; (8003914 <HAL_I2C_Master_Receive+0x208>)
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	0023      	movs	r3, r4
 80037c4:	f000 fa6c 	bl	8003ca0 <I2C_TransferConfig>
 80037c8:	e076      	b.n	80038b8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	049c      	lsls	r4, r3, #18
 80037de:	230a      	movs	r3, #10
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	8819      	ldrh	r1, [r3, #0]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_I2C_Master_Receive+0x208>)
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	0023      	movs	r3, r4
 80037ec:	f000 fa58 	bl	8003ca0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037f0:	e062      	b.n	80038b8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f96b 	bl	8003ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e082      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d03a      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x1ac>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d136      	bne.n	80038b8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800384a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	0013      	movs	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	f000 f882 	bl	8003960 <I2C_WaitOnFlagUntilTimeout>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e053      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	d911      	bls.n	8003892 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	045c      	lsls	r4, r3, #17
 800387e:	230a      	movs	r3, #10
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	8819      	ldrh	r1, [r3, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	0023      	movs	r3, r4
 800388c:	f000 fa08 	bl	8003ca0 <I2C_TransferConfig>
 8003890:	e012      	b.n	80038b8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	049c      	lsls	r4, r3, #18
 80038a6:	230a      	movs	r3, #10
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	8819      	ldrh	r1, [r3, #0]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	0023      	movs	r3, r4
 80038b4:	f000 f9f4 	bl	8003ca0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d197      	bne.n	80037f2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f8c7 	bl	8003a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e01a      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <HAL_I2C_Master_Receive+0x20c>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2241      	movs	r2, #65	; 0x41
 80038f2:	2120      	movs	r1, #32
 80038f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2242      	movs	r2, #66	; 0x42
 80038fa:	2100      	movs	r1, #0
 80038fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	2100      	movs	r1, #0
 8003904:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b007      	add	sp, #28
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	80002400 	.word	0x80002400
 8003918:	fe00e800 	.word	0xfe00e800

0800391c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d103      	bne.n	800393a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2201      	movs	r2, #1
 8003942:	4013      	ands	r3, r2
 8003944:	2b01      	cmp	r3, #1
 8003946:	d007      	beq.n	8003958 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2101      	movs	r1, #1
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
  }
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	e021      	b.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	d01e      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003978:	f7fe fbea 	bl	8002150 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d113      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	2220      	movs	r2, #32
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2241      	movs	r2, #65	; 0x41
 800399e:	2120      	movs	r1, #32
 80039a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2242      	movs	r2, #66	; 0x42
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	425a      	negs	r2, r3
 80039c6:	4153      	adcs	r3, r2
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	001a      	movs	r2, r3
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d0ce      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b004      	add	sp, #16
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ea:	e02b      	b.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f8da 	bl	8003bac <I2C_IsAcknowledgeFailed>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e029      	b.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	d01e      	beq.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe fba3 	bl	8002150 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d113      	bne.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	2220      	movs	r2, #32
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2242      	movs	r2, #66	; 0x42
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d1cc      	bne.n	80039ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a68:	e028      	b.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 f89b 	bl	8003bac <I2C_IsAcknowledgeFailed>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e026      	b.n	8003acc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fe fb67 	bl	8002150 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d113      	bne.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	2220      	movs	r2, #32
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2241      	movs	r2, #65	; 0x41
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2242      	movs	r2, #66	; 0x42
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d1cf      	bne.n	8003a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae0:	e055      	b.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 f85f 	bl	8003bac <I2C_IsAcknowledgeFailed>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e053      	b.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2220      	movs	r2, #32
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d129      	bne.n	8003b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d105      	bne.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e03f      	b.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2220      	movs	r2, #32
 8003b24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	491d      	ldr	r1, [pc, #116]	; (8003ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2241      	movs	r2, #65	; 0x41
 8003b40:	2120      	movs	r1, #32
 8003b42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2242      	movs	r2, #66	; 0x42
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e022      	b.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fe fafa 	bl	8002150 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	2220      	movs	r2, #32
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2241      	movs	r2, #65	; 0x41
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2240      	movs	r2, #64	; 0x40
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e007      	b.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2204      	movs	r2, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d1a2      	bne.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b004      	add	sp, #16
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	fe00e800 	.word	0xfe00e800

08003bac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d164      	bne.n	8003c90 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	049b      	lsls	r3, r3, #18
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	049b      	lsls	r3, r3, #18
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d02b      	beq.n	8003c32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	01c9      	lsls	r1, r1, #7
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bec:	e021      	b.n	8003c32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d01e      	beq.n	8003c32 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe faac 	bl	8002150 <HAL_GetTick>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <I2C_IsAcknowledgeFailed+0x5e>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	2220      	movs	r2, #32
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2241      	movs	r2, #65	; 0x41
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2242      	movs	r2, #66	; 0x42
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2240      	movs	r2, #64	; 0x40
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e02f      	b.n	8003c92 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d1d6      	bne.n	8003bee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2210      	movs	r2, #16
 8003c46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff fe62 	bl	800391c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	490e      	ldr	r1, [pc, #56]	; (8003c9c <I2C_IsAcknowledgeFailed+0xf0>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2241      	movs	r2, #65	; 0x41
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2242      	movs	r2, #66	; 0x42
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	fe00e800 	.word	0xfe00e800

08003ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	0008      	movs	r0, r1
 8003caa:	0011      	movs	r1, r2
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	240a      	movs	r4, #10
 8003cb0:	193b      	adds	r3, r7, r4
 8003cb2:	1c02      	adds	r2, r0, #0
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	2009      	movs	r0, #9
 8003cb8:	183b      	adds	r3, r7, r0
 8003cba:	1c0a      	adds	r2, r1, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	0d51      	lsrs	r1, r2, #21
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	00d2      	lsls	r2, r2, #3
 8003ccc:	400a      	ands	r2, r1
 8003cce:	490e      	ldr	r1, [pc, #56]	; (8003d08 <I2C_TransferConfig+0x68>)
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	43d2      	mvns	r2, r2
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	193b      	adds	r3, r7, r4
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	059b      	lsls	r3, r3, #22
 8003cde:	0d9a      	lsrs	r2, r3, #22
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	0418      	lsls	r0, r3, #16
 8003ce6:	23ff      	movs	r3, #255	; 0xff
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	4003      	ands	r3, r0
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b005      	add	sp, #20
 8003d04:	bd90      	pop	{r4, r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	03ff63ff 	.word	0x03ff63ff

08003d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2241      	movs	r2, #65	; 0x41
 8003d1a:	5c9b      	ldrb	r3, [r3, r2]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d138      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2240      	movs	r2, #64	; 0x40
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e032      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	2101      	movs	r1, #1
 8003d36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2241      	movs	r2, #65	; 0x41
 8003d3c:	2124      	movs	r1, #36	; 0x24
 8003d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4911      	ldr	r1, [pc, #68]	; (8003da0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2241      	movs	r2, #65	; 0x41
 8003d84:	2120      	movs	r1, #32
 8003d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2240      	movs	r2, #64	; 0x40
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	ffffefff 	.word	0xffffefff

08003da4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2241      	movs	r2, #65	; 0x41
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d139      	bne.n	8003e2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	5c9b      	ldrb	r3, [r3, r2]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e033      	b.n	8003e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	2101      	movs	r1, #1
 8003dce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2241      	movs	r2, #65	; 0x41
 8003dd4:	2124      	movs	r1, #36	; 0x24
 8003dd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2101      	movs	r1, #1
 8003de4:	438a      	bics	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2241      	movs	r2, #65	; 0x41
 8003e1e:	2120      	movs	r1, #32
 8003e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2240      	movs	r2, #64	; 0x40
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b004      	add	sp, #16
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	fffff0ff 	.word	0xfffff0ff

08003e3c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	000a      	movs	r2, r1
 8003e46:	1cfb      	adds	r3, r7, #3
 8003e48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <HAL_PWR_EnterSTOPMode+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4393      	bics	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_PWR_EnterSTOPMode+0x60>)
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e70:	2104      	movs	r1, #4
 8003e72:	430a      	orrs	r2, r1
 8003e74:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e76:	1cfb      	adds	r3, r7, #3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e7e:	bf30      	wfi
 8003e80:	e002      	b.n	8003e88 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e82:	bf40      	sev
    __WFE();
 8003e84:	bf20      	wfe
    __WFE();
 8003e86:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e8e:	2104      	movs	r1, #4
 8003e90:	438a      	bics	r2, r1
 8003e92:	611a      	str	r2, [r3, #16]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e301      	b.n	80044ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x1e>
 8003ec0:	e08d      	b.n	8003fde <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ec2:	4bc3      	ldr	r3, [pc, #780]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00e      	beq.n	8003eec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ece:	4bc0      	ldr	r3, [pc, #768]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d116      	bne.n	8003f08 <HAL_RCC_OscConfig+0x64>
 8003eda:	4bbd      	ldr	r3, [pc, #756]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	025b      	lsls	r3, r3, #9
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	025b      	lsls	r3, r3, #9
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	4bb8      	ldr	r3, [pc, #736]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d100      	bne.n	8003efa <HAL_RCC_OscConfig+0x56>
 8003ef8:	e070      	b.n	8003fdc <HAL_RCC_OscConfig+0x138>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d000      	beq.n	8003f04 <HAL_RCC_OscConfig+0x60>
 8003f02:	e06b      	b.n	8003fdc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e2d8      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x7c>
 8003f10:	4baf      	ldr	r3, [pc, #700]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4bae      	ldr	r3, [pc, #696]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0249      	lsls	r1, r1, #9
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e02f      	b.n	8003f80 <HAL_RCC_OscConfig+0xdc>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCC_OscConfig+0x9e>
 8003f28:	4ba9      	ldr	r3, [pc, #676]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4ba8      	ldr	r3, [pc, #672]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	49a9      	ldr	r1, [pc, #676]	; (80041d4 <HAL_RCC_OscConfig+0x330>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	4ba6      	ldr	r3, [pc, #664]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4ba5      	ldr	r3, [pc, #660]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f3a:	49a7      	ldr	r1, [pc, #668]	; (80041d8 <HAL_RCC_OscConfig+0x334>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e01e      	b.n	8003f80 <HAL_RCC_OscConfig+0xdc>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d10e      	bne.n	8003f68 <HAL_RCC_OscConfig+0xc4>
 8003f4a:	4ba1      	ldr	r3, [pc, #644]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4ba0      	ldr	r3, [pc, #640]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	02c9      	lsls	r1, r1, #11
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b9d      	ldr	r3, [pc, #628]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b9c      	ldr	r3, [pc, #624]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	0249      	lsls	r1, r1, #9
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xdc>
 8003f68:	4b99      	ldr	r3, [pc, #612]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b98      	ldr	r3, [pc, #608]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	4999      	ldr	r1, [pc, #612]	; (80041d4 <HAL_RCC_OscConfig+0x330>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b96      	ldr	r3, [pc, #600]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003f7a:	4997      	ldr	r1, [pc, #604]	; (80041d8 <HAL_RCC_OscConfig+0x334>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d014      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe f8e2 	bl	8002150 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f92:	f7fe f8dd 	bl	8002150 <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	; 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e28a      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa4:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0xee>
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe f8cd 	bl	8002150 <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe f8c8 	bl	8002150 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e275      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x118>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_RCC_OscConfig+0x146>
 8003fe8:	e069      	b.n	80040be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fea:	4b79      	ldr	r3, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	220c      	movs	r2, #12
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00b      	beq.n	800400c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ff4:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d11c      	bne.n	800403a <HAL_RCC_OscConfig+0x196>
 8004000:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	025b      	lsls	r3, r3, #9
 8004008:	4013      	ands	r3, r2
 800400a:	d116      	bne.n	800403a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400c:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2202      	movs	r2, #2
 8004012:	4013      	ands	r3, r2
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e24b      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	22f8      	movs	r2, #248	; 0xf8
 8004028:	4393      	bics	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00da      	lsls	r2, r3, #3
 8004032:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004038:	e041      	b.n	80040be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d024      	beq.n	800408c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004042:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004048:	2101      	movs	r1, #1
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fe f87f 	bl	8002150 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe f87a 	bl	8002150 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e227      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2202      	movs	r2, #2
 8004070:	4013      	ands	r3, r2
 8004072:	d0f1      	beq.n	8004058 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b56      	ldr	r3, [pc, #344]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	22f8      	movs	r2, #248	; 0xf8
 800407a:	4393      	bics	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00da      	lsls	r2, r3, #3
 8004084:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e018      	b.n	80040be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fe f85a 	bl	8002150 <HAL_GetTick>
 800409c:	0003      	movs	r3, r0
 800409e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a2:	f7fe f855 	bl	8002150 <HAL_GetTick>
 80040a6:	0002      	movs	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e202      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b4:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	d1f1      	bne.n	80040a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2208      	movs	r2, #8
 80040c4:	4013      	ands	r3, r2
 80040c6:	d036      	beq.n	8004136 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d019      	beq.n	8004104 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d0:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80040d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	2101      	movs	r1, #1
 80040d8:	430a      	orrs	r2, r1
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040dc:	f7fe f838 	bl	8002150 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fe f833 	bl	8002150 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1e0      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2202      	movs	r2, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	d0f1      	beq.n	80040e6 <HAL_RCC_OscConfig+0x242>
 8004102:	e018      	b.n	8004136 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004108:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800410a:	2101      	movs	r1, #1
 800410c:	438a      	bics	r2, r1
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7fe f81e 	bl	8002150 <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7fe f819 	bl	8002150 <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1c6      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2202      	movs	r2, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d1f1      	bne.n	800411a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2204      	movs	r2, #4
 800413c:	4013      	ands	r3, r2
 800413e:	d100      	bne.n	8004142 <HAL_RCC_OscConfig+0x29e>
 8004140:	e0b4      	b.n	80042ac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	201f      	movs	r0, #31
 8004144:	183b      	adds	r3, r7, r0
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	055b      	lsls	r3, r3, #21
 8004152:	4013      	ands	r3, r2
 8004154:	d110      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0549      	lsls	r1, r1, #21
 8004160:	430a      	orrs	r2, r1
 8004162:	61da      	str	r2, [r3, #28]
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	055b      	lsls	r3, r3, #21
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004172:	183b      	adds	r3, r7, r0
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	4b18      	ldr	r3, [pc, #96]	; (80041dc <HAL_RCC_OscConfig+0x338>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4013      	ands	r3, r2
 8004182:	d11a      	bne.n	80041ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCC_OscConfig+0x338>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_RCC_OscConfig+0x338>)
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	0049      	lsls	r1, r1, #1
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004192:	f7fd ffdd 	bl	8002150 <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419c:	f7fd ffd8 	bl	8002150 <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e185      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_OscConfig+0x338>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCC_OscConfig+0x33c>
 80041c2:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	4b02      	ldr	r3, [pc, #8]	; (80041d0 <HAL_RCC_OscConfig+0x32c>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	430a      	orrs	r2, r1
 80041cc:	621a      	str	r2, [r3, #32]
 80041ce:	e035      	b.n	800423c <HAL_RCC_OscConfig+0x398>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	fffeffff 	.word	0xfffeffff
 80041d8:	fffbffff 	.word	0xfffbffff
 80041dc:	40007000 	.word	0x40007000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0x35e>
 80041e8:	4bb6      	ldr	r3, [pc, #728]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	4bb5      	ldr	r3, [pc, #724]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	621a      	str	r2, [r3, #32]
 80041f4:	4bb3      	ldr	r3, [pc, #716]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	4bb2      	ldr	r3, [pc, #712]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80041fa:	2104      	movs	r1, #4
 80041fc:	438a      	bics	r2, r1
 80041fe:	621a      	str	r2, [r3, #32]
 8004200:	e01c      	b.n	800423c <HAL_RCC_OscConfig+0x398>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x380>
 800420a:	4bae      	ldr	r3, [pc, #696]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	4bad      	ldr	r3, [pc, #692]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004210:	2104      	movs	r1, #4
 8004212:	430a      	orrs	r2, r1
 8004214:	621a      	str	r2, [r3, #32]
 8004216:	4bab      	ldr	r3, [pc, #684]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	4baa      	ldr	r3, [pc, #680]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800421c:	2101      	movs	r1, #1
 800421e:	430a      	orrs	r2, r1
 8004220:	621a      	str	r2, [r3, #32]
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0x398>
 8004224:	4ba7      	ldr	r3, [pc, #668]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800422a:	2101      	movs	r1, #1
 800422c:	438a      	bics	r2, r1
 800422e:	621a      	str	r2, [r3, #32]
 8004230:	4ba4      	ldr	r3, [pc, #656]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	4ba3      	ldr	r3, [pc, #652]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004236:	2104      	movs	r1, #4
 8004238:	438a      	bics	r2, r1
 800423a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d014      	beq.n	800426e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004244:	f7fd ff84 	bl	8002150 <HAL_GetTick>
 8004248:	0003      	movs	r3, r0
 800424a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e009      	b.n	8004262 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd ff7f 	bl	8002150 <HAL_GetTick>
 8004252:	0002      	movs	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	4a9b      	ldr	r2, [pc, #620]	; (80044c8 <HAL_RCC_OscConfig+0x624>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e12b      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b98      	ldr	r3, [pc, #608]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x3aa>
 800426c:	e013      	b.n	8004296 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fd ff6f 	bl	8002150 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004276:	e009      	b.n	800428c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd ff6a 	bl	8002150 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	4a91      	ldr	r2, [pc, #580]	; (80044c8 <HAL_RCC_OscConfig+0x624>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e116      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	4b8d      	ldr	r3, [pc, #564]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004296:	231f      	movs	r3, #31
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	4b87      	ldr	r3, [pc, #540]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042a6:	4989      	ldr	r1, [pc, #548]	; (80044cc <HAL_RCC_OscConfig+0x628>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2210      	movs	r2, #16
 80042b2:	4013      	ands	r3, r2
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12a      	bne.n	8004314 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042be:	4b81      	ldr	r3, [pc, #516]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c2:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042c4:	2104      	movs	r1, #4
 80042c6:	430a      	orrs	r2, r1
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042ca:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	4b7d      	ldr	r3, [pc, #500]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	430a      	orrs	r2, r1
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fd ff3b 	bl	8002150 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042e0:	f7fd ff36 	bl	8002150 <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0e3      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042f2:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	2202      	movs	r2, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	d0f1      	beq.n	80042e0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042fc:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	22f8      	movs	r2, #248	; 0xf8
 8004302:	4393      	bics	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	00da      	lsls	r2, r3, #3
 800430c:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800430e:	430a      	orrs	r2, r1
 8004310:	635a      	str	r2, [r3, #52]	; 0x34
 8004312:	e034      	b.n	800437e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	3305      	adds	r3, #5
 800431a:	d111      	bne.n	8004340 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800431c:	4b69      	ldr	r3, [pc, #420]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004322:	2104      	movs	r1, #4
 8004324:	438a      	bics	r2, r1
 8004326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	22f8      	movs	r2, #248	; 0xf8
 800432e:	4393      	bics	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800433a:	430a      	orrs	r2, r1
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
 800433e:	e01e      	b.n	800437e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004340:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004346:	2104      	movs	r1, #4
 8004348:	430a      	orrs	r2, r1
 800434a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800434c:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800434e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004350:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004352:	2101      	movs	r1, #1
 8004354:	438a      	bics	r2, r1
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fd fefa 	bl	8002150 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004362:	f7fd fef5 	bl	8002150 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e0a2      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	2202      	movs	r2, #2
 800437a:	4013      	ands	r3, r2
 800437c:	d1f1      	bne.n	8004362 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d100      	bne.n	8004388 <HAL_RCC_OscConfig+0x4e4>
 8004386:	e097      	b.n	80044b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004388:	4b4e      	ldr	r3, [pc, #312]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	220c      	movs	r2, #12
 800438e:	4013      	ands	r3, r2
 8004390:	2b08      	cmp	r3, #8
 8004392:	d100      	bne.n	8004396 <HAL_RCC_OscConfig+0x4f2>
 8004394:	e06b      	b.n	800446e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d14c      	bne.n	8004438 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b48      	ldr	r3, [pc, #288]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043a4:	494a      	ldr	r1, [pc, #296]	; (80044d0 <HAL_RCC_OscConfig+0x62c>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fd fed1 	bl	8002150 <HAL_GetTick>
 80043ae:	0003      	movs	r3, r0
 80043b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fd fecc 	bl	8002150 <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e079      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	049b      	lsls	r3, r3, #18
 80043ce:	4013      	ands	r3, r2
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	220f      	movs	r2, #15
 80043d8:	4393      	bics	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043e2:	430a      	orrs	r2, r1
 80043e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4a3a      	ldr	r2, [pc, #232]	; (80044d4 <HAL_RCC_OscConfig+0x630>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	431a      	orrs	r2, r3
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004406:	2180      	movs	r1, #128	; 0x80
 8004408:	0449      	lsls	r1, r1, #17
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fd fe9f 	bl	8002150 <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd fe9a 	bl	8002150 <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e047      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	049b      	lsls	r3, r3, #18
 8004432:	4013      	ands	r3, r2
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x574>
 8004436:	e03f      	b.n	80044b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800443e:	4924      	ldr	r1, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x62c>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fe84 	bl	8002150 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fd fe7f 	bl	8002150 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e02c      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	049b      	lsls	r3, r3, #18
 8004468:	4013      	ands	r3, r2
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x5aa>
 800446c:	e024      	b.n	80044b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01f      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x620>)
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	401a      	ands	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	429a      	cmp	r2, r3
 8004494:	d10e      	bne.n	80044b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	220f      	movs	r2, #15
 800449a:	401a      	ands	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	23f0      	movs	r3, #240	; 0xf0
 80044a8:	039b      	lsls	r3, r3, #14
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b008      	add	sp, #32
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	40021000 	.word	0x40021000
 80044c8:	00001388 	.word	0x00001388
 80044cc:	efffffff 	.word	0xefffffff
 80044d0:	feffffff 	.word	0xfeffffff
 80044d4:	ffc2ffff 	.word	0xffc2ffff

080044d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b3      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044ec:	4b5b      	ldr	r3, [pc, #364]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d911      	bls.n	800451e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b58      	ldr	r3, [pc, #352]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	4393      	bics	r3, r2
 8004502:	0019      	movs	r1, r3
 8004504:	4b55      	ldr	r3, [pc, #340]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e09a      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	d015      	beq.n	8004554 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2204      	movs	r2, #4
 800452e:	4013      	ands	r3, r2
 8004530:	d006      	beq.n	8004540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004532:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004538:	21e0      	movs	r1, #224	; 0xe0
 800453a:	00c9      	lsls	r1, r1, #3
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004540:	4b47      	ldr	r3, [pc, #284]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	22f0      	movs	r2, #240	; 0xf0
 8004546:	4393      	bics	r3, r2
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	4b44      	ldr	r3, [pc, #272]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	4b3e      	ldr	r3, [pc, #248]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	029b      	lsls	r3, r3, #10
 800456e:	4013      	ands	r3, r2
 8004570:	d114      	bne.n	800459c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06e      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	049b      	lsls	r3, r3, #18
 8004586:	4013      	ands	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e062      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2202      	movs	r2, #2
 8004594:	4013      	ands	r3, r2
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e05b      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2203      	movs	r2, #3
 80045a2:	4393      	bics	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b0:	f7fd fdce 	bl	8002150 <HAL_GetTick>
 80045b4:	0003      	movs	r3, r0
 80045b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b8:	e009      	b.n	80045ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ba:	f7fd fdc9 	bl	8002150 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	4a27      	ldr	r2, [pc, #156]	; (8004664 <HAL_RCC_ClockConfig+0x18c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e042      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	220c      	movs	r2, #12
 80045d4:	401a      	ands	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ec      	bne.n	80045ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d211      	bcs.n	8004612 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4393      	bics	r3, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x184>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e020      	b.n	8004654 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2204      	movs	r2, #4
 8004618:	4013      	ands	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_RCC_ClockConfig+0x190>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004630:	f000 f820 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004634:	0001      	movs	r1, r0
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x188>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	220f      	movs	r2, #15
 800463e:	4013      	ands	r3, r2
 8004640:	4a0a      	ldr	r2, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x194>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	000a      	movs	r2, r1
 8004646:	40da      	lsrs	r2, r3
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x198>)
 800464a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800464c:	2003      	movs	r0, #3
 800464e:	f7fd fd39 	bl	80020c4 <HAL_InitTick>
  
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b004      	add	sp, #16
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40022000 	.word	0x40022000
 8004660:	40021000 	.word	0x40021000
 8004664:	00001388 	.word	0x00001388
 8004668:	fffff8ff 	.word	0xfffff8ff
 800466c:	080077f0 	.word	0x080077f0
 8004670:	20000028 	.word	0x20000028

08004674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b08f      	sub	sp, #60	; 0x3c
 8004678:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800467a:	2314      	movs	r3, #20
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004682:	c313      	stmia	r3!, {r0, r1, r4}
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_RCC_GetSysClockFreq+0xbc>)
 800468c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800468e:	c313      	stmia	r3!, {r0, r1, r4}
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	2300      	movs	r3, #0
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	2300      	movs	r3, #0
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046a8:	4b22      	ldr	r3, [pc, #136]	; (8004734 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	220c      	movs	r2, #12
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d002      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x4a>
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d003      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x50>
 80046bc:	e02d      	b.n	800471a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046c2:	e02d      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	0c9b      	lsrs	r3, r3, #18
 80046c8:	220f      	movs	r2, #15
 80046ca:	4013      	ands	r3, r2
 80046cc:	2214      	movs	r2, #20
 80046ce:	18ba      	adds	r2, r7, r2
 80046d0:	5cd3      	ldrb	r3, [r2, r3]
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046d4:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	220f      	movs	r2, #15
 80046da:	4013      	ands	r3, r2
 80046dc:	1d3a      	adds	r2, r7, #4
 80046de:	5cd3      	ldrb	r3, [r2, r3]
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	4013      	ands	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ee:	4812      	ldr	r0, [pc, #72]	; (8004738 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046f0:	f7fb fd0a 	bl	8000108 <__udivsi3>
 80046f4:	0003      	movs	r3, r0
 80046f6:	001a      	movs	r2, r3
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	4353      	muls	r3, r2
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	e009      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004702:	000a      	movs	r2, r1
 8004704:	0152      	lsls	r2, r2, #5
 8004706:	1a52      	subs	r2, r2, r1
 8004708:	0193      	lsls	r3, r2, #6
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	185b      	adds	r3, r3, r1
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004718:	e002      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCC_GetSysClockFreq+0xc4>)
 800471c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800471e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b00f      	add	sp, #60	; 0x3c
 8004728:	bd90      	pop	{r4, r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	08007744 	.word	0x08007744
 8004730:	08007754 	.word	0x08007754
 8004734:	40021000 	.word	0x40021000
 8004738:	007a1200 	.word	0x007a1200

0800473c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <HAL_RCC_GetHCLKFreq+0x10>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	20000028 	.word	0x20000028

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004754:	f7ff fff2 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8004758:	0001      	movs	r1, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	2207      	movs	r2, #7
 8004762:	4013      	ands	r3, r2
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	40d9      	lsrs	r1, r3
 800476a:	000b      	movs	r3, r1
}    
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	40021000 	.word	0x40021000
 8004778:	08007800 	.word	0x08007800

0800477c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	025b      	lsls	r3, r3, #9
 8004794:	4013      	ands	r3, r2
 8004796:	d100      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004798:	e08e      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2017      	movs	r0, #23
 800479c:	183b      	adds	r3, r7, r0
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b5f      	ldr	r3, [pc, #380]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	055b      	lsls	r3, r3, #21
 80047aa:	4013      	ands	r3, r2
 80047ac:	d110      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b5c      	ldr	r3, [pc, #368]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	4b5b      	ldr	r3, [pc, #364]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	0549      	lsls	r1, r1, #21
 80047b8:	430a      	orrs	r2, r1
 80047ba:	61da      	str	r2, [r3, #28]
 80047bc:	4b58      	ldr	r3, [pc, #352]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	055b      	lsls	r3, r3, #21
 80047c4:	4013      	ands	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d0:	4b54      	ldr	r3, [pc, #336]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	d11a      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047dc:	4b51      	ldr	r3, [pc, #324]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	0049      	lsls	r1, r1, #1
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fcb1 	bl	8002150 <HAL_GetTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	e008      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fd fcac 	bl	8002150 <HAL_GetTick>
 80047f8:	0002      	movs	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e087      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4013      	ands	r3, r2
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004812:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	23c0      	movs	r3, #192	; 0xc0
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4013      	ands	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d034      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	23c0      	movs	r3, #192	; 0xc0
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4013      	ands	r3, r2
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d02c      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004834:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800483a:	4013      	ands	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800483e:	4b38      	ldr	r3, [pc, #224]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0249      	lsls	r1, r1, #9
 8004848:	430a      	orrs	r2, r1
 800484a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800484c:	4b34      	ldr	r3, [pc, #208]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004852:	4936      	ldr	r1, [pc, #216]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004854:	400a      	ands	r2, r1
 8004856:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	4013      	ands	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fd fc73 	bl	8002150 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	e009      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd fc6e 	bl	8002150 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a2d      	ldr	r2, [pc, #180]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e048      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	4b26      	ldr	r3, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	2202      	movs	r2, #2
 800488a:	4013      	ands	r3, r2
 800488c:	d0f0      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800489e:	430a      	orrs	r2, r1
 80048a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048a2:	2317      	movs	r3, #23
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ac:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048b2:	4920      	ldr	r1, [pc, #128]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	4013      	ands	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	2203      	movs	r2, #3
 80048c8:	4393      	bics	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048d2:	430a      	orrs	r2, r1
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2220      	movs	r2, #32
 80048dc:	4013      	ands	r3, r2
 80048de:	d009      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	2210      	movs	r2, #16
 80048e6:	4393      	bics	r3, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f0:	430a      	orrs	r2, r1
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4013      	ands	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2240      	movs	r2, #64	; 0x40
 8004906:	4393      	bics	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004910:	430a      	orrs	r2, r1
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	0018      	movs	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	b006      	add	sp, #24
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
 8004928:	fffffcff 	.word	0xfffffcff
 800492c:	fffeffff 	.word	0xfffeffff
 8004930:	00001388 	.word	0x00001388
 8004934:	efffffff 	.word	0xefffffff

08004938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e0a8      	b.n	8004a9c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	2382      	movs	r3, #130	; 0x82
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	429a      	cmp	r2, r3
 800495c:	d009      	beq.n	8004972 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	61da      	str	r2, [r3, #28]
 8004964:	e005      	b.n	8004972 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	225d      	movs	r2, #93	; 0x5d
 800497c:	5c9b      	ldrb	r3, [r3, r2]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	225c      	movs	r2, #92	; 0x5c
 8004988:	2100      	movs	r1, #0
 800498a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f7fd f96a 	bl	8001c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	225d      	movs	r2, #93	; 0x5d
 8004998:	2102      	movs	r1, #2
 800499a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2140      	movs	r1, #64	; 0x40
 80049a8:	438a      	bics	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	23e0      	movs	r3, #224	; 0xe0
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d902      	bls.n	80049be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e002      	b.n	80049c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	015b      	lsls	r3, r3, #5
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	23f0      	movs	r3, #240	; 0xf0
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d008      	beq.n	80049e2 <HAL_SPI_Init+0xaa>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	23e0      	movs	r3, #224	; 0xe0
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	429a      	cmp	r2, r3
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	2382      	movs	r3, #130	; 0x82
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	401a      	ands	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	2384      	movs	r3, #132	; 0x84
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	400b      	ands	r3, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2102      	movs	r1, #2
 80049fe:	400b      	ands	r3, r1
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2101      	movs	r1, #1
 8004a08:	400b      	ands	r3, r1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6999      	ldr	r1, [r3, #24]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	400b      	ands	r3, r1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2138      	movs	r1, #56	; 0x38
 8004a1e:	400b      	ands	r3, r1
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	400b      	ands	r3, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	401a      	ands	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	2204      	movs	r2, #4
 8004a48:	401a      	ands	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2110      	movs	r1, #16
 8004a50:	400b      	ands	r3, r1
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	2108      	movs	r1, #8
 8004a5a:	400b      	ands	r3, r1
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68d9      	ldr	r1, [r3, #12]
 8004a62:	23f0      	movs	r3, #240	; 0xf0
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	400b      	ands	r3, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	015b      	lsls	r3, r3, #5
 8004a72:	401a      	ands	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4907      	ldr	r1, [pc, #28]	; (8004aa4 <HAL_SPI_Init+0x16c>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	225d      	movs	r2, #93	; 0x5d
 8004a96:	2101      	movs	r1, #1
 8004a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	fffff7ff 	.word	0xfffff7ff

08004aa8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	1dbb      	adds	r3, r7, #6
 8004ab6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab8:	231f      	movs	r3, #31
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	225c      	movs	r2, #92	; 0x5c
 8004ac4:	5c9b      	ldrb	r3, [r3, r2]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Transmit+0x26>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e140      	b.n	8004d50 <HAL_SPI_Transmit+0x2a8>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	225c      	movs	r2, #92	; 0x5c
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ad6:	f7fd fb3b 	bl	8002150 <HAL_GetTick>
 8004ada:	0003      	movs	r3, r0
 8004adc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ade:	2316      	movs	r3, #22
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	1dba      	adds	r2, r7, #6
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	225d      	movs	r2, #93	; 0x5d
 8004aec:	5c9b      	ldrb	r3, [r3, r2]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d004      	beq.n	8004afe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004af4:	231f      	movs	r3, #31
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	2202      	movs	r2, #2
 8004afa:	701a      	strb	r2, [r3, #0]
    goto error;
 8004afc:	e11d      	b.n	8004d3a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_SPI_Transmit+0x64>
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004b0c:	231f      	movs	r3, #31
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2201      	movs	r2, #1
 8004b12:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b14:	e111      	b.n	8004d3a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	225d      	movs	r2, #93	; 0x5d
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1dba      	adds	r2, r7, #6
 8004b2e:	8812      	ldrh	r2, [r2, #0]
 8004b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1dba      	adds	r2, r7, #6
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2244      	movs	r2, #68	; 0x44
 8004b44:	2100      	movs	r1, #0
 8004b46:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2246      	movs	r2, #70	; 0x46
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d110      	bne.n	8004b8a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2140      	movs	r1, #64	; 0x40
 8004b74:	438a      	bics	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	01c9      	lsls	r1, r1, #7
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2240      	movs	r2, #64	; 0x40
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d007      	beq.n	8004ba8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2140      	movs	r1, #64	; 0x40
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	23e0      	movs	r3, #224	; 0xe0
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d94e      	bls.n	8004c52 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_SPI_Transmit+0x11e>
 8004bbc:	2316      	movs	r3, #22
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d13f      	bne.n	8004c46 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bea:	e02c      	b.n	8004c46 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d112      	bne.n	8004c20 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	881a      	ldrh	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c1e:	e012      	b.n	8004c46 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c20:	f7fd fa96 	bl	8002150 <HAL_GetTick>
 8004c24:	0002      	movs	r2, r0
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d802      	bhi.n	8004c36 <HAL_SPI_Transmit+0x18e>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_Transmit+0x194>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004c3c:	231f      	movs	r3, #31
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2203      	movs	r2, #3
 8004c42:	701a      	strb	r2, [r3, #0]
          goto error;
 8004c44:	e079      	b.n	8004d3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1cd      	bne.n	8004bec <HAL_SPI_Transmit+0x144>
 8004c50:	e04f      	b.n	8004cf2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <HAL_SPI_Transmit+0x1bc>
 8004c5a:	2316      	movs	r3, #22
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d141      	bne.n	8004ce8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004c8a:	e02d      	b.n	8004ce8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2202      	movs	r2, #2
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d113      	bne.n	8004cc2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc0:	e012      	b.n	8004ce8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc2:	f7fd fa45 	bl	8002150 <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d802      	bhi.n	8004cd8 <HAL_SPI_Transmit+0x230>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_Transmit+0x236>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004cde:	231f      	movs	r3, #31
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ce6:	e028      	b.n	8004d3a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1cc      	bne.n	8004c8c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f95d 	bl	8004fb8 <SPI_EndRxTxTransaction>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004d2e:	231f      	movs	r3, #31
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <HAL_SPI_Transmit+0x292>
  }

error:
 8004d38:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	225d      	movs	r2, #93	; 0x5d
 8004d3e:	2101      	movs	r1, #1
 8004d40:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	225c      	movs	r2, #92	; 0x5c
 8004d46:	2100      	movs	r1, #0
 8004d48:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004d4a:	231f      	movs	r3, #31
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b008      	add	sp, #32
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	1dfb      	adds	r3, r7, #7
 8004d66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d68:	f7fd f9f2 	bl	8002150 <HAL_GetTick>
 8004d6c:	0002      	movs	r2, r0
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	18d3      	adds	r3, r2, r3
 8004d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d78:	f7fd f9ea 	bl	8002150 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d80:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	015b      	lsls	r3, r3, #5
 8004d86:	0d1b      	lsrs	r3, r3, #20
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	4353      	muls	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8e:	e058      	b.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	d055      	beq.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d96:	f7fd f9db 	bl	8002150 <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d902      	bls.n	8004dac <SPI_WaitFlagStateUntilTimeout+0x54>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d142      	bne.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	21e0      	movs	r1, #224	; 0xe0
 8004db8:	438a      	bics	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	2382      	movs	r3, #130	; 0x82
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d113      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d005      	beq.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d107      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2140      	movs	r1, #64	; 0x40
 8004dec:	438a      	bics	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	019b      	lsls	r3, r3, #6
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d110      	bne.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	491a      	ldr	r1, [pc, #104]	; (8004e70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004e08:	400a      	ands	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	0189      	lsls	r1, r1, #6
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	225d      	movs	r2, #93	; 0x5d
 8004e22:	2101      	movs	r1, #1
 8004e24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	225c      	movs	r2, #92	; 0x5c
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e017      	b.n	8004e62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	425a      	negs	r2, r3
 8004e52:	4153      	adcs	r3, r2
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	001a      	movs	r2, r3
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d197      	bne.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b008      	add	sp, #32
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000028 	.word	0x20000028
 8004e70:	ffffdfff 	.word	0xffffdfff

08004e74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e82:	2317      	movs	r3, #23
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e8a:	f7fd f961 	bl	8002150 <HAL_GetTick>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e9a:	f7fd f959 	bl	8002150 <HAL_GetTick>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	0013      	movs	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	00da      	lsls	r2, r3, #3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	0d1b      	lsrs	r3, r3, #20
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	4353      	muls	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ec0:	e068      	b.n	8004f94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	23c0      	movs	r3, #192	; 0xc0
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10a      	bne.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	2117      	movs	r1, #23
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	d055      	beq.n	8004f94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee8:	f7fd f932 	bl	8002150 <HAL_GetTick>
 8004eec:	0002      	movs	r2, r0
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d902      	bls.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d142      	bne.n	8004f84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	21e0      	movs	r1, #224	; 0xe0
 8004f0a:	438a      	bics	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	2382      	movs	r3, #130	; 0x82
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d113      	bne.n	8004f42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d005      	beq.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d107      	bne.n	8004f42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2140      	movs	r1, #64	; 0x40
 8004f3e:	438a      	bics	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	019b      	lsls	r3, r3, #6
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d110      	bne.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	0189      	lsls	r1, r1, #6
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	225d      	movs	r2, #93	; 0x5d
 8004f74:	2101      	movs	r1, #1
 8004f76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	225c      	movs	r2, #92	; 0x5c
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e010      	b.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d18e      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b00a      	add	sp, #40	; 0x28
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20000028 	.word	0x20000028
 8004fb4:	ffffdfff 	.word	0xffffdfff

08004fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	23c0      	movs	r3, #192	; 0xc0
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	0013      	movs	r3, r2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f7ff ff4e 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d007      	beq.n	8004fec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e027      	b.n	800503c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	f7ff fead 	bl	8004d58 <SPI_WaitFlagStateUntilTimeout>
 8004ffe:	1e03      	subs	r3, r0, #0
 8005000:	d007      	beq.n	8005012 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005006:	2220      	movs	r2, #32
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e014      	b.n	800503c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	23c0      	movs	r3, #192	; 0xc0
 8005016:	00d9      	lsls	r1, r3, #3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	0013      	movs	r3, r2
 8005020:	2200      	movs	r2, #0
 8005022:	f7ff ff27 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 8005026:	1e03      	subs	r3, r0, #0
 8005028:	d007      	beq.n	800503a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502e:	2220      	movs	r2, #32
 8005030:	431a      	orrs	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e000      	b.n	800503c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b004      	add	sp, #16
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e042      	b.n	80050dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	223d      	movs	r2, #61	; 0x3d
 800505a:	5c9b      	ldrb	r3, [r3, r2]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	223c      	movs	r2, #60	; 0x3c
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fc fe83 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223d      	movs	r2, #61	; 0x3d
 8005076:	2102      	movs	r1, #2
 8005078:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	0019      	movs	r1, r3
 8005084:	0010      	movs	r0, r2
 8005086:	f000 fc55 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2246      	movs	r2, #70	; 0x46
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	223e      	movs	r2, #62	; 0x3e
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	223f      	movs	r2, #63	; 0x3f
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2240      	movs	r2, #64	; 0x40
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2241      	movs	r2, #65	; 0x41
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2242      	movs	r2, #66	; 0x42
 80050b6:	2101      	movs	r1, #1
 80050b8:	5499      	strb	r1, [r3, r2]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2243      	movs	r2, #67	; 0x43
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2244      	movs	r2, #68	; 0x44
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2245      	movs	r2, #69	; 0x45
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223d      	movs	r2, #61	; 0x3d
 80050d6:	2101      	movs	r1, #1
 80050d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	230f      	movs	r3, #15
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d108      	bne.n	800510e <HAL_TIM_OC_Start_IT+0x2a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	223e      	movs	r2, #62	; 0x3e
 8005100:	5c9b      	ldrb	r3, [r3, r2]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	4193      	sbcs	r3, r2
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e01f      	b.n	800514e <HAL_TIM_OC_Start_IT+0x6a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d108      	bne.n	8005126 <HAL_TIM_OC_Start_IT+0x42>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	223f      	movs	r2, #63	; 0x3f
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	4193      	sbcs	r3, r2
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e013      	b.n	800514e <HAL_TIM_OC_Start_IT+0x6a>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d108      	bne.n	800513e <HAL_TIM_OC_Start_IT+0x5a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	4193      	sbcs	r3, r2
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e007      	b.n	800514e <HAL_TIM_OC_Start_IT+0x6a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2241      	movs	r2, #65	; 0x41
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	4193      	sbcs	r3, r2
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0b7      	b.n	80052c6 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_TIM_OC_Start_IT+0x82>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	223e      	movs	r2, #62	; 0x3e
 8005160:	2102      	movs	r1, #2
 8005162:	5499      	strb	r1, [r3, r2]
 8005164:	e013      	b.n	800518e <HAL_TIM_OC_Start_IT+0xaa>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d104      	bne.n	8005176 <HAL_TIM_OC_Start_IT+0x92>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223f      	movs	r2, #63	; 0x3f
 8005170:	2102      	movs	r1, #2
 8005172:	5499      	strb	r1, [r3, r2]
 8005174:	e00b      	b.n	800518e <HAL_TIM_OC_Start_IT+0xaa>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d104      	bne.n	8005186 <HAL_TIM_OC_Start_IT+0xa2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2240      	movs	r2, #64	; 0x40
 8005180:	2102      	movs	r1, #2
 8005182:	5499      	strb	r1, [r3, r2]
 8005184:	e003      	b.n	800518e <HAL_TIM_OC_Start_IT+0xaa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2241      	movs	r2, #65	; 0x41
 800518a:	2102      	movs	r1, #2
 800518c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d02a      	beq.n	80051ea <HAL_TIM_OC_Start_IT+0x106>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d830      	bhi.n	80051fc <HAL_TIM_OC_Start_IT+0x118>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d01b      	beq.n	80051d8 <HAL_TIM_OC_Start_IT+0xf4>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d82a      	bhi.n	80051fc <HAL_TIM_OC_Start_IT+0x118>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_TIM_OC_Start_IT+0xd0>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d009      	beq.n	80051c6 <HAL_TIM_OC_Start_IT+0xe2>
 80051b2:	e023      	b.n	80051fc <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2102      	movs	r1, #2
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]
      break;
 80051c4:	e01f      	b.n	8005206 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2104      	movs	r1, #4
 80051d2:	430a      	orrs	r2, r1
 80051d4:	60da      	str	r2, [r3, #12]
      break;
 80051d6:	e016      	b.n	8005206 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2108      	movs	r1, #8
 80051e4:	430a      	orrs	r2, r1
 80051e6:	60da      	str	r2, [r3, #12]
      break;
 80051e8:	e00d      	b.n	8005206 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2110      	movs	r1, #16
 80051f6:	430a      	orrs	r2, r1
 80051f8:	60da      	str	r2, [r3, #12]
      break;
 80051fa:	e004      	b.n	8005206 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80051fc:	230f      	movs	r3, #15
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
      break;
 8005204:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005206:	230f      	movs	r3, #15
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d157      	bne.n	80052c0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	0018      	movs	r0, r3
 800521a:	f000 fea1 	bl	8005f60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_TIM_OC_Start_IT+0x162>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a29      	ldr	r2, [pc, #164]	; (80052d4 <HAL_TIM_OC_Start_IT+0x1f0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_TIM_OC_Start_IT+0x162>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIM_OC_Start_IT+0x162>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a26      	ldr	r2, [pc, #152]	; (80052dc <HAL_TIM_OC_Start_IT+0x1f8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_TIM_OC_Start_IT+0x166>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_TIM_OC_Start_IT+0x168>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	0209      	lsls	r1, r1, #8
 800525e:	430a      	orrs	r2, r1
 8005260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <HAL_TIM_OC_Start_IT+0x1a8>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	05db      	lsls	r3, r3, #23
 8005274:	429a      	cmp	r2, r3
 8005276:	d009      	beq.n	800528c <HAL_TIM_OC_Start_IT+0x1a8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_OC_Start_IT+0x1fc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_OC_Start_IT+0x1a8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d111      	bne.n	80052b0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2207      	movs	r2, #7
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b06      	cmp	r3, #6
 800529c:	d010      	beq.n	80052c0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2101      	movs	r1, #1
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e007      	b.n	80052c0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2101      	movs	r1, #1
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052c0:	230f      	movs	r3, #15
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	781b      	ldrb	r3, [r3, #0]
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b004      	add	sp, #16
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	40000400 	.word	0x40000400

080052e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e042      	b.n	800537c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223d      	movs	r2, #61	; 0x3d
 80052fa:	5c9b      	ldrb	r3, [r3, r2]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223c      	movs	r2, #60	; 0x3c
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f839 	bl	8005384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223d      	movs	r2, #61	; 0x3d
 8005316:	2102      	movs	r1, #2
 8005318:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f000 fb05 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2246      	movs	r2, #70	; 0x46
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	223e      	movs	r2, #62	; 0x3e
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	223f      	movs	r2, #63	; 0x3f
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2241      	movs	r2, #65	; 0x41
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2242      	movs	r2, #66	; 0x42
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2243      	movs	r2, #67	; 0x43
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2244      	movs	r2, #68	; 0x44
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2245      	movs	r2, #69	; 0x45
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	223d      	movs	r2, #61	; 0x3d
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b002      	add	sp, #8
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800538c:	46c0      	nop			; (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2202      	movs	r2, #2
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d124      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2202      	movs	r2, #2
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d11d      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2203      	movs	r2, #3
 80053be:	4252      	negs	r2, r2
 80053c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2203      	movs	r2, #3
 80053d0:	4013      	ands	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 fa94 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e007      	b.n	80053ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fb f819 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 fa93 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2204      	movs	r2, #4
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d125      	bne.n	800544e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2204      	movs	r2, #4
 800540a:	4013      	ands	r3, r2
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11e      	bne.n	800544e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2205      	movs	r2, #5
 8005416:	4252      	negs	r2, r2
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	23c0      	movs	r3, #192	; 0xc0
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4013      	ands	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 fa67 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 8005436:	e007      	b.n	8005448 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0018      	movs	r0, r3
 800543c:	f7fa ffec 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	0018      	movs	r0, r3
 8005444:	f000 fa66 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2208      	movs	r2, #8
 8005456:	4013      	ands	r3, r2
 8005458:	2b08      	cmp	r3, #8
 800545a:	d124      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2208      	movs	r2, #8
 8005464:	4013      	ands	r3, r2
 8005466:	2b08      	cmp	r3, #8
 8005468:	d11d      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2209      	movs	r2, #9
 8005470:	4252      	negs	r2, r2
 8005472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2204      	movs	r2, #4
 8005478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2203      	movs	r2, #3
 8005482:	4013      	ands	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0018      	movs	r0, r3
 800548a:	f000 fa3b 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 800548e:	e007      	b.n	80054a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0018      	movs	r0, r3
 8005494:	f7fa ffc0 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	0018      	movs	r0, r3
 800549c:	f000 fa3a 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2210      	movs	r2, #16
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d125      	bne.n	8005500 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2210      	movs	r2, #16
 80054bc:	4013      	ands	r3, r2
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d11e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2211      	movs	r2, #17
 80054c8:	4252      	negs	r2, r2
 80054ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2208      	movs	r2, #8
 80054d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	23c0      	movs	r3, #192	; 0xc0
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4013      	ands	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f000 fa0e 	bl	8005904 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e007      	b.n	80054fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fa ff93 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 fa0d 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2201      	movs	r2, #1
 8005508:	4013      	ands	r3, r2
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10f      	bne.n	800552e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	4013      	ands	r3, r2
 8005518:	2b01      	cmp	r3, #1
 800551a:	d108      	bne.n	800552e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2202      	movs	r2, #2
 8005522:	4252      	negs	r2, r2
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f000 f9e3 	bl	80058f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2280      	movs	r2, #128	; 0x80
 8005536:	4013      	ands	r3, r2
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d10f      	bne.n	800555c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	4013      	ands	r3, r2
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d108      	bne.n	800555c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2281      	movs	r2, #129	; 0x81
 8005550:	4252      	negs	r2, r2
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 fdea 	bl	8006130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	4013      	ands	r3, r2
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d10f      	bne.n	800558a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2240      	movs	r2, #64	; 0x40
 8005572:	4013      	ands	r3, r2
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d108      	bne.n	800558a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2241      	movs	r2, #65	; 0x41
 800557e:	4252      	negs	r2, r2
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f9cd 	bl	8005924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2220      	movs	r2, #32
 8005592:	4013      	ands	r3, r2
 8005594:	2b20      	cmp	r3, #32
 8005596:	d10f      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d108      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2221      	movs	r2, #33	; 0x21
 80055ac:	4252      	negs	r2, r2
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 fdb4 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b002      	add	sp, #8
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2317      	movs	r3, #23
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	223c      	movs	r2, #60	; 0x3c
 80055d8:	5c9b      	ldrb	r3, [r3, r2]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0ad      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	223c      	movs	r2, #60	; 0x3c
 80055e6:	2101      	movs	r1, #1
 80055e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d100      	bne.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80055f0:	e076      	b.n	80056e0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d900      	bls.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80055f8:	e095      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x166>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d04e      	beq.n	800569e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b08      	cmp	r3, #8
 8005604:	d900      	bls.n	8005608 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005606:	e08e      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x56>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d021      	beq.n	8005658 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005614:	e087      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f000 fa08 	bl	8005a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2108      	movs	r1, #8
 8005630:	430a      	orrs	r2, r1
 8005632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2104      	movs	r1, #4
 8005640:	438a      	bics	r2, r1
 8005642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6999      	ldr	r1, [r3, #24]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]
      break;
 8005656:	e06b      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f000 fa6f 	bl	8005b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	0109      	lsls	r1, r1, #4
 8005674:	430a      	orrs	r2, r1
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4931      	ldr	r1, [pc, #196]	; (8005748 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005684:	400a      	ands	r2, r1
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
      break;
 800569c:	e048      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fad0 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2108      	movs	r1, #8
 80056b8:	430a      	orrs	r2, r1
 80056ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2104      	movs	r1, #4
 80056c8:	438a      	bics	r2, r1
 80056ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69d9      	ldr	r1, [r3, #28]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	61da      	str	r2, [r3, #28]
      break;
 80056de:	e027      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fb35 	bl	8005d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	0109      	lsls	r1, r1, #4
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	490f      	ldr	r1, [pc, #60]	; (8005748 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800570c:	400a      	ands	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69d9      	ldr	r1, [r3, #28]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	61da      	str	r2, [r3, #28]
      break;
 8005724:	e004      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005726:	2317      	movs	r3, #23
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
      break;
 800572e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	223c      	movs	r2, #60	; 0x3c
 8005734:	2100      	movs	r1, #0
 8005736:	5499      	strb	r1, [r3, r2]

  return status;
 8005738:	2317      	movs	r3, #23
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	781b      	ldrb	r3, [r3, #0]
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	b006      	add	sp, #24
 8005744:	bd80      	pop	{r7, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	fffffbff 	.word	0xfffffbff

0800574c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	230f      	movs	r3, #15
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	223c      	movs	r2, #60	; 0x3c
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIM_ConfigClockSource+0x20>
 8005768:	2302      	movs	r3, #2
 800576a:	e0bc      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x19a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	223c      	movs	r2, #60	; 0x3c
 8005770:	2101      	movs	r1, #1
 8005772:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	223d      	movs	r2, #61	; 0x3d
 8005778:	2102      	movs	r1, #2
 800577a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2277      	movs	r2, #119	; 0x77
 8005788:	4393      	bics	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a58      	ldr	r2, [pc, #352]	; (80058f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005790:	4013      	ands	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	0192      	lsls	r2, r2, #6
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xde>
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	0192      	lsls	r2, r2, #6
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d900      	bls.n	80057b2 <HAL_TIM_ConfigClockSource+0x66>
 80057b0:	e088      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	0152      	lsls	r2, r2, #5
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d100      	bne.n	80057bc <HAL_TIM_ConfigClockSource+0x70>
 80057ba:	e088      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x182>
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	0152      	lsls	r2, r2, #5
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d900      	bls.n	80057c6 <HAL_TIM_ConfigClockSource+0x7a>
 80057c4:	e07e      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057c6:	2b70      	cmp	r3, #112	; 0x70
 80057c8:	d018      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0xb0>
 80057ca:	d900      	bls.n	80057ce <HAL_TIM_ConfigClockSource+0x82>
 80057cc:	e07a      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057ce:	2b60      	cmp	r3, #96	; 0x60
 80057d0:	d04f      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x126>
 80057d2:	d900      	bls.n	80057d6 <HAL_TIM_ConfigClockSource+0x8a>
 80057d4:	e076      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057d6:	2b50      	cmp	r3, #80	; 0x50
 80057d8:	d03b      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x106>
 80057da:	d900      	bls.n	80057de <HAL_TIM_ConfigClockSource+0x92>
 80057dc:	e072      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d057      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x146>
 80057e2:	d900      	bls.n	80057e6 <HAL_TIM_ConfigClockSource+0x9a>
 80057e4:	e06e      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057e6:	2b30      	cmp	r3, #48	; 0x30
 80057e8:	d063      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x166>
 80057ea:	d86b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d060      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x166>
 80057f0:	d868      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d05d      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x166>
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d05b      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x166>
 80057fa:	e063      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f000 fb88 	bl	8005f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2277      	movs	r2, #119	; 0x77
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
      break;
 8005828:	e052      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 fb71 	bl	8005f20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	01c9      	lsls	r1, r1, #7
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e03e      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	001a      	movs	r2, r3
 8005860:	f000 fae4 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2150      	movs	r1, #80	; 0x50
 800586a:	0018      	movs	r0, r3
 800586c:	f000 fb3e 	bl	8005eec <TIM_ITRx_SetConfig>
      break;
 8005870:	e02e      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	001a      	movs	r2, r3
 8005880:	f000 fb02 	bl	8005e88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fb2e 	bl	8005eec <TIM_ITRx_SetConfig>
      break;
 8005890:	e01e      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	001a      	movs	r2, r3
 80058a0:	f000 fac4 	bl	8005e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 fb1e 	bl	8005eec <TIM_ITRx_SetConfig>
      break;
 80058b0:	e00e      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	0019      	movs	r1, r3
 80058bc:	0010      	movs	r0, r2
 80058be:	f000 fb15 	bl	8005eec <TIM_ITRx_SetConfig>
      break;
 80058c2:	e005      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058c4:	230f      	movs	r3, #15
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
      break;
 80058cc:	e000      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	223d      	movs	r2, #61	; 0x3d
 80058d4:	2101      	movs	r1, #1
 80058d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223c      	movs	r2, #60	; 0x3c
 80058dc:	2100      	movs	r1, #0
 80058de:	5499      	strb	r1, [r3, r2]

  return status;
 80058e0:	230f      	movs	r3, #15
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	781b      	ldrb	r3, [r3, #0]
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b004      	add	sp, #16
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	ffff00ff 	.word	0xffff00ff

080058f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b002      	add	sp, #8
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592c:	46c0      	nop			; (mov r8, r8)
 800592e:	46bd      	mov	sp, r7
 8005930:	b002      	add	sp, #8
 8005932:	bd80      	pop	{r7, pc}

08005934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a34      	ldr	r2, [pc, #208]	; (8005a18 <TIM_Base_SetConfig+0xe4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d008      	beq.n	800595e <TIM_Base_SetConfig+0x2a>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	05db      	lsls	r3, r3, #23
 8005952:	429a      	cmp	r2, r3
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0x2a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <TIM_Base_SetConfig+0xe8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2270      	movs	r2, #112	; 0x70
 8005962:	4393      	bics	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <TIM_Base_SetConfig+0xe4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	05db      	lsls	r3, r3, #23
 800597e:	429a      	cmp	r2, r3
 8005980:	d013      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <TIM_Base_SetConfig+0xe8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00f      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <TIM_Base_SetConfig+0xec>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00b      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <TIM_Base_SetConfig+0xf0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <TIM_Base_SetConfig+0xf4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_Base_SetConfig+0x76>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <TIM_Base_SetConfig+0xf8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4a20      	ldr	r2, [pc, #128]	; (8005a30 <TIM_Base_SetConfig+0xfc>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2280      	movs	r2, #128	; 0x80
 80059c0:	4393      	bics	r3, r2
 80059c2:	001a      	movs	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <TIM_Base_SetConfig+0xe4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0xce>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <TIM_Base_SetConfig+0xf0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0xce>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <TIM_Base_SetConfig+0xf4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0xce>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <TIM_Base_SetConfig+0xf8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d103      	bne.n	8005a0a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	615a      	str	r2, [r3, #20]
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b004      	add	sp, #16
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40002000 	.word	0x40002000
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800
 8005a30:	fffffcff 	.word	0xfffffcff

08005a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	2201      	movs	r2, #1
 8005a44:	4393      	bics	r3, r2
 8005a46:	001a      	movs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2270      	movs	r2, #112	; 0x70
 8005a62:	4393      	bics	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	4393      	bics	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <TIM_OC1_SetConfig+0xf8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_OC1_SetConfig+0x76>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <TIM_OC1_SetConfig+0xfc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_OC1_SetConfig+0x76>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a25      	ldr	r2, [pc, #148]	; (8005b34 <TIM_OC1_SetConfig+0x100>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC1_SetConfig+0x76>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a24      	ldr	r2, [pc, #144]	; (8005b38 <TIM_OC1_SetConfig+0x104>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10c      	bne.n	8005ac4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2208      	movs	r2, #8
 8005aae:	4393      	bics	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4393      	bics	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <TIM_OC1_SetConfig+0xf8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_OC1_SetConfig+0xb0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <TIM_OC1_SetConfig+0xfc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_OC1_SetConfig+0xb0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <TIM_OC1_SetConfig+0x100>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC1_SetConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC1_SetConfig+0x104>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <TIM_OC1_SetConfig+0x108>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <TIM_OC1_SetConfig+0x10c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b006      	add	sp, #24
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	fffffeff 	.word	0xfffffeff
 8005b40:	fffffdff 	.word	0xfffffdff

08005b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	2210      	movs	r2, #16
 8005b54:	4393      	bics	r3, r2
 8005b56:	001a      	movs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <TIM_OC2_SetConfig+0xe8>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a2d      	ldr	r2, [pc, #180]	; (8005c30 <TIM_OC2_SetConfig+0xec>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	4393      	bics	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a24      	ldr	r2, [pc, #144]	; (8005c34 <TIM_OC2_SetConfig+0xf0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10d      	bne.n	8005bc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	4393      	bics	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2240      	movs	r2, #64	; 0x40
 8005bbe:	4393      	bics	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <TIM_OC2_SetConfig+0xf0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_OC2_SetConfig+0x9e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1a      	ldr	r2, [pc, #104]	; (8005c38 <TIM_OC2_SetConfig+0xf4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_OC2_SetConfig+0x9e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <TIM_OC2_SetConfig+0xf8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC2_SetConfig+0x9e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <TIM_OC2_SetConfig+0xfc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d113      	bne.n	8005c0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC2_SetConfig+0x100>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <TIM_OC2_SetConfig+0x104>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b006      	add	sp, #24
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	ffff8fff 	.word	0xffff8fff
 8005c30:	fffffcff 	.word	0xfffffcff
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800
 8005c44:	fffffbff 	.word	0xfffffbff
 8005c48:	fffff7ff 	.word	0xfffff7ff

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	4a35      	ldr	r2, [pc, #212]	; (8005d30 <TIM_OC3_SetConfig+0xe4>)
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2270      	movs	r2, #112	; 0x70
 8005c78:	4393      	bics	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	4393      	bics	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <TIM_OC3_SetConfig+0xe8>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <TIM_OC3_SetConfig+0xec>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <TIM_OC3_SetConfig+0xf0>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <TIM_OC3_SetConfig+0xf4>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <TIM_OC3_SetConfig+0xec>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_OC3_SetConfig+0x9a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <TIM_OC3_SetConfig+0xf8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_OC3_SetConfig+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <TIM_OC3_SetConfig+0xfc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC3_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <TIM_OC3_SetConfig+0x100>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d113      	bne.n	8005d0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <TIM_OC3_SetConfig+0x104>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <TIM_OC3_SetConfig+0x108>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	621a      	str	r2, [r3, #32]
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b006      	add	sp, #24
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	fffffeff 	.word	0xfffffeff
 8005d34:	fffffdff 	.word	0xfffffdff
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	fffff7ff 	.word	0xfffff7ff
 8005d40:	fffffbff 	.word	0xfffffbff
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	ffffefff 	.word	0xffffefff
 8005d54:	ffffdfff 	.word	0xffffdfff

08005d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <TIM_OC4_SetConfig+0xb0>)
 8005d68:	401a      	ands	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <TIM_OC4_SetConfig+0xb4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a21      	ldr	r2, [pc, #132]	; (8005e10 <TIM_OC4_SetConfig+0xb8>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <TIM_OC4_SetConfig+0xbc>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	031b      	lsls	r3, r3, #12
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <TIM_OC4_SetConfig+0xc0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x78>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <TIM_OC4_SetConfig+0xc4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x78>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a17      	ldr	r2, [pc, #92]	; (8005e20 <TIM_OC4_SetConfig+0xc8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC4_SetConfig+0x78>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <TIM_OC4_SetConfig+0xcc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d109      	bne.n	8005de4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <TIM_OC4_SetConfig+0xd0>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	019b      	lsls	r3, r3, #6
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b006      	add	sp, #24
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	ffffefff 	.word	0xffffefff
 8005e0c:	ffff8fff 	.word	0xffff8fff
 8005e10:	fffffcff 	.word	0xfffffcff
 8005e14:	ffffdfff 	.word	0xffffdfff
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800
 8005e28:	ffffbfff 	.word	0xffffbfff

08005e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	2201      	movs	r2, #1
 8005e44:	4393      	bics	r3, r2
 8005e46:	001a      	movs	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	22f0      	movs	r2, #240	; 0xf0
 8005e56:	4393      	bics	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	220a      	movs	r2, #10
 8005e68:	4393      	bics	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	46c0      	nop			; (mov r8, r8)
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b006      	add	sp, #24
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	4393      	bics	r3, r2
 8005e9c:	001a      	movs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <TIM_TI2_ConfigInputStage+0x60>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	22a0      	movs	r2, #160	; 0xa0
 8005ec4:	4393      	bics	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	b006      	add	sp, #24
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	ffff0fff 	.word	0xffff0fff

08005eec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2270      	movs	r2, #112	; 0x70
 8005f00:	4393      	bics	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	2207      	movs	r2, #7
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	609a      	str	r2, [r3, #8]
}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <TIM_ETR_SetConfig+0x3c>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	609a      	str	r2, [r3, #8]
}
 8005f54:	46c0      	nop			; (mov r8, r8)
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b006      	add	sp, #24
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	ffff00ff 	.word	0xffff00ff

08005f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	221f      	movs	r2, #31
 8005f70:	4013      	ands	r3, r2
 8005f72:	2201      	movs	r2, #1
 8005f74:	409a      	lsls	r2, r3
 8005f76:	0013      	movs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	43d2      	mvns	r2, r2
 8005f82:	401a      	ands	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	211f      	movs	r1, #31
 8005f90:	400b      	ands	r3, r1
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4099      	lsls	r1, r3
 8005f96:	000b      	movs	r3, r1
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b006      	add	sp, #24
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	223c      	movs	r2, #60	; 0x3c
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e047      	b.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	223c      	movs	r2, #60	; 0x3c
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	223d      	movs	r2, #61	; 0x3d
 8005fcc:	2102      	movs	r1, #2
 8005fce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2270      	movs	r2, #112	; 0x70
 8005fe4:	4393      	bics	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a16      	ldr	r2, [pc, #88]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00f      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	05db      	lsls	r3, r3, #23
 800600c:	429a      	cmp	r2, r3
 800600e:	d009      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a10      	ldr	r2, [pc, #64]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10c      	bne.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2280      	movs	r2, #128	; 0x80
 8006028:	4393      	bics	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4313      	orrs	r3, r2
 8006034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	223d      	movs	r2, #61	; 0x3d
 8006042:	2101      	movs	r1, #1
 8006044:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	223c      	movs	r2, #60	; 0x3c
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40000400 	.word	0x40000400
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	223c      	movs	r2, #60	; 0x3c
 8006076:	5c9b      	ldrb	r3, [r3, r2]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800607c:	2302      	movs	r3, #2
 800607e:	e03e      	b.n	80060fe <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	223c      	movs	r2, #60	; 0x3c
 8006084:	2101      	movs	r1, #1
 8006086:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	4393      	bics	r3, r2
 800608e:	001a      	movs	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800609c:	401a      	ands	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80060aa:	401a      	ands	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a16      	ldr	r2, [pc, #88]	; (8006110 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80060b8:	401a      	ands	r2, r3
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a13      	ldr	r2, [pc, #76]	; (8006114 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80060c6:	401a      	ands	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a11      	ldr	r2, [pc, #68]	; (8006118 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80060d4:	401a      	ands	r2, r3
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a0e      	ldr	r2, [pc, #56]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80060e2:	401a      	ands	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	223c      	movs	r2, #60	; 0x3c
 80060f8:	2100      	movs	r1, #0
 80060fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	fffffcff 	.word	0xfffffcff
 800610c:	fffffbff 	.word	0xfffffbff
 8006110:	fffff7ff 	.word	0xfffff7ff
 8006114:	ffffefff 	.word	0xffffefff
 8006118:	ffffdfff 	.word	0xffffdfff
 800611c:	ffffbfff 	.word	0xffffbfff

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e044      	b.n	80061dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2274      	movs	r2, #116	; 0x74
 800615e:	2100      	movs	r1, #0
 8006160:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	0018      	movs	r0, r3
 8006166:	f7fb febf 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2224      	movs	r2, #36	; 0x24
 800616e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2101      	movs	r1, #1
 800617c:	438a      	bics	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 fc2e 	bl	80069e4 <UART_SetConfig>
 8006188:	0003      	movs	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e024      	b.n	80061dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 fd61 	bl	8006c64 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	490d      	ldr	r1, [pc, #52]	; (80061e4 <HAL_UART_Init+0xa4>)
 80061ae:	400a      	ands	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	212a      	movs	r1, #42	; 0x2a
 80061be:	438a      	bics	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2101      	movs	r1, #1
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f000 fdf9 	bl	8006dcc <UART_CheckIdleState>
 80061da:	0003      	movs	r3, r0
}
 80061dc:	0018      	movs	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	ffffb7ff 	.word	0xffffb7ff

080061e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	1dbb      	adds	r3, r7, #6
 80061f6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d000      	beq.n	8006202 <HAL_UART_Transmit+0x1a>
 8006200:	e096      	b.n	8006330 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_UART_Transmit+0x28>
 8006208:	1dbb      	adds	r3, r7, #6
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e08e      	b.n	8006332 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	015b      	lsls	r3, r3, #5
 800621c:	429a      	cmp	r2, r3
 800621e:	d109      	bne.n	8006234 <HAL_UART_Transmit+0x4c>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2201      	movs	r2, #1
 800622c:	4013      	ands	r3, r2
 800622e:	d001      	beq.n	8006234 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e07e      	b.n	8006332 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2274      	movs	r2, #116	; 0x74
 8006238:	5c9b      	ldrb	r3, [r3, r2]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UART_Transmit+0x5a>
 800623e:	2302      	movs	r3, #2
 8006240:	e077      	b.n	8006332 <HAL_UART_Transmit+0x14a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2274      	movs	r2, #116	; 0x74
 8006246:	2101      	movs	r1, #1
 8006248:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2280      	movs	r2, #128	; 0x80
 800624e:	2100      	movs	r1, #0
 8006250:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2221      	movs	r2, #33	; 0x21
 8006256:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006258:	f7fb ff7a 	bl	8002150 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1dba      	adds	r2, r7, #6
 8006264:	2150      	movs	r1, #80	; 0x50
 8006266:	8812      	ldrh	r2, [r2, #0]
 8006268:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	1dba      	adds	r2, r7, #6
 800626e:	2152      	movs	r1, #82	; 0x52
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	429a      	cmp	r2, r3
 800627e:	d108      	bne.n	8006292 <HAL_UART_Transmit+0xaa>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e003      	b.n	800629a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2274      	movs	r2, #116	; 0x74
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80062a2:	e02d      	b.n	8006300 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	0013      	movs	r3, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	2180      	movs	r1, #128	; 0x80
 80062b2:	f000 fdd3 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 80062b6:	1e03      	subs	r3, r0, #0
 80062b8:	d001      	beq.n	80062be <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e039      	b.n	8006332 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10b      	bne.n	80062dc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	881a      	ldrh	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	05d2      	lsls	r2, r2, #23
 80062ce:	0dd2      	lsrs	r2, r2, #23
 80062d0:	b292      	uxth	r2, r2
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3302      	adds	r3, #2
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e008      	b.n	80062ee <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b292      	uxth	r2, r2
 80062e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2252      	movs	r2, #82	; 0x52
 80062f2:	5a9b      	ldrh	r3, [r3, r2]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b299      	uxth	r1, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2252      	movs	r2, #82	; 0x52
 80062fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2252      	movs	r2, #82	; 0x52
 8006304:	5a9b      	ldrh	r3, [r3, r2]
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1cb      	bne.n	80062a4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	0013      	movs	r3, r2
 8006316:	2200      	movs	r2, #0
 8006318:	2140      	movs	r1, #64	; 0x40
 800631a:	f000 fd9f 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d001      	beq.n	8006326 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e005      	b.n	8006332 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b008      	add	sp, #32
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	1dbb      	adds	r3, r7, #6
 8006346:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634c:	2b20      	cmp	r3, #32
 800634e:	d150      	bne.n	80063f2 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_UART_Receive_IT+0x24>
 8006356:	1dbb      	adds	r3, r7, #6
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e048      	b.n	80063f4 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	015b      	lsls	r3, r3, #5
 800636a:	429a      	cmp	r2, r3
 800636c:	d109      	bne.n	8006382 <HAL_UART_Receive_IT+0x48>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d105      	bne.n	8006382 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2201      	movs	r2, #1
 800637a:	4013      	ands	r3, r2
 800637c:	d001      	beq.n	8006382 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e038      	b.n	80063f4 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2274      	movs	r2, #116	; 0x74
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Receive_IT+0x56>
 800638c:	2302      	movs	r3, #2
 800638e:	e031      	b.n	80063f4 <HAL_UART_Receive_IT+0xba>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2274      	movs	r2, #116	; 0x74
 8006394:	2101      	movs	r1, #1
 8006396:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	4013      	ands	r3, r2
 80063aa:	d019      	beq.n	80063e0 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ac:	f3ef 8310 	mrs	r3, PRIMASK
 80063b0:	613b      	str	r3, [r7, #16]
  return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f383 8810 	msr	PRIMASK, r3
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	04c9      	lsls	r1, r1, #19
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063e0:	1dbb      	adds	r3, r7, #6
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fdfb 	bl	8006fe4 <UART_Start_Receive_IT>
 80063ee:	0003      	movs	r3, r0
 80063f0:	e000      	b.n	80063f4 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b008      	add	sp, #32
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b0ab      	sub	sp, #172	; 0xac
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	22a4      	movs	r2, #164	; 0xa4
 800640c:	18b9      	adds	r1, r7, r2
 800640e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	20a0      	movs	r0, #160	; 0xa0
 8006418:	1839      	adds	r1, r7, r0
 800641a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	219c      	movs	r1, #156	; 0x9c
 8006424:	1879      	adds	r1, r7, r1
 8006426:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006428:	0011      	movs	r1, r2
 800642a:	18bb      	adds	r3, r7, r2
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a99      	ldr	r2, [pc, #612]	; (8006694 <HAL_UART_IRQHandler+0x298>)
 8006430:	4013      	ands	r3, r2
 8006432:	2298      	movs	r2, #152	; 0x98
 8006434:	18bc      	adds	r4, r7, r2
 8006436:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006438:	18bb      	adds	r3, r7, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d114      	bne.n	800646a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006440:	187b      	adds	r3, r7, r1
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	4013      	ands	r3, r2
 8006448:	d00f      	beq.n	800646a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800644a:	183b      	adds	r3, r7, r0
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2220      	movs	r2, #32
 8006450:	4013      	ands	r3, r2
 8006452:	d00a      	beq.n	800646a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006458:	2b00      	cmp	r3, #0
 800645a:	d100      	bne.n	800645e <HAL_UART_IRQHandler+0x62>
 800645c:	e296      	b.n	800698c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	0010      	movs	r0, r2
 8006466:	4798      	blx	r3
      }
      return;
 8006468:	e290      	b.n	800698c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800646a:	2398      	movs	r3, #152	; 0x98
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d100      	bne.n	8006476 <HAL_UART_IRQHandler+0x7a>
 8006474:	e114      	b.n	80066a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006476:	239c      	movs	r3, #156	; 0x9c
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	4013      	ands	r3, r2
 8006480:	d106      	bne.n	8006490 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006482:	23a0      	movs	r3, #160	; 0xa0
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a83      	ldr	r2, [pc, #524]	; (8006698 <HAL_UART_IRQHandler+0x29c>)
 800648a:	4013      	ands	r3, r2
 800648c:	d100      	bne.n	8006490 <HAL_UART_IRQHandler+0x94>
 800648e:	e107      	b.n	80066a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006490:	23a4      	movs	r3, #164	; 0xa4
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2201      	movs	r2, #1
 8006498:	4013      	ands	r3, r2
 800649a:	d012      	beq.n	80064c2 <HAL_UART_IRQHandler+0xc6>
 800649c:	23a0      	movs	r3, #160	; 0xa0
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2201      	movs	r2, #1
 80064b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	589b      	ldr	r3, [r3, r2]
 80064b8:	2201      	movs	r2, #1
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c2:	23a4      	movs	r3, #164	; 0xa4
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2202      	movs	r2, #2
 80064ca:	4013      	ands	r3, r2
 80064cc:	d011      	beq.n	80064f2 <HAL_UART_IRQHandler+0xf6>
 80064ce:	239c      	movs	r3, #156	; 0x9c
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	4013      	ands	r3, r2
 80064d8:	d00b      	beq.n	80064f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2202      	movs	r2, #2
 80064e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2280      	movs	r2, #128	; 0x80
 80064e6:	589b      	ldr	r3, [r3, r2]
 80064e8:	2204      	movs	r2, #4
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2180      	movs	r1, #128	; 0x80
 80064f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f2:	23a4      	movs	r3, #164	; 0xa4
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2204      	movs	r2, #4
 80064fa:	4013      	ands	r3, r2
 80064fc:	d011      	beq.n	8006522 <HAL_UART_IRQHandler+0x126>
 80064fe:	239c      	movs	r3, #156	; 0x9c
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2204      	movs	r2, #4
 8006510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	589b      	ldr	r3, [r3, r2]
 8006518:	2202      	movs	r2, #2
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006522:	23a4      	movs	r3, #164	; 0xa4
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2208      	movs	r2, #8
 800652a:	4013      	ands	r3, r2
 800652c:	d017      	beq.n	800655e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800652e:	23a0      	movs	r3, #160	; 0xa0
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2220      	movs	r2, #32
 8006536:	4013      	ands	r3, r2
 8006538:	d105      	bne.n	8006546 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800653a:	239c      	movs	r3, #156	; 0x9c
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2208      	movs	r2, #8
 800654c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	589b      	ldr	r3, [r3, r2]
 8006554:	2208      	movs	r2, #8
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800655e:	23a4      	movs	r3, #164	; 0xa4
 8006560:	18fb      	adds	r3, r7, r3
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4013      	ands	r3, r2
 800656a:	d013      	beq.n	8006594 <HAL_UART_IRQHandler+0x198>
 800656c:	23a0      	movs	r3, #160	; 0xa0
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	2380      	movs	r3, #128	; 0x80
 8006574:	04db      	lsls	r3, r3, #19
 8006576:	4013      	ands	r3, r2
 8006578:	d00c      	beq.n	8006594 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	0112      	lsls	r2, r2, #4
 8006582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2280      	movs	r2, #128	; 0x80
 8006588:	589b      	ldr	r3, [r3, r2]
 800658a:	2220      	movs	r2, #32
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2180      	movs	r1, #128	; 0x80
 8006592:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2280      	movs	r2, #128	; 0x80
 8006598:	589b      	ldr	r3, [r3, r2]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d100      	bne.n	80065a0 <HAL_UART_IRQHandler+0x1a4>
 800659e:	e1f7      	b.n	8006990 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065a0:	23a4      	movs	r3, #164	; 0xa4
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2220      	movs	r2, #32
 80065a8:	4013      	ands	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ac:	23a0      	movs	r3, #160	; 0xa0
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2220      	movs	r2, #32
 80065b4:	4013      	ands	r3, r2
 80065b6:	d008      	beq.n	80065ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	0010      	movs	r0, r2
 80065c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	589b      	ldr	r3, [r3, r2]
 80065d0:	2194      	movs	r1, #148	; 0x94
 80065d2:	187a      	adds	r2, r7, r1
 80065d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2240      	movs	r2, #64	; 0x40
 80065de:	4013      	ands	r3, r2
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d004      	beq.n	80065ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065e4:	187b      	adds	r3, r7, r1
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2228      	movs	r2, #40	; 0x28
 80065ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ec:	d047      	beq.n	800667e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 fd93 	bl	800711c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2240      	movs	r2, #64	; 0x40
 80065fe:	4013      	ands	r3, r2
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d137      	bne.n	8006674 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006604:	f3ef 8310 	mrs	r3, PRIMASK
 8006608:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800660a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660c:	2090      	movs	r0, #144	; 0x90
 800660e:	183a      	adds	r2, r7, r0
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	2301      	movs	r3, #1
 8006614:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2140      	movs	r1, #64	; 0x40
 800662a:	438a      	bics	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
 800662e:	183b      	adds	r3, r7, r0
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	2b00      	cmp	r3, #0
 8006642:	d012      	beq.n	800666a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	4a14      	ldr	r2, [pc, #80]	; (800669c <HAL_UART_IRQHandler+0x2a0>)
 800664a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	0018      	movs	r0, r3
 8006652:	f7fc fbe3 	bl	8002e1c <HAL_DMA_Abort_IT>
 8006656:	1e03      	subs	r3, r0, #0
 8006658:	d01a      	beq.n	8006690 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	0018      	movs	r0, r3
 8006666:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	e012      	b.n	8006690 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0018      	movs	r0, r3
 800666e:	f000 f9a5 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006672:	e00d      	b.n	8006690 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	0018      	movs	r0, r3
 8006678:	f000 f9a0 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e008      	b.n	8006690 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 f99b 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	2100      	movs	r1, #0
 800668c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800668e:	e17f      	b.n	8006990 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	46c0      	nop			; (mov r8, r8)
    return;
 8006692:	e17d      	b.n	8006990 <HAL_UART_IRQHandler+0x594>
 8006694:	0000080f 	.word	0x0000080f
 8006698:	04000120 	.word	0x04000120
 800669c:	080071e1 	.word	0x080071e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d000      	beq.n	80066aa <HAL_UART_IRQHandler+0x2ae>
 80066a8:	e131      	b.n	800690e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066aa:	23a4      	movs	r3, #164	; 0xa4
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2210      	movs	r2, #16
 80066b2:	4013      	ands	r3, r2
 80066b4:	d100      	bne.n	80066b8 <HAL_UART_IRQHandler+0x2bc>
 80066b6:	e12a      	b.n	800690e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066b8:	23a0      	movs	r3, #160	; 0xa0
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	4013      	ands	r3, r2
 80066c2:	d100      	bne.n	80066c6 <HAL_UART_IRQHandler+0x2ca>
 80066c4:	e123      	b.n	800690e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2210      	movs	r2, #16
 80066cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2240      	movs	r2, #64	; 0x40
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d000      	beq.n	80066de <HAL_UART_IRQHandler+0x2e2>
 80066dc:	e09b      	b.n	8006816 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	217e      	movs	r1, #126	; 0x7e
 80066e8:	187b      	adds	r3, r7, r1
 80066ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80066ec:	187b      	adds	r3, r7, r1
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d100      	bne.n	80066f6 <HAL_UART_IRQHandler+0x2fa>
 80066f4:	e14e      	b.n	8006994 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2258      	movs	r2, #88	; 0x58
 80066fa:	5a9b      	ldrh	r3, [r3, r2]
 80066fc:	187a      	adds	r2, r7, r1
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d300      	bcc.n	8006706 <HAL_UART_IRQHandler+0x30a>
 8006704:	e146      	b.n	8006994 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	187a      	adds	r2, r7, r1
 800670a:	215a      	movs	r1, #90	; 0x5a
 800670c:	8812      	ldrh	r2, [r2, #0]
 800670e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b20      	cmp	r3, #32
 8006718:	d06e      	beq.n	80067f8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671a:	f3ef 8310 	mrs	r3, PRIMASK
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
 8006724:	2301      	movs	r3, #1
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	f383 8810 	msr	PRIMASK, r3
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	499a      	ldr	r1, [pc, #616]	; (80069a4 <HAL_UART_IRQHandler+0x5a8>)
 800673c:	400a      	ands	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f383 8810 	msr	PRIMASK, r3
}
 800674a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006754:	677b      	str	r3, [r7, #116]	; 0x74
 8006756:	2301      	movs	r3, #1
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2101      	movs	r1, #1
 800676e:	438a      	bics	r2, r1
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006774:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	673b      	str	r3, [r7, #112]	; 0x70
 8006788:	2301      	movs	r3, #1
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2140      	movs	r1, #64	; 0x40
 80067a0:	438a      	bics	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067bc:	f3ef 8310 	mrs	r3, PRIMASK
 80067c0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80067c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067c6:	2301      	movs	r3, #1
 80067c8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067cc:	f383 8810 	msr	PRIMASK, r3
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2110      	movs	r1, #16
 80067de:	438a      	bics	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e8:	f383 8810 	msr	PRIMASK, r3
}
 80067ec:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	0018      	movs	r0, r3
 80067f4:	f7fc fada 	bl	8002dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2258      	movs	r2, #88	; 0x58
 80067fc:	5a9a      	ldrh	r2, [r3, r2]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	215a      	movs	r1, #90	; 0x5a
 8006802:	5a5b      	ldrh	r3, [r3, r1]
 8006804:	b29b      	uxth	r3, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0011      	movs	r1, r2
 800680e:	0018      	movs	r0, r3
 8006810:	f000 f8dc 	bl	80069cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006814:	e0be      	b.n	8006994 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2258      	movs	r2, #88	; 0x58
 800681a:	5a99      	ldrh	r1, [r3, r2]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	225a      	movs	r2, #90	; 0x5a
 8006820:	5a9b      	ldrh	r3, [r3, r2]
 8006822:	b29a      	uxth	r2, r3
 8006824:	208e      	movs	r0, #142	; 0x8e
 8006826:	183b      	adds	r3, r7, r0
 8006828:	1a8a      	subs	r2, r1, r2
 800682a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	225a      	movs	r2, #90	; 0x5a
 8006830:	5a9b      	ldrh	r3, [r3, r2]
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d100      	bne.n	800683a <HAL_UART_IRQHandler+0x43e>
 8006838:	e0ae      	b.n	8006998 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800683a:	183b      	adds	r3, r7, r0
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d100      	bne.n	8006844 <HAL_UART_IRQHandler+0x448>
 8006842:	e0a9      	b.n	8006998 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006844:	f3ef 8310 	mrs	r3, PRIMASK
 8006848:	60fb      	str	r3, [r7, #12]
  return(result);
 800684a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684c:	2488      	movs	r4, #136	; 0x88
 800684e:	193a      	adds	r2, r7, r4
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	2301      	movs	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f383 8810 	msr	PRIMASK, r3
}
 800685c:	46c0      	nop			; (mov r8, r8)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	494f      	ldr	r1, [pc, #316]	; (80069a8 <HAL_UART_IRQHandler+0x5ac>)
 800686a:	400a      	ands	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	193b      	adds	r3, r7, r4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f383 8810 	msr	PRIMASK, r3
}
 800687a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687c:	f3ef 8310 	mrs	r3, PRIMASK
 8006880:	61bb      	str	r3, [r7, #24]
  return(result);
 8006882:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006884:	2484      	movs	r4, #132	; 0x84
 8006886:	193a      	adds	r2, r7, r4
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	2301      	movs	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f383 8810 	msr	PRIMASK, r3
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2101      	movs	r1, #1
 80068a2:	438a      	bics	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]
 80068a6:	193b      	adds	r3, r7, r4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	f383 8810 	msr	PRIMASK, r3
}
 80068b2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ce:	2480      	movs	r4, #128	; 0x80
 80068d0:	193a      	adds	r2, r7, r4
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	2301      	movs	r3, #1
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	f383 8810 	msr	PRIMASK, r3
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2110      	movs	r1, #16
 80068ec:	438a      	bics	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	193b      	adds	r3, r7, r4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	f383 8810 	msr	PRIMASK, r3
}
 80068fc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068fe:	183b      	adds	r3, r7, r0
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0011      	movs	r1, r2
 8006906:	0018      	movs	r0, r3
 8006908:	f000 f860 	bl	80069cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800690c:	e044      	b.n	8006998 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800690e:	23a4      	movs	r3, #164	; 0xa4
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	035b      	lsls	r3, r3, #13
 8006918:	4013      	ands	r3, r2
 800691a:	d010      	beq.n	800693e <HAL_UART_IRQHandler+0x542>
 800691c:	239c      	movs	r3, #156	; 0x9c
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	03db      	lsls	r3, r3, #15
 8006926:	4013      	ands	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2280      	movs	r2, #128	; 0x80
 8006930:	0352      	lsls	r2, r2, #13
 8006932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 fdfc 	bl	8007534 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800693c:	e02f      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800693e:	23a4      	movs	r3, #164	; 0xa4
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2280      	movs	r2, #128	; 0x80
 8006946:	4013      	ands	r3, r2
 8006948:	d00f      	beq.n	800696a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800694a:	23a0      	movs	r3, #160	; 0xa0
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2280      	movs	r2, #128	; 0x80
 8006952:	4013      	ands	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01e      	beq.n	800699c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	0010      	movs	r0, r2
 8006966:	4798      	blx	r3
    }
    return;
 8006968:	e018      	b.n	800699c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800696a:	23a4      	movs	r3, #164	; 0xa4
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	4013      	ands	r3, r2
 8006974:	d013      	beq.n	800699e <HAL_UART_IRQHandler+0x5a2>
 8006976:	23a0      	movs	r3, #160	; 0xa0
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	4013      	ands	r3, r2
 8006980:	d00d      	beq.n	800699e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	0018      	movs	r0, r3
 8006986:	f000 fc42 	bl	800720e <UART_EndTransmit_IT>
    return;
 800698a:	e008      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
      return;
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	e006      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
    return;
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	e004      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	e002      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	e000      	b.n	800699e <HAL_UART_IRQHandler+0x5a2>
    return;
 800699c:	46c0      	nop			; (mov r8, r8)
  }

}
 800699e:	46bd      	mov	sp, r7
 80069a0:	b02b      	add	sp, #172	; 0xac
 80069a2:	bd90      	pop	{r4, r7, pc}
 80069a4:	fffffeff 	.word	0xfffffeff
 80069a8:	fffffedf 	.word	0xfffffedf

080069ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b002      	add	sp, #8
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069c4:	46c0      	nop			; (mov r8, r8)
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	000a      	movs	r2, r1
 80069d6:	1cbb      	adds	r3, r7, #2
 80069d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	46bd      	mov	sp, r7
 80069de:	b002      	add	sp, #8
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ec:	231e      	movs	r3, #30
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a8d      	ldr	r2, [pc, #564]	; (8006c48 <UART_SetConfig+0x264>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	0019      	movs	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a88      	ldr	r2, [pc, #544]	; (8006c4c <UART_SetConfig+0x268>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4a7f      	ldr	r2, [pc, #508]	; (8006c50 <UART_SetConfig+0x26c>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	0019      	movs	r1, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a7b      	ldr	r2, [pc, #492]	; (8006c54 <UART_SetConfig+0x270>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d127      	bne.n	8006aba <UART_SetConfig+0xd6>
 8006a6a:	4b7b      	ldr	r3, [pc, #492]	; (8006c58 <UART_SetConfig+0x274>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	2203      	movs	r2, #3
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d00d      	beq.n	8006a92 <UART_SetConfig+0xae>
 8006a76:	d81b      	bhi.n	8006ab0 <UART_SetConfig+0xcc>
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d014      	beq.n	8006aa6 <UART_SetConfig+0xc2>
 8006a7c:	d818      	bhi.n	8006ab0 <UART_SetConfig+0xcc>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <UART_SetConfig+0xa4>
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d00a      	beq.n	8006a9c <UART_SetConfig+0xb8>
 8006a86:	e013      	b.n	8006ab0 <UART_SetConfig+0xcc>
 8006a88:	231f      	movs	r3, #31
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e021      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006a92:	231f      	movs	r3, #31
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2202      	movs	r2, #2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e01c      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006a9c:	231f      	movs	r3, #31
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e017      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006aa6:	231f      	movs	r3, #31
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	2208      	movs	r2, #8
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	e012      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006ab0:	231f      	movs	r3, #31
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	2210      	movs	r2, #16
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <UART_SetConfig+0x278>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d104      	bne.n	8006ace <UART_SetConfig+0xea>
 8006ac4:	231f      	movs	r3, #31
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e003      	b.n	8006ad6 <UART_SetConfig+0xf2>
 8006ace:	231f      	movs	r3, #31
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69da      	ldr	r2, [r3, #28]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d15d      	bne.n	8006b9e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006ae2:	231f      	movs	r3, #31
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d015      	beq.n	8006b18 <UART_SetConfig+0x134>
 8006aec:	dc18      	bgt.n	8006b20 <UART_SetConfig+0x13c>
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d00d      	beq.n	8006b0e <UART_SetConfig+0x12a>
 8006af2:	dc15      	bgt.n	8006b20 <UART_SetConfig+0x13c>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <UART_SetConfig+0x11a>
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d005      	beq.n	8006b08 <UART_SetConfig+0x124>
 8006afc:	e010      	b.n	8006b20 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006afe:	f7fd fe27 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006b02:	0003      	movs	r3, r0
 8006b04:	61bb      	str	r3, [r7, #24]
        break;
 8006b06:	e012      	b.n	8006b2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b55      	ldr	r3, [pc, #340]	; (8006c60 <UART_SetConfig+0x27c>)
 8006b0a:	61bb      	str	r3, [r7, #24]
        break;
 8006b0c:	e00f      	b.n	8006b2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fd fdb1 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8006b12:	0003      	movs	r3, r0
 8006b14:	61bb      	str	r3, [r7, #24]
        break;
 8006b16:	e00a      	b.n	8006b2e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	61bb      	str	r3, [r7, #24]
        break;
 8006b1e:	e006      	b.n	8006b2e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b24:	231e      	movs	r3, #30
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
        break;
 8006b2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d100      	bne.n	8006b36 <UART_SetConfig+0x152>
 8006b34:	e07b      	b.n	8006c2e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	005a      	lsls	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	18d2      	adds	r2, r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	0019      	movs	r1, r3
 8006b48:	0010      	movs	r0, r2
 8006b4a:	f7f9 fadd 	bl	8000108 <__udivsi3>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d91c      	bls.n	8006b94 <UART_SetConfig+0x1b0>
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d217      	bcs.n	8006b94 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	200e      	movs	r0, #14
 8006b6a:	183b      	adds	r3, r7, r0
 8006b6c:	210f      	movs	r1, #15
 8006b6e:	438a      	bics	r2, r1
 8006b70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2207      	movs	r2, #7
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b299      	uxth	r1, r3
 8006b7e:	183b      	adds	r3, r7, r0
 8006b80:	183a      	adds	r2, r7, r0
 8006b82:	8812      	ldrh	r2, [r2, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	183a      	adds	r2, r7, r0
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	60da      	str	r2, [r3, #12]
 8006b92:	e04c      	b.n	8006c2e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b94:	231e      	movs	r3, #30
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	2201      	movs	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e047      	b.n	8006c2e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b9e:	231f      	movs	r3, #31
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d015      	beq.n	8006bd4 <UART_SetConfig+0x1f0>
 8006ba8:	dc18      	bgt.n	8006bdc <UART_SetConfig+0x1f8>
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d00d      	beq.n	8006bca <UART_SetConfig+0x1e6>
 8006bae:	dc15      	bgt.n	8006bdc <UART_SetConfig+0x1f8>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <UART_SetConfig+0x1d6>
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d005      	beq.n	8006bc4 <UART_SetConfig+0x1e0>
 8006bb8:	e010      	b.n	8006bdc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7fd fdc9 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	61bb      	str	r3, [r7, #24]
        break;
 8006bc2:	e012      	b.n	8006bea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc4:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <UART_SetConfig+0x27c>)
 8006bc6:	61bb      	str	r3, [r7, #24]
        break;
 8006bc8:	e00f      	b.n	8006bea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bca:	f7fd fd53 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8006bce:	0003      	movs	r3, r0
 8006bd0:	61bb      	str	r3, [r7, #24]
        break;
 8006bd2:	e00a      	b.n	8006bea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd4:	2380      	movs	r3, #128	; 0x80
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	61bb      	str	r3, [r7, #24]
        break;
 8006bda:	e006      	b.n	8006bea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006be0:	231e      	movs	r3, #30
 8006be2:	18fb      	adds	r3, r7, r3
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
        break;
 8006be8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01e      	beq.n	8006c2e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	085a      	lsrs	r2, r3, #1
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	18d2      	adds	r2, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	0019      	movs	r1, r3
 8006c00:	0010      	movs	r0, r2
 8006c02:	f7f9 fa81 	bl	8000108 <__udivsi3>
 8006c06:	0003      	movs	r3, r0
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b0f      	cmp	r3, #15
 8006c10:	d909      	bls.n	8006c26 <UART_SetConfig+0x242>
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	025b      	lsls	r3, r3, #9
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d204      	bcs.n	8006c26 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	60da      	str	r2, [r3, #12]
 8006c24:	e003      	b.n	8006c2e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c26:	231e      	movs	r3, #30
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c3a:	231e      	movs	r3, #30
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	781b      	ldrb	r3, [r3, #0]
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b008      	add	sp, #32
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	ffff69f3 	.word	0xffff69f3
 8006c4c:	ffffcfff 	.word	0xffffcfff
 8006c50:	fffff4ff 	.word	0xfffff4ff
 8006c54:	40013800 	.word	0x40013800
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40004400 	.word	0x40004400
 8006c60:	007a1200 	.word	0x007a1200

08006c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	2201      	movs	r2, #1
 8006c72:	4013      	ands	r3, r2
 8006c74:	d00b      	beq.n	8006c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a4a      	ldr	r2, [pc, #296]	; (8006da8 <UART_AdvFeatureConfig+0x144>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	0019      	movs	r1, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2202      	movs	r2, #2
 8006c94:	4013      	ands	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4a43      	ldr	r2, [pc, #268]	; (8006dac <UART_AdvFeatureConfig+0x148>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	0019      	movs	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d00b      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <UART_AdvFeatureConfig+0x14c>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2208      	movs	r2, #8
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4a34      	ldr	r2, [pc, #208]	; (8006db4 <UART_AdvFeatureConfig+0x150>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <UART_AdvFeatureConfig+0x154>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	0019      	movs	r1, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <UART_AdvFeatureConfig+0x158>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2240      	movs	r2, #64	; 0x40
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d01d      	beq.n	8006d7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <UART_AdvFeatureConfig+0x15c>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	2380      	movs	r3, #128	; 0x80
 8006d60:	035b      	lsls	r3, r3, #13
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d10b      	bne.n	8006d7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <UART_AdvFeatureConfig+0x160>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	0019      	movs	r1, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	4013      	ands	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4a0e      	ldr	r2, [pc, #56]	; (8006dc8 <UART_AdvFeatureConfig+0x164>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	0019      	movs	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	fffdffff 	.word	0xfffdffff
 8006dac:	fffeffff 	.word	0xfffeffff
 8006db0:	fffbffff 	.word	0xfffbffff
 8006db4:	ffff7fff 	.word	0xffff7fff
 8006db8:	ffffefff 	.word	0xffffefff
 8006dbc:	ffffdfff 	.word	0xffffdfff
 8006dc0:	ffefffff 	.word	0xffefffff
 8006dc4:	ff9fffff 	.word	0xff9fffff
 8006dc8:	fff7ffff 	.word	0xfff7ffff

08006dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	2100      	movs	r1, #0
 8006dda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ddc:	f7fb f9b8 	bl	8002150 <HAL_GetTick>
 8006de0:	0003      	movs	r3, r0
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2208      	movs	r2, #8
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d10c      	bne.n	8006e0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	0391      	lsls	r1, r2, #14
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <UART_CheckIdleState+0x8c>)
 8006dfc:	9200      	str	r2, [sp, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f000 f82c 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006e04:	1e03      	subs	r3, r0, #0
 8006e06:	d001      	beq.n	8006e0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e021      	b.n	8006e50 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2204      	movs	r2, #4
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d10c      	bne.n	8006e34 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	03d1      	lsls	r1, r2, #15
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <UART_CheckIdleState+0x8c>)
 8006e24:	9200      	str	r2, [sp, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f000 f818 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 8006e2c:	1e03      	subs	r3, r0, #0
 8006e2e:	d001      	beq.n	8006e34 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e00d      	b.n	8006e50 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2274      	movs	r2, #116	; 0x74
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b004      	add	sp, #16
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	01ffffff 	.word	0x01ffffff

08006e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b094      	sub	sp, #80	; 0x50
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	1dfb      	adds	r3, r7, #7
 8006e6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6c:	e0a3      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e70:	3301      	adds	r3, #1
 8006e72:	d100      	bne.n	8006e76 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006e74:	e09f      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e76:	f7fb f96b 	bl	8002150 <HAL_GetTick>
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d13d      	bne.n	8006f08 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
 8006e96:	2301      	movs	r3, #1
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	494c      	ldr	r1, [pc, #304]	; (8006fe0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006eae:	400a      	ands	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f383 8810 	msr	PRIMASK, r3
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec8:	2301      	movs	r3, #1
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2101      	movs	r1, #1
 8006ee0:	438a      	bics	r2, r1
 8006ee2:	609a      	str	r2, [r3, #8]
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2274      	movs	r2, #116	; 0x74
 8006f00:	2100      	movs	r1, #0
 8006f02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e067      	b.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2204      	movs	r2, #4
 8006f10:	4013      	ands	r3, r2
 8006f12:	d050      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	401a      	ands	r2, r3
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d146      	bne.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f32:	f3ef 8310 	mrs	r3, PRIMASK
 8006f36:	613b      	str	r3, [r7, #16]
  return(result);
 8006f38:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f383 8810 	msr	PRIMASK, r3
}
 8006f46:	46c0      	nop			; (mov r8, r8)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4923      	ldr	r1, [pc, #140]	; (8006fe0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f64:	f3ef 8310 	mrs	r3, PRIMASK
 8006f68:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f6a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f6e:	2301      	movs	r3, #1
 8006f70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2101      	movs	r1, #1
 8006f86:	438a      	bics	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2280      	movs	r2, #128	; 0x80
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2274      	movs	r2, #116	; 0x74
 8006fae:	2100      	movs	r1, #0
 8006fb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e010      	b.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	425a      	negs	r2, r3
 8006fc6:	4153      	adcs	r3, r2
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	001a      	movs	r2, r3
 8006fcc:	1dfb      	adds	r3, r7, #7
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d100      	bne.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006fd4:	e74b      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b014      	add	sp, #80	; 0x50
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	fffffe5f 	.word	0xfffffe5f

08006fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	; 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	1dbb      	adds	r3, r7, #6
 8006ff0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1dba      	adds	r2, r7, #6
 8006ffc:	2158      	movs	r1, #88	; 0x58
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1dba      	adds	r2, r7, #6
 8007006:	215a      	movs	r1, #90	; 0x5a
 8007008:	8812      	ldrh	r2, [r2, #0]
 800700a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	015b      	lsls	r3, r3, #5
 800701a:	429a      	cmp	r2, r3
 800701c:	d10d      	bne.n	800703a <UART_Start_Receive_IT+0x56>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d104      	bne.n	8007030 <UART_Start_Receive_IT+0x4c>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	225c      	movs	r2, #92	; 0x5c
 800702a:	4939      	ldr	r1, [pc, #228]	; (8007110 <UART_Start_Receive_IT+0x12c>)
 800702c:	5299      	strh	r1, [r3, r2]
 800702e:	e01a      	b.n	8007066 <UART_Start_Receive_IT+0x82>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	225c      	movs	r2, #92	; 0x5c
 8007034:	21ff      	movs	r1, #255	; 0xff
 8007036:	5299      	strh	r1, [r3, r2]
 8007038:	e015      	b.n	8007066 <UART_Start_Receive_IT+0x82>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <UART_Start_Receive_IT+0x7a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <UART_Start_Receive_IT+0x70>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	225c      	movs	r2, #92	; 0x5c
 800704e:	21ff      	movs	r1, #255	; 0xff
 8007050:	5299      	strh	r1, [r3, r2]
 8007052:	e008      	b.n	8007066 <UART_Start_Receive_IT+0x82>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	225c      	movs	r2, #92	; 0x5c
 8007058:	217f      	movs	r1, #127	; 0x7f
 800705a:	5299      	strh	r1, [r3, r2]
 800705c:	e003      	b.n	8007066 <UART_Start_Receive_IT+0x82>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	225c      	movs	r2, #92	; 0x5c
 8007062:	2100      	movs	r1, #0
 8007064:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2280      	movs	r2, #128	; 0x80
 800706a:	2100      	movs	r1, #0
 800706c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2222      	movs	r2, #34	; 0x22
 8007072:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007074:	f3ef 8310 	mrs	r3, PRIMASK
 8007078:	61fb      	str	r3, [r7, #28]
  return(result);
 800707a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800707e:	2301      	movs	r3, #1
 8007080:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f383 8810 	msr	PRIMASK, r3
}
 8007088:	46c0      	nop			; (mov r8, r8)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2101      	movs	r1, #1
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	f383 8810 	msr	PRIMASK, r3
}
 80070a4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	015b      	lsls	r3, r3, #5
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d107      	bne.n	80070c2 <UART_Start_Receive_IT+0xde>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a15      	ldr	r2, [pc, #84]	; (8007114 <UART_Start_Receive_IT+0x130>)
 80070be:	665a      	str	r2, [r3, #100]	; 0x64
 80070c0:	e002      	b.n	80070c8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a14      	ldr	r2, [pc, #80]	; (8007118 <UART_Start_Receive_IT+0x134>)
 80070c6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2274      	movs	r2, #116	; 0x74
 80070cc:	2100      	movs	r1, #0
 80070ce:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d0:	f3ef 8310 	mrs	r3, PRIMASK
 80070d4:	613b      	str	r3, [r7, #16]
  return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f383 8810 	msr	PRIMASK, r3
}
 80070e4:	46c0      	nop			; (mov r8, r8)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2190      	movs	r1, #144	; 0x90
 80070f2:	0049      	lsls	r1, r1, #1
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f383 8810 	msr	PRIMASK, r3
}
 8007102:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b00c      	add	sp, #48	; 0x30
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	000001ff 	.word	0x000001ff
 8007114:	080073cd 	.word	0x080073cd
 8007118:	08007265 	.word	0x08007265

0800711c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	617b      	str	r3, [r7, #20]
  return(result);
 800712a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
 800712e:	2301      	movs	r3, #1
 8007130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			; (mov r8, r8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4925      	ldr	r1, [pc, #148]	; (80071dc <UART_EndRxTransfer+0xc0>)
 8007146:	400a      	ands	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007156:	f3ef 8310 	mrs	r3, PRIMASK
 800715a:	623b      	str	r3, [r7, #32]
  return(result);
 800715c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715e:	633b      	str	r3, [r7, #48]	; 0x30
 8007160:	2301      	movs	r3, #1
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	f383 8810 	msr	PRIMASK, r3
}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2101      	movs	r1, #1
 8007178:	438a      	bics	r2, r1
 800717a:	609a      	str	r2, [r3, #8]
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f383 8810 	msr	PRIMASK, r3
}
 8007186:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718c:	2b01      	cmp	r3, #1
 800718e:	d118      	bne.n	80071c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007190:	f3ef 8310 	mrs	r3, PRIMASK
 8007194:	60bb      	str	r3, [r7, #8]
  return(result);
 8007196:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719a:	2301      	movs	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f383 8810 	msr	PRIMASK, r3
}
 80071a4:	46c0      	nop			; (mov r8, r8)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2110      	movs	r1, #16
 80071b2:	438a      	bics	r2, r1
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f383 8810 	msr	PRIMASK, r3
}
 80071c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b00e      	add	sp, #56	; 0x38
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	fffffedf 	.word	0xfffffedf

080071e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	225a      	movs	r2, #90	; 0x5a
 80071f2:	2100      	movs	r1, #0
 80071f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2252      	movs	r2, #82	; 0x52
 80071fa:	2100      	movs	r1, #0
 80071fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	0018      	movs	r0, r3
 8007202:	f7ff fbdb 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b004      	add	sp, #16
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007216:	f3ef 8310 	mrs	r3, PRIMASK
 800721a:	60bb      	str	r3, [r7, #8]
  return(result);
 800721c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	2301      	movs	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f383 8810 	msr	PRIMASK, r3
}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2140      	movs	r1, #64	; 0x40
 8007238:	438a      	bics	r2, r1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f383 8810 	msr	PRIMASK, r3
}
 8007246:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	0018      	movs	r0, r3
 8007258:	f7ff fba8 	bl	80069ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800725c:	46c0      	nop			; (mov r8, r8)
 800725e:	46bd      	mov	sp, r7
 8007260:	b006      	add	sp, #24
 8007262:	bd80      	pop	{r7, pc}

08007264 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b090      	sub	sp, #64	; 0x40
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800726c:	203e      	movs	r0, #62	; 0x3e
 800726e:	183b      	adds	r3, r7, r0
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	215c      	movs	r1, #92	; 0x5c
 8007274:	5a52      	ldrh	r2, [r2, r1]
 8007276:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800727c:	2b22      	cmp	r3, #34	; 0x22
 800727e:	d000      	beq.n	8007282 <UART_RxISR_8BIT+0x1e>
 8007280:	e095      	b.n	80073ae <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	213c      	movs	r1, #60	; 0x3c
 8007288:	187b      	adds	r3, r7, r1
 800728a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800728c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800728e:	187b      	adds	r3, r7, r1
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	183b      	adds	r3, r7, r0
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b2d9      	uxtb	r1, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	400a      	ands	r2, r1
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	225a      	movs	r2, #90	; 0x5a
 80072b2:	5a9b      	ldrh	r3, [r3, r2]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b299      	uxth	r1, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	225a      	movs	r2, #90	; 0x5a
 80072be:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	225a      	movs	r2, #90	; 0x5a
 80072c4:	5a9b      	ldrh	r3, [r3, r2]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d178      	bne.n	80073be <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072cc:	f3ef 8310 	mrs	r3, PRIMASK
 80072d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80072d2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072d6:	2301      	movs	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f383 8810 	msr	PRIMASK, r3
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4936      	ldr	r1, [pc, #216]	; (80073c8 <UART_RxISR_8BIT+0x164>)
 80072ee:	400a      	ands	r2, r1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f383 8810 	msr	PRIMASK, r3
}
 80072fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	637b      	str	r3, [r7, #52]	; 0x34
 8007308:	2301      	movs	r3, #1
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2101      	movs	r1, #1
 8007320:	438a      	bics	r2, r1
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	f383 8810 	msr	PRIMASK, r3
}
 800732e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007340:	2b01      	cmp	r3, #1
 8007342:	d12f      	bne.n	80073a4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800734a:	f3ef 8310 	mrs	r3, PRIMASK
 800734e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007352:	633b      	str	r3, [r7, #48]	; 0x30
 8007354:	2301      	movs	r3, #1
 8007356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f383 8810 	msr	PRIMASK, r3
}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2110      	movs	r1, #16
 800736c:	438a      	bics	r2, r1
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f383 8810 	msr	PRIMASK, r3
}
 800737a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2210      	movs	r2, #16
 8007384:	4013      	ands	r3, r2
 8007386:	2b10      	cmp	r3, #16
 8007388:	d103      	bne.n	8007392 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2210      	movs	r2, #16
 8007390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2258      	movs	r2, #88	; 0x58
 8007396:	5a9a      	ldrh	r2, [r3, r2]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	0011      	movs	r1, r2
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff fb15 	bl	80069cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a2:	e00c      	b.n	80073be <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f7f9 fc9c 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 80073ac:	e007      	b.n	80073be <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2108      	movs	r1, #8
 80073ba:	430a      	orrs	r2, r1
 80073bc:	619a      	str	r2, [r3, #24]
}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b010      	add	sp, #64	; 0x40
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	fffffedf 	.word	0xfffffedf

080073cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b090      	sub	sp, #64	; 0x40
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073d4:	203e      	movs	r0, #62	; 0x3e
 80073d6:	183b      	adds	r3, r7, r0
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	215c      	movs	r1, #92	; 0x5c
 80073dc:	5a52      	ldrh	r2, [r2, r1]
 80073de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e4:	2b22      	cmp	r3, #34	; 0x22
 80073e6:	d000      	beq.n	80073ea <UART_RxISR_16BIT+0x1e>
 80073e8:	e095      	b.n	8007516 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	213c      	movs	r1, #60	; 0x3c
 80073f0:	187b      	adds	r3, r7, r1
 80073f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80073f4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80073fc:	187b      	adds	r3, r7, r1
 80073fe:	183a      	adds	r2, r7, r0
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	8812      	ldrh	r2, [r2, #0]
 8007404:	4013      	ands	r3, r2
 8007406:	b29a      	uxth	r2, r3
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007410:	1c9a      	adds	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	225a      	movs	r2, #90	; 0x5a
 800741a:	5a9b      	ldrh	r3, [r3, r2]
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b299      	uxth	r1, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	225a      	movs	r2, #90	; 0x5a
 8007426:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	225a      	movs	r2, #90	; 0x5a
 800742c:	5a9b      	ldrh	r3, [r3, r2]
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d178      	bne.n	8007526 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007434:	f3ef 8310 	mrs	r3, PRIMASK
 8007438:	617b      	str	r3, [r7, #20]
  return(result);
 800743a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
 800743e:	2301      	movs	r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f383 8810 	msr	PRIMASK, r3
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4936      	ldr	r1, [pc, #216]	; (8007530 <UART_RxISR_16BIT+0x164>)
 8007456:	400a      	ands	r2, r1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f383 8810 	msr	PRIMASK, r3
}
 8007464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007466:	f3ef 8310 	mrs	r3, PRIMASK
 800746a:	623b      	str	r3, [r7, #32]
  return(result);
 800746c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	633b      	str	r3, [r7, #48]	; 0x30
 8007470:	2301      	movs	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	f383 8810 	msr	PRIMASK, r3
}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2101      	movs	r1, #1
 8007488:	438a      	bics	r2, r1
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f383 8810 	msr	PRIMASK, r3
}
 8007496:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d12f      	bne.n	800750c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b2:	f3ef 8310 	mrs	r3, PRIMASK
 80074b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074b8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074bc:	2301      	movs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2110      	movs	r1, #16
 80074d4:	438a      	bics	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	2210      	movs	r2, #16
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d103      	bne.n	80074fa <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2210      	movs	r2, #16
 80074f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2258      	movs	r2, #88	; 0x58
 80074fe:	5a9a      	ldrh	r2, [r3, r2]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0011      	movs	r1, r2
 8007504:	0018      	movs	r0, r3
 8007506:	f7ff fa61 	bl	80069cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800750a:	e00c      	b.n	8007526 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0018      	movs	r0, r3
 8007510:	f7f9 fbe8 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 8007514:	e007      	b.n	8007526 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2108      	movs	r1, #8
 8007522:	430a      	orrs	r2, r1
 8007524:	619a      	str	r2, [r3, #24]
}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	46bd      	mov	sp, r7
 800752a:	b010      	add	sp, #64	; 0x40
 800752c:	bd80      	pop	{r7, pc}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	fffffedf 	.word	0xfffffedf

08007534 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800753c:	46c0      	nop			; (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	6019      	str	r1, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007552:	2317      	movs	r3, #23
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2274      	movs	r2, #116	; 0x74
 800755e:	5c9b      	ldrb	r3, [r3, r2]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007564:	2302      	movs	r3, #2
 8007566:	e04a      	b.n	80075fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2274      	movs	r2, #116	; 0x74
 800756c:	2101      	movs	r1, #1
 800756e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2224      	movs	r2, #36	; 0x24
 8007574:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2101      	movs	r1, #1
 8007582:	438a      	bics	r2, r1
 8007584:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800758e:	4013      	ands	r3, r2
 8007590:	0019      	movs	r1, r3
 8007592:	1d3b      	adds	r3, r7, #4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d105      	bne.n	80075b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	f000 f860 	bl	8007672 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2101      	movs	r1, #1
 80075be:	430a      	orrs	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c2:	f7fa fdc5 	bl	8002150 <HAL_GetTick>
 80075c6:	0003      	movs	r3, r0
 80075c8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2280      	movs	r2, #128	; 0x80
 80075ce:	03d1      	lsls	r1, r2, #15
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80075d4:	9200      	str	r2, [sp, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f7ff fc40 	bl	8006e5c <UART_WaitOnFlagUntilTimeout>
 80075dc:	1e03      	subs	r3, r0, #0
 80075de:	d004      	beq.n	80075ea <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80075e0:	2317      	movs	r3, #23
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	2203      	movs	r2, #3
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e002      	b.n	80075f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2274      	movs	r2, #116	; 0x74
 80075f4:	2100      	movs	r1, #0
 80075f6:	5499      	strb	r1, [r3, r2]

  return status;
 80075f8:	2317      	movs	r3, #23
 80075fa:	18fb      	adds	r3, r7, r3
 80075fc:	781b      	ldrb	r3, [r3, #0]
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b006      	add	sp, #24
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	ffcfffff 	.word	0xffcfffff
 800760c:	01ffffff 	.word	0x01ffffff

08007610 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2274      	movs	r2, #116	; 0x74
 800761c:	5c9b      	ldrb	r3, [r3, r2]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UARTEx_EnableStopMode+0x16>
 8007622:	2302      	movs	r3, #2
 8007624:	e021      	b.n	800766a <HAL_UARTEx_EnableStopMode+0x5a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2274      	movs	r2, #116	; 0x74
 800762a:	2101      	movs	r1, #1
 800762c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800762e:	f3ef 8310 	mrs	r3, PRIMASK
 8007632:	60bb      	str	r3, [r7, #8]
  return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f383 8810 	msr	PRIMASK, r3
}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2102      	movs	r1, #2
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f383 8810 	msr	PRIMASK, r3
}
 800765e:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2274      	movs	r2, #116	; 0x74
 8007664:	2100      	movs	r1, #0
 8007666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	0018      	movs	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	b006      	add	sp, #24
 8007670:	bd80      	pop	{r7, pc}

08007672 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2210      	movs	r2, #16
 8007688:	4393      	bics	r3, r2
 800768a:	001a      	movs	r2, r3
 800768c:	1d3b      	adds	r3, r7, #4
 800768e:	889b      	ldrh	r3, [r3, #4]
 8007690:	0019      	movs	r1, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	0a19      	lsrs	r1, r3, #8
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	799b      	ldrb	r3, [r3, #6]
 80076a8:	061a      	lsls	r2, r3, #24
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <__libc_init_array>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	2600      	movs	r6, #0
 80076c0:	4d0c      	ldr	r5, [pc, #48]	; (80076f4 <__libc_init_array+0x38>)
 80076c2:	4c0d      	ldr	r4, [pc, #52]	; (80076f8 <__libc_init_array+0x3c>)
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	42a6      	cmp	r6, r4
 80076ca:	d109      	bne.n	80076e0 <__libc_init_array+0x24>
 80076cc:	2600      	movs	r6, #0
 80076ce:	f000 f821 	bl	8007714 <_init>
 80076d2:	4d0a      	ldr	r5, [pc, #40]	; (80076fc <__libc_init_array+0x40>)
 80076d4:	4c0a      	ldr	r4, [pc, #40]	; (8007700 <__libc_init_array+0x44>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	42a6      	cmp	r6, r4
 80076dc:	d105      	bne.n	80076ea <__libc_init_array+0x2e>
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	00b3      	lsls	r3, r6, #2
 80076e2:	58eb      	ldr	r3, [r5, r3]
 80076e4:	4798      	blx	r3
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7ee      	b.n	80076c8 <__libc_init_array+0xc>
 80076ea:	00b3      	lsls	r3, r6, #2
 80076ec:	58eb      	ldr	r3, [r5, r3]
 80076ee:	4798      	blx	r3
 80076f0:	3601      	adds	r6, #1
 80076f2:	e7f2      	b.n	80076da <__libc_init_array+0x1e>
 80076f4:	08007808 	.word	0x08007808
 80076f8:	08007808 	.word	0x08007808
 80076fc:	08007808 	.word	0x08007808
 8007700:	0800780c 	.word	0x0800780c

08007704 <memset>:
 8007704:	0003      	movs	r3, r0
 8007706:	1882      	adds	r2, r0, r2
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	7019      	strb	r1, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
