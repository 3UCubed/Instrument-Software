
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e8  080075e8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080075e8  080075e8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075e8  080075e8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e8  080075e8  000175e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ec  080075ec  000175ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080075f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000038  08007628  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08007628  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001647b  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  000364db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00039150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018637  00000000  00000000  0004edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074ee4  00000000  00000000  00067403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dc338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074e4 	.word	0x080074e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	080074e4 	.word	0x080074e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b093      	sub	sp, #76	; 0x4c
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bdb      	ldr	r3, [pc, #876]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d001      	beq.n	8000258 <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000254:	f000 fbae 	bl	80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x770>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000258:	4bd9      	ldr	r3, [pc, #868]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d100      	bne.n	8000262 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
 8000260:	e0cf      	b.n	8000402 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
      {
    	FACTOR_COUNTER++;
 8000262:	4bd8      	ldr	r3, [pc, #864]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	4bd6      	ldr	r3, [pc, #856]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800026a:	601a      	str	r2, [r3, #0]
    	if (FACTOR_COUNTER == SAMPLING_FACTOR) {
 800026c:	4bd5      	ldr	r3, [pc, #852]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4bd5      	ldr	r3, [pc, #852]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	d000      	beq.n	800027a <HAL_TIM_OC_DelayElapsedCallback+0x36>
 8000278:	e0c3      	b.n	8000402 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
			 * +/- 0.5v Every 100ms
			 */

			/* Write to SPI (begin transfer?) */

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	011b      	lsls	r3, r3, #4
 8000280:	4ad2      	ldr	r2, [pc, #840]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000282:	0019      	movs	r1, r3
 8000284:	0010      	movs	r0, r2
 8000286:	f002 ff51 	bl	800312c <HAL_GPIO_ReadPin>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d1f6      	bne.n	800027c <HAL_TIM_OC_DelayElapsedCallback+0x38>
			 * Steps DAC
			 * +/- 0.5v Every 100ms
			*/

			  /* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 800028e:	49d0      	ldr	r1, [pc, #832]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000290:	48d0      	ldr	r0, [pc, #832]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000292:	2301      	movs	r3, #1
 8000294:	2201      	movs	r2, #1
 8000296:	f004 faef 	bl	8004878 <HAL_SPI_Transmit>
			SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800029a:	4bcf      	ldr	r3, [pc, #828]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4bce      	ldr	r3, [pc, #824]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002a0:	49ce      	ldr	r1, [pc, #824]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002a2:	400a      	ands	r2, r1
 80002a4:	601a      	str	r2, [r3, #0]
			while (!(SPI2->SR));
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	4bcb      	ldr	r3, [pc, #812]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0fb      	beq.n	80002a8 <HAL_TIM_OC_DelayElapsedCallback+0x64>
			erpa_raw = SPI2->DR;
 80002b0:	4bc9      	ldr	r3, [pc, #804]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	001a      	movs	r2, r3
 80002b6:	4bca      	ldr	r3, [pc, #808]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002b8:	601a      	str	r2, [r3, #0]


			DAC->DHR12R1 = DAC_OUT[step];
 80002ba:	4bca      	ldr	r3, [pc, #808]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	4bc9      	ldr	r3, [pc, #804]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002c2:	4aca      	ldr	r2, [pc, #808]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002c4:	0089      	lsls	r1, r1, #2
 80002c6:	588a      	ldr	r2, [r1, r2]
 80002c8:	609a      	str	r2, [r3, #8]


			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002ca:	2311      	movs	r3, #17
 80002cc:	001a      	movs	r2, r3
 80002ce:	49c8      	ldr	r1, [pc, #800]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002d0:	4bc8      	ldr	r3, [pc, #800]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 ff7c 	bl	80021d0 <HAL_ADC_Start_DMA>
							  adcChannelCount);
			uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80002d8:	2132      	movs	r1, #50	; 0x32
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	4ac4      	ldr	r2, [pc, #784]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002de:	8812      	ldrh	r2, [r2, #0]
 80002e0:	801a      	strh	r2, [r3, #0]
			uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002e2:	2030      	movs	r0, #48	; 0x30
 80002e4:	183b      	adds	r3, r7, r0
 80002e6:	4ac2      	ldr	r2, [pc, #776]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002e8:	8992      	ldrh	r2, [r2, #12]
 80002ea:	801a      	strh	r2, [r3, #0]
			uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002ec:	242e      	movs	r4, #46	; 0x2e
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	4abf      	ldr	r2, [pc, #764]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002f2:	89d2      	ldrh	r2, [r2, #14]
 80002f4:	801a      	strh	r2, [r3, #0]
			uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002f6:	252c      	movs	r5, #44	; 0x2c
 80002f8:	197b      	adds	r3, r7, r5
 80002fa:	4abd      	ldr	r2, [pc, #756]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002fc:	8a12      	ldrh	r2, [r2, #16]
 80002fe:	801a      	strh	r2, [r3, #0]

			erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000300:	22aa      	movs	r2, #170	; 0xaa
 8000302:	4bbd      	ldr	r3, [pc, #756]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000304:	701a      	strb	r2, [r3, #0]
			erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 8000306:	22aa      	movs	r2, #170	; 0xaa
 8000308:	4bbb      	ldr	r3, [pc, #748]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800030a:	705a      	strb	r2, [r3, #1]
			erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 800030c:	4bbb      	ldr	r3, [pc, #748]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4bb8      	ldr	r3, [pc, #736]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000318:	709a      	strb	r2, [r3, #2]
			erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 800031a:	4bb8      	ldr	r3, [pc, #736]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4bb5      	ldr	r3, [pc, #724]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000322:	70da      	strb	r2, [r3, #3]
			erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8000324:	187b      	adds	r3, r7, r1
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	b29b      	uxth	r3, r3
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4bb2      	ldr	r3, [pc, #712]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000330:	711a      	strb	r2, [r3, #4]
			erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 8000332:	187b      	adds	r3, r7, r1
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4baf      	ldr	r3, [pc, #700]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800033a:	715a      	strb	r2, [r3, #5]
			erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 800033c:	183b      	adds	r3, r7, r0
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	b29b      	uxth	r3, r3
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4bac      	ldr	r3, [pc, #688]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000348:	719a      	strb	r2, [r3, #6]
			erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 800034a:	183b      	adds	r3, r7, r0
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4ba9      	ldr	r3, [pc, #676]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000352:	71da      	strb	r2, [r3, #7]
			erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000354:	193b      	adds	r3, r7, r4
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	0a1b      	lsrs	r3, r3, #8
 800035a:	b29b      	uxth	r3, r3
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4ba6      	ldr	r3, [pc, #664]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000360:	721a      	strb	r2, [r3, #8]
			erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000362:	193b      	adds	r3, r7, r4
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4ba3      	ldr	r3, [pc, #652]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800036a:	725a      	strb	r2, [r3, #9]
			erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800036c:	197b      	adds	r3, r7, r5
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	0a1b      	lsrs	r3, r3, #8
 8000372:	b29b      	uxth	r3, r3
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4ba0      	ldr	r3, [pc, #640]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000378:	729a      	strb	r2, [r3, #10]
			erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800037a:	197b      	adds	r3, r7, r5
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	b2da      	uxtb	r2, r3
 8000380:	4b9d      	ldr	r3, [pc, #628]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000382:	72da      	strb	r2, [r3, #11]
			erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000384:	4b96      	ldr	r3, [pc, #600]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	121b      	asrs	r3, r3, #8
 800038a:	b2da      	uxtb	r2, r3
 800038c:	4b9a      	ldr	r3, [pc, #616]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800038e:	731a      	strb	r2, [r3, #12]
			erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000390:	4b93      	ldr	r3, [pc, #588]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b98      	ldr	r3, [pc, #608]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000398:	735a      	strb	r2, [r3, #13]

			if (auto_sweep) {
 800039a:	4b99      	ldr	r3, [pc, #612]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d01f      	beq.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				if (step == 7) {
 80003a2:	4b90      	ldr	r3, [pc, #576]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b07      	cmp	r3, #7
 80003a8:	d103      	bne.n	80003b2 <HAL_TIM_OC_DelayElapsedCallback+0x16e>
					is_increasing = 0;
 80003aa:	4b96      	ldr	r3, [pc, #600]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	e006      	b.n	80003c0 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
				} else if (step == 0) {
 80003b2:	4b8c      	ldr	r3, [pc, #560]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d102      	bne.n	80003c0 <HAL_TIM_OC_DelayElapsedCallback+0x17c>
					is_increasing = 1;
 80003ba:	4b92      	ldr	r3, [pc, #584]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
				}

				if (is_increasing) {
 80003c0:	4b90      	ldr	r3, [pc, #576]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d006      	beq.n	80003d6 <HAL_TIM_OC_DelayElapsedCallback+0x192>
					step++;
 80003c8:	4b86      	ldr	r3, [pc, #536]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b84      	ldr	r3, [pc, #528]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003d2:	701a      	strb	r2, [r3, #0]
 80003d4:	e005      	b.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
				} else {
					step--;
 80003d6:	4b83      	ldr	r3, [pc, #524]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b81      	ldr	r3, [pc, #516]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003e0:	701a      	strb	r2, [r3, #0]
				}
			}

			erpa_seq++;
 80003e2:	4b86      	ldr	r3, [pc, #536]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	4b84      	ldr	r3, [pc, #528]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80003ec:	801a      	strh	r2, [r3, #0]
			if (ERPA_ON)
 80003ee:	4b74      	ldr	r3, [pc, #464]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d005      	beq.n	8000402 <HAL_TIM_OC_DelayElapsedCallback+0x1be>
			{
			  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80003f6:	4980      	ldr	r1, [pc, #512]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80003f8:	4883      	ldr	r0, [pc, #524]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	220e      	movs	r2, #14
 80003fe:	f005 fddb 	bl	8005fb8 <HAL_UART_Transmit>
			}
    	}
      }
      if (HK_ON)
 8000402:	4b82      	ldr	r3, [pc, #520]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d100      	bne.n	800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>
 800040a:	e328      	b.n	8000a5e <HAL_TIM_OC_DelayElapsedCallback+0x81a>
      {
        if (FACTOR_COUNTER == SAMPLING_FACTOR)
 800040c:	4b6d      	ldr	r3, [pc, #436]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b6d      	ldr	r3, [pc, #436]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	429a      	cmp	r2, r3
 8000416:	d000      	beq.n	800041a <HAL_TIM_OC_DelayElapsedCallback+0x1d6>
 8000418:	e2b0      	b.n	800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 800041a:	2200      	movs	r2, #0
 800041c:	250c      	movs	r5, #12
 800041e:	197b      	adds	r3, r7, r5
 8000420:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	b299      	uxth	r1, r3
 8000426:	262b      	movs	r6, #43	; 0x2b
 8000428:	19bc      	adds	r4, r7, r6
 800042a:	197a      	adds	r2, r7, r5
 800042c:	4878      	ldr	r0, [pc, #480]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800042e:	23fa      	movs	r3, #250	; 0xfa
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	f002 ff49 	bl	80032cc <HAL_I2C_Master_Transmit>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 800043e:	19bb      	adds	r3, r7, r6
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d008      	beq.n	8000458 <HAL_TIM_OC_DelayElapsedCallback+0x214>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000446:	197b      	adds	r3, r7, r5
 8000448:	4a72      	ldr	r2, [pc, #456]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 800044a:	ca03      	ldmia	r2!, {r0, r1}
 800044c:	c303      	stmia	r3!, {r0, r1}
 800044e:	8811      	ldrh	r1, [r2, #0]
 8000450:	8019      	strh	r1, [r3, #0]
 8000452:	7892      	ldrb	r2, [r2, #2]
 8000454:	709a      	strb	r2, [r3, #2]
 8000456:	e02b      	b.n	80004b0 <HAL_TIM_OC_DelayElapsedCallback+0x26c>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000458:	2390      	movs	r3, #144	; 0x90
 800045a:	b299      	uxth	r1, r3
 800045c:	252b      	movs	r5, #43	; 0x2b
 800045e:	197c      	adds	r4, r7, r5
 8000460:	260c      	movs	r6, #12
 8000462:	19ba      	adds	r2, r7, r6
 8000464:	486a      	ldr	r0, [pc, #424]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000466:	23fa      	movs	r3, #250	; 0xfa
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2302      	movs	r3, #2
 800046e:	f003 f835 	bl	80034dc <HAL_I2C_Master_Receive>
 8000472:	0003      	movs	r3, r0
 8000474:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000476:	197b      	adds	r3, r7, r5
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d008      	beq.n	8000490 <HAL_TIM_OC_DelayElapsedCallback+0x24c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800047e:	19bb      	adds	r3, r7, r6
 8000480:	4a65      	ldr	r2, [pc, #404]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 8000482:	ca03      	ldmia	r2!, {r0, r1}
 8000484:	c303      	stmia	r3!, {r0, r1}
 8000486:	8811      	ldrh	r1, [r2, #0]
 8000488:	8019      	strh	r1, [r3, #0]
 800048a:	7892      	ldrb	r2, [r2, #2]
 800048c:	709a      	strb	r2, [r3, #2]
 800048e:	e00f      	b.n	80004b0 <HAL_TIM_OC_DelayElapsedCallback+0x26c>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 8000490:	200c      	movs	r0, #12
 8000492:	183b      	adds	r3, r7, r0
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	021a      	lsls	r2, r3, #8
 8000498:	213e      	movs	r1, #62	; 0x3e
 800049a:	187b      	adds	r3, r7, r1
 800049c:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	5e9b      	ldrsh	r3, [r3, r2]
 80004a4:	183a      	adds	r2, r7, r0
 80004a6:	7852      	ldrb	r2, [r2, #1]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	10da      	asrs	r2, r3, #3
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80004b0:	2200      	movs	r2, #0
 80004b2:	250c      	movs	r5, #12
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80004b8:	2394      	movs	r3, #148	; 0x94
 80004ba:	b299      	uxth	r1, r3
 80004bc:	262b      	movs	r6, #43	; 0x2b
 80004be:	19bc      	adds	r4, r7, r6
 80004c0:	197a      	adds	r2, r7, r5
 80004c2:	4853      	ldr	r0, [pc, #332]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80004c4:	23fa      	movs	r3, #250	; 0xfa
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2301      	movs	r3, #1
 80004cc:	f002 fefe 	bl	80032cc <HAL_I2C_Master_Transmit>
 80004d0:	0003      	movs	r3, r0
 80004d2:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80004d4:	19bb      	adds	r3, r7, r6
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <HAL_TIM_OC_DelayElapsedCallback+0x2aa>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	4a4d      	ldr	r2, [pc, #308]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80004e0:	ca03      	ldmia	r2!, {r0, r1}
 80004e2:	c303      	stmia	r3!, {r0, r1}
 80004e4:	8811      	ldrh	r1, [r2, #0]
 80004e6:	8019      	strh	r1, [r3, #0]
 80004e8:	7892      	ldrb	r2, [r2, #2]
 80004ea:	709a      	strb	r2, [r3, #2]
 80004ec:	e02b      	b.n	8000546 <HAL_TIM_OC_DelayElapsedCallback+0x302>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 80004ee:	2394      	movs	r3, #148	; 0x94
 80004f0:	b299      	uxth	r1, r3
 80004f2:	252b      	movs	r5, #43	; 0x2b
 80004f4:	197c      	adds	r4, r7, r5
 80004f6:	260c      	movs	r6, #12
 80004f8:	19ba      	adds	r2, r7, r6
 80004fa:	4845      	ldr	r0, [pc, #276]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80004fc:	23fa      	movs	r3, #250	; 0xfa
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	f002 ffea 	bl	80034dc <HAL_I2C_Master_Receive>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800050c:	197b      	adds	r3, r7, r5
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <HAL_TIM_OC_DelayElapsedCallback+0x2e2>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000514:	19bb      	adds	r3, r7, r6
 8000516:	4a40      	ldr	r2, [pc, #256]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 8000518:	ca03      	ldmia	r2!, {r0, r1}
 800051a:	c303      	stmia	r3!, {r0, r1}
 800051c:	8811      	ldrh	r1, [r2, #0]
 800051e:	8019      	strh	r1, [r3, #0]
 8000520:	7892      	ldrb	r2, [r2, #2]
 8000522:	709a      	strb	r2, [r3, #2]
 8000524:	e00f      	b.n	8000546 <HAL_TIM_OC_DelayElapsedCallback+0x302>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 8000526:	200c      	movs	r0, #12
 8000528:	183b      	adds	r3, r7, r0
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	021a      	lsls	r2, r3, #8
 800052e:	213c      	movs	r1, #60	; 0x3c
 8000530:	187b      	adds	r3, r7, r1
 8000532:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	5e9b      	ldrsh	r3, [r3, r2]
 800053a:	183a      	adds	r2, r7, r0
 800053c:	7852      	ldrb	r2, [r2, #1]
 800053e:	4313      	orrs	r3, r2
 8000540:	10da      	asrs	r2, r3, #3
 8000542:	187b      	adds	r3, r7, r1
 8000544:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 8000546:	2200      	movs	r2, #0
 8000548:	250c      	movs	r5, #12
 800054a:	197b      	adds	r3, r7, r5
 800054c:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 800054e:	2392      	movs	r3, #146	; 0x92
 8000550:	b299      	uxth	r1, r3
 8000552:	262b      	movs	r6, #43	; 0x2b
 8000554:	19bc      	adds	r4, r7, r6
 8000556:	197a      	adds	r2, r7, r5
 8000558:	482d      	ldr	r0, [pc, #180]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800055a:	23fa      	movs	r3, #250	; 0xfa
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	f002 feb3 	bl	80032cc <HAL_I2C_Master_Transmit>
 8000566:	0003      	movs	r3, r0
 8000568:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d008      	beq.n	8000584 <HAL_TIM_OC_DelayElapsedCallback+0x340>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000572:	197b      	adds	r3, r7, r5
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000576:	ca03      	ldmia	r2!, {r0, r1}
 8000578:	c303      	stmia	r3!, {r0, r1}
 800057a:	8811      	ldrh	r1, [r2, #0]
 800057c:	8019      	strh	r1, [r3, #0]
 800057e:	7892      	ldrb	r2, [r2, #2]
 8000580:	709a      	strb	r2, [r3, #2]
 8000582:	e05b      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000584:	2392      	movs	r3, #146	; 0x92
 8000586:	b299      	uxth	r1, r3
 8000588:	252b      	movs	r5, #43	; 0x2b
 800058a:	197c      	adds	r4, r7, r5
 800058c:	260c      	movs	r6, #12
 800058e:	19ba      	adds	r2, r7, r6
 8000590:	481f      	ldr	r0, [pc, #124]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	f002 ff9f 	bl	80034dc <HAL_I2C_Master_Receive>
 800059e:	0003      	movs	r3, r0
 80005a0:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80005a2:	197b      	adds	r3, r7, r5
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d038      	beq.n	800061c <HAL_TIM_OC_DelayElapsedCallback+0x3d8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80005aa:	19bb      	adds	r3, r7, r6
 80005ac:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80005ae:	ca03      	ldmia	r2!, {r0, r1}
 80005b0:	c303      	stmia	r3!, {r0, r1}
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	709a      	strb	r2, [r3, #2]
 80005ba:	e03f      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
 80005bc:	20000248 	.word	0x20000248
 80005c0:	20000029 	.word	0x20000029
 80005c4:	200003b0 	.word	0x200003b0
 80005c8:	20000024 	.word	0x20000024
 80005cc:	48000400 	.word	0x48000400
 80005d0:	08007534 	.word	0x08007534
 80005d4:	2000019c 	.word	0x2000019c
 80005d8:	40003800 	.word	0x40003800
 80005dc:	fffffbff 	.word	0xfffffbff
 80005e0:	200003ac 	.word	0x200003ac
 80005e4:	200003a2 	.word	0x200003a2
 80005e8:	40007400 	.word	0x40007400
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000380 	.word	0x20000380
 80005f4:	20000054 	.word	0x20000054
 80005f8:	200003b4 	.word	0x200003b4
 80005fc:	200003c2 	.word	0x200003c2
 8000600:	200003a4 	.word	0x200003a4
 8000604:	20000020 	.word	0x20000020
 8000608:	20000290 	.word	0x20000290
 800060c:	2000002a 	.word	0x2000002a
 8000610:	200000ec 	.word	0x200000ec
 8000614:	080074fc 	.word	0x080074fc
 8000618:	08007508 	.word	0x08007508
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 800061c:	200c      	movs	r0, #12
 800061e:	183b      	adds	r3, r7, r0
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	021a      	lsls	r2, r3, #8
 8000624:	213a      	movs	r1, #58	; 0x3a
 8000626:	187b      	adds	r3, r7, r1
 8000628:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	5e9b      	ldrsh	r3, [r3, r2]
 8000630:	183a      	adds	r2, r7, r0
 8000632:	7852      	ldrb	r2, [r2, #1]
 8000634:	4313      	orrs	r3, r2
 8000636:	10da      	asrs	r2, r3, #3
 8000638:	187b      	adds	r3, r7, r1
 800063a:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 800063c:	2200      	movs	r2, #0
 800063e:	250c      	movs	r5, #12
 8000640:	197b      	adds	r3, r7, r5
 8000642:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000644:	2396      	movs	r3, #150	; 0x96
 8000646:	b299      	uxth	r1, r3
 8000648:	262b      	movs	r6, #43	; 0x2b
 800064a:	19bc      	adds	r4, r7, r6
 800064c:	197a      	adds	r2, r7, r5
 800064e:	48ce      	ldr	r0, [pc, #824]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000650:	23fa      	movs	r3, #250	; 0xfa
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	f002 fe38 	bl	80032cc <HAL_I2C_Master_Transmit>
 800065c:	0003      	movs	r3, r0
 800065e:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000660:	19bb      	adds	r3, r7, r6
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d008      	beq.n	800067a <HAL_TIM_OC_DelayElapsedCallback+0x436>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000668:	197b      	adds	r3, r7, r5
 800066a:	4ac8      	ldr	r2, [pc, #800]	; (800098c <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 800066c:	ca03      	ldmia	r2!, {r0, r1}
 800066e:	c303      	stmia	r3!, {r0, r1}
 8000670:	8811      	ldrh	r1, [r2, #0]
 8000672:	8019      	strh	r1, [r3, #0]
 8000674:	7892      	ldrb	r2, [r2, #2]
 8000676:	709a      	strb	r2, [r3, #2]
 8000678:	e02b      	b.n	80006d2 <HAL_TIM_OC_DelayElapsedCallback+0x48e>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800067a:	2396      	movs	r3, #150	; 0x96
 800067c:	b299      	uxth	r1, r3
 800067e:	252b      	movs	r5, #43	; 0x2b
 8000680:	197c      	adds	r4, r7, r5
 8000682:	260c      	movs	r6, #12
 8000684:	19ba      	adds	r2, r7, r6
 8000686:	48c0      	ldr	r0, [pc, #768]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000688:	23fa      	movs	r3, #250	; 0xfa
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2302      	movs	r3, #2
 8000690:	f002 ff24 	bl	80034dc <HAL_I2C_Master_Receive>
 8000694:	0003      	movs	r3, r0
 8000696:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000698:	197b      	adds	r3, r7, r5
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d008      	beq.n	80006b2 <HAL_TIM_OC_DelayElapsedCallback+0x46e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80006a0:	19bb      	adds	r3, r7, r6
 80006a2:	4abb      	ldr	r2, [pc, #748]	; (8000990 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80006a4:	ca03      	ldmia	r2!, {r0, r1}
 80006a6:	c303      	stmia	r3!, {r0, r1}
 80006a8:	8811      	ldrh	r1, [r2, #0]
 80006aa:	8019      	strh	r1, [r3, #0]
 80006ac:	7892      	ldrb	r2, [r2, #2]
 80006ae:	709a      	strb	r2, [r3, #2]
 80006b0:	e00f      	b.n	80006d2 <HAL_TIM_OC_DelayElapsedCallback+0x48e>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80006b2:	200c      	movs	r0, #12
 80006b4:	183b      	adds	r3, r7, r0
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	021a      	lsls	r2, r3, #8
 80006ba:	2138      	movs	r1, #56	; 0x38
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	5e9b      	ldrsh	r3, [r3, r2]
 80006c6:	183a      	adds	r2, r7, r0
 80006c8:	7852      	ldrb	r2, [r2, #1]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	10da      	asrs	r2, r3, #3
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80006d2:	2311      	movs	r3, #17
 80006d4:	001a      	movs	r2, r3
 80006d6:	49af      	ldr	r1, [pc, #700]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80006d8:	4baf      	ldr	r3, [pc, #700]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fd78 	bl	80021d0 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80006e0:	2128      	movs	r1, #40	; 0x28
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	4aab      	ldr	r2, [pc, #684]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80006e6:	8852      	ldrh	r2, [r2, #2]
 80006e8:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80006ea:	2026      	movs	r0, #38	; 0x26
 80006ec:	183b      	adds	r3, r7, r0
 80006ee:	4aa9      	ldr	r2, [pc, #676]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80006f0:	8892      	ldrh	r2, [r2, #4]
 80006f2:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80006f4:	2424      	movs	r4, #36	; 0x24
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	4aa6      	ldr	r2, [pc, #664]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80006fa:	88d2      	ldrh	r2, [r2, #6]
 80006fc:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80006fe:	2522      	movs	r5, #34	; 0x22
 8000700:	197b      	adds	r3, r7, r5
 8000702:	4aa4      	ldr	r2, [pc, #656]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000704:	8912      	ldrh	r2, [r2, #8]
 8000706:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 8000708:	2620      	movs	r6, #32
 800070a:	19bb      	adds	r3, r7, r6
 800070c:	4aa1      	ldr	r2, [pc, #644]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800070e:	8952      	ldrh	r2, [r2, #10]
 8000710:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000712:	231e      	movs	r3, #30
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	4a9f      	ldr	r2, [pc, #636]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000718:	8a52      	ldrh	r2, [r2, #18]
 800071a:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 800071c:	221c      	movs	r2, #28
 800071e:	18bb      	adds	r3, r7, r2
 8000720:	4a9c      	ldr	r2, [pc, #624]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000722:	8a92      	ldrh	r2, [r2, #20]
 8000724:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000726:	231a      	movs	r3, #26
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	4a9a      	ldr	r2, [pc, #616]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800072c:	8ad2      	ldrh	r2, [r2, #22]
 800072e:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000730:	2218      	movs	r2, #24
 8000732:	18bb      	adds	r3, r7, r2
 8000734:	4a97      	ldr	r2, [pc, #604]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000736:	8b12      	ldrh	r2, [r2, #24]
 8000738:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 800073a:	2316      	movs	r3, #22
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	4a95      	ldr	r2, [pc, #596]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000740:	8b52      	ldrh	r2, [r2, #26]
 8000742:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000744:	2214      	movs	r2, #20
 8000746:	18bb      	adds	r3, r7, r2
 8000748:	4a92      	ldr	r2, [pc, #584]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800074a:	8b92      	ldrh	r2, [r2, #28]
 800074c:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 800074e:	2312      	movs	r3, #18
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	4a90      	ldr	r2, [pc, #576]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 8000754:	8bd2      	ldrh	r2, [r2, #30]
 8000756:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000758:	2210      	movs	r2, #16
 800075a:	18bb      	adds	r3, r7, r2
 800075c:	4a8d      	ldr	r2, [pc, #564]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 800075e:	8c12      	ldrh	r2, [r2, #32]
 8000760:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000762:	22cc      	movs	r2, #204	; 0xcc
 8000764:	4b8d      	ldr	r3, [pc, #564]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000766:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000768:	22cc      	movs	r2, #204	; 0xcc
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800076c:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 800076e:	4b8c      	ldr	r3, [pc, #560]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b88      	ldr	r3, [pc, #544]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800077a:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 800077c:	4b88      	ldr	r3, [pc, #544]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b86      	ldr	r3, [pc, #536]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000784:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000786:	2312      	movs	r3, #18
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b82      	ldr	r3, [pc, #520]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000794:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000796:	2312      	movs	r3, #18
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b7f      	ldr	r3, [pc, #508]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007a0:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 80007a2:	2210      	movs	r2, #16
 80007a4:	18bb      	adds	r3, r7, r2
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b7b      	ldr	r3, [pc, #492]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007b0:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 80007b2:	2210      	movs	r2, #16
 80007b4:	18bb      	adds	r3, r7, r2
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b78      	ldr	r3, [pc, #480]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007bc:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 80007be:	233e      	movs	r3, #62	; 0x3e
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	2200      	movs	r2, #0
 80007c4:	5e9b      	ldrsh	r3, [r3, r2]
 80007c6:	121b      	asrs	r3, r3, #8
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b74      	ldr	r3, [pc, #464]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007cc:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 80007ce:	233e      	movs	r3, #62	; 0x3e
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007d8:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 80007da:	233c      	movs	r3, #60	; 0x3c
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	2200      	movs	r2, #0
 80007e0:	5e9b      	ldrsh	r3, [r3, r2]
 80007e2:	121b      	asrs	r3, r3, #8
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b6d      	ldr	r3, [pc, #436]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007e8:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 80007ea:	233c      	movs	r3, #60	; 0x3c
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b6a      	ldr	r3, [pc, #424]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80007f4:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	2200      	movs	r2, #0
 80007fc:	5e9b      	ldrsh	r3, [r3, r2]
 80007fe:	121b      	asrs	r3, r3, #8
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b66      	ldr	r3, [pc, #408]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000804:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000806:	233a      	movs	r3, #58	; 0x3a
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000810:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000812:	2338      	movs	r3, #56	; 0x38
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2200      	movs	r2, #0
 8000818:	5e9b      	ldrsh	r3, [r3, r2]
 800081a:	121b      	asrs	r3, r3, #8
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000820:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000822:	2338      	movs	r3, #56	; 0x38
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b5c      	ldr	r3, [pc, #368]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800082c:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 800082e:	187b      	adds	r3, r7, r1
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b58      	ldr	r3, [pc, #352]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800083a:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 800083c:	187b      	adds	r3, r7, r1
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b56      	ldr	r3, [pc, #344]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000844:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000846:	183b      	adds	r3, r7, r0
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000852:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000854:	183b      	adds	r3, r7, r0
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b50      	ldr	r3, [pc, #320]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800085c:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 800085e:	211e      	movs	r1, #30
 8000860:	187b      	adds	r3, r7, r1
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b29b      	uxth	r3, r3
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800086c:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 800086e:	187b      	adds	r3, r7, r1
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b49      	ldr	r3, [pc, #292]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000876:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000878:	193b      	adds	r3, r7, r4
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	b29b      	uxth	r3, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b46      	ldr	r3, [pc, #280]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000884:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000886:	193b      	adds	r3, r7, r4
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b43      	ldr	r3, [pc, #268]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800088e:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000890:	201a      	movs	r0, #26
 8000892:	183b      	adds	r3, r7, r0
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b29b      	uxth	r3, r3
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b3f      	ldr	r3, [pc, #252]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800089e:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 80008a0:	183b      	adds	r3, r7, r0
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b3d      	ldr	r3, [pc, #244]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008a8:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 80008aa:	2018      	movs	r0, #24
 80008ac:	183b      	adds	r3, r7, r0
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008b8:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008c2:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 80008c4:	211c      	movs	r1, #28
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008d2:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008dc:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 80008de:	2114      	movs	r1, #20
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008ec:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008f6:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 80008f8:	2016      	movs	r0, #22
 80008fa:	183b      	adds	r3, r7, r0
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	b29b      	uxth	r3, r3
 8000902:	b2d9      	uxtb	r1, r3
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000906:	2220      	movs	r2, #32
 8000908:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 800090a:	183b      	adds	r3, r7, r0
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b2d9      	uxtb	r1, r3
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000916:	197b      	adds	r3, r7, r5
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b2d9      	uxtb	r1, r3
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 8000922:	2222      	movs	r2, #34	; 0x22
 8000924:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000926:	197b      	adds	r3, r7, r5
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	b2d9      	uxtb	r1, r3
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800092e:	2223      	movs	r2, #35	; 0x23
 8000930:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000932:	19bb      	adds	r3, r7, r6
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000942:	19bb      	adds	r3, r7, r6
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b2d9      	uxtb	r1, r3
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800094a:	2225      	movs	r2, #37	; 0x25
 800094c:	5499      	strb	r1, [r3, r2]


          FACTOR_COUNTER = 0;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]

          if (HK_ON)
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x764>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 800095c:	490f      	ldr	r1, [pc, #60]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 800095e:	4813      	ldr	r0, [pc, #76]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	2226      	movs	r2, #38	; 0x26
 8000964:	f005 fb28 	bl	8005fb8 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
          hk_seq++;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000978:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 800097a:	e070      	b.n	8000a5e <HAL_TIM_OC_DelayElapsedCallback+0x81a>
          hk_counter++;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	e06a      	b.n	8000a5e <HAL_TIM_OC_DelayElapsedCallback+0x81a>
 8000988:	200000ec 	.word	0x200000ec
 800098c:	080074fc 	.word	0x080074fc
 8000990:	08007508 	.word	0x08007508
 8000994:	20000380 	.word	0x20000380
 8000998:	20000054 	.word	0x20000054
 800099c:	200003cc 	.word	0x200003cc
 80009a0:	200003f2 	.word	0x200003f2
 80009a4:	200003b0 	.word	0x200003b0
 80009a8:	2000002a 	.word	0x2000002a
 80009ac:	20000290 	.word	0x20000290
 80009b0:	200003f4 	.word	0x200003f4
  else if (htim == &htim1)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x824>)
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d150      	bne.n	8000a5e <HAL_TIM_OC_DelayElapsedCallback+0x81a>
      if (PMT_ON)
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x828>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d04c      	beq.n	8000a5e <HAL_TIM_OC_DelayElapsedCallback+0x81a>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	005a      	lsls	r2, r3, #1
 80009ca:	2390      	movs	r3, #144	; 0x90
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fbab 	bl	800312c <HAL_GPIO_ReadPin>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d1f5      	bne.n	80009c6 <HAL_TIM_OC_DelayElapsedCallback+0x782>
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 80009da:	4925      	ldr	r1, [pc, #148]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x82c>)
 80009dc:	4825      	ldr	r0, [pc, #148]	; (8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x830>)
 80009de:	2301      	movs	r3, #1
 80009e0:	2201      	movs	r2, #1
 80009e2:	f003 ff49 	bl	8004878 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x834>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x834>)
 80009ec:	4923      	ldr	r1, [pc, #140]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x838>)
 80009ee:	400a      	ands	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x834>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0fb      	beq.n	80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>
		pmt_raw = SPI1->DR;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x834>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	001a      	movs	r2, r3
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x83c>)
 8000a04:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x83c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 8000a0c:	22bb      	movs	r2, #187	; 0xbb
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a10:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000a12:	22bb      	movs	r2, #187	; 0xbb
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a16:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a24:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a2e:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x83c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a3a:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x83c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a44:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a50:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000a52:	490c      	ldr	r1, [pc, #48]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x848>)
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2206      	movs	r2, #6
 8000a5a:	f005 faad 	bl	8005fb8 <HAL_UART_Transmit>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b011      	add	sp, #68	; 0x44
 8000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000200 	.word	0x20000200
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	08007534 	.word	0x08007534
 8000a74:	20000138 	.word	0x20000138
 8000a78:	40013000 	.word	0x40013000
 8000a7c:	fffffbff 	.word	0xfffffbff
 8000a80:	200003a8 	.word	0x200003a8
 8000a84:	200003c4 	.word	0x200003c4
 8000a88:	200003ca 	.word	0x200003ca
 8000a8c:	20000290 	.word	0x20000290

08000a90 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000a98:	498e      	ldr	r1, [pc, #568]	; (8000cd4 <HAL_UART_RxCpltCallback+0x244>)
 8000a9a:	4b8f      	ldr	r3, [pc, #572]	; (8000cd8 <HAL_UART_RxCpltCallback+0x248>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f005 fb33 	bl	800610a <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	4a8a      	ldr	r2, [pc, #552]	; (8000cd4 <HAL_UART_RxCpltCallback+0x244>)
 8000aaa:	7812      	ldrb	r2, [r2, #0]
 8000aac:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b25      	cmp	r3, #37	; 0x25
 8000ab4:	d900      	bls.n	8000ab8 <HAL_UART_RxCpltCallback+0x28>
 8000ab6:	e108      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
 8000ab8:	009a      	lsls	r2, r3, #2
 8000aba:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <HAL_UART_RxCpltCallback+0x24c>)
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000ac2:	4b87      	ldr	r3, [pc, #540]	; (8000ce0 <HAL_UART_RxCpltCallback+0x250>)
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fb4c 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000ace:	e0fc      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ad0:	4b83      	ldr	r3, [pc, #524]	; (8000ce0 <HAL_UART_RxCpltCallback+0x250>)
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 fb45 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000adc:	e0f5      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000ade:	4b80      	ldr	r3, [pc, #512]	; (8000ce0 <HAL_UART_RxCpltCallback+0x250>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fb3e 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000aea:	e0ee      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000aec:	4b7c      	ldr	r3, [pc, #496]	; (8000ce0 <HAL_UART_RxCpltCallback+0x250>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f002 fb37 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000af8:	e0e7      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1B:
  {
    if (step < 7)
 8000afa:	4b7a      	ldr	r3, [pc, #488]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d900      	bls.n	8000b04 <HAL_UART_RxCpltCallback+0x74>
 8000b02:	e0db      	b.n	8000cbc <HAL_UART_RxCpltCallback+0x22c>
    {
      step++;
 8000b04:	4b77      	ldr	r3, [pc, #476]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b75      	ldr	r3, [pc, #468]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b0e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b10:	e0d4      	b.n	8000cbc <HAL_UART_RxCpltCallback+0x22c>
  }
  case 0x1C:
  {
    if (step > 0)
 8000b12:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d100      	bne.n	8000b1c <HAL_UART_RxCpltCallback+0x8c>
 8000b1a:	e0d1      	b.n	8000cc0 <HAL_UART_RxCpltCallback+0x230>
    {
      step--;
 8000b1c:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b6f      	ldr	r3, [pc, #444]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b26:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b28:	e0ca      	b.n	8000cc0 <HAL_UART_RxCpltCallback+0x230>
  }
  case 0x1D: {
	  if (!auto_sweep) {
 8000b2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ce8 <HAL_UART_RxCpltCallback+0x258>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d106      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0xb0>
		  auto_sweep = 1;
 8000b32:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <HAL_UART_RxCpltCallback+0x258>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
		  step = 0;
 8000b38:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e005      	b.n	8000b4c <HAL_UART_RxCpltCallback+0xbc>
	  } else {
		  auto_sweep = 0;
 8000b40:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <HAL_UART_RxCpltCallback+0x258>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
		  step = 0;
 8000b46:	4b67      	ldr	r3, [pc, #412]	; (8000ce4 <HAL_UART_RxCpltCallback+0x254>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	  }
  }
  case 0x24: {
	  if (SAMPLING_FACTOR < 16) {
 8000b4c:	4b67      	ldr	r3, [pc, #412]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	dd00      	ble.n	8000b56 <HAL_UART_RxCpltCallback+0xc6>
 8000b54:	e0b6      	b.n	8000cc4 <HAL_UART_RxCpltCallback+0x234>
		  SAMPLING_FACTOR *= 2;
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	005a      	lsls	r2, r3, #1
 8000b5c:	4b63      	ldr	r3, [pc, #396]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b5e:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000b60:	4b63      	ldr	r3, [pc, #396]	; (8000cf0 <HAL_UART_RxCpltCallback+0x260>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000b66:	e0ad      	b.n	8000cc4 <HAL_UART_RxCpltCallback+0x234>
  }
  case 0x25: {
	  if (SAMPLING_FACTOR > 1) {
 8000b68:	4b60      	ldr	r3, [pc, #384]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	dc00      	bgt.n	8000b72 <HAL_UART_RxCpltCallback+0xe2>
 8000b70:	e0aa      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x238>
		  SAMPLING_FACTOR /= 2;
 8000b72:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da00      	bge.n	8000b7c <HAL_UART_RxCpltCallback+0xec>
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	105b      	asrs	r3, r3, #1
 8000b7e:	001a      	movs	r2, r3
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <HAL_UART_RxCpltCallback+0x25c>)
 8000b82:	601a      	str	r2, [r3, #0]
		  FACTOR_COUNTER = 0;
 8000b84:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <HAL_UART_RxCpltCallback+0x260>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	  }
	  break;
 8000b8a:	e09d      	b.n	8000cc8 <HAL_UART_RxCpltCallback+0x238>

  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000b8c:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <HAL_UART_RxCpltCallback+0x264>)
 8000b8e:	2120      	movs	r1, #32
 8000b90:	2201      	movs	r2, #1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fae7 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000b98:	e097      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000b9a:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <HAL_UART_RxCpltCallback+0x264>)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 fae0 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000ba6:	e090      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <HAL_UART_RxCpltCallback+0x264>)
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	2201      	movs	r2, #1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 fad9 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000bb4:	e089      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <HAL_UART_RxCpltCallback+0x264>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2200      	movs	r2, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f002 fad2 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000bc2:	e082      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000bc4:	484c      	ldr	r0, [pc, #304]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	2201      	movs	r2, #1
 8000bcc:	0019      	movs	r1, r3
 8000bce:	f002 faca 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000bd2:	e07a      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000bd4:	4848      	ldr	r0, [pc, #288]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	2200      	movs	r2, #0
 8000bdc:	0019      	movs	r1, r3
 8000bde:	f002 fac2 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000be2:	e072      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000be4:	4844      	ldr	r0, [pc, #272]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	2201      	movs	r2, #1
 8000bec:	0019      	movs	r1, r3
 8000bee:	f002 faba 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000bf2:	e06a      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bf4:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	f002 fab2 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c02:	e062      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	2201      	movs	r2, #1
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 faab 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c10:	e05b      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000c12:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	2200      	movs	r2, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 faa4 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c1e:	e054      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000c20:	4835      	ldr	r0, [pc, #212]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2201      	movs	r2, #1
 8000c28:	0019      	movs	r1, r3
 8000c2a:	f002 fa9c 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c2e:	e04c      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000c30:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2200      	movs	r2, #0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f002 fa94 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c3e:	e044      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c40:	482d      	ldr	r0, [pc, #180]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	2201      	movs	r2, #1
 8000c48:	0019      	movs	r1, r3
 8000c4a:	f002 fa8c 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c4e:	e03c      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c50:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	2200      	movs	r2, #0
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f002 fa84 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c5e:	e034      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	2201      	movs	r2, #1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fa7d 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c6c:	e02d      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <HAL_UART_RxCpltCallback+0x268>)
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	2200      	movs	r2, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fa76 	bl	8003166 <HAL_GPIO_WritePin>
    break;
 8000c7a:	e026      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000c7c:	f001 f95a 	bl	8001f34 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000c80:	2101      	movs	r1, #1
 8000c82:	2001      	movs	r0, #1
 8000c84:	f002 ffc2 	bl	8003c0c <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000c88:	f7ff faca 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_UART_RxCpltCallback+0x26c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
    break;
 8000c92:	e01a      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_UART_RxCpltCallback+0x26c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
    break;
 8000c9a:	e016      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_RxCpltCallback+0x270>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
    break;
 8000ca2:	e012      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_UART_RxCpltCallback+0x270>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    break;
 8000caa:	e00e      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_RxCpltCallback+0x274>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
    break;
 8000cb2:	e00a      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_UART_RxCpltCallback+0x274>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
    break;
 8000cba:	e006      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	e004      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
    break;
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	e002      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
	  break;
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	e000      	b.n	8000cca <HAL_UART_RxCpltCallback+0x23a>
	  break;
 8000cc8:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000314 	.word	0x20000314
 8000cd8:	20000290 	.word	0x20000290
 8000cdc:	08007538 	.word	0x08007538
 8000ce0:	48001400 	.word	0x48001400
 8000ce4:	200003a2 	.word	0x200003a2
 8000ce8:	200003a4 	.word	0x200003a4
 8000cec:	20000024 	.word	0x20000024
 8000cf0:	200003b0 	.word	0x200003b0
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	20000028 	.word	0x20000028
 8000d00:	20000029 	.word	0x20000029
 8000d04:	2000002a 	.word	0x2000002a

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f001 f8ad 	bl	8001e6c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f86d 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 fc87 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1a:	f000 fc67 	bl	80015ec <MX_DMA_Init>
  MX_SPI2_Init();
 8000d1e:	f000 faaf 	bl	8001280 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d22:	f000 faed 	bl	8001300 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d26:	f000 fba1 	bl	800146c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d2a:	f000 fa69 	bl	8001200 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d2e:	f000 fc1d 	bl	800156c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000d32:	f000 f9f3 	bl	800111c <MX_DAC1_Init>
  MX_ADC_Init();
 8000d36:	f000 f8c5 	bl	8000ec4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000d3a:	f000 fa21 	bl	8001180 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <main+0xd0>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 fe33 	bl	80029ae <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <main+0xd4>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f004 f8b1 	bl	8004eb4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <main+0xd8>)
 8000d54:	210c      	movs	r1, #12
 8000d56:	0018      	movs	r0, r3
 8000d58:	f004 f8ac 	bl	8004eb4 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <main+0xdc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	69da      	ldr	r2, [r3, #28]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	401a      	ands	r2, r3
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	025b      	lsls	r3, r3, #9
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d0f5      	beq.n	8000d5e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <main+0xdc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	69da      	ldr	r2, [r3, #28]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	03db      	lsls	r3, r3, #15
 8000d7e:	401a      	ands	r2, r3
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	03db      	lsls	r3, r3, #15
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d1f5      	bne.n	8000d74 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <main+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <main+0xe0>)
 8000d90:	2210      	movs	r2, #16
 8000d92:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <main+0xe0>)
 8000d96:	225b      	movs	r2, #91	; 0x5b
 8000d98:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <main+0xe0>)
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <main+0xdc>)
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	f006 fab7 	bl	8007314 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <main+0xa6>
      Error_Handler();
 8000daa:	f000 fcd7 	bl	800175c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <main+0xdc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <main+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	03c9      	lsls	r1, r1, #15
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <main+0xdc>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f006 fb0c 	bl	80073e0 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000dc8:	4908      	ldr	r1, [pc, #32]	; (8000dec <main+0xe4>)
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <main+0xdc>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f005 f99b 	bl	800610a <HAL_UART_Receive_IT>
 8000dd4:	e7f8      	b.n	8000dc8 <main+0xc0>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	200000d8 	.word	0x200000d8
 8000ddc:	20000200 	.word	0x20000200
 8000de0:	20000248 	.word	0x20000248
 8000de4:	20000290 	.word	0x20000290
 8000de8:	20000378 	.word	0x20000378
 8000dec:	20000314 	.word	0x20000314

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b097      	sub	sp, #92	; 0x5c
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	2428      	movs	r4, #40	; 0x28
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2330      	movs	r3, #48	; 0x30
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f006 fb67 	bl	80074d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e06:	2318      	movs	r3, #24
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2100      	movs	r1, #0
 8000e12:	f006 fb5f 	bl	80074d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f006 fb58 	bl	80074d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000e24:	0021      	movs	r1, r4
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2212      	movs	r2, #18
 8000e2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2201      	movs	r2, #1
 8000e36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2210      	movs	r2, #16
 8000e42:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2202      	movs	r2, #2
 8000e48:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	22a0      	movs	r2, #160	; 0xa0
 8000e54:	0392      	lsls	r2, r2, #14
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 ff07 	bl	8003c74 <HAL_RCC_OscConfig>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e6a:	f000 fc77 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	2118      	movs	r1, #24
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2207      	movs	r2, #7
 8000e74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2202      	movs	r2, #2
 8000e7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f003 fa0b 	bl	80042a8 <HAL_RCC_ClockConfig>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e96:	f000 fc61 	bl	800175c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2221      	movs	r2, #33	; 0x21
 8000e9e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fb4c 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000eb8:	f000 fc50 	bl	800175c <Error_Handler>
  }
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b017      	add	sp, #92	; 0x5c
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	230c      	movs	r3, #12
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f006 fafe 	bl	80074d4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ed8:	4b8e      	ldr	r3, [pc, #568]	; (8001114 <MX_ADC_Init+0x250>)
 8000eda:	4a8f      	ldr	r2, [pc, #572]	; (8001118 <MX_ADC_Init+0x254>)
 8000edc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ede:	4b8d      	ldr	r3, [pc, #564]	; (8001114 <MX_ADC_Init+0x250>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee4:	4b8b      	ldr	r3, [pc, #556]	; (8001114 <MX_ADC_Init+0x250>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eea:	4b8a      	ldr	r3, [pc, #552]	; (8001114 <MX_ADC_Init+0x250>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ef0:	4b88      	ldr	r3, [pc, #544]	; (8001114 <MX_ADC_Init+0x250>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef6:	4b87      	ldr	r3, [pc, #540]	; (8001114 <MX_ADC_Init+0x250>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000efc:	4b85      	ldr	r3, [pc, #532]	; (8001114 <MX_ADC_Init+0x250>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f02:	4b84      	ldr	r3, [pc, #528]	; (8001114 <MX_ADC_Init+0x250>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f08:	4b82      	ldr	r3, [pc, #520]	; (8001114 <MX_ADC_Init+0x250>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f0e:	4b81      	ldr	r3, [pc, #516]	; (8001114 <MX_ADC_Init+0x250>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b7f      	ldr	r3, [pc, #508]	; (8001114 <MX_ADC_Init+0x250>)
 8000f16:	22c2      	movs	r2, #194	; 0xc2
 8000f18:	32ff      	adds	r2, #255	; 0xff
 8000f1a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <MX_ADC_Init+0x250>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <MX_ADC_Init+0x250>)
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	2100      	movs	r1, #0
 8000f28:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f2a:	4b7a      	ldr	r3, [pc, #488]	; (8001114 <MX_ADC_Init+0x250>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f30:	4b78      	ldr	r3, [pc, #480]	; (8001114 <MX_ADC_Init+0x250>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 f80c 	bl	8001f50 <HAL_ADC_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f3c:	f000 fc0e 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	0152      	lsls	r2, r2, #5
 8000f4c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0552      	lsls	r2, r2, #21
 8000f54:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	4b6e      	ldr	r3, [pc, #440]	; (8001114 <MX_ADC_Init+0x250>)
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 f9d1 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f66:	f000 fbf9 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f70:	1d3a      	adds	r2, r7, #4
 8000f72:	4b68      	ldr	r3, [pc, #416]	; (8001114 <MX_ADC_Init+0x250>)
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 f9c4 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000f80:	f000 fbec 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2202      	movs	r2, #2
 8000f88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	4b61      	ldr	r3, [pc, #388]	; (8001114 <MX_ADC_Init+0x250>)
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 f9b7 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000f9a:	f000 fbdf 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fa4:	1d3a      	adds	r2, r7, #4
 8000fa6:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <MX_ADC_Init+0x250>)
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f9aa 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000fb4:	f000 fbd2 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2205      	movs	r2, #5
 8000fbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fbe:	1d3a      	adds	r2, r7, #4
 8000fc0:	4b54      	ldr	r3, [pc, #336]	; (8001114 <MX_ADC_Init+0x250>)
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f99d 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000fce:	f000 fbc5 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fd8:	1d3a      	adds	r2, r7, #4
 8000fda:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <MX_ADC_Init+0x250>)
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 f990 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000fe8:	f000 fbb8 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2207      	movs	r2, #7
 8000ff0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ff2:	1d3a      	adds	r2, r7, #4
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <MX_ADC_Init+0x250>)
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 f983 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8001002:	f000 fbab 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2208      	movs	r2, #8
 800100a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800100c:	1d3a      	adds	r2, r7, #4
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <MX_ADC_Init+0x250>)
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f976 	bl	8002304 <HAL_ADC_ConfigChannel>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 800101c:	f000 fb9e 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2209      	movs	r2, #9
 8001024:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001026:	1d3a      	adds	r2, r7, #4
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <MX_ADC_Init+0x250>)
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f969 	bl	8002304 <HAL_ADC_ConfigChannel>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8001036:	f000 fb91 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	220a      	movs	r2, #10
 800103e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001040:	1d3a      	adds	r2, r7, #4
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_ADC_Init+0x250>)
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f001 f95c 	bl	8002304 <HAL_ADC_ConfigChannel>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001050:	f000 fb84 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	220b      	movs	r2, #11
 8001058:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800105a:	1d3a      	adds	r2, r7, #4
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC_Init+0x250>)
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f001 f94f 	bl	8002304 <HAL_ADC_ConfigChannel>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800106a:	f000 fb77 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	220c      	movs	r2, #12
 8001072:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001074:	1d3a      	adds	r2, r7, #4
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MX_ADC_Init+0x250>)
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f001 f942 	bl	8002304 <HAL_ADC_ConfigChannel>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8001084:	f000 fb6a 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	220d      	movs	r2, #13
 800108c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC_Init+0x250>)
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f001 f935 	bl	8002304 <HAL_ADC_ConfigChannel>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800109e:	f000 fb5d 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	220e      	movs	r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC_Init+0x250>)
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f928 	bl	8002304 <HAL_ADC_ConfigChannel>
 80010b4:	1e03      	subs	r3, r0, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80010b8:	f000 fb50 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	220f      	movs	r2, #15
 80010c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010c2:	1d3a      	adds	r2, r7, #4
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_ADC_Init+0x250>)
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 f91b 	bl	8002304 <HAL_ADC_ConfigChannel>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 80010d2:	f000 fb43 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2210      	movs	r2, #16
 80010da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010dc:	1d3a      	adds	r2, r7, #4
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_ADC_Init+0x250>)
 80010e0:	0011      	movs	r1, r2
 80010e2:	0018      	movs	r0, r3
 80010e4:	f001 f90e 	bl	8002304 <HAL_ADC_ConfigChannel>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 80010ec:	f000 fb36 	bl	800175c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2211      	movs	r2, #17
 80010f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010f6:	1d3a      	adds	r2, r7, #4
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_ADC_Init+0x250>)
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 f901 	bl	8002304 <HAL_ADC_ConfigChannel>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8001106:	f000 fb29 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20000054 	.word	0x20000054
 8001118:	40012400 	.word	0x40012400

0800111c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_DAC1_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001128:	003b      	movs	r3, r7
 800112a:	0018      	movs	r0, r3
 800112c:	2308      	movs	r3, #8
 800112e:	001a      	movs	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f006 f9cf 	bl	80074d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_DAC1_Init+0x5c>)
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <MX_DAC1_Init+0x60>)
 800113a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_DAC1_Init+0x5c>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fbd4 	bl	80028ec <HAL_DAC_Init>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001148:	f000 fb08 	bl	800175c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800114c:	003b      	movs	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001152:	003b      	movs	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001158:	0039      	movs	r1, r7
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_DAC1_Init+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f001 fbe7 	bl	8002932 <HAL_DAC_ConfigChannel>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001168:	f000 faf8 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003a2 	.word	0x200003a2
 8001178:	200000d8 	.word	0x200000d8
 800117c:	40007400 	.word	0x40007400

08001180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011bc:	0018      	movs	r0, r3
 80011be:	f001 ffef 	bl	80031a0 <HAL_I2C_Init>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c6:	f000 fac9 	bl	800175c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 fc84 	bl	8003adc <HAL_I2CEx_ConfigAnalogFilter>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 fac0 	bl	800175c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011de:	2100      	movs	r1, #0
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fcc7 	bl	8003b74 <HAL_I2CEx_ConfigDigitalFilter>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fab7 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000ec 	.word	0x200000ec
 80011f8:	40005400 	.word	0x40005400
 80011fc:	2000090e 	.word	0x2000090e

08001200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_SPI1_Init+0x78>)
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <MX_SPI1_Init+0x7c>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_SPI1_Init+0x78>)
 800120c:	2282      	movs	r2, #130	; 0x82
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_SPI1_Init+0x78>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	00d2      	lsls	r2, r2, #3
 8001218:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI1_Init+0x78>)
 800121c:	22f0      	movs	r2, #240	; 0xf0
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_SPI1_Init+0x78>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_SPI1_Init+0x78>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI1_Init+0x78>)
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_SPI1_Init+0x78>)
 8001238:	2230      	movs	r2, #48	; 0x30
 800123a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI1_Init+0x78>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_SPI1_Init+0x78>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_SPI1_Init+0x78>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_SPI1_Init+0x78>)
 8001250:	2207      	movs	r2, #7
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_SPI1_Init+0x78>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_SPI1_Init+0x78>)
 800125c:	2208      	movs	r2, #8
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <MX_SPI1_Init+0x78>)
 8001262:	0018      	movs	r0, r3
 8001264:	f003 fa50 	bl	8004708 <HAL_SPI_Init>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 fa76 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000138 	.word	0x20000138
 800127c:	40013000 	.word	0x40013000

08001280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SPI2_Init+0x78>)
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <MX_SPI2_Init+0x7c>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SPI2_Init+0x78>)
 800128c:	2282      	movs	r2, #130	; 0x82
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SPI2_Init+0x78>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_SPI2_Init+0x78>)
 800129c:	22f0      	movs	r2, #240	; 0xf0
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012b8:	2230      	movs	r2, #48	; 0x30
 80012ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012dc:	2208      	movs	r2, #8
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <MX_SPI2_Init+0x78>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f003 fa10 	bl	8004708 <HAL_SPI_Init>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 fa36 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	2000019c 	.word	0x2000019c
 80012fc:	40003800 	.word	0x40003800

08001300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b096      	sub	sp, #88	; 0x58
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	2348      	movs	r3, #72	; 0x48
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	0018      	movs	r0, r3
 800130c:	2310      	movs	r3, #16
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f006 f8df 	bl	80074d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	0018      	movs	r0, r3
 800131c:	2308      	movs	r3, #8
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f006 f8d7 	bl	80074d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	2324      	movs	r3, #36	; 0x24
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	0018      	movs	r0, r3
 800132c:	231c      	movs	r3, #28
 800132e:	001a      	movs	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	f006 f8cf 	bl	80074d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	0018      	movs	r0, r3
 800133a:	2320      	movs	r3, #32
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f006 f8c8 	bl	80074d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <MX_TIM1_Init+0x160>)
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <MX_TIM1_Init+0x164>)
 8001348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <MX_TIM1_Init+0x160>)
 800134c:	2263      	movs	r2, #99	; 0x63
 800134e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <MX_TIM1_Init+0x160>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <MX_TIM1_Init+0x160>)
 8001358:	4a43      	ldr	r2, [pc, #268]	; (8001468 <MX_TIM1_Init+0x168>)
 800135a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <MX_TIM1_Init+0x160>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <MX_TIM1_Init+0x160>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <MX_TIM1_Init+0x160>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <MX_TIM1_Init+0x160>)
 8001370:	0018      	movs	r0, r3
 8001372:	f003 fd4f 	bl	8004e14 <HAL_TIM_Base_Init>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800137a:	f000 f9ef 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	2148      	movs	r1, #72	; 0x48
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0152      	lsls	r2, r2, #5
 8001386:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001388:	187a      	adds	r2, r7, r1
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <MX_TIM1_Init+0x160>)
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f004 f8c4 	bl	800551c <HAL_TIM_ConfigClockSource>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001398:	f000 f9e0 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_TIM1_Init+0x160>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f003 fe88 	bl	80050b4 <HAL_TIM_PWM_Init>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80013a8:	f000 f9d8 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ba:	187a      	adds	r2, r7, r1
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_TIM1_Init+0x160>)
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f004 fcd9 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80013ca:	f000 f9c7 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2124      	movs	r1, #36	; 0x24
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2260      	movs	r2, #96	; 0x60
 80013d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	22e0      	movs	r2, #224	; 0xe0
 80013da:	32ff      	adds	r2, #255	; 0xff
 80013dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	1879      	adds	r1, r7, r1
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_TIM1_Init+0x160>)
 8001400:	2200      	movs	r2, #0
 8001402:	0018      	movs	r0, r3
 8001404:	f003 ffc4 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800140c:	f000 f9a6 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0192      	lsls	r2, r2, #6
 8001434:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800143c:	1d3a      	adds	r2, r7, #4
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_TIM1_Init+0x160>)
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f004 fcf6 	bl	8005e34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800144c:	f000 f986 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <MX_TIM1_Init+0x160>)
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fbc2 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b016      	add	sp, #88	; 0x58
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000200 	.word	0x20000200
 8001464:	40012c00 	.word	0x40012c00
 8001468:	0000bb7f 	.word	0x0000bb7f

0800146c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	2328      	movs	r3, #40	; 0x28
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	0018      	movs	r0, r3
 8001478:	2310      	movs	r3, #16
 800147a:	001a      	movs	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	f006 f829 	bl	80074d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	2320      	movs	r3, #32
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	0018      	movs	r0, r3
 8001488:	2308      	movs	r3, #8
 800148a:	001a      	movs	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	f006 f821 	bl	80074d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	0018      	movs	r0, r3
 8001496:	231c      	movs	r3, #28
 8001498:	001a      	movs	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	f006 f81a 	bl	80074d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	05d2      	lsls	r2, r2, #23
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <MX_TIM2_Init+0xfc>)
 80014ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014b6:	222c      	movs	r2, #44	; 0x2c
 80014b8:	32ff      	adds	r2, #255	; 0xff
 80014ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f003 fca2 	bl	8004e14 <HAL_TIM_Base_Init>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014d4:	f000 f942 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	2128      	movs	r1, #40	; 0x28
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0152      	lsls	r2, r2, #5
 80014e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e2:	187a      	adds	r2, r7, r1
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f004 f817 	bl	800551c <HAL_TIM_ConfigClockSource>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014f2:	f000 f933 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM2_Init+0xf8>)
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 fddb 	bl	80050b4 <HAL_TIM_PWM_Init>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001502:	f000 f92b 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2120      	movs	r1, #32
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	187a      	adds	r2, r7, r1
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_TIM2_Init+0xf8>)
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f004 fc2c 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001524:	f000 f91a 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2260      	movs	r2, #96	; 0x60
 800152c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30 - 1;
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	221d      	movs	r2, #29
 8001532:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001540:	1d39      	adds	r1, r7, #4
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_TIM2_Init+0xf8>)
 8001544:	220c      	movs	r2, #12
 8001546:	0018      	movs	r0, r3
 8001548:	f003 ff22 	bl	8005390 <HAL_TIM_PWM_ConfigChannel>
 800154c:	1e03      	subs	r3, r0, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001550:	f000 f904 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <MX_TIM2_Init+0xf8>)
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fb40 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b00e      	add	sp, #56	; 0x38
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000248 	.word	0x20000248
 8001568:	000003e7 	.word	0x000003e7

0800156c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_USART1_UART_Init+0x6c>)
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_USART1_UART_Init+0x70>)
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_USART1_UART_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_USART1_UART_Init+0x7c>)
 8001586:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 800158a:	22e1      	movs	r2, #225	; 0xe1
 800158c:	0212      	lsls	r2, r2, #8
 800158e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015a4:	220c      	movs	r2, #12
 80015a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x78>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f004 fca4 	bl	8005f10 <HAL_UART_Init>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80015cc:	f000 f8c6 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	200003c2 	.word	0x200003c2
 80015dc:	200003ca 	.word	0x200003ca
 80015e0:	200003f2 	.word	0x200003f2
 80015e4:	20000290 	.word	0x20000290
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_DMA_Init+0x38>)
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_DMA_Init+0x38>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_DMA_Init+0x38>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2201      	movs	r2, #1
 8001604:	4013      	ands	r3, r2
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2009      	movs	r0, #9
 8001610:	f001 f93a 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001614:	2009      	movs	r0, #9
 8001616:	f001 f94c 	bl	80028b2 <HAL_NVIC_EnableIRQ>

}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40021000 	.word	0x40021000

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	2414      	movs	r4, #20
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	2314      	movs	r3, #20
 8001636:	001a      	movs	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	f005 ff4b 	bl	80074d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <MX_GPIO_Init+0x124>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <MX_GPIO_Init+0x124>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0309      	lsls	r1, r1, #12
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <MX_GPIO_Init+0x124>)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	031b      	lsls	r3, r3, #12
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <MX_GPIO_Init+0x124>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <MX_GPIO_Init+0x124>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	03c9      	lsls	r1, r1, #15
 8001664:	430a      	orrs	r2, r1
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <MX_GPIO_Init+0x124>)
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	03db      	lsls	r3, r3, #15
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <MX_GPIO_Init+0x124>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <MX_GPIO_Init+0x124>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0289      	lsls	r1, r1, #10
 8001680:	430a      	orrs	r2, r1
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <MX_GPIO_Init+0x124>)
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <MX_GPIO_Init+0x124>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_GPIO_Init+0x124>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	02c9      	lsls	r1, r1, #11
 800169c:	430a      	orrs	r2, r1
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <MX_GPIO_Init+0x124>)
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	02db      	lsls	r3, r3, #11
 80016a8:	4013      	ands	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80016ae:	239f      	movs	r3, #159	; 0x9f
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	4827      	ldr	r0, [pc, #156]	; (8001750 <MX_GPIO_Init+0x128>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	0019      	movs	r1, r3
 80016b8:	f001 fd55 	bl	8003166 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <MX_GPIO_Init+0x12c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	21c0      	movs	r1, #192	; 0xc0
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 fd4f 	bl	8003166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_GPIO_Init+0x130>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	2160      	movs	r1, #96	; 0x60
 80016ce:	0018      	movs	r0, r3
 80016d0:	f001 fd49 	bl	8003166 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	229f      	movs	r2, #159	; 0x9f
 80016d8:	0192      	lsls	r2, r2, #6
 80016da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2201      	movs	r2, #1
 80016e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <MX_GPIO_Init+0x128>)
 80016f2:	0019      	movs	r1, r3
 80016f4:	0010      	movs	r0, r2
 80016f6:	f001 fba9 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	22c0      	movs	r2, #192	; 0xc0
 80016fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2201      	movs	r2, #1
 8001704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001712:	193b      	adds	r3, r7, r4
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <MX_GPIO_Init+0x12c>)
 8001716:	0019      	movs	r1, r3
 8001718:	0010      	movs	r0, r2
 800171a:	f001 fb97 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800171e:	0021      	movs	r1, r4
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2260      	movs	r2, #96	; 0x60
 8001724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2201      	movs	r2, #1
 800172a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	187b      	adds	r3, r7, r1
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <MX_GPIO_Init+0x130>)
 800173c:	0019      	movs	r1, r3
 800173e:	0010      	movs	r0, r2
 8001740:	f001 fb84 	bl	8002e4c <HAL_GPIO_Init>

}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b00b      	add	sp, #44	; 0x2c
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800
 8001754:	48001400 	.word	0x48001400
 8001758:	48000400 	.word	0x48000400

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x44>)
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_MspInit+0x44>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x44>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x44>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_MspInit+0x44>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	430a      	orrs	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_MspInit+0x44>)
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	4013      	ands	r3, r2
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08d      	sub	sp, #52	; 0x34
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	241c      	movs	r4, #28
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	0018      	movs	r0, r3
 80017be:	2314      	movs	r3, #20
 80017c0:	001a      	movs	r2, r3
 80017c2:	2100      	movs	r1, #0
 80017c4:	f005 fe86 	bl	80074d4 <memset>
  if(hadc->Instance==ADC1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_ADC_MspInit+0x148>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d000      	beq.n	80017d4 <HAL_ADC_MspInit+0x24>
 80017d2:	e08d      	b.n	80018f0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0089      	lsls	r1, r1, #2
 80017de:	430a      	orrs	r2, r1
 80017e0:	619a      	str	r2, [r3, #24]
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f0:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0309      	lsls	r1, r1, #12
 80017fa:	430a      	orrs	r2, r1
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	031b      	lsls	r3, r3, #12
 8001806:	4013      	ands	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	0289      	lsls	r1, r1, #10
 8001816:	430a      	orrs	r2, r1
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	029b      	lsls	r3, r3, #10
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	02c9      	lsls	r1, r1, #11
 8001832:	430a      	orrs	r2, r1
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_ADC_MspInit+0x14c>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	02db      	lsls	r3, r3, #11
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001844:	193b      	adds	r3, r7, r4
 8001846:	223f      	movs	r2, #63	; 0x3f
 8001848:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	2203      	movs	r2, #3
 800184e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	193b      	adds	r3, r7, r4
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_ADC_MspInit+0x150>)
 800185a:	0019      	movs	r1, r3
 800185c:	0010      	movs	r0, r2
 800185e:	f001 faf5 	bl	8002e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001862:	193b      	adds	r3, r7, r4
 8001864:	22ef      	movs	r2, #239	; 0xef
 8001866:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001868:	193b      	adds	r3, r7, r4
 800186a:	2203      	movs	r2, #3
 800186c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	193a      	adds	r2, r7, r4
 8001876:	2390      	movs	r3, #144	; 0x90
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f001 fae5 	bl	8002e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001882:	193b      	adds	r3, r7, r4
 8001884:	2203      	movs	r2, #3
 8001886:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001888:	193b      	adds	r3, r7, r4
 800188a:	2203      	movs	r2, #3
 800188c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	193b      	adds	r3, r7, r4
 8001896:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_ADC_MspInit+0x154>)
 8001898:	0019      	movs	r1, r3
 800189a:	0010      	movs	r0, r2
 800189c:	f001 fad6 	bl	8002e4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018a2:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_ADC_MspInit+0x15c>)
 80018a4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0052      	lsls	r2, r2, #1
 80018be:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f001 f8a2 	bl	8002a20 <HAL_DMA_Init>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80018e0:	f7ff ff3c 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_ADC_MspInit+0x158>)
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b00d      	add	sp, #52	; 0x34
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	40012400 	.word	0x40012400
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000800 	.word	0x48000800
 8001904:	48000400 	.word	0x48000400
 8001908:	20000094 	.word	0x20000094
 800190c:	40020008 	.word	0x40020008

08001910 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	2414      	movs	r4, #20
 800191a:	193b      	adds	r3, r7, r4
 800191c:	0018      	movs	r0, r3
 800191e:	2314      	movs	r3, #20
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f005 fdd6 	bl	80074d4 <memset>
  if(hdac->Instance==DAC)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_DAC_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_DAC_MspInit+0x88>)
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_DAC_MspInit+0x88>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0589      	lsls	r1, r1, #22
 800193c:	430a      	orrs	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_DAC_MspInit+0x88>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	059b      	lsls	r3, r3, #22
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_DAC_MspInit+0x88>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_DAC_MspInit+0x88>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0289      	lsls	r1, r1, #10
 8001958:	430a      	orrs	r2, r1
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_DAC_MspInit+0x88>)
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2210      	movs	r2, #16
 800196e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2203      	movs	r2, #3
 8001974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	193a      	adds	r2, r7, r4
 800197e:	2390      	movs	r3, #144	; 0x90
 8001980:	05db      	lsls	r3, r3, #23
 8001982:	0011      	movs	r1, r2
 8001984:	0018      	movs	r0, r3
 8001986:	f001 fa61 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b00b      	add	sp, #44	; 0x2c
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40007400 	.word	0x40007400
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	2414      	movs	r4, #20
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	0018      	movs	r0, r3
 80019aa:	2314      	movs	r3, #20
 80019ac:	001a      	movs	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f005 fd90 	bl	80074d4 <memset>
  if(hi2c->Instance==I2C1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_I2C_MspInit+0x90>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d132      	bne.n	8001a24 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	02c9      	lsls	r1, r1, #11
 80019c8:	430a      	orrs	r2, r1
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	02db      	lsls	r3, r3, #11
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	22c0      	movs	r2, #192	; 0xc0
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	0021      	movs	r1, r4
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2212      	movs	r2, #18
 80019e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2203      	movs	r2, #3
 80019f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2201      	movs	r2, #1
 80019fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_I2C_MspInit+0x98>)
 8001a00:	0019      	movs	r1, r3
 8001a02:	0010      	movs	r0, r2
 8001a04:	f001 fa22 	bl	8002e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0389      	lsls	r1, r1, #14
 8001a12:	430a      	orrs	r2, r1
 8001a14:	61da      	str	r2, [r3, #28]
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	039b      	lsls	r3, r3, #14
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b00b      	add	sp, #44	; 0x2c
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400

08001a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b08d      	sub	sp, #52	; 0x34
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	241c      	movs	r4, #28
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	0018      	movs	r0, r3
 8001a46:	2314      	movs	r3, #20
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f005 fd42 	bl	80074d4 <memset>
  if(hspi->Instance==SPI1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <HAL_SPI_MspInit+0x100>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d132      	bne.n	8001ac0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0149      	lsls	r1, r1, #5
 8001a64:	430a      	orrs	r2, r1
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	02c9      	lsls	r1, r1, #11
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	02db      	lsls	r3, r3, #11
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a92:	0021      	movs	r1, r4
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2218      	movs	r2, #24
 8001a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_SPI_MspInit+0x108>)
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	0010      	movs	r0, r2
 8001aba:	f001 f9c7 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001abe:	e037      	b.n	8001b30 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_SPI_MspInit+0x10c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d132      	bne.n	8001b30 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	01c9      	lsls	r1, r1, #7
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	02c9      	lsls	r1, r1, #11
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_SPI_MspInit+0x104>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	02db      	lsls	r3, r3, #11
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b02:	211c      	movs	r1, #28
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	22c0      	movs	r2, #192	; 0xc0
 8001b08:	01d2      	lsls	r2, r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2202      	movs	r2, #2
 8001b10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_SPI_MspInit+0x108>)
 8001b28:	0019      	movs	r1, r3
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	f001 f98e 	bl	8002e4c <HAL_GPIO_Init>
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b00d      	add	sp, #52	; 0x34
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	40003800 	.word	0x40003800

08001b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11e      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0109      	lsls	r1, r1, #4
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
 8001b7a:	200d      	movs	r0, #13
 8001b7c:	f000 fe84 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001b80:	200d      	movs	r0, #13
 8001b82:	f000 fe96 	bl	80028b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2101      	movs	r1, #1
 8001b8a:	200e      	movs	r0, #14
 8001b8c:	f000 fe7c 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b90:	200e      	movs	r0, #14
 8001b92:	f000 fe8e 	bl	80028b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b96:	e019      	b.n	8001bcc <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	05db      	lsls	r3, r3, #23
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d113      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	61da      	str	r2, [r3, #28]
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_TIM_Base_MspInit+0x90>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	200f      	movs	r0, #15
 8001bc2:	f000 fe61 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 fe73 	bl	80028b2 <HAL_NVIC_EnableIRQ>
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b08b      	sub	sp, #44	; 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	2414      	movs	r4, #20
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	0018      	movs	r0, r3
 8001bea:	2314      	movs	r3, #20
 8001bec:	001a      	movs	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f005 fc70 	bl	80074d4 <memset>
  if(htim->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <HAL_TIM_MspPostInit+0xd0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d126      	bne.n	8001c4c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0289      	lsls	r1, r1, #10
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	029b      	lsls	r3, r3, #10
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	0052      	lsls	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	0021      	movs	r1, r4
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	2202      	movs	r2, #2
 8001c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2202      	movs	r2, #2
 8001c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	187a      	adds	r2, r7, r1
 8001c3e:	2390      	movs	r3, #144	; 0x90
 8001c40:	05db      	lsls	r3, r3, #23
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f001 f901 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c4a:	e02a      	b.n	8001ca2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d124      	bne.n	8001ca2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	02c9      	lsls	r1, r1, #11
 8001c62:	430a      	orrs	r2, r1
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_TIM_MspPostInit+0xd4>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	02db      	lsls	r3, r3, #11
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c74:	2114      	movs	r1, #20
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2202      	movs	r2, #2
 8001c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2202      	movs	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_TIM_MspPostInit+0xd8>)
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	f001 f8d5 	bl	8002e4c <HAL_GPIO_Init>
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b00b      	add	sp, #44	; 0x2c
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	2414      	movs	r4, #20
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	2314      	movs	r3, #20
 8001cc8:	001a      	movs	r2, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	f005 fc02 	bl	80074d4 <memset>
  if(huart->Instance==USART1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_UART_MspInit+0xa4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d13b      	bne.n	8001d52 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	01c9      	lsls	r1, r1, #7
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	01db      	lsls	r3, r3, #7
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0289      	lsls	r1, r1, #10
 8001d00:	430a      	orrs	r2, r1
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_UART_MspInit+0xa8>)
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	22c0      	movs	r2, #192	; 0xc0
 8001d16:	00d2      	lsls	r2, r2, #3
 8001d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	0021      	movs	r1, r4
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2202      	movs	r2, #2
 8001d20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2201      	movs	r2, #1
 8001d32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	187a      	adds	r2, r7, r1
 8001d36:	2390      	movs	r3, #144	; 0x90
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f001 f885 	bl	8002e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201b      	movs	r0, #27
 8001d48:	f000 fd9e 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4c:	201b      	movs	r0, #27
 8001d4e:	f000 fdb0 	bl	80028b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b00b      	add	sp, #44	; 0x2c
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f8b8 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <DMA1_Channel1_IRQHandler+0x14>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 ff6b 	bl	8002c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	20000094 	.word	0x20000094

08001dac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f003 f9d6 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	20000200 	.word	0x20000200

08001dc4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <TIM1_CC_IRQHandler+0x14>)
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f003 f9ca 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	20000200 	.word	0x20000200

08001ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <TIM2_IRQHandler+0x14>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f003 f9be 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000248 	.word	0x20000248

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <USART1_IRQHandler+0x14>)
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f004 f9e6 	bl	80061cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	20000290 	.word	0x20000290

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <Reset_Handler>:
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopForever+0x2>)
 8001e1a:	4685      	mov	sp, r0
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopForever+0x6>)
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopForever+0xa>)
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopForever+0xe>)
 8001e22:	2300      	movs	r3, #0
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:
 8001e26:	58d4      	ldr	r4, [r2, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:
 8001e2c:	18c4      	adds	r4, r0, r3
 8001e2e:	428c      	cmp	r4, r1
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopForever+0x12>)
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopForever+0x16>)
 8001e36:	2300      	movs	r3, #0
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:
 8001e3e:	42a2      	cmp	r2, r4
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>
 8001e42:	f7ff ffe3 	bl	8001e0c <SystemInit>
 8001e46:	f005 fb21 	bl	800748c <__libc_init_array>
 8001e4a:	f7fe ff5d 	bl	8000d08 <main>

08001e4e <LoopForever>:
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
 8001e50:	20002000 	.word	0x20002000
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000038 	.word	0x20000038
 8001e5c:	080075f0 	.word	0x080075f0
 8001e60:	20000038 	.word	0x20000038
 8001e64:	200003fc 	.word	0x200003fc

08001e68 <ADC1_COMP_IRQHandler>:
 8001e68:	e7fe      	b.n	8001e68 <ADC1_COMP_IRQHandler>
	...

08001e6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_Init+0x24>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_Init+0x24>)
 8001e76:	2110      	movs	r1, #16
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f809 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e82:	f7ff fc71 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_InitTick+0x5c>)
 8001e9e:	681c      	ldr	r4, [r3, #0]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	23fa      	movs	r3, #250	; 0xfa
 8001ea8:	0098      	lsls	r0, r3, #2
 8001eaa:	f7fe f92d 	bl	8000108 <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fd09 	bl	80028d2 <HAL_SYSTICK_Config>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00f      	b.n	8001ee8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d80b      	bhi.n	8001ee6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fcd6 	bl	8002888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_InitTick+0x64>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b003      	add	sp, #12
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	2000002c 	.word	0x2000002c
 8001ef4:	20000034 	.word	0x20000034
 8001ef8:	20000030 	.word	0x20000030

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_IncTick+0x1c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_IncTick+0x20>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	18d2      	adds	r2, r2, r3
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_IncTick+0x20>)
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20000034 	.word	0x20000034
 8001f1c:	200003f8 	.word	0x200003f8

08001f20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <HAL_GetTick+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	200003f8 	.word	0x200003f8

08001f34 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_SuspendTick+0x18>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_SuspendTick+0x18>)
 8001f3e:	2102      	movs	r1, #2
 8001f40:	438a      	bics	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	230f      	movs	r3, #15
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e125      	b.n	80021ba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2234      	movs	r2, #52	; 0x34
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff fc12 	bl	80017b0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	2210      	movs	r2, #16
 8001f92:	4013      	ands	r3, r2
 8001f94:	d000      	beq.n	8001f98 <HAL_ADC_Init+0x48>
 8001f96:	e103      	b.n	80021a0 <HAL_ADC_Init+0x250>
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d000      	beq.n	8001fa4 <HAL_ADC_Init+0x54>
 8001fa2:	e0fd      	b.n	80021a0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2204      	movs	r2, #4
 8001fac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001fae:	d000      	beq.n	8001fb2 <HAL_ADC_Init+0x62>
 8001fb0:	e0f6      	b.n	80021a0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	4a83      	ldr	r2, [pc, #524]	; (80021c4 <HAL_ADC_Init+0x274>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2202      	movs	r2, #2
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d112      	bne.n	8001ff6 <HAL_ADC_Init+0xa6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d009      	beq.n	8001ff2 <HAL_ADC_Init+0xa2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	401a      	ands	r2, r3
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0xa6>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Init+0xa8>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d116      	bne.n	800202a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2218      	movs	r2, #24
 8002004:	4393      	bics	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	0899      	lsrs	r1, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4964      	ldr	r1, [pc, #400]	; (80021c8 <HAL_ADC_Init+0x278>)
 8002036:	400a      	ands	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7e1b      	ldrb	r3, [r3, #24]
 800203e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002046:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7e9b      	ldrb	r3, [r3, #26]
 800204c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800204e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	2b01      	cmp	r3, #1
 8002056:	d002      	beq.n	800205e <HAL_ADC_Init+0x10e>
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	015b      	lsls	r3, r3, #5
 800205c:	e000      	b.n	8002060 <HAL_ADC_Init+0x110>
 800205e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002060:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002066:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d101      	bne.n	8002074 <HAL_ADC_Init+0x124>
 8002070:	2304      	movs	r3, #4
 8002072:	e000      	b.n	8002076 <HAL_ADC_Init+0x126>
 8002074:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002076:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2124      	movs	r1, #36	; 0x24
 800207c:	5c5b      	ldrb	r3, [r3, r1]
 800207e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002080:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4313      	orrs	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7edb      	ldrb	r3, [r3, #27]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d115      	bne.n	80020bc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e9b      	ldrb	r3, [r3, #26]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	0252      	lsls	r2, r2, #9
 800209e:	4313      	orrs	r3, r2
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	e00b      	b.n	80020bc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	2220      	movs	r2, #32
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2201      	movs	r2, #1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	23c2      	movs	r3, #194	; 0xc2
 80020c2:	33ff      	adds	r3, #255	; 0xff
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d007      	beq.n	80020d8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020d0:	4313      	orrs	r3, r2
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	055b      	lsls	r3, r3, #21
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d01b      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d017      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	2b02      	cmp	r3, #2
 8002102:	d013      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	2b03      	cmp	r3, #3
 800210a:	d00f      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2b04      	cmp	r3, #4
 8002112:	d00b      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b05      	cmp	r3, #5
 800211a:	d007      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b06      	cmp	r3, #6
 8002122:	d003      	beq.n	800212c <HAL_ADC_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	2b07      	cmp	r3, #7
 800212a:	d112      	bne.n	8002152 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2107      	movs	r1, #7
 8002138:	438a      	bics	r2, r1
 800213a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	2207      	movs	r2, #7
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_ADC_Init+0x27c>)
 800215a:	4013      	ands	r3, r2
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d10b      	bne.n	800217a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	2203      	movs	r2, #3
 800216e:	4393      	bics	r3, r2
 8002170:	2201      	movs	r2, #1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002178:	e01c      	b.n	80021b4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	2212      	movs	r2, #18
 8002180:	4393      	bics	r3, r2
 8002182:	2210      	movs	r2, #16
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2201      	movs	r2, #1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002196:	230f      	movs	r3, #15
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800219e:	e009      	b.n	80021b4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	2210      	movs	r2, #16
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80021ac:	230f      	movs	r3, #15
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b004      	add	sp, #16
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	fffffefd 	.word	0xfffffefd
 80021c8:	fffe0219 	.word	0xfffe0219
 80021cc:	833fffe7 	.word	0x833fffe7

080021d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021dc:	2317      	movs	r3, #23
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2204      	movs	r2, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	d15e      	bne.n	80022ae <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2234      	movs	r2, #52	; 0x34
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Start_DMA+0x2e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e05e      	b.n	80022bc <HAL_ADC_Start_DMA+0xec>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2234      	movs	r2, #52	; 0x34
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	7e5b      	ldrb	r3, [r3, #25]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d007      	beq.n	800221e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800220e:	2317      	movs	r3, #23
 8002210:	18fc      	adds	r4, r7, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 f983 	bl	8002520 <ADC_Enable>
 800221a:	0003      	movs	r3, r0
 800221c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d146      	bne.n	80022b6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_ADC_Start_DMA+0xf4>)
 800222e:	4013      	ands	r3, r2
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	0052      	lsls	r2, r2, #1
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2234      	movs	r2, #52	; 0x34
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_ADC_Start_DMA+0xf8>)
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_ADC_Start_DMA+0xfc>)
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_ADC_Start_DMA+0x100>)
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	221c      	movs	r2, #28
 8002266:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2110      	movs	r1, #16
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3340      	adds	r3, #64	; 0x40
 8002292:	0019      	movs	r1, r3
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f000 fc0a 	bl	8002ab0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2104      	movs	r1, #4
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ae:	2317      	movs	r3, #23
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80022b6:	2317      	movs	r3, #23
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b007      	add	sp, #28
 80022c2:	bd90      	pop	{r4, r7, pc}
 80022c4:	fffff0fe 	.word	0xfffff0fe
 80022c8:	08002629 	.word	0x08002629
 80022cc:	080026dd 	.word	0x080026dd
 80022d0:	080026fb 	.word	0x080026fb

080022d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230e:	230f      	movs	r3, #15
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	055b      	lsls	r3, r3, #21
 8002322:	429a      	cmp	r2, r3
 8002324:	d011      	beq.n	800234a <HAL_ADC_ConfigChannel+0x46>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d00d      	beq.n	800234a <HAL_ADC_ConfigChannel+0x46>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	2b02      	cmp	r3, #2
 8002334:	d009      	beq.n	800234a <HAL_ADC_ConfigChannel+0x46>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	2b03      	cmp	r3, #3
 800233c:	d005      	beq.n	800234a <HAL_ADC_ConfigChannel+0x46>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	2b04      	cmp	r3, #4
 8002344:	d001      	beq.n	800234a <HAL_ADC_ConfigChannel+0x46>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2234      	movs	r2, #52	; 0x34
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x54>
 8002354:	2302      	movs	r3, #2
 8002356:	e0d0      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1f6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2234      	movs	r2, #52	; 0x34
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2204      	movs	r2, #4
 8002368:	4013      	ands	r3, r2
 800236a:	d000      	beq.n	800236e <HAL_ADC_ConfigChannel+0x6a>
 800236c:	e0b4      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a64      	ldr	r2, [pc, #400]	; (8002504 <HAL_ADC_ConfigChannel+0x200>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d100      	bne.n	800237a <HAL_ADC_ConfigChannel+0x76>
 8002378:	e082      	b.n	8002480 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	409a      	lsls	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	429a      	cmp	r2, r3
 800239a:	d037      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d033      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d02f      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d02b      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d027      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d023      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d01f      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d01b      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2107      	movs	r1, #7
 80023e0:	400b      	ands	r3, r1
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d012      	beq.n	800240c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2107      	movs	r1, #7
 80023f2:	438a      	bics	r2, r1
 80023f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6959      	ldr	r1, [r3, #20]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2207      	movs	r2, #7
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b10      	cmp	r3, #16
 8002412:	d007      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x120>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b11      	cmp	r3, #17
 800241a:	d003      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x120>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d163      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_ADC_ConfigChannel+0x204>)
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b10      	cmp	r3, #16
 800242e:	d009      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x140>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b11      	cmp	r3, #17
 8002436:	d102      	bne.n	800243e <HAL_ADC_ConfigChannel+0x13a>
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	03db      	lsls	r3, r3, #15
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x144>
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	045b      	lsls	r3, r3, #17
 8002442:	e001      	b.n	8002448 <HAL_ADC_ConfigChannel+0x144>
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	4a2f      	ldr	r2, [pc, #188]	; (8002508 <HAL_ADC_ConfigChannel+0x204>)
 800244a:	430b      	orrs	r3, r1
 800244c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d14a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_ADC_ConfigChannel+0x208>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	492d      	ldr	r1, [pc, #180]	; (8002510 <HAL_ADC_ConfigChannel+0x20c>)
 800245c:	0018      	movs	r0, r3
 800245e:	f7fd fe53 	bl	8000108 <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	001a      	movs	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	189b      	adds	r3, r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x16e>
 800247e:	e035      	b.n	80024ec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	4099      	lsls	r1, r3
 800248e:	000b      	movs	r3, r1
 8002490:	43d9      	mvns	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	400a      	ands	r2, r1
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x1ae>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b11      	cmp	r3, #17
 80024a8:	d003      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x1ae>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b12      	cmp	r3, #18
 80024b0:	d11c      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_ADC_ConfigChannel+0x204>)
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d007      	beq.n	80024ce <HAL_ADC_ConfigChannel+0x1ca>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b11      	cmp	r3, #17
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x1c6>
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_ADC_ConfigChannel+0x210>)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x1cc>
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_ADC_ConfigChannel+0x214>)
 80024cc:	e000      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x1cc>
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_ADC_ConfigChannel+0x218>)
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_ADC_ConfigChannel+0x204>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e009      	b.n	80024ec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	2220      	movs	r2, #32
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2234      	movs	r2, #52	; 0x34
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80024f4:	230f      	movs	r3, #15
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	781b      	ldrb	r3, [r3, #0]
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	00001001 	.word	0x00001001
 8002508:	40012708 	.word	0x40012708
 800250c:	2000002c 	.word	0x2000002c
 8002510:	000f4240 	.word	0x000f4240
 8002514:	ffbfffff 	.word	0xffbfffff
 8002518:	feffffff 	.word	0xfeffffff
 800251c:	ff7fffff 	.word	0xff7fffff

08002520 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2203      	movs	r2, #3
 8002538:	4013      	ands	r3, r2
 800253a:	2b01      	cmp	r3, #1
 800253c:	d112      	bne.n	8002564 <ADC_Enable+0x44>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d009      	beq.n	8002560 <ADC_Enable+0x40>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	401a      	ands	r2, r3
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	429a      	cmp	r2, r3
 800255e:	d101      	bne.n	8002564 <ADC_Enable+0x44>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <ADC_Enable+0x46>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d152      	bne.n	8002610 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <ADC_Enable+0xfc>)
 8002572:	4013      	ands	r3, r2
 8002574:	d00d      	beq.n	8002592 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	2210      	movs	r2, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2201      	movs	r2, #1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e03f      	b.n	8002612 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <ADC_Enable+0x100>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	491f      	ldr	r1, [pc, #124]	; (8002624 <ADC_Enable+0x104>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7fd fdad 	bl	8000108 <__udivsi3>
 80025ae:	0003      	movs	r3, r0
 80025b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025b2:	e002      	b.n	80025ba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80025c0:	f7ff fcae 	bl	8001f20 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025c8:	e01b      	b.n	8002602 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ca:	f7ff fca9 	bl	8001f20 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d914      	bls.n	8002602 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d00d      	beq.n	8002602 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	2210      	movs	r2, #16
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2201      	movs	r2, #1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e007      	b.n	8002612 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	2b01      	cmp	r3, #1
 800260e:	d1dc      	bne.n	80025ca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	80000017 	.word	0x80000017
 8002620:	2000002c 	.word	0x2000002c
 8002624:	000f4240 	.word	0x000f4240

08002628 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	2250      	movs	r2, #80	; 0x50
 800263c:	4013      	ands	r3, r2
 800263e:	d140      	bne.n	80026c2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	23c0      	movs	r3, #192	; 0xc0
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4013      	ands	r3, r2
 800265a:	d12d      	bne.n	80026b8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002660:	2b00      	cmp	r3, #0
 8002662:	d129      	bne.n	80026b8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2208      	movs	r2, #8
 800266c:	4013      	ands	r3, r2
 800266e:	2b08      	cmp	r3, #8
 8002670:	d122      	bne.n	80026b8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2204      	movs	r2, #4
 800267a:	4013      	ands	r3, r2
 800267c:	d110      	bne.n	80026a0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	210c      	movs	r1, #12
 800268a:	438a      	bics	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <ADC_DMAConvCplt+0xb0>)
 8002694:	4013      	ands	r3, r2
 8002696:	2201      	movs	r2, #1
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
 800269e:	e00b      	b.n	80026b8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	2220      	movs	r2, #32
 80026a6:	431a      	orrs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	2201      	movs	r2, #1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff fe0a 	bl	80022d4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80026c0:	e005      	b.n	80026ce <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	0010      	movs	r0, r2
 80026cc:	4798      	blx	r3
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	fffffefe 	.word	0xfffffefe

080026dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff fdf9 	bl	80022e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	2204      	movs	r2, #4
 800271a:	431a      	orrs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fde6 	bl	80022f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}

08002730 <__NVIC_EnableIRQ>:
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	0002      	movs	r2, r0
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b7f      	cmp	r3, #127	; 0x7f
 8002742:	d809      	bhi.n	8002758 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	001a      	movs	r2, r3
 800274a:	231f      	movs	r3, #31
 800274c:	401a      	ands	r2, r3
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_EnableIRQ+0x30>)
 8002750:	2101      	movs	r1, #1
 8002752:	4091      	lsls	r1, r2
 8002754:	000a      	movs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b7f      	cmp	r3, #127	; 0x7f
 8002778:	d828      	bhi.n	80027cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800277a:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <__NVIC_SetPriority+0xd4>)
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	33c0      	adds	r3, #192	; 0xc0
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	589b      	ldr	r3, [r3, r2]
 800278a:	1dfa      	adds	r2, r7, #7
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	0011      	movs	r1, r2
 8002790:	2203      	movs	r2, #3
 8002792:	400a      	ands	r2, r1
 8002794:	00d2      	lsls	r2, r2, #3
 8002796:	21ff      	movs	r1, #255	; 0xff
 8002798:	4091      	lsls	r1, r2
 800279a:	000a      	movs	r2, r1
 800279c:	43d2      	mvns	r2, r2
 800279e:	401a      	ands	r2, r3
 80027a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	22ff      	movs	r2, #255	; 0xff
 80027a8:	401a      	ands	r2, r3
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	0018      	movs	r0, r3
 80027b0:	2303      	movs	r3, #3
 80027b2:	4003      	ands	r3, r0
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b8:	481f      	ldr	r0, [pc, #124]	; (8002838 <__NVIC_SetPriority+0xd4>)
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	430a      	orrs	r2, r1
 80027c4:	33c0      	adds	r3, #192	; 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	501a      	str	r2, [r3, r0]
}
 80027ca:	e031      	b.n	8002830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <__NVIC_SetPriority+0xd8>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	0019      	movs	r1, r3
 80027d4:	230f      	movs	r3, #15
 80027d6:	400b      	ands	r3, r1
 80027d8:	3b08      	subs	r3, #8
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3306      	adds	r3, #6
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1dfa      	adds	r2, r7, #7
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	0011      	movs	r1, r2
 80027ec:	2203      	movs	r2, #3
 80027ee:	400a      	ands	r2, r1
 80027f0:	00d2      	lsls	r2, r2, #3
 80027f2:	21ff      	movs	r1, #255	; 0xff
 80027f4:	4091      	lsls	r1, r2
 80027f6:	000a      	movs	r2, r1
 80027f8:	43d2      	mvns	r2, r2
 80027fa:	401a      	ands	r2, r3
 80027fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	401a      	ands	r2, r3
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	2303      	movs	r3, #3
 800280e:	4003      	ands	r3, r0
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <__NVIC_SetPriority+0xd8>)
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	001c      	movs	r4, r3
 800281c:	230f      	movs	r3, #15
 800281e:	4023      	ands	r3, r4
 8002820:	3b08      	subs	r3, #8
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	430a      	orrs	r2, r1
 8002826:	3306      	adds	r3, #6
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	18c3      	adds	r3, r0, r3
 800282c:	3304      	adds	r3, #4
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b003      	add	sp, #12
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	045b      	lsls	r3, r3, #17
 8002850:	429a      	cmp	r2, r3
 8002852:	d301      	bcc.n	8002858 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002854:	2301      	movs	r3, #1
 8002856:	e010      	b.n	800287a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <SysTick_Config+0x44>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	3a01      	subs	r2, #1
 800285e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002860:	2301      	movs	r3, #1
 8002862:	425b      	negs	r3, r3
 8002864:	2103      	movs	r1, #3
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff ff7c 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x44>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x44>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	210f      	movs	r1, #15
 8002894:	187b      	adds	r3, r7, r1
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	187b      	adds	r3, r7, r1
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	0002      	movs	r2, r0
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff33 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff ffaf 	bl	8002840 <SysTick_Config>
 80028e2:	0003      	movs	r3, r0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e015      	b.n	800292a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	791b      	ldrb	r3, [r3, #4]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe fffd 	bl	8001910 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	795b      	ldrb	r3, [r3, #5]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_DAC_ConfigChannel+0x20>
 800294e:	2302      	movs	r3, #2
 8002950:	e029      	b.n	80029a6 <HAL_DAC_ConfigChannel+0x74>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2202      	movs	r2, #2
 800295c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002966:	223e      	movs	r2, #62	; 0x3e
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	43da      	mvns	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4013      	ands	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	409a      	lsls	r2, r3
 8002988:	0013      	movs	r3, r2
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	795b      	ldrb	r3, [r3, #5]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_DAC_Start+0x16>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e028      	b.n	8002a16 <HAL_DAC_Start+0x68>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	409a      	lsls	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10e      	bne.n	8002a08 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	223c      	movs	r2, #60	; 0x3c
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b3c      	cmp	r3, #60	; 0x3c
 80029f6:	d107      	bne.n	8002a08 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e036      	b.n	8002aa4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2221      	movs	r2, #33	; 0x21
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <HAL_DMA_Init+0x8c>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f9c4 	bl	8002e14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2221      	movs	r2, #33	; 0x21
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}  
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b004      	add	sp, #16
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffffc00f 	.word	0xffffc00f

08002ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2317      	movs	r3, #23
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	5c9b      	ldrb	r3, [r3, r2]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Start_IT+0x24>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e04f      	b.n	8002b74 <HAL_DMA_Start_IT+0xc4>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	2101      	movs	r1, #1
 8002ada:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2221      	movs	r2, #33	; 0x21
 8002ae0:	5c9b      	ldrb	r3, [r3, r2]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d13a      	bne.n	8002b5e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	2102      	movs	r1, #2
 8002aee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	438a      	bics	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f954 	bl	8002dba <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	210e      	movs	r1, #14
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00f      	b.n	8002b4c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	210a      	movs	r1, #10
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2104      	movs	r1, #4
 8002b48:	438a      	bics	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e007      	b.n	8002b6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b66:	2317      	movs	r3, #23
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002b6e:	2317      	movs	r3, #23
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
} 
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b006      	add	sp, #24
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2221      	movs	r2, #33	; 0x21
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2204      	movs	r2, #4
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e020      	b.n	8002be4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	210e      	movs	r1, #14
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	438a      	bics	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4091      	lsls	r1, r2
 8002bce:	000a      	movs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2221      	movs	r2, #33	; 0x21
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d006      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e028      	b.n	8002c68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	210e      	movs	r1, #14
 8002c22:	438a      	bics	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4091      	lsls	r1, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2221      	movs	r2, #33	; 0x21
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	0010      	movs	r0, r2
 8002c66:	4798      	blx	r3
    } 
  }
  return status;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2204      	movs	r2, #4
 8002c94:	409a      	lsls	r2, r3
 8002c96:	0013      	movs	r3, r2
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d024      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x72>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d020      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2220      	movs	r2, #32
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	438a      	bics	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2104      	movs	r1, #4
 8002ccc:	4091      	lsls	r1, r2
 8002cce:	000a      	movs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x66>
 8002cda:	e06a      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	0010      	movs	r0, r2
 8002ce4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ce6:	e064      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2202      	movs	r2, #2
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d02b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xda>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2220      	movs	r2, #32
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d10b      	bne.n	8002d24 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	210a      	movs	r1, #10
 8002d18:	438a      	bics	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2221      	movs	r2, #33	; 0x21
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	4091      	lsls	r1, r2
 8002d30:	000a      	movs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d036      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d4e:	e030      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2208      	movs	r2, #8
 8002d56:	409a      	lsls	r2, r3
 8002d58:	0013      	movs	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d028      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2208      	movs	r2, #8
 8002d64:	4013      	ands	r3, r2
 8002d66:	d024      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	210e      	movs	r1, #14
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	2101      	movs	r1, #1
 8002d82:	4091      	lsls	r1, r2
 8002d84:	000a      	movs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	0010      	movs	r0, r2
 8002dae:	4798      	blx	r3
    }
   }
}  
 8002db0:	e7ff      	b.n	8002db2 <HAL_DMA_IRQHandler+0x13c>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}

08002dba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4091      	lsls	r1, r2
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d108      	bne.n	8002dfa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002df8:	e007      	b.n	8002e0a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b004      	add	sp, #16
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <DMA_CalcBaseAndBitshift+0x30>)
 8002e22:	4694      	mov	ip, r2
 8002e24:	4463      	add	r3, ip
 8002e26:	2114      	movs	r1, #20
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fd f96d 	bl	8000108 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <DMA_CalcBaseAndBitshift+0x34>)
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	bffdfff8 	.word	0xbffdfff8
 8002e48:	40020000 	.word	0x40020000

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	e14f      	b.n	80030fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4091      	lsls	r1, r2
 8002e66:	000a      	movs	r2, r1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d100      	bne.n	8002e74 <HAL_GPIO_Init+0x28>
 8002e72:	e140      	b.n	80030f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d005      	beq.n	8002e8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d130      	bne.n	8002eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	409a      	lsls	r2, r3
 8002eae:	0013      	movs	r3, r2
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	0013      	movs	r3, r2
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	2201      	movs	r2, #1
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d017      	beq.n	8002f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	0013      	movs	r3, r2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d123      	bne.n	8002f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	08da      	lsrs	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	58d3      	ldr	r3, [r2, r3]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2207      	movs	r2, #7
 8002f48:	4013      	ands	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	43da      	mvns	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2107      	movs	r1, #7
 8002f62:	400b      	ands	r3, r1
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	409a      	lsls	r2, r3
 8002f68:	0013      	movs	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	6939      	ldr	r1, [r7, #16]
 8002f7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	23c0      	movs	r3, #192	; 0xc0
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d100      	bne.n	8002fc0 <HAL_GPIO_Init+0x174>
 8002fbe:	e09a      	b.n	80030f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc0:	4b54      	ldr	r3, [pc, #336]	; (8003114 <HAL_GPIO_Init+0x2c8>)
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_GPIO_Init+0x2c8>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
 8002fcc:	4b51      	ldr	r3, [pc, #324]	; (8003114 <HAL_GPIO_Init+0x2c8>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fd8:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_GPIO_Init+0x2cc>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	589b      	ldr	r3, [r3, r2]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	2390      	movs	r3, #144	; 0x90
 8003000:	05db      	lsls	r3, r3, #23
 8003002:	429a      	cmp	r2, r3
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x1e2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a44      	ldr	r2, [pc, #272]	; (800311c <HAL_GPIO_Init+0x2d0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x1de>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_GPIO_Init+0x2d4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x1da>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a42      	ldr	r2, [pc, #264]	; (8003124 <HAL_GPIO_Init+0x2d8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x1d6>
 800301e:	2303      	movs	r3, #3
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x1e4>
 8003022:	2305      	movs	r3, #5
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x1e4>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x1e4>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x1e4>
 800302e:	2300      	movs	r3, #0
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	2103      	movs	r1, #3
 8003034:	400a      	ands	r2, r1
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_GPIO_Init+0x2cc>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43da      	mvns	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	4013      	ands	r3, r2
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	43da      	mvns	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	029b      	lsls	r3, r3, #10
 8003090:	4013      	ands	r3, r2
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a2:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43da      	mvns	r2, r3
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	035b      	lsls	r3, r3, #13
 80030ba:	4013      	ands	r3, r2
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	039b      	lsls	r3, r3, #14
 80030e4:	4013      	ands	r3, r2
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_GPIO_Init+0x2dc>)
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	40da      	lsrs	r2, r3
 8003104:	1e13      	subs	r3, r2, #0
 8003106:	d000      	beq.n	800310a <HAL_GPIO_Init+0x2be>
 8003108:	e6a8      	b.n	8002e5c <HAL_GPIO_Init+0x10>
  } 
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b006      	add	sp, #24
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	40010000 	.word	0x40010000
 800311c:	48000400 	.word	0x48000400
 8003120:	48000800 	.word	0x48000800
 8003124:	48000c00 	.word	0x48000c00
 8003128:	40010400 	.word	0x40010400

0800312c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	000a      	movs	r2, r1
 8003136:	1cbb      	adds	r3, r7, #2
 8003138:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	1cba      	adds	r2, r7, #2
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	4013      	ands	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e003      	b.n	8003158 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
  }
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	0008      	movs	r0, r1
 8003170:	0011      	movs	r1, r2
 8003172:	1cbb      	adds	r3, r7, #2
 8003174:	1c02      	adds	r2, r0, #0
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	1c7b      	adds	r3, r7, #1
 800317a:	1c0a      	adds	r2, r1, #0
 800317c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317e:	1c7b      	adds	r3, r7, #1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003186:	1cbb      	adds	r3, r7, #2
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800318e:	e003      	b.n	8003198 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003190:	1cbb      	adds	r3, r7, #2
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e082      	b.n	80032b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fe fbe7 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2241      	movs	r2, #65	; 0x41
 80031d2:	2124      	movs	r1, #36	; 0x24
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_I2C_Init+0x120>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4931      	ldr	r1, [pc, #196]	; (80032c4 <HAL_I2C_Init+0x124>)
 8003200:	400a      	ands	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d108      	bne.n	800321e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	0209      	lsls	r1, r1, #8
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	e007      	b.n	800322e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2184      	movs	r1, #132	; 0x84
 8003228:	0209      	lsls	r1, r1, #8
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d104      	bne.n	8003240 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	491f      	ldr	r1, [pc, #124]	; (80032c8 <HAL_I2C_Init+0x128>)
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	491a      	ldr	r1, [pc, #104]	; (80032c4 <HAL_I2C_Init+0x124>)
 800325c:	400a      	ands	r2, r1
 800325e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	431a      	orrs	r2, r3
 800326a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69d9      	ldr	r1, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2241      	movs	r2, #65	; 0x41
 80032a4:	2120      	movs	r1, #32
 80032a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2242      	movs	r2, #66	; 0x42
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	f0ffffff 	.word	0xf0ffffff
 80032c4:	ffff7fff 	.word	0xffff7fff
 80032c8:	02008000 	.word	0x02008000

080032cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	0008      	movs	r0, r1
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	0019      	movs	r1, r3
 80032da:	230a      	movs	r3, #10
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	1c02      	adds	r2, r0, #0
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	2308      	movs	r3, #8
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	1c0a      	adds	r2, r1, #0
 80032e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2241      	movs	r2, #65	; 0x41
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d000      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x2c>
 80032f6:	e0e7      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	5c9b      	ldrb	r3, [r3, r2]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Master_Transmit+0x3a>
 8003302:	2302      	movs	r3, #2
 8003304:	e0e1      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800330e:	f7fe fe07 	bl	8001f20 <HAL_GetTick>
 8003312:	0003      	movs	r3, r0
 8003314:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	0219      	lsls	r1, r3, #8
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2319      	movs	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	f000 fa04 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0cc      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2241      	movs	r2, #65	; 0x41
 8003334:	2121      	movs	r1, #33	; 0x21
 8003336:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2242      	movs	r2, #66	; 0x42
 800333c:	2110      	movs	r1, #16
 800333e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2208      	movs	r2, #8
 8003350:	18ba      	adds	r2, r7, r2
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d911      	bls.n	800338a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	045c      	lsls	r4, r3, #17
 8003376:	230a      	movs	r3, #10
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	8819      	ldrh	r1, [r3, #0]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <HAL_I2C_Master_Transmit+0x208>)
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	0023      	movs	r3, r4
 8003384:	f000 fb74 	bl	8003a70 <I2C_TransferConfig>
 8003388:	e075      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	049c      	lsls	r4, r3, #18
 800339e:	230a      	movs	r3, #10
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	8819      	ldrh	r1, [r3, #0]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_I2C_Master_Transmit+0x208>)
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	0023      	movs	r3, r4
 80033ac:	f000 fb60 	bl	8003a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033b0:	e061      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f9f8 	bl	80037ae <I2C_WaitOnTXISFlagUntilTimeout>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e081      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03a      	beq.n	8003476 <HAL_I2C_Master_Transmit+0x1aa>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d136      	bne.n	8003476 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	0013      	movs	r3, r2
 8003412:	2200      	movs	r2, #0
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	f000 f98b 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e053      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2bff      	cmp	r3, #255	; 0xff
 800342a:	d911      	bls.n	8003450 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	b2da      	uxtb	r2, r3
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	045c      	lsls	r4, r3, #17
 800343c:	230a      	movs	r3, #10
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	8819      	ldrh	r1, [r3, #0]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	2300      	movs	r3, #0
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0023      	movs	r3, r4
 800344a:	f000 fb11 	bl	8003a70 <I2C_TransferConfig>
 800344e:	e012      	b.n	8003476 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	049c      	lsls	r4, r3, #18
 8003464:	230a      	movs	r3, #10
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	8819      	ldrh	r1, [r3, #0]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	0023      	movs	r3, r4
 8003472:	f000 fafd 	bl	8003a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d198      	bne.n	80033b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 f9d0 	bl	800382c <I2C_WaitOnSTOPFlagUntilTimeout>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01a      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2220      	movs	r2, #32
 800349a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	490c      	ldr	r1, [pc, #48]	; (80034d8 <HAL_I2C_Master_Transmit+0x20c>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	; 0x41
 80034b0:	2120      	movs	r1, #32
 80034b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	; 0x42
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
  }
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b007      	add	sp, #28
 80034d0:	bd90      	pop	{r4, r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	80002000 	.word	0x80002000
 80034d8:	fe00e800 	.word	0xfe00e800

080034dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	0008      	movs	r0, r1
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	0019      	movs	r1, r3
 80034ea:	230a      	movs	r3, #10
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	1c02      	adds	r2, r0, #0
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	2308      	movs	r3, #8
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	1c0a      	adds	r2, r1, #0
 80034f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2241      	movs	r2, #65	; 0x41
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	d000      	beq.n	8003508 <HAL_I2C_Master_Receive+0x2c>
 8003506:	e0e8      	b.n	80036da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Master_Receive+0x3a>
 8003512:	2302      	movs	r3, #2
 8003514:	e0e2      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2240      	movs	r2, #64	; 0x40
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351e:	f7fe fcff 	bl	8001f20 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	0219      	lsls	r1, r3, #8
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	f000 f8fc 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cd      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2241      	movs	r2, #65	; 0x41
 8003544:	2122      	movs	r1, #34	; 0x22
 8003546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2242      	movs	r2, #66	; 0x42
 800354c:	2110      	movs	r1, #16
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2208      	movs	r2, #8
 8003560:	18ba      	adds	r2, r7, r2
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d911      	bls.n	800359a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	045c      	lsls	r4, r3, #17
 8003586:	230a      	movs	r3, #10
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	8819      	ldrh	r1, [r3, #0]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_I2C_Master_Receive+0x208>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0023      	movs	r3, r4
 8003594:	f000 fa6c 	bl	8003a70 <I2C_TransferConfig>
 8003598:	e076      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	049c      	lsls	r4, r3, #18
 80035ae:	230a      	movs	r3, #10
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_I2C_Master_Receive+0x208>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f000 fa58 	bl	8003a70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035c0:	e062      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 f96b 	bl	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e082      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03a      	beq.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d136      	bne.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800361a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	0013      	movs	r3, r2
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	f000 f882 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e053      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2bff      	cmp	r3, #255	; 0xff
 800363c:	d911      	bls.n	8003662 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	b2da      	uxtb	r2, r3
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	045c      	lsls	r4, r3, #17
 800364e:	230a      	movs	r3, #10
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	8819      	ldrh	r1, [r3, #0]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	0023      	movs	r3, r4
 800365c:	f000 fa08 	bl	8003a70 <I2C_TransferConfig>
 8003660:	e012      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	b2da      	uxtb	r2, r3
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	049c      	lsls	r4, r3, #18
 8003676:	230a      	movs	r3, #10
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	8819      	ldrh	r1, [r3, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	0023      	movs	r3, r4
 8003684:	f000 f9f4 	bl	8003a70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d197      	bne.n	80035c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 f8c7 	bl	800382c <I2C_WaitOnSTOPFlagUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e01a      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2220      	movs	r2, #32
 80036ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	490b      	ldr	r1, [pc, #44]	; (80036e8 <HAL_I2C_Master_Receive+0x20c>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2241      	movs	r2, #65	; 0x41
 80036c2:	2120      	movs	r1, #32
 80036c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2242      	movs	r2, #66	; 0x42
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2240      	movs	r2, #64	; 0x40
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b007      	add	sp, #28
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	80002400 	.word	0x80002400
 80036e8:	fe00e800 	.word	0xfe00e800

080036ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d103      	bne.n	800370a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	2b01      	cmp	r3, #1
 8003716:	d007      	beq.n	8003728 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	619a      	str	r2, [r3, #24]
  }
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	1dfb      	adds	r3, r7, #7
 800373e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	e021      	b.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	d01e      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe fbea 	bl	8001f20 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	2220      	movs	r2, #32
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2241      	movs	r2, #65	; 0x41
 800376e:	2120      	movs	r1, #32
 8003770:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2242      	movs	r2, #66	; 0x42
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	425a      	negs	r2, r3
 8003796:	4153      	adcs	r3, r2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	001a      	movs	r2, r3
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d0ce      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ba:	e02b      	b.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f8da 	bl	800397c <I2C_IsAcknowledgeFailed>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e029      	b.n	8003824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3301      	adds	r3, #1
 80037d4:	d01e      	beq.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe fba3 	bl	8001f20 <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d113      	bne.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	2220      	movs	r2, #32
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2241      	movs	r2, #65	; 0x41
 80037fc:	2120      	movs	r1, #32
 80037fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2242      	movs	r2, #66	; 0x42
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2202      	movs	r2, #2
 800381c:	4013      	ands	r3, r2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d1cc      	bne.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b004      	add	sp, #16
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003838:	e028      	b.n	800388c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f89b 	bl	800397c <I2C_IsAcknowledgeFailed>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e026      	b.n	800389c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fb67 	bl	8001f20 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d113      	bne.n	800388c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	2220      	movs	r2, #32
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2241      	movs	r2, #65	; 0x41
 8003874:	2120      	movs	r1, #32
 8003876:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2242      	movs	r2, #66	; 0x42
 800387c:	2100      	movs	r1, #0
 800387e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2220      	movs	r2, #32
 8003894:	4013      	ands	r3, r2
 8003896:	2b20      	cmp	r3, #32
 8003898:	d1cf      	bne.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b0:	e055      	b.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f85f 	bl	800397c <I2C_IsAcknowledgeFailed>
 80038be:	1e03      	subs	r3, r0, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e053      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d129      	bne.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2204      	movs	r2, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d105      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e03f      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2220      	movs	r2, #32
 80038f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	491d      	ldr	r1, [pc, #116]	; (8003978 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003902:	400a      	ands	r2, r1
 8003904:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	2120      	movs	r1, #32
 8003912:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2242      	movs	r2, #66	; 0x42
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e022      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003928:	f7fe fafa 	bl	8001f20 <HAL_GetTick>
 800392c:	0002      	movs	r2, r0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	2220      	movs	r2, #32
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2241      	movs	r2, #65	; 0x41
 800394e:	2120      	movs	r1, #32
 8003950:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2240      	movs	r2, #64	; 0x40
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2204      	movs	r2, #4
 8003966:	4013      	ands	r3, r2
 8003968:	2b04      	cmp	r3, #4
 800396a:	d1a2      	bne.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	fe00e800 	.word	0xfe00e800

0800397c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2210      	movs	r2, #16
 8003990:	4013      	ands	r3, r2
 8003992:	2b10      	cmp	r3, #16
 8003994:	d164      	bne.n	8003a60 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	049b      	lsls	r3, r3, #18
 80039a0:	401a      	ands	r2, r3
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	049b      	lsls	r3, r3, #18
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d02b      	beq.n	8003a02 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	01c9      	lsls	r1, r1, #7
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039bc:	e021      	b.n	8003a02 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d01e      	beq.n	8003a02 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fe faac 	bl	8001f20 <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <I2C_IsAcknowledgeFailed+0x5e>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d113      	bne.n	8003a02 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	2220      	movs	r2, #32
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2241      	movs	r2, #65	; 0x41
 80039ea:	2120      	movs	r1, #32
 80039ec:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2242      	movs	r2, #66	; 0x42
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02f      	b.n	8003a62 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d1d6      	bne.n	80039be <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7ff fe62 	bl	80036ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	490e      	ldr	r1, [pc, #56]	; (8003a6c <I2C_IsAcknowledgeFailed+0xf0>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2241      	movs	r2, #65	; 0x41
 8003a48:	2120      	movs	r1, #32
 8003a4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2242      	movs	r2, #66	; 0x42
 8003a50:	2100      	movs	r1, #0
 8003a52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b004      	add	sp, #16
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	fe00e800 	.word	0xfe00e800

08003a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	0008      	movs	r0, r1
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	240a      	movs	r4, #10
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	1c02      	adds	r2, r0, #0
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	2009      	movs	r0, #9
 8003a88:	183b      	adds	r3, r7, r0
 8003a8a:	1c0a      	adds	r2, r1, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	0d51      	lsrs	r1, r2, #21
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <I2C_TransferConfig+0x68>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	43d2      	mvns	r2, r2
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	059b      	lsls	r3, r3, #22
 8003aae:	0d9a      	lsrs	r2, r3, #22
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	0418      	lsls	r0, r3, #16
 8003ab6:	23ff      	movs	r3, #255	; 0xff
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	4003      	ands	r3, r0
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b005      	add	sp, #20
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	03ff63ff 	.word	0x03ff63ff

08003adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2241      	movs	r2, #65	; 0x41
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d138      	bne.n	8003b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2240      	movs	r2, #64	; 0x40
 8003af6:	5c9b      	ldrb	r3, [r3, r2]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e032      	b.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	2101      	movs	r1, #1
 8003b06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2241      	movs	r2, #65	; 0x41
 8003b0c:	2124      	movs	r1, #36	; 0x24
 8003b0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4911      	ldr	r1, [pc, #68]	; (8003b70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2241      	movs	r2, #65	; 0x41
 8003b54:	2120      	movs	r1, #32
 8003b56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	ffffefff 	.word	0xffffefff

08003b74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	5c9b      	ldrb	r3, [r3, r2]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d139      	bne.n	8003bfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2240      	movs	r2, #64	; 0x40
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e033      	b.n	8003c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2241      	movs	r2, #65	; 0x41
 8003ba4:	2124      	movs	r1, #36	; 0x24
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2101      	movs	r1, #1
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2241      	movs	r2, #65	; 0x41
 8003bee:	2120      	movs	r1, #32
 8003bf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	fffff0ff 	.word	0xfffff0ff

08003c0c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	000a      	movs	r2, r1
 8003c16:	1cfb      	adds	r3, r7, #3
 8003c18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_PWR_EnterSTOPMode+0x60>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2203      	movs	r2, #3
 8003c28:	4393      	bics	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_PWR_EnterSTOPMode+0x60>)
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c40:	2104      	movs	r1, #4
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003c46:	1cfb      	adds	r3, r7, #3
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c4e:	bf30      	wfi
 8003c50:	e002      	b.n	8003c58 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c52:	bf40      	sev
    __WFE();
 8003c54:	bf20      	wfe
    __WFE();
 8003c56:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c5e:	2104      	movs	r1, #4
 8003c60:	438a      	bics	r2, r1
 8003c62:	611a      	str	r2, [r3, #16]
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e301      	b.n	800428a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d100      	bne.n	8003c92 <HAL_RCC_OscConfig+0x1e>
 8003c90:	e08d      	b.n	8003dae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c92:	4bc3      	ldr	r3, [pc, #780]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	220c      	movs	r2, #12
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00e      	beq.n	8003cbc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c9e:	4bc0      	ldr	r3, [pc, #768]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x64>
 8003caa:	4bbd      	ldr	r3, [pc, #756]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	025b      	lsls	r3, r3, #9
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	4bb8      	ldr	r3, [pc, #736]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d100      	bne.n	8003cca <HAL_RCC_OscConfig+0x56>
 8003cc8:	e070      	b.n	8003dac <HAL_RCC_OscConfig+0x138>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d000      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x60>
 8003cd2:	e06b      	b.n	8003dac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e2d8      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x7c>
 8003ce0:	4baf      	ldr	r3, [pc, #700]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4bae      	ldr	r3, [pc, #696]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	0249      	lsls	r1, r1, #9
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e02f      	b.n	8003d50 <HAL_RCC_OscConfig+0xdc>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x9e>
 8003cf8:	4ba9      	ldr	r3, [pc, #676]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4ba8      	ldr	r3, [pc, #672]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	49a9      	ldr	r1, [pc, #676]	; (8003fa4 <HAL_RCC_OscConfig+0x330>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	4ba6      	ldr	r3, [pc, #664]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4ba5      	ldr	r3, [pc, #660]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	49a7      	ldr	r1, [pc, #668]	; (8003fa8 <HAL_RCC_OscConfig+0x334>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e01e      	b.n	8003d50 <HAL_RCC_OscConfig+0xdc>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10e      	bne.n	8003d38 <HAL_RCC_OscConfig+0xc4>
 8003d1a:	4ba1      	ldr	r3, [pc, #644]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4ba0      	ldr	r3, [pc, #640]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	02c9      	lsls	r1, r1, #11
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	4b9d      	ldr	r3, [pc, #628]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	0249      	lsls	r1, r1, #9
 8003d32:	430a      	orrs	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0xdc>
 8003d38:	4b99      	ldr	r3, [pc, #612]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b98      	ldr	r3, [pc, #608]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	4999      	ldr	r1, [pc, #612]	; (8003fa4 <HAL_RCC_OscConfig+0x330>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	4b96      	ldr	r3, [pc, #600]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b95      	ldr	r3, [pc, #596]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	4997      	ldr	r1, [pc, #604]	; (8003fa8 <HAL_RCC_OscConfig+0x334>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d014      	beq.n	8003d82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe f8e2 	bl	8001f20 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d62:	f7fe f8dd 	bl	8001f20 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e28a      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d74:	4b8a      	ldr	r3, [pc, #552]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0xee>
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe f8cd 	bl	8001f20 <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe f8c8 	bl	8001f20 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e275      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	029b      	lsls	r3, r3, #10
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x118>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2202      	movs	r2, #2
 8003db4:	4013      	ands	r3, r2
 8003db6:	d100      	bne.n	8003dba <HAL_RCC_OscConfig+0x146>
 8003db8:	e069      	b.n	8003e8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dba:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dc4:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	220c      	movs	r2, #12
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d11c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x196>
 8003dd0:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d116      	bne.n	8003e0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ddc:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d005      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e24b      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b6b      	ldr	r3, [pc, #428]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	22f8      	movs	r2, #248	; 0xf8
 8003df8:	4393      	bics	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	00da      	lsls	r2, r3, #3
 8003e02:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e08:	e041      	b.n	8003e8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d024      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe f87f 	bl	8001f20 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e28:	f7fe f87a 	bl	8001f20 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e227      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0f1      	beq.n	8003e28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	22f8      	movs	r2, #248	; 0xf8
 8003e4a:	4393      	bics	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00da      	lsls	r2, r3, #3
 8003e54:	4b52      	ldr	r3, [pc, #328]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e018      	b.n	8003e8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	2101      	movs	r1, #1
 8003e64:	438a      	bics	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe f85a 	bl	8001f20 <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe f855 	bl	8001f20 <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e202      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d1f1      	bne.n	8003e72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2208      	movs	r2, #8
 8003e94:	4013      	ands	r3, r2
 8003e96:	d036      	beq.n	8003f06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d019      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe f838 	bl	8001f20 <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fe f833 	bl	8001f20 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1e0      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2202      	movs	r2, #2
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d0f1      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x242>
 8003ed2:	e018      	b.n	8003f06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003eda:	2101      	movs	r1, #1
 8003edc:	438a      	bics	r2, r1
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f81e 	bl	8001f20 <HAL_GetTick>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fe f819 	bl	8001f20 <HAL_GetTick>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1c6      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d1f1      	bne.n	8003eea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <HAL_RCC_OscConfig+0x29e>
 8003f10:	e0b4      	b.n	800407c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f12:	201f      	movs	r0, #31
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	055b      	lsls	r3, r3, #21
 8003f22:	4013      	ands	r3, r2
 8003f24:	d110      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	0549      	lsls	r1, r1, #21
 8003f30:	430a      	orrs	r2, r1
 8003f32:	61da      	str	r2, [r3, #28]
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	055b      	lsls	r3, r3, #21
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_RCC_OscConfig+0x338>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4013      	ands	r3, r2
 8003f52:	d11a      	bne.n	8003f8a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f54:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x338>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCC_OscConfig+0x338>)
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	0049      	lsls	r1, r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fd ffdd 	bl	8001f20 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fd ffd8 	bl	8001f20 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e185      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_OscConfig+0x338>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4013      	ands	r3, r2
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10e      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x33c>
 8003f92:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <HAL_RCC_OscConfig+0x32c>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	621a      	str	r2, [r3, #32]
 8003f9e:	e035      	b.n	800400c <HAL_RCC_OscConfig+0x398>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	fffeffff 	.word	0xfffeffff
 8003fa8:	fffbffff 	.word	0xfffbffff
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x35e>
 8003fb8:	4bb6      	ldr	r3, [pc, #728]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	4bb5      	ldr	r3, [pc, #724]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	4bb3      	ldr	r3, [pc, #716]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	4bb2      	ldr	r3, [pc, #712]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fca:	2104      	movs	r1, #4
 8003fcc:	438a      	bics	r2, r1
 8003fce:	621a      	str	r2, [r3, #32]
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x398>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x380>
 8003fda:	4bae      	ldr	r3, [pc, #696]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	4bad      	ldr	r3, [pc, #692]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	621a      	str	r2, [r3, #32]
 8003fe6:	4bab      	ldr	r3, [pc, #684]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	4baa      	ldr	r3, [pc, #680]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	621a      	str	r2, [r3, #32]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x398>
 8003ff4:	4ba7      	ldr	r3, [pc, #668]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	4ba6      	ldr	r3, [pc, #664]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	438a      	bics	r2, r1
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	4ba4      	ldr	r3, [pc, #656]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	4ba3      	ldr	r3, [pc, #652]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004006:	2104      	movs	r1, #4
 8004008:	438a      	bics	r2, r1
 800400a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d014      	beq.n	800403e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004014:	f7fd ff84 	bl	8001f20 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e009      	b.n	8004032 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd ff7f 	bl	8001f20 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	4a9b      	ldr	r2, [pc, #620]	; (8004298 <HAL_RCC_OscConfig+0x624>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e12b      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	4b98      	ldr	r3, [pc, #608]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x3aa>
 800403c:	e013      	b.n	8004066 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403e:	f7fd ff6f 	bl	8001f20 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	e009      	b.n	800405c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fd ff6a 	bl	8001f20 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	4a91      	ldr	r2, [pc, #580]	; (8004298 <HAL_RCC_OscConfig+0x624>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e116      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	4b8d      	ldr	r3, [pc, #564]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	2202      	movs	r2, #2
 8004062:	4013      	ands	r3, r2
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004066:	231f      	movs	r3, #31
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	4b87      	ldr	r3, [pc, #540]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004076:	4989      	ldr	r1, [pc, #548]	; (800429c <HAL_RCC_OscConfig+0x628>)
 8004078:	400a      	ands	r2, r1
 800407a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2210      	movs	r2, #16
 8004082:	4013      	ands	r3, r2
 8004084:	d063      	beq.n	800414e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d12a      	bne.n	80040e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800408e:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004092:	4b80      	ldr	r3, [pc, #512]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004094:	2104      	movs	r1, #4
 8004096:	430a      	orrs	r2, r1
 8004098:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800409a:	4b7e      	ldr	r3, [pc, #504]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800409c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409e:	4b7d      	ldr	r3, [pc, #500]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040a0:	2101      	movs	r1, #1
 80040a2:	430a      	orrs	r2, r1
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fd ff3b 	bl	8001f20 <HAL_GetTick>
 80040aa:	0003      	movs	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040b0:	f7fd ff36 	bl	8001f20 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0e3      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80040c2:	4b74      	ldr	r3, [pc, #464]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	2202      	movs	r2, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	d0f1      	beq.n	80040b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040cc:	4b71      	ldr	r3, [pc, #452]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	22f8      	movs	r2, #248	; 0xf8
 80040d2:	4393      	bics	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	00da      	lsls	r2, r3, #3
 80040dc:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34
 80040e2:	e034      	b.n	800414e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	3305      	adds	r3, #5
 80040ea:	d111      	bne.n	8004110 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80040ec:	4b69      	ldr	r3, [pc, #420]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040f2:	2104      	movs	r1, #4
 80040f4:	438a      	bics	r2, r1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040f8:	4b66      	ldr	r3, [pc, #408]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	22f8      	movs	r2, #248	; 0xf8
 80040fe:	4393      	bics	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	00da      	lsls	r2, r3, #3
 8004108:	4b62      	ldr	r3, [pc, #392]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800410a:	430a      	orrs	r2, r1
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
 800410e:	e01e      	b.n	800414e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004110:	4b60      	ldr	r3, [pc, #384]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004114:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004116:	2104      	movs	r1, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800411c:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004122:	2101      	movs	r1, #1
 8004124:	438a      	bics	r2, r1
 8004126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fd fefa 	bl	8001f20 <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004132:	f7fd fef5 	bl	8001f20 <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0a2      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004144:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d1f1      	bne.n	8004132 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d100      	bne.n	8004158 <HAL_RCC_OscConfig+0x4e4>
 8004156:	e097      	b.n	8004288 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004158:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	220c      	movs	r2, #12
 800415e:	4013      	ands	r3, r2
 8004160:	2b08      	cmp	r3, #8
 8004162:	d100      	bne.n	8004166 <HAL_RCC_OscConfig+0x4f2>
 8004164:	e06b      	b.n	800423e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d14c      	bne.n	8004208 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b48      	ldr	r3, [pc, #288]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004174:	494a      	ldr	r1, [pc, #296]	; (80042a0 <HAL_RCC_OscConfig+0x62c>)
 8004176:	400a      	ands	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fd fed1 	bl	8001f20 <HAL_GetTick>
 800417e:	0003      	movs	r3, r0
 8004180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fecc 	bl	8001f20 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e079      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	049b      	lsls	r3, r3, #18
 800419e:	4013      	ands	r3, r2
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a2:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	220f      	movs	r2, #15
 80041a8:	4393      	bics	r3, r2
 80041aa:	0019      	movs	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041b2:	430a      	orrs	r2, r1
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a3a      	ldr	r2, [pc, #232]	; (80042a4 <HAL_RCC_OscConfig+0x630>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	431a      	orrs	r2, r3
 80041ca:	4b32      	ldr	r3, [pc, #200]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	0449      	lsls	r1, r1, #17
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd fe9f 	bl	8001f20 <HAL_GetTick>
 80041e2:	0003      	movs	r3, r0
 80041e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd fe9a 	bl	8001f20 <HAL_GetTick>
 80041ec:	0002      	movs	r2, r0
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e047      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	049b      	lsls	r3, r3, #18
 8004202:	4013      	ands	r3, r2
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x574>
 8004206:	e03f      	b.n	8004288 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800420e:	4924      	ldr	r1, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x62c>)
 8004210:	400a      	ands	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fd fe84 	bl	8001f20 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fd fe7f 	bl	8001f20 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e02c      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	049b      	lsls	r3, r3, #18
 8004238:	4013      	ands	r3, r2
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x5aa>
 800423c:	e024      	b.n	8004288 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e01f      	b.n	800428a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_RCC_OscConfig+0x620>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	025b      	lsls	r3, r3, #9
 800425c:	401a      	ands	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	429a      	cmp	r2, r3
 8004264:	d10e      	bne.n	8004284 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	220f      	movs	r2, #15
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d107      	bne.n	8004284 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	23f0      	movs	r3, #240	; 0xf0
 8004278:	039b      	lsls	r3, r3, #14
 800427a:	401a      	ands	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b008      	add	sp, #32
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	40021000 	.word	0x40021000
 8004298:	00001388 	.word	0x00001388
 800429c:	efffffff 	.word	0xefffffff
 80042a0:	feffffff 	.word	0xfeffffff
 80042a4:	ffc2ffff 	.word	0xffc2ffff

080042a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b3      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4013      	ands	r3, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d911      	bls.n	80042ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b58      	ldr	r3, [pc, #352]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	4393      	bics	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	4b55      	ldr	r3, [pc, #340]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e09a      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2202      	movs	r2, #2
 80042f4:	4013      	ands	r3, r2
 80042f6:	d015      	beq.n	8004324 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2204      	movs	r2, #4
 80042fe:	4013      	ands	r3, r2
 8004300:	d006      	beq.n	8004310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004302:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004308:	21e0      	movs	r1, #224	; 0xe0
 800430a:	00c9      	lsls	r1, r1, #3
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b47      	ldr	r3, [pc, #284]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	22f0      	movs	r2, #240	; 0xf0
 8004316:	4393      	bics	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2201      	movs	r2, #1
 800432a:	4013      	ands	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	4013      	ands	r3, r2
 8004340:	d114      	bne.n	800436c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06e      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	049b      	lsls	r3, r3, #18
 8004356:	4013      	ands	r3, r2
 8004358:	d108      	bne.n	800436c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e062      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e05b      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436c:	4b30      	ldr	r3, [pc, #192]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	4393      	bics	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fd fdce 	bl	8001f20 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004388:	e009      	b.n	800439e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438a:	f7fd fdc9 	bl	8001f20 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <HAL_RCC_ClockConfig+0x18c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e042      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	220c      	movs	r2, #12
 80043a4:	401a      	ands	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1ec      	bne.n	800438a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b1e      	ldr	r3, [pc, #120]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d211      	bcs.n	80043e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	4393      	bics	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_RCC_ClockConfig+0x184>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2201      	movs	r2, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e020      	b.n	8004424 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2204      	movs	r2, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_RCC_ClockConfig+0x190>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	0019      	movs	r1, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004400:	f000 f820 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004404:	0001      	movs	r1, r0
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x188>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	220f      	movs	r2, #15
 800440e:	4013      	ands	r3, r2
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x194>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	000a      	movs	r2, r1
 8004416:	40da      	lsrs	r2, r3
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x198>)
 800441a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800441c:	2003      	movs	r0, #3
 800441e:	f7fd fd39 	bl	8001e94 <HAL_InitTick>
  
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	00001388 	.word	0x00001388
 8004438:	fffff8ff 	.word	0xfffff8ff
 800443c:	080075d0 	.word	0x080075d0
 8004440:	2000002c 	.word	0x2000002c

08004444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b08f      	sub	sp, #60	; 0x3c
 8004448:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800444a:	2314      	movs	r3, #20
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004450:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004452:	c313      	stmia	r3!, {r0, r1, r4}
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_RCC_GetSysClockFreq+0xbc>)
 800445c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800445e:	c313      	stmia	r3!, {r0, r1, r4}
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	2300      	movs	r3, #0
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
 800446c:	2300      	movs	r3, #0
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004478:	4b22      	ldr	r3, [pc, #136]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	220c      	movs	r2, #12
 8004482:	4013      	ands	r3, r2
 8004484:	2b04      	cmp	r3, #4
 8004486:	d002      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x4a>
 8004488:	2b08      	cmp	r3, #8
 800448a:	d003      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x50>
 800448c:	e02d      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004492:	e02d      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	220f      	movs	r2, #15
 800449a:	4013      	ands	r3, r2
 800449c:	2214      	movs	r2, #20
 800449e:	18ba      	adds	r2, r7, r2
 80044a0:	5cd3      	ldrb	r3, [r2, r3]
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	220f      	movs	r2, #15
 80044aa:	4013      	ands	r3, r2
 80044ac:	1d3a      	adds	r2, r7, #4
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	025b      	lsls	r3, r3, #9
 80044b8:	4013      	ands	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044be:	4812      	ldr	r0, [pc, #72]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044c0:	f7fb fe22 	bl	8000108 <__udivsi3>
 80044c4:	0003      	movs	r3, r0
 80044c6:	001a      	movs	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	4353      	muls	r3, r2
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	e009      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d2:	000a      	movs	r2, r1
 80044d4:	0152      	lsls	r2, r2, #5
 80044d6:	1a52      	subs	r2, r2, r1
 80044d8:	0193      	lsls	r3, r2, #6
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	185b      	adds	r3, r3, r1
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044e8:	e002      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b00f      	add	sp, #60	; 0x3c
 80044f8:	bd90      	pop	{r4, r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	08007514 	.word	0x08007514
 8004500:	08007524 	.word	0x08007524
 8004504:	40021000 	.word	0x40021000
 8004508:	007a1200 	.word	0x007a1200

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <HAL_RCC_GetHCLKFreq+0x10>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	2000002c 	.word	0x2000002c

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004524:	f7ff fff2 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004528:	0001      	movs	r1, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	2207      	movs	r2, #7
 8004532:	4013      	ands	r3, r2
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	40d9      	lsrs	r1, r3
 800453a:	000b      	movs	r3, r1
}    
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40021000 	.word	0x40021000
 8004548:	080075e0 	.word	0x080075e0

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	4013      	ands	r3, r2
 8004566:	d100      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004568:	e08e      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800456a:	2017      	movs	r0, #23
 800456c:	183b      	adds	r3, r7, r0
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b5f      	ldr	r3, [pc, #380]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	055b      	lsls	r3, r3, #21
 800457a:	4013      	ands	r3, r2
 800457c:	d110      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4b5c      	ldr	r3, [pc, #368]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0549      	lsls	r1, r1, #21
 8004588:	430a      	orrs	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
 800458c:	4b58      	ldr	r3, [pc, #352]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	055b      	lsls	r3, r3, #21
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	183b      	adds	r3, r7, r0
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a0:	4b54      	ldr	r3, [pc, #336]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d11a      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ac:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	0049      	lsls	r1, r1, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fd fcb1 	bl	8001f20 <HAL_GetTick>
 80045be:	0003      	movs	r3, r0
 80045c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	e008      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd fcac 	bl	8001f20 <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e087      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e2:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	23c0      	movs	r3, #192	; 0xc0
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4013      	ands	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d034      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	23c0      	movs	r3, #192	; 0xc0
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	429a      	cmp	r2, r3
 8004602:	d02c      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004604:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a3b      	ldr	r2, [pc, #236]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800460e:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004610:	6a1a      	ldr	r2, [r3, #32]
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004614:	2180      	movs	r1, #128	; 0x80
 8004616:	0249      	lsls	r1, r1, #9
 8004618:	430a      	orrs	r2, r1
 800461a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800461c:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004622:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004624:	400a      	ands	r2, r1
 8004626:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	4013      	ands	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004636:	f7fd fc73 	bl	8001f20 <HAL_GetTick>
 800463a:	0003      	movs	r3, r0
 800463c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463e:	e009      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd fc6e 	bl	8001f20 <HAL_GetTick>
 8004644:	0002      	movs	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	4a2d      	ldr	r2, [pc, #180]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e048      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d0f0      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004664:	4013      	ands	r3, r2
 8004666:	0019      	movs	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800466e:	430a      	orrs	r2, r1
 8004670:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004672:	2317      	movs	r3, #23
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004682:	4920      	ldr	r1, [pc, #128]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	400a      	ands	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2201      	movs	r2, #1
 800468e:	4013      	ands	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	2203      	movs	r2, #3
 8004698:	4393      	bics	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2220      	movs	r2, #32
 80046ac:	4013      	ands	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2210      	movs	r2, #16
 80046b6:	4393      	bics	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046c0:	430a      	orrs	r2, r1
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4013      	ands	r3, r2
 80046ce:	d009      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	4393      	bics	r3, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e0:	430a      	orrs	r2, r1
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	0018      	movs	r0, r3
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b006      	add	sp, #24
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	fffffcff 	.word	0xfffffcff
 80046fc:	fffeffff 	.word	0xfffeffff
 8004700:	00001388 	.word	0x00001388
 8004704:	efffffff 	.word	0xefffffff

08004708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0a8      	b.n	800486c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	2382      	movs	r3, #130	; 0x82
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	429a      	cmp	r2, r3
 800472c:	d009      	beq.n	8004742 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	61da      	str	r2, [r3, #28]
 8004734:	e005      	b.n	8004742 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	225d      	movs	r2, #93	; 0x5d
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	225c      	movs	r2, #92	; 0x5c
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0018      	movs	r0, r3
 8004760:	f7fd f96a 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	225d      	movs	r2, #93	; 0x5d
 8004768:	2102      	movs	r1, #2
 800476a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2140      	movs	r1, #64	; 0x40
 8004778:	438a      	bics	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	23e0      	movs	r3, #224	; 0xe0
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	429a      	cmp	r2, r3
 8004786:	d902      	bls.n	800478e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e002      	b.n	8004794 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	015b      	lsls	r3, r3, #5
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	23f0      	movs	r3, #240	; 0xf0
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	429a      	cmp	r2, r3
 800479e:	d008      	beq.n	80047b2 <HAL_SPI_Init+0xaa>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	23e0      	movs	r3, #224	; 0xe0
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	2382      	movs	r3, #130	; 0x82
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	401a      	ands	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	2384      	movs	r3, #132	; 0x84
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	400b      	ands	r3, r1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2102      	movs	r1, #2
 80047ce:	400b      	ands	r3, r1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2101      	movs	r1, #1
 80047d8:	400b      	ands	r3, r1
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6999      	ldr	r1, [r3, #24]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	400b      	ands	r3, r1
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2138      	movs	r1, #56	; 0x38
 80047ee:	400b      	ands	r3, r1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	400b      	ands	r3, r1
 80047fa:	431a      	orrs	r2, r3
 80047fc:	0011      	movs	r1, r2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	401a      	ands	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	2204      	movs	r2, #4
 8004818:	401a      	ands	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2110      	movs	r1, #16
 8004820:	400b      	ands	r3, r1
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	2108      	movs	r1, #8
 800482a:	400b      	ands	r3, r1
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	23f0      	movs	r3, #240	; 0xf0
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	400b      	ands	r3, r1
 8004838:	431a      	orrs	r2, r3
 800483a:	0011      	movs	r1, r2
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	015b      	lsls	r3, r3, #5
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4907      	ldr	r1, [pc, #28]	; (8004874 <HAL_SPI_Init+0x16c>)
 8004858:	400a      	ands	r2, r1
 800485a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	225d      	movs	r2, #93	; 0x5d
 8004866:	2101      	movs	r1, #1
 8004868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b004      	add	sp, #16
 8004872:	bd80      	pop	{r7, pc}
 8004874:	fffff7ff 	.word	0xfffff7ff

08004878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	1dbb      	adds	r3, r7, #6
 8004886:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004888:	231f      	movs	r3, #31
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	225c      	movs	r2, #92	; 0x5c
 8004894:	5c9b      	ldrb	r3, [r3, r2]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_SPI_Transmit+0x26>
 800489a:	2302      	movs	r3, #2
 800489c:	e140      	b.n	8004b20 <HAL_SPI_Transmit+0x2a8>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	225c      	movs	r2, #92	; 0x5c
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048a6:	f7fd fb3b 	bl	8001f20 <HAL_GetTick>
 80048aa:	0003      	movs	r3, r0
 80048ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048ae:	2316      	movs	r3, #22
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	1dba      	adds	r2, r7, #6
 80048b4:	8812      	ldrh	r2, [r2, #0]
 80048b6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	225d      	movs	r2, #93	; 0x5d
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d004      	beq.n	80048ce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80048c4:	231f      	movs	r3, #31
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2202      	movs	r2, #2
 80048ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80048cc:	e11d      	b.n	8004b0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_SPI_Transmit+0x64>
 80048d4:	1dbb      	adds	r3, r7, #6
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80048dc:	231f      	movs	r3, #31
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80048e4:	e111      	b.n	8004b0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	225d      	movs	r2, #93	; 0x5d
 80048ea:	2103      	movs	r1, #3
 80048ec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1dba      	adds	r2, r7, #6
 80048fe:	8812      	ldrh	r2, [r2, #0]
 8004900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1dba      	adds	r2, r7, #6
 8004906:	8812      	ldrh	r2, [r2, #0]
 8004908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2244      	movs	r2, #68	; 0x44
 8004914:	2100      	movs	r1, #0
 8004916:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2246      	movs	r2, #70	; 0x46
 800491c:	2100      	movs	r1, #0
 800491e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	429a      	cmp	r2, r3
 8004936:	d110      	bne.n	800495a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	438a      	bics	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	01c9      	lsls	r1, r1, #7
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2240      	movs	r2, #64	; 0x40
 8004962:	4013      	ands	r3, r2
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d007      	beq.n	8004978 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2140      	movs	r1, #64	; 0x40
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	23e0      	movs	r3, #224	; 0xe0
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	429a      	cmp	r2, r3
 8004982:	d94e      	bls.n	8004a22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_SPI_Transmit+0x11e>
 800498c:	2316      	movs	r3, #22
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d13f      	bne.n	8004a16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049ba:	e02c      	b.n	8004a16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2202      	movs	r2, #2
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d112      	bne.n	80049f0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ee:	e012      	b.n	8004a16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f0:	f7fd fa96 	bl	8001f20 <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d802      	bhi.n	8004a06 <HAL_SPI_Transmit+0x18e>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_Transmit+0x194>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004a0c:	231f      	movs	r3, #31
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2203      	movs	r2, #3
 8004a12:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a14:	e079      	b.n	8004b0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1cd      	bne.n	80049bc <HAL_SPI_Transmit+0x144>
 8004a20:	e04f      	b.n	8004ac2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <HAL_SPI_Transmit+0x1bc>
 8004a2a:	2316      	movs	r3, #22
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d141      	bne.n	8004ab8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004a5a:	e02d      	b.n	8004ab8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d113      	bne.n	8004a92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a90:	e012      	b.n	8004ab8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a92:	f7fd fa45 	bl	8001f20 <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_SPI_Transmit+0x230>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_SPI_Transmit+0x236>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004aae:	231f      	movs	r3, #31
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ab6:	e028      	b.n	8004b0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1cc      	bne.n	8004a5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f000 f95d 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004afe:	231f      	movs	r3, #31
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_SPI_Transmit+0x292>
  }

error:
 8004b08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	225d      	movs	r2, #93	; 0x5d
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	225c      	movs	r2, #92	; 0x5c
 8004b16:	2100      	movs	r1, #0
 8004b18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b1a:	231f      	movs	r3, #31
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	781b      	ldrb	r3, [r3, #0]
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b008      	add	sp, #32
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b38:	f7fd f9f2 	bl	8001f20 <HAL_GetTick>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b48:	f7fd f9ea 	bl	8001f20 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b50:	4b3a      	ldr	r3, [pc, #232]	; (8004c3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	015b      	lsls	r3, r3, #5
 8004b56:	0d1b      	lsrs	r3, r3, #20
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	4353      	muls	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	e058      	b.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	d055      	beq.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b66:	f7fd f9db 	bl	8001f20 <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d902      	bls.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d142      	bne.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	21e0      	movs	r1, #224	; 0xe0
 8004b88:	438a      	bics	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	2382      	movs	r3, #130	; 0x82
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d113      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d005      	beq.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d107      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2140      	movs	r1, #64	; 0x40
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	019b      	lsls	r3, r3, #6
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d110      	bne.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	491a      	ldr	r1, [pc, #104]	; (8004c40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	0189      	lsls	r1, r1, #6
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	225d      	movs	r2, #93	; 0x5d
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	225c      	movs	r2, #92	; 0x5c
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e017      	b.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	425a      	negs	r2, r3
 8004c22:	4153      	adcs	r3, r2
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	001a      	movs	r2, r3
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d197      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b008      	add	sp, #32
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	2000002c 	.word	0x2000002c
 8004c40:	ffffdfff 	.word	0xffffdfff

08004c44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c52:	2317      	movs	r3, #23
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c5a:	f7fd f961 	bl	8001f20 <HAL_GetTick>
 8004c5e:	0002      	movs	r2, r0
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c6a:	f7fd f959 	bl	8001f20 <HAL_GetTick>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	0013      	movs	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	00da      	lsls	r2, r3, #3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8c:	4353      	muls	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c90:	e068      	b.n	8004d64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	23c0      	movs	r3, #192	; 0xc0
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d10a      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	2117      	movs	r1, #23
 8004caa:	187b      	adds	r3, r7, r1
 8004cac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	d055      	beq.n	8004d64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cb8:	f7fd f932 	bl	8001f20 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d902      	bls.n	8004cce <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d142      	bne.n	8004d54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	21e0      	movs	r1, #224	; 0xe0
 8004cda:	438a      	bics	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	2382      	movs	r3, #130	; 0x82
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d113      	bne.n	8004d12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d005      	beq.n	8004d02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d107      	bne.n	8004d12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2140      	movs	r1, #64	; 0x40
 8004d0e:	438a      	bics	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d110      	bne.n	8004d40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4916      	ldr	r1, [pc, #88]	; (8004d84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0189      	lsls	r1, r1, #6
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	225d      	movs	r2, #93	; 0x5d
 8004d44:	2101      	movs	r1, #1
 8004d46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	225c      	movs	r2, #92	; 0x5c
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e010      	b.n	8004d76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d18e      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b00a      	add	sp, #40	; 0x28
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	2000002c 	.word	0x2000002c
 8004d84:	ffffdfff 	.word	0xffffdfff

08004d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	23c0      	movs	r3, #192	; 0xc0
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	0013      	movs	r3, r2
 8004da2:	2200      	movs	r2, #0
 8004da4:	f7ff ff4e 	bl	8004c44 <SPI_WaitFifoStateUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d007      	beq.n	8004dbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	2220      	movs	r2, #32
 8004db2:	431a      	orrs	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e027      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	0013      	movs	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	f7ff fead 	bl	8004b28 <SPI_WaitFlagStateUntilTimeout>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d007      	beq.n	8004de2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e014      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	23c0      	movs	r3, #192	; 0xc0
 8004de6:	00d9      	lsls	r1, r3, #3
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	0013      	movs	r3, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7ff ff27 	bl	8004c44 <SPI_WaitFifoStateUntilTimeout>
 8004df6:	1e03      	subs	r3, r0, #0
 8004df8:	d007      	beq.n	8004e0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2220      	movs	r2, #32
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e000      	b.n	8004e0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e042      	b.n	8004eac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	223d      	movs	r2, #61	; 0x3d
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	223c      	movs	r2, #60	; 0x3c
 8004e36:	2100      	movs	r1, #0
 8004e38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fc fe83 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	223d      	movs	r2, #61	; 0x3d
 8004e46:	2102      	movs	r1, #2
 8004e48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	0019      	movs	r1, r3
 8004e54:	0010      	movs	r0, r2
 8004e56:	f000 fc55 	bl	8005704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2246      	movs	r2, #70	; 0x46
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	223e      	movs	r2, #62	; 0x3e
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	223f      	movs	r2, #63	; 0x3f
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2241      	movs	r2, #65	; 0x41
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2242      	movs	r2, #66	; 0x42
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2243      	movs	r2, #67	; 0x43
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2244      	movs	r2, #68	; 0x44
 8004e96:	2101      	movs	r1, #1
 8004e98:	5499      	strb	r1, [r3, r2]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2245      	movs	r2, #69	; 0x45
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	223d      	movs	r2, #61	; 0x3d
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	230f      	movs	r3, #15
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d108      	bne.n	8004ede <HAL_TIM_OC_Start_IT+0x2a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	223e      	movs	r2, #62	; 0x3e
 8004ed0:	5c9b      	ldrb	r3, [r3, r2]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	4193      	sbcs	r3, r2
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e01f      	b.n	8004f1e <HAL_TIM_OC_Start_IT+0x6a>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d108      	bne.n	8004ef6 <HAL_TIM_OC_Start_IT+0x42>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	223f      	movs	r2, #63	; 0x3f
 8004ee8:	5c9b      	ldrb	r3, [r3, r2]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	1e5a      	subs	r2, r3, #1
 8004ef0:	4193      	sbcs	r3, r2
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e013      	b.n	8004f1e <HAL_TIM_OC_Start_IT+0x6a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d108      	bne.n	8004f0e <HAL_TIM_OC_Start_IT+0x5a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	5c9b      	ldrb	r3, [r3, r2]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	4193      	sbcs	r3, r2
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e007      	b.n	8004f1e <HAL_TIM_OC_Start_IT+0x6a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2241      	movs	r2, #65	; 0x41
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	4193      	sbcs	r3, r2
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0b7      	b.n	8005096 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_OC_Start_IT+0x82>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	223e      	movs	r2, #62	; 0x3e
 8004f30:	2102      	movs	r1, #2
 8004f32:	5499      	strb	r1, [r3, r2]
 8004f34:	e013      	b.n	8004f5e <HAL_TIM_OC_Start_IT+0xaa>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_OC_Start_IT+0x92>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	223f      	movs	r2, #63	; 0x3f
 8004f40:	2102      	movs	r1, #2
 8004f42:	5499      	strb	r1, [r3, r2]
 8004f44:	e00b      	b.n	8004f5e <HAL_TIM_OC_Start_IT+0xaa>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_OC_Start_IT+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	2102      	movs	r1, #2
 8004f52:	5499      	strb	r1, [r3, r2]
 8004f54:	e003      	b.n	8004f5e <HAL_TIM_OC_Start_IT+0xaa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2241      	movs	r2, #65	; 0x41
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d02a      	beq.n	8004fba <HAL_TIM_OC_Start_IT+0x106>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d830      	bhi.n	8004fcc <HAL_TIM_OC_Start_IT+0x118>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d01b      	beq.n	8004fa8 <HAL_TIM_OC_Start_IT+0xf4>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d82a      	bhi.n	8004fcc <HAL_TIM_OC_Start_IT+0x118>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_OC_Start_IT+0xd0>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d009      	beq.n	8004f96 <HAL_TIM_OC_Start_IT+0xe2>
 8004f82:	e023      	b.n	8004fcc <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2102      	movs	r1, #2
 8004f90:	430a      	orrs	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]
      break;
 8004f94:	e01f      	b.n	8004fd6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	60da      	str	r2, [r3, #12]
      break;
 8004fa6:	e016      	b.n	8004fd6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2108      	movs	r1, #8
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]
      break;
 8004fb8:	e00d      	b.n	8004fd6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2110      	movs	r1, #16
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	60da      	str	r2, [r3, #12]
      break;
 8004fca:	e004      	b.n	8004fd6 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004fcc:	230f      	movs	r3, #15
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
      break;
 8004fd4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d157      	bne.n	8005090 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fea1 	bl	8005d30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIM_OC_Start_IT+0x162>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIM_OC_Start_IT+0x162>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIM_OC_Start_IT+0x162>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <HAL_TIM_OC_Start_IT+0x1f8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_TIM_OC_Start_IT+0x166>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_TIM_OC_Start_IT+0x168>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2180      	movs	r1, #128	; 0x80
 800502c:	0209      	lsls	r1, r1, #8
 800502e:	430a      	orrs	r2, r1
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <HAL_TIM_OC_Start_IT+0x1a8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	05db      	lsls	r3, r3, #23
 8005044:	429a      	cmp	r2, r3
 8005046:	d009      	beq.n	800505c <HAL_TIM_OC_Start_IT+0x1a8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_TIM_OC_Start_IT+0x1fc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_OC_Start_IT+0x1a8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d111      	bne.n	8005080 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2207      	movs	r2, #7
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b06      	cmp	r3, #6
 800506c:	d010      	beq.n	8005090 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	e007      	b.n	8005090 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	781b      	ldrb	r3, [r3, #0]
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b004      	add	sp, #16
 800509c:	bd80      	pop	{r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800
 80050b0:	40000400 	.word	0x40000400

080050b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e042      	b.n	800514c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	223d      	movs	r2, #61	; 0x3d
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223c      	movs	r2, #60	; 0x3c
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f839 	bl	8005154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	223d      	movs	r2, #61	; 0x3d
 80050e6:	2102      	movs	r1, #2
 80050e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	0019      	movs	r1, r3
 80050f4:	0010      	movs	r0, r2
 80050f6:	f000 fb05 	bl	8005704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2246      	movs	r2, #70	; 0x46
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	223e      	movs	r2, #62	; 0x3e
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	223f      	movs	r2, #63	; 0x3f
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2240      	movs	r2, #64	; 0x40
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2241      	movs	r2, #65	; 0x41
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2242      	movs	r2, #66	; 0x42
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2243      	movs	r2, #67	; 0x43
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2244      	movs	r2, #68	; 0x44
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2245      	movs	r2, #69	; 0x45
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	223d      	movs	r2, #61	; 0x3d
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2202      	movs	r2, #2
 8005174:	4013      	ands	r3, r2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d124      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2202      	movs	r2, #2
 8005182:	4013      	ands	r3, r2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11d      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2203      	movs	r2, #3
 800518e:	4252      	negs	r2, r2
 8005190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2203      	movs	r2, #3
 80051a0:	4013      	ands	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 fa94 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e007      	b.n	80051be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fb f847 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 fa93 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2204      	movs	r2, #4
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d125      	bne.n	800521e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2204      	movs	r2, #4
 80051da:	4013      	ands	r3, r2
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d11e      	bne.n	800521e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2205      	movs	r2, #5
 80051e6:	4252      	negs	r2, r2
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	23c0      	movs	r3, #192	; 0xc0
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4013      	ands	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 fa67 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 8005206:	e007      	b.n	8005218 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0018      	movs	r0, r3
 800520c:	f7fb f81a 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	0018      	movs	r0, r3
 8005214:	f000 fa66 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2208      	movs	r2, #8
 8005226:	4013      	ands	r3, r2
 8005228:	2b08      	cmp	r3, #8
 800522a:	d124      	bne.n	8005276 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2208      	movs	r2, #8
 8005234:	4013      	ands	r3, r2
 8005236:	2b08      	cmp	r3, #8
 8005238:	d11d      	bne.n	8005276 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2209      	movs	r2, #9
 8005240:	4252      	negs	r2, r2
 8005242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2204      	movs	r2, #4
 8005248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2203      	movs	r2, #3
 8005252:	4013      	ands	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 fa3b 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 800525e:	e007      	b.n	8005270 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f7fa ffee 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0018      	movs	r0, r3
 800526c:	f000 fa3a 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2210      	movs	r2, #16
 800527e:	4013      	ands	r3, r2
 8005280:	2b10      	cmp	r3, #16
 8005282:	d125      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2210      	movs	r2, #16
 800528c:	4013      	ands	r3, r2
 800528e:	2b10      	cmp	r3, #16
 8005290:	d11e      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2211      	movs	r2, #17
 8005298:	4252      	negs	r2, r2
 800529a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2208      	movs	r2, #8
 80052a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	23c0      	movs	r3, #192	; 0xc0
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4013      	ands	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fa0e 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e007      	b.n	80052ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fa ffc1 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 fa0d 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4013      	ands	r3, r2
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10f      	bne.n	80052fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d108      	bne.n	80052fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	4252      	negs	r2, r2
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f9e3 	bl	80056c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	4013      	ands	r3, r2
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	d10f      	bne.n	800532c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	4013      	ands	r3, r2
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d108      	bne.n	800532c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2281      	movs	r2, #129	; 0x81
 8005320:	4252      	negs	r2, r2
 8005322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 fdea 	bl	8005f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	4013      	ands	r3, r2
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10f      	bne.n	800535a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	4013      	ands	r3, r2
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d108      	bne.n	800535a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2241      	movs	r2, #65	; 0x41
 800534e:	4252      	negs	r2, r2
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 f9cd 	bl	80056f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2220      	movs	r2, #32
 8005362:	4013      	ands	r3, r2
 8005364:	2b20      	cmp	r3, #32
 8005366:	d10f      	bne.n	8005388 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	4013      	ands	r3, r2
 8005372:	2b20      	cmp	r3, #32
 8005374:	d108      	bne.n	8005388 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2221      	movs	r2, #33	; 0x21
 800537c:	4252      	negs	r2, r2
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 fdb4 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2317      	movs	r3, #23
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	223c      	movs	r2, #60	; 0x3c
 80053a8:	5c9b      	ldrb	r3, [r3, r2]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0ad      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	223c      	movs	r2, #60	; 0x3c
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d100      	bne.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80053c0:	e076      	b.n	80054b0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d900      	bls.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x3a>
 80053c8:	e095      	b.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d04e      	beq.n	800546e <HAL_TIM_PWM_ConfigChannel+0xde>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d900      	bls.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80053d6:	e08e      	b.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d021      	beq.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x98>
 80053e4:	e087      	b.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	0011      	movs	r1, r2
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fa08 	bl	8005804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2108      	movs	r1, #8
 8005400:	430a      	orrs	r2, r1
 8005402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2104      	movs	r1, #4
 8005410:	438a      	bics	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6999      	ldr	r1, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	619a      	str	r2, [r3, #24]
      break;
 8005426:	e06b      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0011      	movs	r1, r2
 8005430:	0018      	movs	r0, r3
 8005432:	f000 fa6f 	bl	8005914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	0109      	lsls	r1, r1, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4931      	ldr	r1, [pc, #196]	; (8005518 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005454:	400a      	ands	r2, r1
 8005456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	619a      	str	r2, [r3, #24]
      break;
 800546c:	e048      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	0011      	movs	r1, r2
 8005476:	0018      	movs	r0, r3
 8005478:	f000 fad0 	bl	8005a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2108      	movs	r1, #8
 8005488:	430a      	orrs	r2, r1
 800548a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2104      	movs	r1, #4
 8005498:	438a      	bics	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69d9      	ldr	r1, [r3, #28]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
      break;
 80054ae:	e027      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0011      	movs	r1, r2
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 fb35 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0109      	lsls	r1, r1, #4
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	490f      	ldr	r1, [pc, #60]	; (8005518 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80054dc:	400a      	ands	r2, r1
 80054de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69d9      	ldr	r1, [r3, #28]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	61da      	str	r2, [r3, #28]
      break;
 80054f4:	e004      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80054f6:	2317      	movs	r3, #23
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
      break;
 80054fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	223c      	movs	r2, #60	; 0x3c
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

  return status;
 8005508:	2317      	movs	r3, #23
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
}
 800550e:	0018      	movs	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	b006      	add	sp, #24
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	fffffbff 	.word	0xfffffbff

0800551c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	230f      	movs	r3, #15
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	223c      	movs	r2, #60	; 0x3c
 8005532:	5c9b      	ldrb	r3, [r3, r2]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIM_ConfigClockSource+0x20>
 8005538:	2302      	movs	r3, #2
 800553a:	e0bc      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x19a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	223c      	movs	r2, #60	; 0x3c
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	223d      	movs	r2, #61	; 0x3d
 8005548:	2102      	movs	r1, #2
 800554a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2277      	movs	r2, #119	; 0x77
 8005558:	4393      	bics	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a58      	ldr	r2, [pc, #352]	; (80056c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005560:	4013      	ands	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	0192      	lsls	r2, r2, #6
 8005574:	4293      	cmp	r3, r2
 8005576:	d040      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0xde>
 8005578:	2280      	movs	r2, #128	; 0x80
 800557a:	0192      	lsls	r2, r2, #6
 800557c:	4293      	cmp	r3, r2
 800557e:	d900      	bls.n	8005582 <HAL_TIM_ConfigClockSource+0x66>
 8005580:	e088      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	0152      	lsls	r2, r2, #5
 8005586:	4293      	cmp	r3, r2
 8005588:	d100      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x70>
 800558a:	e088      	b.n	800569e <HAL_TIM_ConfigClockSource+0x182>
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	0152      	lsls	r2, r2, #5
 8005590:	4293      	cmp	r3, r2
 8005592:	d900      	bls.n	8005596 <HAL_TIM_ConfigClockSource+0x7a>
 8005594:	e07e      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 8005596:	2b70      	cmp	r3, #112	; 0x70
 8005598:	d018      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xb0>
 800559a:	d900      	bls.n	800559e <HAL_TIM_ConfigClockSource+0x82>
 800559c:	e07a      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 800559e:	2b60      	cmp	r3, #96	; 0x60
 80055a0:	d04f      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x126>
 80055a2:	d900      	bls.n	80055a6 <HAL_TIM_ConfigClockSource+0x8a>
 80055a4:	e076      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 80055a6:	2b50      	cmp	r3, #80	; 0x50
 80055a8:	d03b      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x106>
 80055aa:	d900      	bls.n	80055ae <HAL_TIM_ConfigClockSource+0x92>
 80055ac:	e072      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d057      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x146>
 80055b2:	d900      	bls.n	80055b6 <HAL_TIM_ConfigClockSource+0x9a>
 80055b4:	e06e      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d063      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x166>
 80055ba:	d86b      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d060      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x166>
 80055c0:	d868      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d05d      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x166>
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d05b      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x166>
 80055ca:	e063      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f000 fb88 	bl	8005cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2277      	movs	r2, #119	; 0x77
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
      break;
 80055f8:	e052      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6899      	ldr	r1, [r3, #8]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f000 fb71 	bl	8005cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	01c9      	lsls	r1, r1, #7
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]
      break;
 8005620:	e03e      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	001a      	movs	r2, r3
 8005630:	f000 fae4 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2150      	movs	r1, #80	; 0x50
 800563a:	0018      	movs	r0, r3
 800563c:	f000 fb3e 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005640:	e02e      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	001a      	movs	r2, r3
 8005650:	f000 fb02 	bl	8005c58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2160      	movs	r1, #96	; 0x60
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fb2e 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005660:	e01e      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	001a      	movs	r2, r3
 8005670:	f000 fac4 	bl	8005bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2140      	movs	r1, #64	; 0x40
 800567a:	0018      	movs	r0, r3
 800567c:	f000 fb1e 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005680:	e00e      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	0019      	movs	r1, r3
 800568c:	0010      	movs	r0, r2
 800568e:	f000 fb15 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005692:	e005      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005694:	230f      	movs	r3, #15
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
      break;
 800569c:	e000      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800569e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	223d      	movs	r2, #61	; 0x3d
 80056a4:	2101      	movs	r1, #1
 80056a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	223c      	movs	r2, #60	; 0x3c
 80056ac:	2100      	movs	r1, #0
 80056ae:	5499      	strb	r1, [r3, r2]

  return status;
 80056b0:	230f      	movs	r3, #15
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
}
 80056b6:	0018      	movs	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b004      	add	sp, #16
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	ffff00ff 	.word	0xffff00ff

080056c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}

08005704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a34      	ldr	r2, [pc, #208]	; (80057e8 <TIM_Base_SetConfig+0xe4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d008      	beq.n	800572e <TIM_Base_SetConfig+0x2a>
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	05db      	lsls	r3, r3, #23
 8005722:	429a      	cmp	r2, r3
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0x2a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a30      	ldr	r2, [pc, #192]	; (80057ec <TIM_Base_SetConfig+0xe8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2270      	movs	r2, #112	; 0x70
 8005732:	4393      	bics	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <TIM_Base_SetConfig+0xe4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	05db      	lsls	r3, r3, #23
 800574e:	429a      	cmp	r2, r3
 8005750:	d013      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <TIM_Base_SetConfig+0xe8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00f      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <TIM_Base_SetConfig+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <TIM_Base_SetConfig+0xf0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <TIM_Base_SetConfig+0xf4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_Base_SetConfig+0x76>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a21      	ldr	r2, [pc, #132]	; (80057fc <TIM_Base_SetConfig+0xf8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <TIM_Base_SetConfig+0xfc>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	4393      	bics	r3, r2
 8005792:	001a      	movs	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <TIM_Base_SetConfig+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0xce>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <TIM_Base_SetConfig+0xf0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0xce>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <TIM_Base_SetConfig+0xf4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0xce>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <TIM_Base_SetConfig+0xf8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d103      	bne.n	80057da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	615a      	str	r2, [r3, #20]
}
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40002000 	.word	0x40002000
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800
 8005800:	fffffcff 	.word	0xfffffcff

08005804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	2201      	movs	r2, #1
 8005814:	4393      	bics	r3, r2
 8005816:	001a      	movs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2270      	movs	r2, #112	; 0x70
 8005832:	4393      	bics	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2203      	movs	r2, #3
 800583a:	4393      	bics	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2202      	movs	r2, #2
 800584c:	4393      	bics	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <TIM_OC1_SetConfig+0xf8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_OC1_SetConfig+0x76>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <TIM_OC1_SetConfig+0xfc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_OC1_SetConfig+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a25      	ldr	r2, [pc, #148]	; (8005904 <TIM_OC1_SetConfig+0x100>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC1_SetConfig+0x76>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a24      	ldr	r2, [pc, #144]	; (8005908 <TIM_OC1_SetConfig+0x104>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10c      	bne.n	8005894 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2208      	movs	r2, #8
 800587e:	4393      	bics	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2204      	movs	r2, #4
 8005890:	4393      	bics	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a19      	ldr	r2, [pc, #100]	; (80058fc <TIM_OC1_SetConfig+0xf8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_OC1_SetConfig+0xb0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a18      	ldr	r2, [pc, #96]	; (8005900 <TIM_OC1_SetConfig+0xfc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC1_SetConfig+0xb0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <TIM_OC1_SetConfig+0x100>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC1_SetConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a16      	ldr	r2, [pc, #88]	; (8005908 <TIM_OC1_SetConfig+0x104>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4a15      	ldr	r2, [pc, #84]	; (800590c <TIM_OC1_SetConfig+0x108>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4a14      	ldr	r2, [pc, #80]	; (8005910 <TIM_OC1_SetConfig+0x10c>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b006      	add	sp, #24
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	fffffeff 	.word	0xfffffeff
 8005910:	fffffdff 	.word	0xfffffdff

08005914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	2210      	movs	r2, #16
 8005924:	4393      	bics	r3, r2
 8005926:	001a      	movs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <TIM_OC2_SetConfig+0xe8>)
 8005942:	4013      	ands	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <TIM_OC2_SetConfig+0xec>)
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2220      	movs	r2, #32
 800595e:	4393      	bics	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <TIM_OC2_SetConfig+0xf0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2280      	movs	r2, #128	; 0x80
 800597a:	4393      	bics	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	4393      	bics	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <TIM_OC2_SetConfig+0xf0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00b      	beq.n	80059b2 <TIM_OC2_SetConfig+0x9e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <TIM_OC2_SetConfig+0xf4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <TIM_OC2_SetConfig+0x9e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <TIM_OC2_SetConfig+0xf8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC2_SetConfig+0x9e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_OC2_SetConfig+0xfc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <TIM_OC2_SetConfig+0x100>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <TIM_OC2_SetConfig+0x104>)
 80059be:	4013      	ands	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b006      	add	sp, #24
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	ffff8fff 	.word	0xffff8fff
 8005a00:	fffffcff 	.word	0xfffffcff
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800
 8005a14:	fffffbff 	.word	0xfffffbff
 8005a18:	fffff7ff 	.word	0xfffff7ff

08005a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <TIM_OC3_SetConfig+0xe4>)
 8005a2c:	401a      	ands	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2270      	movs	r2, #112	; 0x70
 8005a48:	4393      	bics	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	4393      	bics	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <TIM_OC3_SetConfig+0xe8>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <TIM_OC3_SetConfig+0xec>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10d      	bne.n	8005a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <TIM_OC3_SetConfig+0xf0>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <TIM_OC3_SetConfig+0xf4>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <TIM_OC3_SetConfig+0xec>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <TIM_OC3_SetConfig+0xf8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <TIM_OC3_SetConfig+0xfc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <TIM_OC3_SetConfig+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d113      	bne.n	8005ade <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <TIM_OC3_SetConfig+0x104>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <TIM_OC3_SetConfig+0x108>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	46c0      	nop			; (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b006      	add	sp, #24
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	fffffeff 	.word	0xfffffeff
 8005b04:	fffffdff 	.word	0xfffffdff
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	fffff7ff 	.word	0xfffff7ff
 8005b10:	fffffbff 	.word	0xfffffbff
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	ffffefff 	.word	0xffffefff
 8005b24:	ffffdfff 	.word	0xffffdfff

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_OC4_SetConfig+0xb0>)
 8005b38:	401a      	ands	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <TIM_OC4_SetConfig+0xb4>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <TIM_OC4_SetConfig+0xb8>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <TIM_OC4_SetConfig+0xbc>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a19      	ldr	r2, [pc, #100]	; (8005be8 <TIM_OC4_SetConfig+0xc0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x78>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	; (8005bec <TIM_OC4_SetConfig+0xc4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x78>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <TIM_OC4_SetConfig+0xc8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC4_SetConfig+0x78>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <TIM_OC4_SetConfig+0xcc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d109      	bne.n	8005bb4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_OC4_SetConfig+0xd0>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b006      	add	sp, #24
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	ffffefff 	.word	0xffffefff
 8005bdc:	ffff8fff 	.word	0xffff8fff
 8005be0:	fffffcff 	.word	0xfffffcff
 8005be4:	ffffdfff 	.word	0xffffdfff
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	ffffbfff 	.word	0xffffbfff

08005bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4393      	bics	r3, r2
 8005c16:	001a      	movs	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	22f0      	movs	r2, #240	; 0xf0
 8005c26:	4393      	bics	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	220a      	movs	r2, #10
 8005c38:	4393      	bics	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <TIM_TI2_ConfigInputStage+0x60>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	22a0      	movs	r2, #160	; 0xa0
 8005c94:	4393      	bics	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	ffff0fff 	.word	0xffff0fff

08005cbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2270      	movs	r2, #112	; 0x70
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <TIM_ETR_SetConfig+0x3c>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	021a      	lsls	r2, r3, #8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b006      	add	sp, #24
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	ffff00ff 	.word	0xffff00ff

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	221f      	movs	r2, #31
 8005d40:	4013      	ands	r3, r2
 8005d42:	2201      	movs	r2, #1
 8005d44:	409a      	lsls	r2, r3
 8005d46:	0013      	movs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	43d2      	mvns	r2, r2
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	211f      	movs	r1, #31
 8005d60:	400b      	ands	r3, r1
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4099      	lsls	r1, r3
 8005d66:	000b      	movs	r3, r1
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b006      	add	sp, #24
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	223c      	movs	r2, #60	; 0x3c
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e047      	b.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	223c      	movs	r2, #60	; 0x3c
 8005d94:	2101      	movs	r1, #1
 8005d96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	223d      	movs	r2, #61	; 0x3d
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2270      	movs	r2, #112	; 0x70
 8005db4:	4393      	bics	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a16      	ldr	r2, [pc, #88]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00f      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d009      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10c      	bne.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	4393      	bics	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	223d      	movs	r2, #61	; 0x3d
 8005e12:	2101      	movs	r1, #1
 8005e14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	223c      	movs	r2, #60	; 0x3c
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b004      	add	sp, #16
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40014000 	.word	0x40014000

08005e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	223c      	movs	r2, #60	; 0x3c
 8005e46:	5c9b      	ldrb	r3, [r3, r2]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e03e      	b.n	8005ece <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	223c      	movs	r2, #60	; 0x3c
 8005e54:	2101      	movs	r1, #1
 8005e56:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	22ff      	movs	r2, #255	; 0xff
 8005e5c:	4393      	bics	r3, r2
 8005e5e:	001a      	movs	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005e6c:	401a      	ands	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a18      	ldr	r2, [pc, #96]	; (8005edc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005e88:	401a      	ands	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005e96:	401a      	ands	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005ea4:	401a      	ands	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	223c      	movs	r2, #60	; 0x3c
 8005ec8:	2100      	movs	r1, #0
 8005eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	fffffcff 	.word	0xfffffcff
 8005edc:	fffffbff 	.word	0xfffffbff
 8005ee0:	fffff7ff 	.word	0xfffff7ff
 8005ee4:	ffffefff 	.word	0xffffefff
 8005ee8:	ffffdfff 	.word	0xffffdfff
 8005eec:	ffffbfff 	.word	0xffffbfff

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b002      	add	sp, #8
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e044      	b.n	8005fac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2274      	movs	r2, #116	; 0x74
 8005f2e:	2100      	movs	r1, #0
 8005f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7fb febf 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	; 0x24
 8005f3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	438a      	bics	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 fc2e 	bl	80067b4 <UART_SetConfig>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e024      	b.n	8005fac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 fd61 	bl	8006a34 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	490d      	ldr	r1, [pc, #52]	; (8005fb4 <HAL_UART_Init+0xa4>)
 8005f7e:	400a      	ands	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	212a      	movs	r1, #42	; 0x2a
 8005f8e:	438a      	bics	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 fdf9 	bl	8006b9c <UART_CheckIdleState>
 8005faa:	0003      	movs	r3, r0
}
 8005fac:	0018      	movs	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	ffffb7ff 	.word	0xffffb7ff

08005fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	1dbb      	adds	r3, r7, #6
 8005fc6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d000      	beq.n	8005fd2 <HAL_UART_Transmit+0x1a>
 8005fd0:	e096      	b.n	8006100 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_UART_Transmit+0x28>
 8005fd8:	1dbb      	adds	r3, r7, #6
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e08e      	b.n	8006102 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	015b      	lsls	r3, r3, #5
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d109      	bne.n	8006004 <HAL_UART_Transmit+0x4c>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d001      	beq.n	8006004 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e07e      	b.n	8006102 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2274      	movs	r2, #116	; 0x74
 8006008:	5c9b      	ldrb	r3, [r3, r2]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_UART_Transmit+0x5a>
 800600e:	2302      	movs	r3, #2
 8006010:	e077      	b.n	8006102 <HAL_UART_Transmit+0x14a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2274      	movs	r2, #116	; 0x74
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	2100      	movs	r1, #0
 8006020:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2221      	movs	r2, #33	; 0x21
 8006026:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006028:	f7fb ff7a 	bl	8001f20 <HAL_GetTick>
 800602c:	0003      	movs	r3, r0
 800602e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1dba      	adds	r2, r7, #6
 8006034:	2150      	movs	r1, #80	; 0x50
 8006036:	8812      	ldrh	r2, [r2, #0]
 8006038:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1dba      	adds	r2, r7, #6
 800603e:	2152      	movs	r1, #82	; 0x52
 8006040:	8812      	ldrh	r2, [r2, #0]
 8006042:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	429a      	cmp	r2, r3
 800604e:	d108      	bne.n	8006062 <HAL_UART_Transmit+0xaa>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006058:	2300      	movs	r3, #0
 800605a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e003      	b.n	800606a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2274      	movs	r2, #116	; 0x74
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006072:	e02d      	b.n	80060d0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	0013      	movs	r3, r2
 800607e:	2200      	movs	r2, #0
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	f000 fdd3 	bl	8006c2c <UART_WaitOnFlagUntilTimeout>
 8006086:	1e03      	subs	r3, r0, #0
 8006088:	d001      	beq.n	800608e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e039      	b.n	8006102 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	881a      	ldrh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	05d2      	lsls	r2, r2, #23
 800609e:	0dd2      	lsrs	r2, r2, #23
 80060a0:	b292      	uxth	r2, r2
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	3302      	adds	r3, #2
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e008      	b.n	80060be <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b292      	uxth	r2, r2
 80060b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2252      	movs	r2, #82	; 0x52
 80060c2:	5a9b      	ldrh	r3, [r3, r2]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b299      	uxth	r1, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2252      	movs	r2, #82	; 0x52
 80060ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2252      	movs	r2, #82	; 0x52
 80060d4:	5a9b      	ldrh	r3, [r3, r2]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1cb      	bne.n	8006074 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	0013      	movs	r3, r2
 80060e6:	2200      	movs	r2, #0
 80060e8:	2140      	movs	r1, #64	; 0x40
 80060ea:	f000 fd9f 	bl	8006c2c <UART_WaitOnFlagUntilTimeout>
 80060ee:	1e03      	subs	r3, r0, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e005      	b.n	8006102 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	0018      	movs	r0, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	b008      	add	sp, #32
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b088      	sub	sp, #32
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	1dbb      	adds	r3, r7, #6
 8006116:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611c:	2b20      	cmp	r3, #32
 800611e:	d150      	bne.n	80061c2 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_Receive_IT+0x24>
 8006126:	1dbb      	adds	r3, r7, #6
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e048      	b.n	80061c4 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	015b      	lsls	r3, r3, #5
 800613a:	429a      	cmp	r2, r3
 800613c:	d109      	bne.n	8006152 <HAL_UART_Receive_IT+0x48>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2201      	movs	r2, #1
 800614a:	4013      	ands	r3, r2
 800614c:	d001      	beq.n	8006152 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e038      	b.n	80061c4 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2274      	movs	r2, #116	; 0x74
 8006156:	5c9b      	ldrb	r3, [r3, r2]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_UART_Receive_IT+0x56>
 800615c:	2302      	movs	r3, #2
 800615e:	e031      	b.n	80061c4 <HAL_UART_Receive_IT+0xba>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2274      	movs	r2, #116	; 0x74
 8006164:	2101      	movs	r1, #1
 8006166:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	4013      	ands	r3, r2
 800617a:	d019      	beq.n	80061b0 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	613b      	str	r3, [r7, #16]
  return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	2301      	movs	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	04c9      	lsls	r1, r1, #19
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061b0:	1dbb      	adds	r3, r7, #6
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 fdfb 	bl	8006db4 <UART_Start_Receive_IT>
 80061be:	0003      	movs	r3, r0
 80061c0:	e000      	b.n	80061c4 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b008      	add	sp, #32
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b0ab      	sub	sp, #172	; 0xac
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	22a4      	movs	r2, #164	; 0xa4
 80061dc:	18b9      	adds	r1, r7, r2
 80061de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	20a0      	movs	r0, #160	; 0xa0
 80061e8:	1839      	adds	r1, r7, r0
 80061ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	219c      	movs	r1, #156	; 0x9c
 80061f4:	1879      	adds	r1, r7, r1
 80061f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061f8:	0011      	movs	r1, r2
 80061fa:	18bb      	adds	r3, r7, r2
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a99      	ldr	r2, [pc, #612]	; (8006464 <HAL_UART_IRQHandler+0x298>)
 8006200:	4013      	ands	r3, r2
 8006202:	2298      	movs	r2, #152	; 0x98
 8006204:	18bc      	adds	r4, r7, r2
 8006206:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006208:	18bb      	adds	r3, r7, r2
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d114      	bne.n	800623a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006210:	187b      	adds	r3, r7, r1
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2220      	movs	r2, #32
 8006216:	4013      	ands	r3, r2
 8006218:	d00f      	beq.n	800623a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800621a:	183b      	adds	r3, r7, r0
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2220      	movs	r2, #32
 8006220:	4013      	ands	r3, r2
 8006222:	d00a      	beq.n	800623a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006228:	2b00      	cmp	r3, #0
 800622a:	d100      	bne.n	800622e <HAL_UART_IRQHandler+0x62>
 800622c:	e296      	b.n	800675c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	0010      	movs	r0, r2
 8006236:	4798      	blx	r3
      }
      return;
 8006238:	e290      	b.n	800675c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800623a:	2398      	movs	r3, #152	; 0x98
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d100      	bne.n	8006246 <HAL_UART_IRQHandler+0x7a>
 8006244:	e114      	b.n	8006470 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006246:	239c      	movs	r3, #156	; 0x9c
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	4013      	ands	r3, r2
 8006250:	d106      	bne.n	8006260 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006252:	23a0      	movs	r3, #160	; 0xa0
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a83      	ldr	r2, [pc, #524]	; (8006468 <HAL_UART_IRQHandler+0x29c>)
 800625a:	4013      	ands	r3, r2
 800625c:	d100      	bne.n	8006260 <HAL_UART_IRQHandler+0x94>
 800625e:	e107      	b.n	8006470 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006260:	23a4      	movs	r3, #164	; 0xa4
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2201      	movs	r2, #1
 8006268:	4013      	ands	r3, r2
 800626a:	d012      	beq.n	8006292 <HAL_UART_IRQHandler+0xc6>
 800626c:	23a0      	movs	r3, #160	; 0xa0
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	4013      	ands	r3, r2
 8006278:	d00b      	beq.n	8006292 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	589b      	ldr	r3, [r3, r2]
 8006288:	2201      	movs	r2, #1
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006292:	23a4      	movs	r3, #164	; 0xa4
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2202      	movs	r2, #2
 800629a:	4013      	ands	r3, r2
 800629c:	d011      	beq.n	80062c2 <HAL_UART_IRQHandler+0xf6>
 800629e:	239c      	movs	r3, #156	; 0x9c
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2201      	movs	r2, #1
 80062a6:	4013      	ands	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2280      	movs	r2, #128	; 0x80
 80062b6:	589b      	ldr	r3, [r3, r2]
 80062b8:	2204      	movs	r2, #4
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062c2:	23a4      	movs	r3, #164	; 0xa4
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2204      	movs	r2, #4
 80062ca:	4013      	ands	r3, r2
 80062cc:	d011      	beq.n	80062f2 <HAL_UART_IRQHandler+0x126>
 80062ce:	239c      	movs	r3, #156	; 0x9c
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4013      	ands	r3, r2
 80062d8:	d00b      	beq.n	80062f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2204      	movs	r2, #4
 80062e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	589b      	ldr	r3, [r3, r2]
 80062e8:	2202      	movs	r2, #2
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062f2:	23a4      	movs	r3, #164	; 0xa4
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2208      	movs	r2, #8
 80062fa:	4013      	ands	r3, r2
 80062fc:	d017      	beq.n	800632e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062fe:	23a0      	movs	r3, #160	; 0xa0
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2220      	movs	r2, #32
 8006306:	4013      	ands	r3, r2
 8006308:	d105      	bne.n	8006316 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800630a:	239c      	movs	r3, #156	; 0x9c
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2201      	movs	r2, #1
 8006312:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006314:	d00b      	beq.n	800632e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2208      	movs	r2, #8
 800631c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2280      	movs	r2, #128	; 0x80
 8006322:	589b      	ldr	r3, [r3, r2]
 8006324:	2208      	movs	r2, #8
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800632e:	23a4      	movs	r3, #164	; 0xa4
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4013      	ands	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_UART_IRQHandler+0x198>
 800633c:	23a0      	movs	r3, #160	; 0xa0
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	04db      	lsls	r3, r3, #19
 8006346:	4013      	ands	r3, r2
 8006348:	d00c      	beq.n	8006364 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2280      	movs	r2, #128	; 0x80
 8006350:	0112      	lsls	r2, r2, #4
 8006352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2280      	movs	r2, #128	; 0x80
 8006358:	589b      	ldr	r3, [r3, r2]
 800635a:	2220      	movs	r2, #32
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	589b      	ldr	r3, [r3, r2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d100      	bne.n	8006370 <HAL_UART_IRQHandler+0x1a4>
 800636e:	e1f7      	b.n	8006760 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006370:	23a4      	movs	r3, #164	; 0xa4
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2220      	movs	r2, #32
 8006378:	4013      	ands	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800637c:	23a0      	movs	r3, #160	; 0xa0
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2220      	movs	r2, #32
 8006384:	4013      	ands	r3, r2
 8006386:	d008      	beq.n	800639a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	0010      	movs	r0, r2
 8006398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	589b      	ldr	r3, [r3, r2]
 80063a0:	2194      	movs	r1, #148	; 0x94
 80063a2:	187a      	adds	r2, r7, r1
 80063a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d004      	beq.n	80063be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2228      	movs	r2, #40	; 0x28
 80063ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063bc:	d047      	beq.n	800644e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	0018      	movs	r0, r3
 80063c2:	f000 fd93 	bl	8006eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2240      	movs	r2, #64	; 0x40
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d137      	bne.n	8006444 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80063da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063dc:	2090      	movs	r0, #144	; 0x90
 80063de:	183a      	adds	r2, r7, r0
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	2301      	movs	r3, #1
 80063e4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e8:	f383 8810 	msr	PRIMASK, r3
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2140      	movs	r1, #64	; 0x40
 80063fa:	438a      	bics	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006406:	f383 8810 	msr	PRIMASK, r3
}
 800640a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	4a14      	ldr	r2, [pc, #80]	; (800646c <HAL_UART_IRQHandler+0x2a0>)
 800641a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	0018      	movs	r0, r3
 8006422:	f7fc fbe3 	bl	8002bec <HAL_DMA_Abort_IT>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d01a      	beq.n	8006460 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	0018      	movs	r0, r3
 8006436:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e012      	b.n	8006460 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	0018      	movs	r0, r3
 800643e:	f000 f9a5 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	e00d      	b.n	8006460 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0018      	movs	r0, r3
 8006448:	f000 f9a0 	bl	800678c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644c:	e008      	b.n	8006460 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 f99b 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	2100      	movs	r1, #0
 800645c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800645e:	e17f      	b.n	8006760 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	46c0      	nop			; (mov r8, r8)
    return;
 8006462:	e17d      	b.n	8006760 <HAL_UART_IRQHandler+0x594>
 8006464:	0000080f 	.word	0x0000080f
 8006468:	04000120 	.word	0x04000120
 800646c:	08006fb1 	.word	0x08006fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006474:	2b01      	cmp	r3, #1
 8006476:	d000      	beq.n	800647a <HAL_UART_IRQHandler+0x2ae>
 8006478:	e131      	b.n	80066de <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647a:	23a4      	movs	r3, #164	; 0xa4
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2210      	movs	r2, #16
 8006482:	4013      	ands	r3, r2
 8006484:	d100      	bne.n	8006488 <HAL_UART_IRQHandler+0x2bc>
 8006486:	e12a      	b.n	80066de <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006488:	23a0      	movs	r3, #160	; 0xa0
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2210      	movs	r2, #16
 8006490:	4013      	ands	r3, r2
 8006492:	d100      	bne.n	8006496 <HAL_UART_IRQHandler+0x2ca>
 8006494:	e123      	b.n	80066de <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2210      	movs	r2, #16
 800649c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2240      	movs	r2, #64	; 0x40
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d000      	beq.n	80064ae <HAL_UART_IRQHandler+0x2e2>
 80064ac:	e09b      	b.n	80065e6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	217e      	movs	r1, #126	; 0x7e
 80064b8:	187b      	adds	r3, r7, r1
 80064ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80064bc:	187b      	adds	r3, r7, r1
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d100      	bne.n	80064c6 <HAL_UART_IRQHandler+0x2fa>
 80064c4:	e14e      	b.n	8006764 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2258      	movs	r2, #88	; 0x58
 80064ca:	5a9b      	ldrh	r3, [r3, r2]
 80064cc:	187a      	adds	r2, r7, r1
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d300      	bcc.n	80064d6 <HAL_UART_IRQHandler+0x30a>
 80064d4:	e146      	b.n	8006764 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	187a      	adds	r2, r7, r1
 80064da:	215a      	movs	r1, #90	; 0x5a
 80064dc:	8812      	ldrh	r2, [r2, #0]
 80064de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d06e      	beq.n	80065c8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ea:	f3ef 8310 	mrs	r3, PRIMASK
 80064ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80064f4:	2301      	movs	r3, #1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	f383 8810 	msr	PRIMASK, r3
}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	499a      	ldr	r1, [pc, #616]	; (8006774 <HAL_UART_IRQHandler+0x5a8>)
 800650c:	400a      	ands	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006512:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	f383 8810 	msr	PRIMASK, r3
}
 800651a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651c:	f3ef 8310 	mrs	r3, PRIMASK
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	677b      	str	r3, [r7, #116]	; 0x74
 8006526:	2301      	movs	r3, #1
 8006528:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	438a      	bics	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006544:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006548:	f383 8810 	msr	PRIMASK, r3
}
 800654c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654e:	f3ef 8310 	mrs	r3, PRIMASK
 8006552:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006556:	673b      	str	r3, [r7, #112]	; 0x70
 8006558:	2301      	movs	r3, #1
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	438a      	bics	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006576:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657a:	f383 8810 	msr	PRIMASK, r3
}
 800657e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658c:	f3ef 8310 	mrs	r3, PRIMASK
 8006590:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006592:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006596:	2301      	movs	r3, #1
 8006598:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659c:	f383 8810 	msr	PRIMASK, r3
}
 80065a0:	46c0      	nop			; (mov r8, r8)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2110      	movs	r1, #16
 80065ae:	438a      	bics	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b8:	f383 8810 	msr	PRIMASK, r3
}
 80065bc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7fc fada 	bl	8002b7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2258      	movs	r2, #88	; 0x58
 80065cc:	5a9a      	ldrh	r2, [r3, r2]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	215a      	movs	r1, #90	; 0x5a
 80065d2:	5a5b      	ldrh	r3, [r3, r1]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f8dc 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065e4:	e0be      	b.n	8006764 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2258      	movs	r2, #88	; 0x58
 80065ea:	5a99      	ldrh	r1, [r3, r2]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	225a      	movs	r2, #90	; 0x5a
 80065f0:	5a9b      	ldrh	r3, [r3, r2]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	208e      	movs	r0, #142	; 0x8e
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	1a8a      	subs	r2, r1, r2
 80065fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	225a      	movs	r2, #90	; 0x5a
 8006600:	5a9b      	ldrh	r3, [r3, r2]
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d100      	bne.n	800660a <HAL_UART_IRQHandler+0x43e>
 8006608:	e0ae      	b.n	8006768 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800660a:	183b      	adds	r3, r7, r0
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d100      	bne.n	8006614 <HAL_UART_IRQHandler+0x448>
 8006612:	e0a9      	b.n	8006768 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006614:	f3ef 8310 	mrs	r3, PRIMASK
 8006618:	60fb      	str	r3, [r7, #12]
  return(result);
 800661a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661c:	2488      	movs	r4, #136	; 0x88
 800661e:	193a      	adds	r2, r7, r4
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	2301      	movs	r3, #1
 8006624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f383 8810 	msr	PRIMASK, r3
}
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	494f      	ldr	r1, [pc, #316]	; (8006778 <HAL_UART_IRQHandler+0x5ac>)
 800663a:	400a      	ands	r2, r1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	193b      	adds	r3, r7, r4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f383 8810 	msr	PRIMASK, r3
}
 800664a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664c:	f3ef 8310 	mrs	r3, PRIMASK
 8006650:	61bb      	str	r3, [r7, #24]
  return(result);
 8006652:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	2484      	movs	r4, #132	; 0x84
 8006656:	193a      	adds	r2, r7, r4
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	2301      	movs	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f383 8810 	msr	PRIMASK, r3
}
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2101      	movs	r1, #1
 8006672:	438a      	bics	r2, r1
 8006674:	609a      	str	r2, [r3, #8]
 8006676:	193b      	adds	r3, r7, r4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f383 8810 	msr	PRIMASK, r3
}
 8006682:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006696:	f3ef 8310 	mrs	r3, PRIMASK
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669e:	2480      	movs	r4, #128	; 0x80
 80066a0:	193a      	adds	r2, r7, r4
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	2301      	movs	r3, #1
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f383 8810 	msr	PRIMASK, r3
}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2110      	movs	r1, #16
 80066bc:	438a      	bics	r2, r1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	193b      	adds	r3, r7, r4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	f383 8810 	msr	PRIMASK, r3
}
 80066cc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ce:	183b      	adds	r3, r7, r0
 80066d0:	881a      	ldrh	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	0011      	movs	r1, r2
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 f860 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066dc:	e044      	b.n	8006768 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066de:	23a4      	movs	r3, #164	; 0xa4
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	035b      	lsls	r3, r3, #13
 80066e8:	4013      	ands	r3, r2
 80066ea:	d010      	beq.n	800670e <HAL_UART_IRQHandler+0x542>
 80066ec:	239c      	movs	r3, #156	; 0x9c
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	03db      	lsls	r3, r3, #15
 80066f6:	4013      	ands	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	0352      	lsls	r2, r2, #13
 8006702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	0018      	movs	r0, r3
 8006708:	f000 fdfc 	bl	8007304 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800670c:	e02f      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800670e:	23a4      	movs	r3, #164	; 0xa4
 8006710:	18fb      	adds	r3, r7, r3
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2280      	movs	r2, #128	; 0x80
 8006716:	4013      	ands	r3, r2
 8006718:	d00f      	beq.n	800673a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800671a:	23a0      	movs	r3, #160	; 0xa0
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2280      	movs	r2, #128	; 0x80
 8006722:	4013      	ands	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01e      	beq.n	800676c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	0010      	movs	r0, r2
 8006736:	4798      	blx	r3
    }
    return;
 8006738:	e018      	b.n	800676c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800673a:	23a4      	movs	r3, #164	; 0xa4
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	4013      	ands	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_UART_IRQHandler+0x5a2>
 8006746:	23a0      	movs	r3, #160	; 0xa0
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2240      	movs	r2, #64	; 0x40
 800674e:	4013      	ands	r3, r2
 8006750:	d00d      	beq.n	800676e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f000 fc42 	bl	8006fde <UART_EndTransmit_IT>
    return;
 800675a:	e008      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
      return;
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	e006      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
    return;
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	e004      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	e002      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	e000      	b.n	800676e <HAL_UART_IRQHandler+0x5a2>
    return;
 800676c:	46c0      	nop			; (mov r8, r8)
  }

}
 800676e:	46bd      	mov	sp, r7
 8006770:	b02b      	add	sp, #172	; 0xac
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	fffffeff 	.word	0xfffffeff
 8006778:	fffffedf 	.word	0xfffffedf

0800677c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006794:	46c0      	nop			; (mov r8, r8)
 8006796:	46bd      	mov	sp, r7
 8006798:	b002      	add	sp, #8
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	000a      	movs	r2, r1
 80067a6:	1cbb      	adds	r3, r7, #2
 80067a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067bc:	231e      	movs	r3, #30
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a8d      	ldr	r2, [pc, #564]	; (8006a18 <UART_SetConfig+0x264>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	0019      	movs	r1, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	4a88      	ldr	r2, [pc, #544]	; (8006a1c <UART_SetConfig+0x268>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	0019      	movs	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a7f      	ldr	r2, [pc, #508]	; (8006a20 <UART_SetConfig+0x26c>)
 8006822:	4013      	ands	r3, r2
 8006824:	0019      	movs	r1, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7b      	ldr	r2, [pc, #492]	; (8006a24 <UART_SetConfig+0x270>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d127      	bne.n	800688a <UART_SetConfig+0xd6>
 800683a:	4b7b      	ldr	r3, [pc, #492]	; (8006a28 <UART_SetConfig+0x274>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	2203      	movs	r2, #3
 8006840:	4013      	ands	r3, r2
 8006842:	2b03      	cmp	r3, #3
 8006844:	d00d      	beq.n	8006862 <UART_SetConfig+0xae>
 8006846:	d81b      	bhi.n	8006880 <UART_SetConfig+0xcc>
 8006848:	2b02      	cmp	r3, #2
 800684a:	d014      	beq.n	8006876 <UART_SetConfig+0xc2>
 800684c:	d818      	bhi.n	8006880 <UART_SetConfig+0xcc>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <UART_SetConfig+0xa4>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d00a      	beq.n	800686c <UART_SetConfig+0xb8>
 8006856:	e013      	b.n	8006880 <UART_SetConfig+0xcc>
 8006858:	231f      	movs	r3, #31
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e021      	b.n	80068a6 <UART_SetConfig+0xf2>
 8006862:	231f      	movs	r3, #31
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e01c      	b.n	80068a6 <UART_SetConfig+0xf2>
 800686c:	231f      	movs	r3, #31
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	2204      	movs	r2, #4
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e017      	b.n	80068a6 <UART_SetConfig+0xf2>
 8006876:	231f      	movs	r3, #31
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	2208      	movs	r2, #8
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e012      	b.n	80068a6 <UART_SetConfig+0xf2>
 8006880:	231f      	movs	r3, #31
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	2210      	movs	r2, #16
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0xf2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a67      	ldr	r2, [pc, #412]	; (8006a2c <UART_SetConfig+0x278>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d104      	bne.n	800689e <UART_SetConfig+0xea>
 8006894:	231f      	movs	r3, #31
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e003      	b.n	80068a6 <UART_SetConfig+0xf2>
 800689e:	231f      	movs	r3, #31
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	2210      	movs	r2, #16
 80068a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69da      	ldr	r2, [r3, #28]
 80068aa:	2380      	movs	r3, #128	; 0x80
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d15d      	bne.n	800696e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80068b2:	231f      	movs	r3, #31
 80068b4:	18fb      	adds	r3, r7, r3
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d015      	beq.n	80068e8 <UART_SetConfig+0x134>
 80068bc:	dc18      	bgt.n	80068f0 <UART_SetConfig+0x13c>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00d      	beq.n	80068de <UART_SetConfig+0x12a>
 80068c2:	dc15      	bgt.n	80068f0 <UART_SetConfig+0x13c>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <UART_SetConfig+0x11a>
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d005      	beq.n	80068d8 <UART_SetConfig+0x124>
 80068cc:	e010      	b.n	80068f0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ce:	f7fd fe27 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 80068d2:	0003      	movs	r3, r0
 80068d4:	61bb      	str	r3, [r7, #24]
        break;
 80068d6:	e012      	b.n	80068fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b55      	ldr	r3, [pc, #340]	; (8006a30 <UART_SetConfig+0x27c>)
 80068da:	61bb      	str	r3, [r7, #24]
        break;
 80068dc:	e00f      	b.n	80068fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fd fdb1 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80068e2:	0003      	movs	r3, r0
 80068e4:	61bb      	str	r3, [r7, #24]
        break;
 80068e6:	e00a      	b.n	80068fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	61bb      	str	r3, [r7, #24]
        break;
 80068ee:	e006      	b.n	80068fe <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068f4:	231e      	movs	r3, #30
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
        break;
 80068fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d100      	bne.n	8006906 <UART_SetConfig+0x152>
 8006904:	e07b      	b.n	80069fe <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	005a      	lsls	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	18d2      	adds	r2, r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0019      	movs	r1, r3
 8006918:	0010      	movs	r0, r2
 800691a:	f7f9 fbf5 	bl	8000108 <__udivsi3>
 800691e:	0003      	movs	r3, r0
 8006920:	b29b      	uxth	r3, r3
 8006922:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b0f      	cmp	r3, #15
 8006928:	d91c      	bls.n	8006964 <UART_SetConfig+0x1b0>
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	025b      	lsls	r3, r3, #9
 8006930:	429a      	cmp	r2, r3
 8006932:	d217      	bcs.n	8006964 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	b29a      	uxth	r2, r3
 8006938:	200e      	movs	r0, #14
 800693a:	183b      	adds	r3, r7, r0
 800693c:	210f      	movs	r1, #15
 800693e:	438a      	bics	r2, r1
 8006940:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	2207      	movs	r2, #7
 800694a:	4013      	ands	r3, r2
 800694c:	b299      	uxth	r1, r3
 800694e:	183b      	adds	r3, r7, r0
 8006950:	183a      	adds	r2, r7, r0
 8006952:	8812      	ldrh	r2, [r2, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	183a      	adds	r2, r7, r0
 800695e:	8812      	ldrh	r2, [r2, #0]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e04c      	b.n	80069fe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006964:	231e      	movs	r3, #30
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e047      	b.n	80069fe <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800696e:	231f      	movs	r3, #31
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d015      	beq.n	80069a4 <UART_SetConfig+0x1f0>
 8006978:	dc18      	bgt.n	80069ac <UART_SetConfig+0x1f8>
 800697a:	2b04      	cmp	r3, #4
 800697c:	d00d      	beq.n	800699a <UART_SetConfig+0x1e6>
 800697e:	dc15      	bgt.n	80069ac <UART_SetConfig+0x1f8>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <UART_SetConfig+0x1d6>
 8006984:	2b02      	cmp	r3, #2
 8006986:	d005      	beq.n	8006994 <UART_SetConfig+0x1e0>
 8006988:	e010      	b.n	80069ac <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800698a:	f7fd fdc9 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 800698e:	0003      	movs	r3, r0
 8006990:	61bb      	str	r3, [r7, #24]
        break;
 8006992:	e012      	b.n	80069ba <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006994:	4b26      	ldr	r3, [pc, #152]	; (8006a30 <UART_SetConfig+0x27c>)
 8006996:	61bb      	str	r3, [r7, #24]
        break;
 8006998:	e00f      	b.n	80069ba <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699a:	f7fd fd53 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 800699e:	0003      	movs	r3, r0
 80069a0:	61bb      	str	r3, [r7, #24]
        break;
 80069a2:	e00a      	b.n	80069ba <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	61bb      	str	r3, [r7, #24]
        break;
 80069aa:	e006      	b.n	80069ba <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069b0:	231e      	movs	r3, #30
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
        break;
 80069b8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	085a      	lsrs	r2, r3, #1
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	18d2      	adds	r2, r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	0019      	movs	r1, r3
 80069d0:	0010      	movs	r0, r2
 80069d2:	f7f9 fb99 	bl	8000108 <__udivsi3>
 80069d6:	0003      	movs	r3, r0
 80069d8:	b29b      	uxth	r3, r3
 80069da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	d909      	bls.n	80069f6 <UART_SetConfig+0x242>
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	2380      	movs	r3, #128	; 0x80
 80069e6:	025b      	lsls	r3, r3, #9
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d204      	bcs.n	80069f6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	60da      	str	r2, [r3, #12]
 80069f4:	e003      	b.n	80069fe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80069f6:	231e      	movs	r3, #30
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a0a:	231e      	movs	r3, #30
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	781b      	ldrb	r3, [r3, #0]
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b008      	add	sp, #32
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	ffff69f3 	.word	0xffff69f3
 8006a1c:	ffffcfff 	.word	0xffffcfff
 8006a20:	fffff4ff 	.word	0xfffff4ff
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	40004400 	.word	0x40004400
 8006a30:	007a1200 	.word	0x007a1200

08006a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	2201      	movs	r2, #1
 8006a42:	4013      	ands	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4a4a      	ldr	r2, [pc, #296]	; (8006b78 <UART_AdvFeatureConfig+0x144>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2202      	movs	r2, #2
 8006a64:	4013      	ands	r3, r2
 8006a66:	d00b      	beq.n	8006a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4a43      	ldr	r2, [pc, #268]	; (8006b7c <UART_AdvFeatureConfig+0x148>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	2204      	movs	r2, #4
 8006a86:	4013      	ands	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4a3b      	ldr	r2, [pc, #236]	; (8006b80 <UART_AdvFeatureConfig+0x14c>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	0019      	movs	r1, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <UART_AdvFeatureConfig+0x150>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	2210      	movs	r2, #16
 8006aca:	4013      	ands	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a2c      	ldr	r2, [pc, #176]	; (8006b88 <UART_AdvFeatureConfig+0x154>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	0019      	movs	r1, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2220      	movs	r2, #32
 8006aec:	4013      	ands	r3, r2
 8006aee:	d00b      	beq.n	8006b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <UART_AdvFeatureConfig+0x158>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	2240      	movs	r2, #64	; 0x40
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <UART_AdvFeatureConfig+0x15c>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	035b      	lsls	r3, r3, #13
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d10b      	bne.n	8006b4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <UART_AdvFeatureConfig+0x160>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	0019      	movs	r1, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	4013      	ands	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4a0e      	ldr	r2, [pc, #56]	; (8006b98 <UART_AdvFeatureConfig+0x164>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	0019      	movs	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	fffdffff 	.word	0xfffdffff
 8006b7c:	fffeffff 	.word	0xfffeffff
 8006b80:	fffbffff 	.word	0xfffbffff
 8006b84:	ffff7fff 	.word	0xffff7fff
 8006b88:	ffffefff 	.word	0xffffefff
 8006b8c:	ffffdfff 	.word	0xffffdfff
 8006b90:	ffefffff 	.word	0xffefffff
 8006b94:	ff9fffff 	.word	0xff9fffff
 8006b98:	fff7ffff 	.word	0xfff7ffff

08006b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2280      	movs	r2, #128	; 0x80
 8006ba8:	2100      	movs	r1, #0
 8006baa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bac:	f7fb f9b8 	bl	8001f20 <HAL_GetTick>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2208      	movs	r2, #8
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d10c      	bne.n	8006bdc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2280      	movs	r2, #128	; 0x80
 8006bc6:	0391      	lsls	r1, r2, #14
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <UART_CheckIdleState+0x8c>)
 8006bcc:	9200      	str	r2, [sp, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f000 f82c 	bl	8006c2c <UART_WaitOnFlagUntilTimeout>
 8006bd4:	1e03      	subs	r3, r0, #0
 8006bd6:	d001      	beq.n	8006bdc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e021      	b.n	8006c20 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2204      	movs	r2, #4
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d10c      	bne.n	8006c04 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2280      	movs	r2, #128	; 0x80
 8006bee:	03d1      	lsls	r1, r2, #15
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4a0d      	ldr	r2, [pc, #52]	; (8006c28 <UART_CheckIdleState+0x8c>)
 8006bf4:	9200      	str	r2, [sp, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f000 f818 	bl	8006c2c <UART_WaitOnFlagUntilTimeout>
 8006bfc:	1e03      	subs	r3, r0, #0
 8006bfe:	d001      	beq.n	8006c04 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e00d      	b.n	8006c20 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2274      	movs	r2, #116	; 0x74
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b004      	add	sp, #16
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	01ffffff 	.word	0x01ffffff

08006c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b094      	sub	sp, #80	; 0x50
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	1dfb      	adds	r3, r7, #7
 8006c3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c3c:	e0a3      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c40:	3301      	adds	r3, #1
 8006c42:	d100      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c44:	e09f      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fb f96b 	bl	8001f20 <HAL_GetTick>
 8006c4a:	0002      	movs	r2, r0
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d302      	bcc.n	8006c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d13d      	bne.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
 8006c66:	2301      	movs	r3, #1
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	f383 8810 	msr	PRIMASK, r3
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	494c      	ldr	r1, [pc, #304]	; (8006db0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f383 8810 	msr	PRIMASK, r3
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
 8006c98:	2301      	movs	r3, #1
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2101      	movs	r1, #1
 8006cb0:	438a      	bics	r2, r1
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	f383 8810 	msr	PRIMASK, r3
}
 8006cbe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2274      	movs	r2, #116	; 0x74
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e067      	b.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d050      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	401a      	ands	r2, r3
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d146      	bne.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2280      	movs	r2, #128	; 0x80
 8006cfe:	0112      	lsls	r2, r2, #4
 8006d00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d02:	f3ef 8310 	mrs	r3, PRIMASK
 8006d06:	613b      	str	r3, [r7, #16]
  return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f383 8810 	msr	PRIMASK, r3
}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4923      	ldr	r1, [pc, #140]	; (8006db0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006d24:	400a      	ands	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f383 8810 	msr	PRIMASK, r3
}
 8006d32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d34:	f3ef 8310 	mrs	r3, PRIMASK
 8006d38:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d3a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3e:	2301      	movs	r3, #1
 8006d40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f383 8810 	msr	PRIMASK, r3
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2101      	movs	r1, #1
 8006d56:	438a      	bics	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]
 8006d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	f383 8810 	msr	PRIMASK, r3
}
 8006d64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2280      	movs	r2, #128	; 0x80
 8006d76:	2120      	movs	r1, #32
 8006d78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2274      	movs	r2, #116	; 0x74
 8006d7e:	2100      	movs	r1, #0
 8006d80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e010      	b.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	425a      	negs	r2, r3
 8006d96:	4153      	adcs	r3, r2
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	1dfb      	adds	r3, r7, #7
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d100      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006da4:	e74b      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b014      	add	sp, #80	; 0x50
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	fffffe5f 	.word	0xfffffe5f

08006db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	1dbb      	adds	r3, r7, #6
 8006dc0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	1dba      	adds	r2, r7, #6
 8006dcc:	2158      	movs	r1, #88	; 0x58
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1dba      	adds	r2, r7, #6
 8006dd6:	215a      	movs	r1, #90	; 0x5a
 8006dd8:	8812      	ldrh	r2, [r2, #0]
 8006dda:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	015b      	lsls	r3, r3, #5
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d10d      	bne.n	8006e0a <UART_Start_Receive_IT+0x56>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <UART_Start_Receive_IT+0x4c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	225c      	movs	r2, #92	; 0x5c
 8006dfa:	4939      	ldr	r1, [pc, #228]	; (8006ee0 <UART_Start_Receive_IT+0x12c>)
 8006dfc:	5299      	strh	r1, [r3, r2]
 8006dfe:	e01a      	b.n	8006e36 <UART_Start_Receive_IT+0x82>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	225c      	movs	r2, #92	; 0x5c
 8006e04:	21ff      	movs	r1, #255	; 0xff
 8006e06:	5299      	strh	r1, [r3, r2]
 8006e08:	e015      	b.n	8006e36 <UART_Start_Receive_IT+0x82>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <UART_Start_Receive_IT+0x7a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <UART_Start_Receive_IT+0x70>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	225c      	movs	r2, #92	; 0x5c
 8006e1e:	21ff      	movs	r1, #255	; 0xff
 8006e20:	5299      	strh	r1, [r3, r2]
 8006e22:	e008      	b.n	8006e36 <UART_Start_Receive_IT+0x82>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	225c      	movs	r2, #92	; 0x5c
 8006e28:	217f      	movs	r1, #127	; 0x7f
 8006e2a:	5299      	strh	r1, [r3, r2]
 8006e2c:	e003      	b.n	8006e36 <UART_Start_Receive_IT+0x82>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	225c      	movs	r2, #92	; 0x5c
 8006e32:	2100      	movs	r1, #0
 8006e34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2222      	movs	r2, #34	; 0x22
 8006e42:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e44:	f3ef 8310 	mrs	r3, PRIMASK
 8006e48:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e4a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4e:	2301      	movs	r3, #1
 8006e50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f383 8810 	msr	PRIMASK, r3
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2101      	movs	r1, #1
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	f383 8810 	msr	PRIMASK, r3
}
 8006e74:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	015b      	lsls	r3, r3, #5
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d107      	bne.n	8006e92 <UART_Start_Receive_IT+0xde>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <UART_Start_Receive_IT+0x130>)
 8006e8e:	665a      	str	r2, [r3, #100]	; 0x64
 8006e90:	e002      	b.n	8006e98 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <UART_Start_Receive_IT+0x134>)
 8006e96:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2274      	movs	r2, #116	; 0x74
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eaa:	2301      	movs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2190      	movs	r1, #144	; 0x90
 8006ec2:	0049      	lsls	r1, r1, #1
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b00c      	add	sp, #48	; 0x30
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	000001ff 	.word	0x000001ff
 8006ee4:	0800719d 	.word	0x0800719d
 8006ee8:	08007035 	.word	0x08007035

08006eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	; 0x38
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8006efa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
 8006efe:	2301      	movs	r3, #1
 8006f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f383 8810 	msr	PRIMASK, r3
}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4925      	ldr	r1, [pc, #148]	; (8006fac <UART_EndRxTransfer+0xc0>)
 8006f16:	400a      	ands	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f383 8810 	msr	PRIMASK, r3
}
 8006f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f26:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f30:	2301      	movs	r3, #1
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2101      	movs	r1, #1
 8006f48:	438a      	bics	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	f383 8810 	msr	PRIMASK, r3
}
 8006f56:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d118      	bne.n	8006f92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f60:	f3ef 8310 	mrs	r3, PRIMASK
 8006f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f383 8810 	msr	PRIMASK, r3
}
 8006f74:	46c0      	nop			; (mov r8, r8)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2110      	movs	r1, #16
 8006f82:	438a      	bics	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f383 8810 	msr	PRIMASK, r3
}
 8006f90:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b00e      	add	sp, #56	; 0x38
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	fffffedf 	.word	0xfffffedf

08006fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	225a      	movs	r2, #90	; 0x5a
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2252      	movs	r2, #82	; 0x52
 8006fca:	2100      	movs	r1, #0
 8006fcc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7ff fbdb 	bl	800678c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b004      	add	sp, #16
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2140      	movs	r1, #64	; 0x40
 8007008:	438a      	bics	r2, r1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff fba8 	bl	800677c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	46bd      	mov	sp, r7
 8007030:	b006      	add	sp, #24
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b090      	sub	sp, #64	; 0x40
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800703c:	203e      	movs	r0, #62	; 0x3e
 800703e:	183b      	adds	r3, r7, r0
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	215c      	movs	r1, #92	; 0x5c
 8007044:	5a52      	ldrh	r2, [r2, r1]
 8007046:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800704c:	2b22      	cmp	r3, #34	; 0x22
 800704e:	d000      	beq.n	8007052 <UART_RxISR_8BIT+0x1e>
 8007050:	e095      	b.n	800717e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	213c      	movs	r1, #60	; 0x3c
 8007058:	187b      	adds	r3, r7, r1
 800705a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800705c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800705e:	187b      	adds	r3, r7, r1
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	183b      	adds	r3, r7, r0
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b2d9      	uxtb	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706e:	400a      	ands	r2, r1
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	225a      	movs	r2, #90	; 0x5a
 8007082:	5a9b      	ldrh	r3, [r3, r2]
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b299      	uxth	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	225a      	movs	r2, #90	; 0x5a
 800708e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	225a      	movs	r2, #90	; 0x5a
 8007094:	5a9b      	ldrh	r3, [r3, r2]
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d178      	bne.n	800718e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709c:	f3ef 8310 	mrs	r3, PRIMASK
 80070a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80070a2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a6:	2301      	movs	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4936      	ldr	r1, [pc, #216]	; (8007198 <UART_RxISR_8BIT+0x164>)
 80070be:	400a      	ands	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ce:	f3ef 8310 	mrs	r3, PRIMASK
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
 80070d8:	2301      	movs	r3, #1
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	f383 8810 	msr	PRIMASK, r3
}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	438a      	bics	r2, r1
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	f383 8810 	msr	PRIMASK, r3
}
 80070fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007110:	2b01      	cmp	r3, #1
 8007112:	d12f      	bne.n	8007174 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711a:	f3ef 8310 	mrs	r3, PRIMASK
 800711e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007120:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
 8007124:	2301      	movs	r3, #1
 8007126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f383 8810 	msr	PRIMASK, r3
}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2110      	movs	r1, #16
 800713c:	438a      	bics	r2, r1
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f383 8810 	msr	PRIMASK, r3
}
 800714a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2210      	movs	r2, #16
 8007154:	4013      	ands	r3, r2
 8007156:	2b10      	cmp	r3, #16
 8007158:	d103      	bne.n	8007162 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2210      	movs	r2, #16
 8007160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2258      	movs	r2, #88	; 0x58
 8007166:	5a9a      	ldrh	r2, [r3, r2]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	0011      	movs	r1, r2
 800716c:	0018      	movs	r0, r3
 800716e:	f7ff fb15 	bl	800679c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007172:	e00c      	b.n	800718e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0018      	movs	r0, r3
 8007178:	f7f9 fc8a 	bl	8000a90 <HAL_UART_RxCpltCallback>
}
 800717c:	e007      	b.n	800718e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2108      	movs	r1, #8
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b010      	add	sp, #64	; 0x40
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	fffffedf 	.word	0xfffffedf

0800719c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b090      	sub	sp, #64	; 0x40
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071a4:	203e      	movs	r0, #62	; 0x3e
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	215c      	movs	r1, #92	; 0x5c
 80071ac:	5a52      	ldrh	r2, [r2, r1]
 80071ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b4:	2b22      	cmp	r3, #34	; 0x22
 80071b6:	d000      	beq.n	80071ba <UART_RxISR_16BIT+0x1e>
 80071b8:	e095      	b.n	80072e6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	213c      	movs	r1, #60	; 0x3c
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80071c4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80071cc:	187b      	adds	r3, r7, r1
 80071ce:	183a      	adds	r2, r7, r0
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	4013      	ands	r3, r2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	1c9a      	adds	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	225a      	movs	r2, #90	; 0x5a
 80071ea:	5a9b      	ldrh	r3, [r3, r2]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b299      	uxth	r1, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	225a      	movs	r2, #90	; 0x5a
 80071f6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	225a      	movs	r2, #90	; 0x5a
 80071fc:	5a9b      	ldrh	r3, [r3, r2]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d178      	bne.n	80072f6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007204:	f3ef 8310 	mrs	r3, PRIMASK
 8007208:	617b      	str	r3, [r7, #20]
  return(result);
 800720a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	2301      	movs	r3, #1
 8007210:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4936      	ldr	r1, [pc, #216]	; (8007300 <UART_RxISR_16BIT+0x164>)
 8007226:	400a      	ands	r2, r1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f383 8810 	msr	PRIMASK, r3
}
 8007234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007236:	f3ef 8310 	mrs	r3, PRIMASK
 800723a:	623b      	str	r3, [r7, #32]
  return(result);
 800723c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723e:	633b      	str	r3, [r7, #48]	; 0x30
 8007240:	2301      	movs	r3, #1
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	f383 8810 	msr	PRIMASK, r3
}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2101      	movs	r1, #1
 8007258:	438a      	bics	r2, r1
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	f383 8810 	msr	PRIMASK, r3
}
 8007266:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007278:	2b01      	cmp	r3, #1
 800727a:	d12f      	bne.n	80072dc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007282:	f3ef 8310 	mrs	r3, PRIMASK
 8007286:	60bb      	str	r3, [r7, #8]
  return(result);
 8007288:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800728c:	2301      	movs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f383 8810 	msr	PRIMASK, r3
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2110      	movs	r1, #16
 80072a4:	438a      	bics	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	2210      	movs	r2, #16
 80072bc:	4013      	ands	r3, r2
 80072be:	2b10      	cmp	r3, #16
 80072c0:	d103      	bne.n	80072ca <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2210      	movs	r2, #16
 80072c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2258      	movs	r2, #88	; 0x58
 80072ce:	5a9a      	ldrh	r2, [r3, r2]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	0011      	movs	r1, r2
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7ff fa61 	bl	800679c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072da:	e00c      	b.n	80072f6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f7f9 fbd6 	bl	8000a90 <HAL_UART_RxCpltCallback>
}
 80072e4:	e007      	b.n	80072f6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2108      	movs	r1, #8
 80072f2:	430a      	orrs	r2, r1
 80072f4:	619a      	str	r2, [r3, #24]
}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b010      	add	sp, #64	; 0x40
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	fffffedf 	.word	0xfffffedf

08007304 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	1d3b      	adds	r3, r7, #4
 800731e:	6019      	str	r1, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007322:	2317      	movs	r3, #23
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2274      	movs	r2, #116	; 0x74
 800732e:	5c9b      	ldrb	r3, [r3, r2]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007334:	2302      	movs	r3, #2
 8007336:	e04a      	b.n	80073ce <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2274      	movs	r2, #116	; 0x74
 800733c:	2101      	movs	r1, #1
 800733e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2101      	movs	r1, #1
 8007352:	438a      	bics	r2, r1
 8007354:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800735e:	4013      	ands	r3, r2
 8007360:	0019      	movs	r1, r3
 8007362:	1d3b      	adds	r3, r7, #4
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d105      	bne.n	8007382 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	6819      	ldr	r1, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	f000 f860 	bl	8007442 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2101      	movs	r1, #1
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007392:	f7fa fdc5 	bl	8001f20 <HAL_GetTick>
 8007396:	0003      	movs	r3, r0
 8007398:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2280      	movs	r2, #128	; 0x80
 800739e:	03d1      	lsls	r1, r2, #15
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	4a0e      	ldr	r2, [pc, #56]	; (80073dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80073a4:	9200      	str	r2, [sp, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f7ff fc40 	bl	8006c2c <UART_WaitOnFlagUntilTimeout>
 80073ac:	1e03      	subs	r3, r0, #0
 80073ae:	d004      	beq.n	80073ba <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80073b0:	2317      	movs	r3, #23
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	2203      	movs	r2, #3
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e002      	b.n	80073c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2274      	movs	r2, #116	; 0x74
 80073c4:	2100      	movs	r1, #0
 80073c6:	5499      	strb	r1, [r3, r2]

  return status;
 80073c8:	2317      	movs	r3, #23
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	781b      	ldrb	r3, [r3, #0]
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b006      	add	sp, #24
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	ffcfffff 	.word	0xffcfffff
 80073dc:	01ffffff 	.word	0x01ffffff

080073e0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2274      	movs	r2, #116	; 0x74
 80073ec:	5c9b      	ldrb	r3, [r3, r2]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_UARTEx_EnableStopMode+0x16>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e021      	b.n	800743a <HAL_UARTEx_EnableStopMode+0x5a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2274      	movs	r2, #116	; 0x74
 80073fa:	2101      	movs	r1, #1
 80073fc:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007402:	60bb      	str	r3, [r7, #8]
  return(result);
 8007404:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	2301      	movs	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f383 8810 	msr	PRIMASK, r3
}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2102      	movs	r1, #2
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f383 8810 	msr	PRIMASK, r3
}
 800742e:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2274      	movs	r2, #116	; 0x74
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	0018      	movs	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	b006      	add	sp, #24
 8007440:	bd80      	pop	{r7, pc}

08007442 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	6019      	str	r1, [r3, #0]
 800744e:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2210      	movs	r2, #16
 8007458:	4393      	bics	r3, r2
 800745a:	001a      	movs	r2, r3
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	889b      	ldrh	r3, [r3, #4]
 8007460:	0019      	movs	r1, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	0a19      	lsrs	r1, r3, #8
 8007474:	1d3b      	adds	r3, r7, #4
 8007476:	799b      	ldrb	r3, [r3, #6]
 8007478:	061a      	lsls	r2, r3, #24
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b004      	add	sp, #16
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	2600      	movs	r6, #0
 8007490:	4d0c      	ldr	r5, [pc, #48]	; (80074c4 <__libc_init_array+0x38>)
 8007492:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007494:	1b64      	subs	r4, r4, r5
 8007496:	10a4      	asrs	r4, r4, #2
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	2600      	movs	r6, #0
 800749e:	f000 f821 	bl	80074e4 <_init>
 80074a2:	4d0a      	ldr	r5, [pc, #40]	; (80074cc <__libc_init_array+0x40>)
 80074a4:	4c0a      	ldr	r4, [pc, #40]	; (80074d0 <__libc_init_array+0x44>)
 80074a6:	1b64      	subs	r4, r4, r5
 80074a8:	10a4      	asrs	r4, r4, #2
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	00b3      	lsls	r3, r6, #2
 80074b2:	58eb      	ldr	r3, [r5, r3]
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	00b3      	lsls	r3, r6, #2
 80074bc:	58eb      	ldr	r3, [r5, r3]
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080075e8 	.word	0x080075e8
 80074c8:	080075e8 	.word	0x080075e8
 80074cc:	080075e8 	.word	0x080075e8
 80074d0:	080075ec 	.word	0x080075ec

080074d4 <memset>:
 80074d4:	0003      	movs	r3, r0
 80074d6:	1882      	adds	r2, r0, r2
 80074d8:	4293      	cmp	r3, r2
 80074da:	d100      	bne.n	80074de <memset+0xa>
 80074dc:	4770      	bx	lr
 80074de:	7019      	strb	r1, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	e7f9      	b.n	80074d8 <memset+0x4>

080074e4 <_init>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr

080074f0 <_fini>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr
