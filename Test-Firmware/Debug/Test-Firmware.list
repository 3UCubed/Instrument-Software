
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c8  080060c8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080060c8  080060c8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060c8  080060c8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080060d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000030  08006100  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006100  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e8e  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b40  00000000  00000000  00035ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00038a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00039da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133c5  00000000  00000000  0003b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c10  00000000  00000000  0004e3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074cbf  00000000  00000000  00065ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dacbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000dad0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006074 	.word	0x08006074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08006074 	.word	0x08006074

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_OC_DelayElapsedCallback>:
 * Timer interrupt function
 * This is where packets are sent
 * Function should be called every 125ms for PMT and 100ms for ERPA
 * HK will send every 50 ERPA packets or every 5 seconds
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4bcf      	ldr	r3, [pc, #828]	; (8000568 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d000      	beq.n	8000232 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000230:	e14b      	b.n	80004ca <HAL_TIM_OC_DelayElapsedCallback+0x2aa>
        if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))) { //check pin state
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	4acd      	ldr	r2, [pc, #820]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8000238:	0019      	movs	r1, r3
 800023a:	0010      	movs	r0, r2
 800023c:	f002 fbde 	bl	80029fc <HAL_GPIO_ReadPin>
 8000240:	1e03      	subs	r3, r0, #0
 8000242:	d000      	beq.n	8000246 <HAL_TIM_OC_DelayElapsedCallback+0x26>
 8000244:	e18b      	b.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x33e>
             * Steps DAC
             * +/- 0.5v Every 100ms
             */

            /* Write to SPI (begin transfer?) */
            HAL_SPI_Transmit(&hspi2, (uint8_t * ) & WRITE, 1, 1);
 8000246:	49ca      	ldr	r1, [pc, #808]	; (8000570 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 8000248:	48ca      	ldr	r0, [pc, #808]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800024a:	2301      	movs	r3, #1
 800024c:	2201      	movs	r2, #1
 800024e:	f003 fb3f 	bl	80038d0 <HAL_SPI_Transmit>

            while (!(SPI2->SR));
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	4bc8      	ldr	r3, [pc, #800]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0fb      	beq.n	8000254 <HAL_TIM_OC_DelayElapsedCallback+0x34>

            raw = SPI2->DR;
 800025c:	4bc6      	ldr	r3, [pc, #792]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	001a      	movs	r2, r3
 8000262:	4bc6      	ldr	r3, [pc, #792]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000264:	601a      	str	r2, [r3, #0]

            DAC->DHR12R1 = DAC_OUT[step];
 8000266:	4bc6      	ldr	r3, [pc, #792]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0019      	movs	r1, r3
 800026c:	4bc5      	ldr	r3, [pc, #788]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 800026e:	4ac6      	ldr	r2, [pc, #792]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000270:	0089      	lsls	r1, r1, #2
 8000272:	588a      	ldr	r2, [r1, r2]
 8000274:	609a      	str	r2, [r3, #8]

            HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8000276:	2311      	movs	r3, #17
 8000278:	001a      	movs	r2, r3
 800027a:	49c4      	ldr	r1, [pc, #784]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800027c:	4bc4      	ldr	r3, [pc, #784]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fc0e 	bl	8001aa0 <HAL_ADC_Start_DMA>
            uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 8000284:	2326      	movs	r3, #38	; 0x26
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	4ac0      	ldr	r2, [pc, #768]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800028a:	8812      	ldrh	r2, [r2, #0]
 800028c:	801a      	strh	r2, [r3, #0]
            uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 800028e:	2324      	movs	r3, #36	; 0x24
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	4abe      	ldr	r2, [pc, #760]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000294:	8912      	ldrh	r2, [r2, #8]
 8000296:	801a      	strh	r2, [r3, #0]
            uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 8000298:	2322      	movs	r3, #34	; 0x22
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	4abb      	ldr	r2, [pc, #748]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800029e:	8952      	ldrh	r2, [r2, #10]
 80002a0:	801a      	strh	r2, [r3, #0]
            uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 80002a2:	2320      	movs	r3, #32
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	4ab9      	ldr	r2, [pc, #740]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002a8:	8992      	ldrh	r2, [r2, #12]
 80002aa:	801a      	strh	r2, [r3, #0]


            //HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);

            if (step == 5) {
 80002ac:	4bb4      	ldr	r3, [pc, #720]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d103      	bne.n	80002bc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
                up = 0;
 80002b4:	4bb7      	ldr	r3, [pc, #732]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e006      	b.n	80002ca <HAL_TIM_OC_DelayElapsedCallback+0xaa>
            } else if (step == 0) {
 80002bc:	4bb0      	ldr	r3, [pc, #704]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <HAL_TIM_OC_DelayElapsedCallback+0xaa>
                up = 1;
 80002c4:	4bb3      	ldr	r3, [pc, #716]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
            }

            up == 1 ? step++ : step--;
 80002ca:	4bb2      	ldr	r3, [pc, #712]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d106      	bne.n	80002e0 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 80002d2:	4bab      	ldr	r3, [pc, #684]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4ba9      	ldr	r3, [pc, #676]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	e005      	b.n	80002ec <HAL_TIM_OC_DelayElapsedCallback+0xcc>
 80002e0:	4ba7      	ldr	r3, [pc, #668]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4ba5      	ldr	r3, [pc, #660]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 80002ea:	701a      	strb	r2, [r3, #0]

            if (hk_counter == 50) {
 80002ec:	4baa      	ldr	r3, [pc, #680]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b32      	cmp	r3, #50	; 0x32
 80002f2:	d000      	beq.n	80002f6 <HAL_TIM_OC_DelayElapsedCallback+0xd6>
 80002f4:	e0e3      	b.n	80004be <HAL_TIM_OC_DelayElapsedCallback+0x29e>
                HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 80002f6:	2311      	movs	r3, #17
 80002f8:	001a      	movs	r2, r3
 80002fa:	49a4      	ldr	r1, [pc, #656]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002fc:	4ba4      	ldr	r3, [pc, #656]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fbce 	bl	8001aa0 <HAL_ADC_Start_DMA>

                uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000304:	211e      	movs	r1, #30
 8000306:	187b      	adds	r3, r7, r1
 8000308:	4aa0      	ldr	r2, [pc, #640]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800030a:	8852      	ldrh	r2, [r2, #2]
 800030c:	801a      	strh	r2, [r3, #0]
                uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 800030e:	201c      	movs	r0, #28
 8000310:	183b      	adds	r3, r7, r0
 8000312:	4a9e      	ldr	r2, [pc, #632]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000314:	8892      	ldrh	r2, [r2, #4]
 8000316:	801a      	strh	r2, [r3, #0]
                uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 8000318:	241a      	movs	r4, #26
 800031a:	193b      	adds	r3, r7, r4
 800031c:	4a9b      	ldr	r2, [pc, #620]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800031e:	88d2      	ldrh	r2, [r2, #6]
 8000320:	801a      	strh	r2, [r3, #0]
                uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 8000322:	2518      	movs	r5, #24
 8000324:	197b      	adds	r3, r7, r5
 8000326:	4a99      	ldr	r2, [pc, #612]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000328:	89d2      	ldrh	r2, [r2, #14]
 800032a:	801a      	strh	r2, [r3, #0]
                uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 800032c:	2616      	movs	r6, #22
 800032e:	19bb      	adds	r3, r7, r6
 8000330:	4a96      	ldr	r2, [pc, #600]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000332:	8a12      	ldrh	r2, [r2, #16]
 8000334:	801a      	strh	r2, [r3, #0]
                uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 8000336:	2314      	movs	r3, #20
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	4a94      	ldr	r2, [pc, #592]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800033c:	8a52      	ldrh	r2, [r2, #18]
 800033e:	801a      	strh	r2, [r3, #0]
                uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 8000340:	2212      	movs	r2, #18
 8000342:	18bb      	adds	r3, r7, r2
 8000344:	4a91      	ldr	r2, [pc, #580]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000346:	8a92      	ldrh	r2, [r2, #20]
 8000348:	801a      	strh	r2, [r3, #0]
                uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 800034a:	2310      	movs	r3, #16
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	4a8f      	ldr	r2, [pc, #572]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000350:	8ad2      	ldrh	r2, [r2, #22]
 8000352:	801a      	strh	r2, [r3, #0]
                uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 8000354:	220e      	movs	r2, #14
 8000356:	18bb      	adds	r3, r7, r2
 8000358:	4a8c      	ldr	r2, [pc, #560]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800035a:	8b12      	ldrh	r2, [r2, #24]
 800035c:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 800035e:	230c      	movs	r3, #12
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	4a8a      	ldr	r2, [pc, #552]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 8000364:	8b52      	ldrh	r2, [r2, #26]
 8000366:	801a      	strh	r2, [r3, #0]
                uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 8000368:	220a      	movs	r2, #10
 800036a:	18bb      	adds	r3, r7, r2
 800036c:	4a87      	ldr	r2, [pc, #540]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800036e:	8b92      	ldrh	r2, [r2, #28]
 8000370:	801a      	strh	r2, [r3, #0]

                hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 8000372:	22cc      	movs	r2, #204	; 0xcc
 8000374:	4b89      	ldr	r3, [pc, #548]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000376:	701a      	strb	r2, [r3, #0]
                hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 8000378:	22cc      	movs	r2, #204	; 0xcc
 800037a:	4b88      	ldr	r3, [pc, #544]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800037c:	705a      	strb	r2, [r3, #1]
                hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 800037e:	4b88      	ldr	r3, [pc, #544]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	b29b      	uxth	r3, r3
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b84      	ldr	r3, [pc, #528]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800038a:	709a      	strb	r2, [r3, #2]
                hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 800038c:	4b84      	ldr	r3, [pc, #528]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b82      	ldr	r3, [pc, #520]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000394:	70da      	strb	r2, [r3, #3]
                hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 8000396:	187b      	adds	r3, r7, r1
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b29b      	uxth	r3, r3
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4b7e      	ldr	r3, [pc, #504]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003a2:	711a      	strb	r2, [r3, #4]
                hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b7c      	ldr	r3, [pc, #496]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003ac:	715a      	strb	r2, [r3, #5]
                hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 80003ae:	183b      	adds	r3, r7, r0
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b78      	ldr	r3, [pc, #480]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003ba:	719a      	strb	r2, [r3, #6]
                hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 80003bc:	183b      	adds	r3, r7, r0
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b76      	ldr	r3, [pc, #472]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003c4:	71da      	strb	r2, [r3, #7]
                hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 80003c6:	197b      	adds	r3, r7, r5
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	0a1b      	lsrs	r3, r3, #8
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b72      	ldr	r3, [pc, #456]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003d2:	721a      	strb	r2, [r3, #8]
                hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 80003d4:	197b      	adds	r3, r7, r5
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b70      	ldr	r3, [pc, #448]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003dc:	725a      	strb	r2, [r3, #9]
                hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 80003de:	19bb      	adds	r3, r7, r6
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	0a1b      	lsrs	r3, r3, #8
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b6c      	ldr	r3, [pc, #432]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003ea:	729a      	strb	r2, [r3, #10]
                hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b6a      	ldr	r3, [pc, #424]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80003f4:	72da      	strb	r2, [r3, #11]
                hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 80003f6:	2114      	movs	r1, #20
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	0a1b      	lsrs	r3, r3, #8
 80003fe:	b29b      	uxth	r3, r3
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b66      	ldr	r3, [pc, #408]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000404:	731a      	strb	r2, [r3, #12]
                hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 8000406:	187b      	adds	r3, r7, r1
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b63      	ldr	r3, [pc, #396]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800040e:	735a      	strb	r2, [r3, #13]
                hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 8000410:	193b      	adds	r3, r7, r4
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	0a1b      	lsrs	r3, r3, #8
 8000416:	b29b      	uxth	r3, r3
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b60      	ldr	r3, [pc, #384]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800041c:	739a      	strb	r2, [r3, #14]
                hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 800041e:	193b      	adds	r3, r7, r4
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b5d      	ldr	r3, [pc, #372]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000426:	73da      	strb	r2, [r3, #15]
                hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 8000428:	200e      	movs	r0, #14
 800042a:	183b      	adds	r3, r7, r0
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b59      	ldr	r3, [pc, #356]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000436:	741a      	strb	r2, [r3, #16]
                hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 8000438:	183b      	adds	r3, r7, r0
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000440:	745a      	strb	r2, [r3, #17]
                hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 8000442:	2112      	movs	r1, #18
 8000444:	187b      	adds	r3, r7, r1
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	0a1b      	lsrs	r3, r3, #8
 800044a:	b29b      	uxth	r3, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b53      	ldr	r3, [pc, #332]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000450:	749a      	strb	r2, [r3, #18]
                hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 8000452:	187b      	adds	r3, r7, r1
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b50      	ldr	r3, [pc, #320]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800045a:	74da      	strb	r2, [r3, #19]
                hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 800045c:	2110      	movs	r1, #16
 800045e:	187b      	adds	r3, r7, r1
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	b29b      	uxth	r3, r3
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b4c      	ldr	r3, [pc, #304]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800046a:	751a      	strb	r2, [r3, #20]
                hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 800046c:	187b      	adds	r3, r7, r1
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b4a      	ldr	r3, [pc, #296]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000474:	755a      	strb	r2, [r3, #21]
                hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 8000476:	210c      	movs	r1, #12
 8000478:	187b      	adds	r3, r7, r1
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b29b      	uxth	r3, r3
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b46      	ldr	r3, [pc, #280]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000484:	759a      	strb	r2, [r3, #22]
                hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 8000486:	187b      	adds	r3, r7, r1
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b43      	ldr	r3, [pc, #268]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800048e:	75da      	strb	r2, [r3, #23]
                hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 8000490:	210a      	movs	r1, #10
 8000492:	187b      	adds	r3, r7, r1
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	b29b      	uxth	r3, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b3f      	ldr	r3, [pc, #252]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800049e:	761a      	strb	r2, [r3, #24]
                hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b3d      	ldr	r3, [pc, #244]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80004a8:	765a      	strb	r2, [r3, #25]

                //HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);

                hk_counter = 1;
 80004aa:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	601a      	str	r2, [r3, #0]

                hk_seq++;
 80004b0:	4b3b      	ldr	r3, [pc, #236]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80004ba:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);


        }
    }
}
 80004bc:	e04f      	b.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x33e>
                hk_counter++;
 80004be:	4b36      	ldr	r3, [pc, #216]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	4b34      	ldr	r3, [pc, #208]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80004c6:	601a      	str	r2, [r3, #0]
}
 80004c8:	e049      	b.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x33e>
    } else if (htim == &htim1) {
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d145      	bne.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x33e>
        if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))) { //check pin state
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	005a      	lsls	r2, r3, #1
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fa8d 	bl	80029fc <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d13b      	bne.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x33e>
        	HAL_Delay(10);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f001 f976 	bl	80017d8 <HAL_Delay>
            HAL_SPI_Transmit(&hspi1, (uint8_t * ) & WRITE, 1, 1);
 80004ec:	4920      	ldr	r1, [pc, #128]	; (8000570 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 80004ee:	482e      	ldr	r0, [pc, #184]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80004f0:	2301      	movs	r3, #1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f003 f9ec 	bl	80038d0 <HAL_SPI_Transmit>
            while (!(SPI1->SR));
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0fb      	beq.n	80004fa <HAL_TIM_OC_DelayElapsedCallback+0x2da>
            raw = SPI1->DR;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	001a      	movs	r2, r3
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800050a:	601a      	str	r2, [r3, #0]
            pmt_buf[0] = pmt_sync;
 800050c:	22bb      	movs	r2, #187	; 0xbb
 800050e:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000510:	701a      	strb	r2, [r3, #0]
            pmt_buf[1] = pmt_sync;
 8000512:	22bb      	movs	r2, #187	; 0xbb
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000516:	705a      	strb	r2, [r3, #1]
            pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	b29b      	uxth	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000524:	709a      	strb	r2, [r3, #2]
            pmt_buf[3] = (pmt_seq & 0xFF);;
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800052e:	70da      	strb	r2, [r3, #3]
            pmt_buf[4] = ((raw & 0xFF00) >> 8);
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	121b      	asrs	r3, r3, #8
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800053a:	711a      	strb	r2, [r3, #4]
            pmt_buf[5] = (raw & 0xFF);
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000544:	715a      	strb	r2, [r3, #5]
            pmt_seq++;
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b29a      	uxth	r2, r3
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000550:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000552:	4917      	ldr	r1, [pc, #92]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000556:	2364      	movs	r3, #100	; 0x64
 8000558:	2206      	movs	r2, #6
 800055a:	f004 fd59 	bl	8005010 <HAL_UART_Transmit>
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b00b      	add	sp, #44	; 0x2c
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	20000240 	.word	0x20000240
 800056c:	48000400 	.word	0x48000400
 8000570:	080060ac 	.word	0x080060ac
 8000574:	20000194 	.word	0x20000194
 8000578:	40003800 	.word	0x40003800
 800057c:	20000338 	.word	0x20000338
 8000580:	20000336 	.word	0x20000336
 8000584:	40007400 	.word	0x40007400
 8000588:	20000000 	.word	0x20000000
 800058c:	20000314 	.word	0x20000314
 8000590:	2000004c 	.word	0x2000004c
 8000594:	20000020 	.word	0x20000020
 8000598:	20000370 	.word	0x20000370
 800059c:	20000348 	.word	0x20000348
 80005a0:	2000036e 	.word	0x2000036e
 80005a4:	200001f8 	.word	0x200001f8
 80005a8:	20000130 	.word	0x20000130
 80005ac:	40013000 	.word	0x40013000
 80005b0:	20000340 	.word	0x20000340
 80005b4:	20000346 	.word	0x20000346
 80005b8:	20000288 	.word	0x20000288

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f8a5 	bl	8001710 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f865 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fc7f 	bl	8000ecc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ce:	f000 fc5f 	bl	8000e90 <MX_DMA_Init>
  MX_SPI2_Init();
 80005d2:	f000 faa7 	bl	8000b24 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005d6:	f000 fae5 	bl	8000ba4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005da:	f000 fb99 	bl	8000d10 <MX_TIM2_Init>
  MX_SPI1_Init();
 80005de:	f000 fa61 	bl	8000aa4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 fc15 	bl	8000e10 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80005e6:	f000 f9eb 	bl	80009c0 <MX_DAC1_Init>
  MX_ADC_Init();
 80005ea:	f000 f8bd 	bl	8000768 <MX_ADC_Init>
  MX_I2C1_Init();
 80005ee:	f000 fa19 	bl	8000a24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80005f2:	4b23      	ldr	r3, [pc, #140]	; (8000680 <main+0xc4>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fe41 	bl	800227e <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <main+0xc8>)
 80005fe:	2100      	movs	r1, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f003 fc83 	bl	8003f0c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <main+0xcc>)
 8000608:	210c      	movs	r1, #12
 800060a:	0018      	movs	r0, r3
 800060c:	f003 fc7e 	bl	8003f0c <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <main+0xd0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	025b      	lsls	r3, r3, #9
 800061c:	401a      	ands	r2, r3
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	429a      	cmp	r2, r3
 8000624:	d0f5      	beq.n	8000612 <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <main+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	69da      	ldr	r2, [r3, #28]
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	03db      	lsls	r3, r3, #15
 8000632:	401a      	ands	r2, r3
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	03db      	lsls	r3, r3, #15
 8000638:	429a      	cmp	r2, r3
 800063a:	d1f5      	bne.n	8000628 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <main+0xd4>)
 8000644:	2210      	movs	r2, #16
 8000646:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <main+0xd4>)
 800064a:	2223      	movs	r2, #35	; 0x23
 800064c:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0xd4>)
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <main+0xd0>)
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	f005 fc25 	bl	8005ea4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <main+0xa6>
      Error_Handler();
 800065e:	f000 fccf 	bl	8001000 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0xd0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <main+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	03c9      	lsls	r1, r1, #15
 8000670:	430a      	orrs	r2, r1
 8000672:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <main+0xd0>)
 8000676:	0018      	movs	r0, r3
 8000678:	f005 fc7a 	bl	8005f70 <HAL_UARTEx_EnableStopMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0xc0>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	200000d0 	.word	0x200000d0
 8000684:	200001f8 	.word	0x200001f8
 8000688:	20000240 	.word	0x20000240
 800068c:	20000288 	.word	0x20000288
 8000690:	2000030c 	.word	0x2000030c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b097      	sub	sp, #92	; 0x5c
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2428      	movs	r4, #40	; 0x28
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	2330      	movs	r3, #48	; 0x30
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f005 fcdd 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	2318      	movs	r3, #24
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	0018      	movs	r0, r3
 80006b0:	2310      	movs	r3, #16
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f005 fcd5 	bl	8006064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f005 fcce 	bl	8006064 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2212      	movs	r2, #18
 80006ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2210      	movs	r2, #16
 80006e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2210      	movs	r2, #16
 80006e6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2202      	movs	r2, #2
 80006ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	22a0      	movs	r2, #160	; 0xa0
 80006f8:	0392      	lsls	r2, r2, #14
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fae1 	bl	8002ccc <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800070e:	f000 fc77 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	2118      	movs	r1, #24
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2207      	movs	r2, #7
 8000718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2101      	movs	r1, #1
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fde5 	bl	8003300 <HAL_RCC_ClockConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073a:	f000 fc61 	bl	8001000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2221      	movs	r2, #33	; 0x21
 8000742:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2203      	movs	r2, #3
 8000748:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	0018      	movs	r0, r3
 8000754:	f002 ff26 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800075c:	f000 fc50 	bl	8001000 <Error_Handler>
  }
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b017      	add	sp, #92	; 0x5c
 8000766:	bd90      	pop	{r4, r7, pc}

08000768 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	230c      	movs	r3, #12
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f005 fc74 	bl	8006064 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800077c:	4b8e      	ldr	r3, [pc, #568]	; (80009b8 <MX_ADC_Init+0x250>)
 800077e:	4a8f      	ldr	r2, [pc, #572]	; (80009bc <MX_ADC_Init+0x254>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000782:	4b8d      	ldr	r3, [pc, #564]	; (80009b8 <MX_ADC_Init+0x250>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b8b      	ldr	r3, [pc, #556]	; (80009b8 <MX_ADC_Init+0x250>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078e:	4b8a      	ldr	r3, [pc, #552]	; (80009b8 <MX_ADC_Init+0x250>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000794:	4b88      	ldr	r3, [pc, #544]	; (80009b8 <MX_ADC_Init+0x250>)
 8000796:	2201      	movs	r2, #1
 8000798:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	4b87      	ldr	r3, [pc, #540]	; (80009b8 <MX_ADC_Init+0x250>)
 800079c:	2204      	movs	r2, #4
 800079e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007a0:	4b85      	ldr	r3, [pc, #532]	; (80009b8 <MX_ADC_Init+0x250>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007a6:	4b84      	ldr	r3, [pc, #528]	; (80009b8 <MX_ADC_Init+0x250>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <MX_ADC_Init+0x250>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b81      	ldr	r3, [pc, #516]	; (80009b8 <MX_ADC_Init+0x250>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <MX_ADC_Init+0x250>)
 80007ba:	22c2      	movs	r2, #194	; 0xc2
 80007bc:	32ff      	adds	r2, #255	; 0xff
 80007be:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c0:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <MX_ADC_Init+0x250>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <MX_ADC_Init+0x250>)
 80007c8:	2224      	movs	r2, #36	; 0x24
 80007ca:	2100      	movs	r1, #0
 80007cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b7a      	ldr	r3, [pc, #488]	; (80009b8 <MX_ADC_Init+0x250>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007d4:	4b78      	ldr	r3, [pc, #480]	; (80009b8 <MX_ADC_Init+0x250>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f822 	bl	8001820 <HAL_ADC_Init>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007e0:	f000 fc0e 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	0152      	lsls	r2, r2, #5
 80007f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0552      	lsls	r2, r2, #21
 80007f8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	4b6e      	ldr	r3, [pc, #440]	; (80009b8 <MX_ADC_Init+0x250>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 f9e7 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 fbf9 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <MX_ADC_Init+0x250>)
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f9da 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000824:	f000 fbec 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2202      	movs	r2, #2
 800082c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	4b61      	ldr	r3, [pc, #388]	; (80009b8 <MX_ADC_Init+0x250>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f001 f9cd 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800083e:	f000 fbdf 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2203      	movs	r2, #3
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000848:	1d3a      	adds	r2, r7, #4
 800084a:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <MX_ADC_Init+0x250>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f9c0 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000858:	f000 fbd2 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2205      	movs	r2, #5
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b54      	ldr	r3, [pc, #336]	; (80009b8 <MX_ADC_Init+0x250>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f001 f9b3 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000872:	f000 fbc5 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2206      	movs	r2, #6
 800087a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <MX_ADC_Init+0x250>)
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f9a6 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 800088c:	f000 fbb8 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2207      	movs	r2, #7
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <MX_ADC_Init+0x250>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f001 f999 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80008a6:	f000 fbab 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2208      	movs	r2, #8
 80008ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <MX_ADC_Init+0x250>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f98c 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80008c0:	f000 fb9e 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2209      	movs	r2, #9
 80008c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <MX_ADC_Init+0x250>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 f97f 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80008da:	f000 fb91 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	220a      	movs	r2, #10
 80008e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <MX_ADC_Init+0x250>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 f972 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80008f4:	f000 fb84 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	220b      	movs	r2, #11
 80008fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_ADC_Init+0x250>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f965 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800090e:	f000 fb77 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	220c      	movs	r2, #12
 8000916:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000918:	1d3a      	adds	r2, r7, #4
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_ADC_Init+0x250>)
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f001 f958 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000928:	f000 fb6a 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	220d      	movs	r2, #13
 8000930:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_ADC_Init+0x250>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f94b 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000942:	f000 fb5d 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	220e      	movs	r2, #14
 800094a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ADC_Init+0x250>)
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f001 f93e 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 800095c:	f000 fb50 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	220f      	movs	r2, #15
 8000964:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000966:	1d3a      	adds	r2, r7, #4
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_ADC_Init+0x250>)
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f001 f931 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000976:	f000 fb43 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2210      	movs	r2, #16
 800097e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000980:	1d3a      	adds	r2, r7, #4
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_ADC_Init+0x250>)
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f001 f924 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000990:	f000 fb36 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2211      	movs	r2, #17
 8000998:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_ADC_Init+0x250>)
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 f917 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80009aa:	f000 fb29 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b004      	add	sp, #16
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	2000004c 	.word	0x2000004c
 80009bc:	40012400 	.word	0x40012400

080009c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_DAC1_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009cc:	003b      	movs	r3, r7
 80009ce:	0018      	movs	r0, r3
 80009d0:	2308      	movs	r3, #8
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f005 fb45 	bl	8006064 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_DAC1_Init+0x5c>)
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <MX_DAC1_Init+0x60>)
 80009de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_DAC1_Init+0x5c>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fbea 	bl	80021bc <HAL_DAC_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 80009ec:	f000 fb08 	bl	8001000 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009fc:	0039      	movs	r1, r7
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_DAC1_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fbfd 	bl	8002202 <HAL_DAC_ConfigChannel>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000a0c:	f000 faf8 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000336 	.word	0x20000336
 8000a1c:	200000d0 	.word	0x200000d0
 8000a20:	40007400 	.word	0x40007400

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C1_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 f805 	bl	8002a70 <HAL_I2C_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fac9 	bl	8001000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 f892 	bl	8002b9c <HAL_I2CEx_ConfigAnalogFilter>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fac0 	bl	8001000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 f8d5 	bl	8002c34 <HAL_I2CEx_ConfigDigitalFilter>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fab7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000e4 	.word	0x200000e4
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	2000090e 	.word	0x2000090e

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <MX_SPI1_Init+0x7c>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ab0:	2282      	movs	r2, #130	; 0x82
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ac0:	22f0      	movs	r2, #240	; 0xf0
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000adc:	2218      	movs	r2, #24
 8000ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <MX_SPI1_Init+0x78>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 fe2a 	bl	8003760 <HAL_SPI_Init>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fa76 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000130 	.word	0x20000130
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <MX_SPI2_Init+0x7c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b30:	2282      	movs	r2, #130	; 0x82
 8000b32:	0052      	lsls	r2, r2, #1
 8000b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	00d2      	lsls	r2, r2, #3
 8000b3c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b40:	22f0      	movs	r2, #240	; 0xf0
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b5c:	2218      	movs	r2, #24
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b80:	2208      	movs	r2, #8
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <MX_SPI2_Init+0x78>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f002 fdea 	bl	8003760 <HAL_SPI_Init>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 fa36 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000194 	.word	0x20000194
 8000ba0:	40003800 	.word	0x40003800

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	2348      	movs	r3, #72	; 0x48
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f005 fa55 	bl	8006064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f005 fa4d 	bl	8006064 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bca:	2324      	movs	r3, #36	; 0x24
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	231c      	movs	r3, #28
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f005 fa45 	bl	8006064 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2320      	movs	r3, #32
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f005 fa3e 	bl	8006064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000bea:	4a47      	ldr	r2, [pc, #284]	; (8000d08 <MX_TIM1_Init+0x164>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8000bee:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000bf0:	2263      	movs	r2, #99	; 0x63
 8000bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8000bfa:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000bfc:	4a43      	ldr	r2, [pc, #268]	; (8000d0c <MX_TIM1_Init+0x168>)
 8000bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c12:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f003 f929 	bl	8003e6c <HAL_TIM_Base_Init>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000c1e:	f000 f9ef 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c22:	2148      	movs	r1, #72	; 0x48
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0152      	lsls	r2, r2, #5
 8000c2a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c2c:	187a      	adds	r2, r7, r1
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f003 fc9e 	bl	8004574 <HAL_TIM_ConfigClockSource>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c3c:	f000 f9e0 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 fa62 	bl	800410c <HAL_TIM_PWM_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000c4c:	f000 f9d8 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5e:	187a      	adds	r2, r7, r1
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f004 f8b3 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000c6e:	f000 f9c7 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2124      	movs	r1, #36	; 0x24
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2260      	movs	r2, #96	; 0x60
 8000c78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	22e0      	movs	r2, #224	; 0xe0
 8000c7e:	32ff      	adds	r2, #255	; 0xff
 8000c80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 fb9e 	bl	80043e8 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000cb0:	f000 f9a6 	bl	8001000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0192      	lsls	r2, r2, #6
 8000cd8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce0:	1d3a      	adds	r2, r7, #4
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 f8d0 	bl	8004e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000cf0:	f000 f986 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <MX_TIM1_Init+0x160>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fbc2 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b016      	add	sp, #88	; 0x58
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	0000bb7f 	.word	0x0000bb7f

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	2328      	movs	r3, #40	; 0x28
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f005 f99f 	bl	8006064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	2320      	movs	r3, #32
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f005 f997 	bl	8006064 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	231c      	movs	r3, #28
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f005 f990 	bl	8006064 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	05d2      	lsls	r2, r2, #23
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d4e:	2263      	movs	r2, #99	; 0x63
 8000d50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d5a:	4a2c      	ldr	r2, [pc, #176]	; (8000e0c <MX_TIM2_Init+0xfc>)
 8000d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f003 f87d 	bl	8003e6c <HAL_TIM_Base_Init>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d76:	f000 f943 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	2128      	movs	r1, #40	; 0x28
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	0152      	lsls	r2, r2, #5
 8000d82:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d84:	187a      	adds	r2, r7, r1
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f003 fbf2 	bl	8004574 <HAL_TIM_ConfigClockSource>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d94:	f000 f934 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f003 f9b6 	bl	800410c <HAL_TIM_PWM_Init>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000da4:	f000 f92c 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2120      	movs	r1, #32
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f004 f807 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000dc6:	f000 f91b 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2260      	movs	r2, #96	; 0x60
 8000dce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 - 1;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	22e0      	movs	r2, #224	; 0xe0
 8000dd4:	32ff      	adds	r2, #255	; 0xff
 8000dd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000de4:	1d39      	adds	r1, r7, #4
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000de8:	220c      	movs	r2, #12
 8000dea:	0018      	movs	r0, r3
 8000dec:	f003 fafc 	bl	80043e8 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000df4:	f000 f904 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <MX_TIM2_Init+0xf8>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fb40 	bl	8001480 <HAL_TIM_MspPostInit>

}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b00e      	add	sp, #56	; 0x38
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000240 	.word	0x20000240
 8000e0c:	0000ea5f 	.word	0x0000ea5f

08000e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_USART1_UART_Init+0x6c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_USART1_UART_Init+0x70>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_USART1_UART_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <MX_USART1_UART_Init+0x7c>)
 8000e2a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e2e:	22e1      	movs	r2, #225	; 0xe1
 8000e30:	0212      	lsls	r2, r2, #8
 8000e32:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e48:	220c      	movs	r2, #12
 8000e4a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART1_UART_Init+0x78>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f004 f87e 	bl	8004f68 <HAL_UART_Init>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e70:	f000 f8c6 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	2000033c 	.word	0x2000033c
 8000e80:	20000346 	.word	0x20000346
 8000e84:	2000036e 	.word	0x2000036e
 8000e88:	20000288 	.word	0x20000288
 8000e8c:	40013800 	.word	0x40013800

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2009      	movs	r0, #9
 8000eb4:	f001 f950 	bl	8002158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eb8:	2009      	movs	r0, #9
 8000eba:	f001 f962 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40021000 	.word	0x40021000

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	2414      	movs	r4, #20
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2314      	movs	r3, #20
 8000eda:	001a      	movs	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	f005 f8c1 	bl	8006064 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0309      	lsls	r1, r1, #12
 8000eec:	430a      	orrs	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	031b      	lsls	r3, r3, #12
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	03c9      	lsls	r1, r1, #15
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	03db      	lsls	r3, r3, #15
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	02c9      	lsls	r1, r1, #11
 8000f40:	430a      	orrs	r2, r1
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <MX_GPIO_Init+0x124>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	02db      	lsls	r3, r3, #11
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000f52:	239f      	movs	r3, #159	; 0x9f
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MX_GPIO_Init+0x128>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	f001 fd6b 	bl	8002a36 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0x12c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	21c0      	movs	r1, #192	; 0xc0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 fd65 	bl	8002a36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x130>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2160      	movs	r1, #96	; 0x60
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fd5f 	bl	8002a36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	229f      	movs	r2, #159	; 0x9f
 8000f7c:	0192      	lsls	r2, r2, #6
 8000f7e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	2201      	movs	r2, #1
 8000f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <MX_GPIO_Init+0x128>)
 8000f96:	0019      	movs	r1, r3
 8000f98:	0010      	movs	r0, r2
 8000f9a:	f001 fbbf 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	22c0      	movs	r2, #192	; 0xc0
 8000fa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <MX_GPIO_Init+0x12c>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f001 fbad 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2260      	movs	r2, #96	; 0x60
 8000fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2201      	movs	r2, #1
 8000fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <MX_GPIO_Init+0x130>)
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	f001 fb9a 	bl	800271c <HAL_GPIO_Init>

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00b      	add	sp, #44	; 0x2c
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	48001400 	.word	0x48001400
 8000ffc:	48000400 	.word	0x48000400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2201      	movs	r2, #1
 8001024:	4013      	ands	r3, r2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	69da      	ldr	r2, [r3, #28]
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	0549      	lsls	r1, r1, #21
 8001034:	430a      	orrs	r2, r1
 8001036:	61da      	str	r2, [r3, #28]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_MspInit+0x44>)
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	055b      	lsls	r3, r3, #21
 8001040:	4013      	ands	r3, r2
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08d      	sub	sp, #52	; 0x34
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	241c      	movs	r4, #28
 800105e:	193b      	adds	r3, r7, r4
 8001060:	0018      	movs	r0, r3
 8001062:	2314      	movs	r3, #20
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f004 fffc 	bl	8006064 <memset>
  if(hadc->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_ADC_MspInit+0x148>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d000      	beq.n	8001078 <HAL_ADC_MspInit+0x24>
 8001076:	e08d      	b.n	8001194 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	0089      	lsls	r1, r1, #2
 8001082:	430a      	orrs	r2, r1
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0309      	lsls	r1, r1, #12
 800109e:	430a      	orrs	r2, r1
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	031b      	lsls	r3, r3, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0289      	lsls	r1, r1, #10
 80010ba:	430a      	orrs	r2, r1
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	029b      	lsls	r3, r3, #10
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	02c9      	lsls	r1, r1, #11
 80010d6:	430a      	orrs	r2, r1
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_ADC_MspInit+0x14c>)
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	02db      	lsls	r3, r3, #11
 80010e2:	4013      	ands	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	223f      	movs	r2, #63	; 0x3f
 80010ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2203      	movs	r2, #3
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <HAL_ADC_MspInit+0x150>)
 80010fe:	0019      	movs	r1, r3
 8001100:	0010      	movs	r0, r2
 8001102:	f001 fb0b 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001106:	193b      	adds	r3, r7, r4
 8001108:	22ef      	movs	r2, #239	; 0xef
 800110a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2203      	movs	r2, #3
 8001110:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	193a      	adds	r2, r7, r4
 800111a:	2390      	movs	r3, #144	; 0x90
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f001 fafb 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2203      	movs	r2, #3
 800112a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2203      	movs	r2, #3
 8001130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	193b      	adds	r3, r7, r4
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_ADC_MspInit+0x154>)
 800113c:	0019      	movs	r1, r3
 800113e:	0010      	movs	r0, r2
 8001140:	f001 faec 	bl	800271c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0x15c>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_ADC_MspInit+0x158>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_ADC_MspInit+0x158>)
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0052      	lsls	r2, r2, #1
 8001162:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_ADC_MspInit+0x158>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_MspInit+0x158>)
 800117a:	0018      	movs	r0, r3
 800117c:	f001 f8b8 	bl	80022f0 <HAL_DMA_Init>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001184:	f7ff ff3c 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_ADC_MspInit+0x158>)
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_ADC_MspInit+0x158>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b00d      	add	sp, #52	; 0x34
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	40012400 	.word	0x40012400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000400 	.word	0x48000400
 80011ac:	2000008c 	.word	0x2000008c
 80011b0:	40020008 	.word	0x40020008

080011b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	2414      	movs	r4, #20
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	0018      	movs	r0, r3
 80011c2:	2314      	movs	r3, #20
 80011c4:	001a      	movs	r2, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	f004 ff4c 	bl	8006064 <memset>
  if(hdac->Instance==DAC)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_DAC_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_DAC_MspInit+0x88>)
 80011d8:	69da      	ldr	r2, [r3, #28]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_DAC_MspInit+0x88>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0589      	lsls	r1, r1, #22
 80011e0:	430a      	orrs	r2, r1
 80011e2:	61da      	str	r2, [r3, #28]
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_DAC_MspInit+0x88>)
 80011e6:	69da      	ldr	r2, [r3, #28]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	059b      	lsls	r3, r3, #22
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_DAC_MspInit+0x88>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_DAC_MspInit+0x88>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0289      	lsls	r1, r1, #10
 80011fc:	430a      	orrs	r2, r1
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_DAC_MspInit+0x88>)
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2210      	movs	r2, #16
 8001212:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2203      	movs	r2, #3
 8001218:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	193a      	adds	r2, r7, r4
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f001 fa77 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b00b      	add	sp, #44	; 0x2c
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	40007400 	.word	0x40007400
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2414      	movs	r4, #20
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2314      	movs	r3, #20
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f004 ff06 	bl	8006064 <memset>
  if(hi2c->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_I2C_MspInit+0x90>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d132      	bne.n	80012c8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	02c9      	lsls	r1, r1, #11
 800126c:	430a      	orrs	r2, r1
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	02db      	lsls	r3, r3, #11
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	22c0      	movs	r2, #192	; 0xc0
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	0021      	movs	r1, r4
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2212      	movs	r2, #18
 800128c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2203      	movs	r2, #3
 8001298:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2201      	movs	r2, #1
 800129e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_I2C_MspInit+0x98>)
 80012a4:	0019      	movs	r1, r3
 80012a6:	0010      	movs	r0, r2
 80012a8:	f001 fa38 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 80012ae:	69da      	ldr	r2, [r3, #28]
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	0389      	lsls	r1, r1, #14
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_I2C_MspInit+0x94>)
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	039b      	lsls	r3, r3, #14
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b00b      	add	sp, #44	; 0x2c
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000400 	.word	0x48000400

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08d      	sub	sp, #52	; 0x34
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	241c      	movs	r4, #28
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	0018      	movs	r0, r3
 80012ea:	2314      	movs	r3, #20
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f004 feb8 	bl	8006064 <memset>
  if(hspi->Instance==SPI1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a38      	ldr	r2, [pc, #224]	; (80013dc <HAL_SPI_MspInit+0x100>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d132      	bne.n	8001364 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0149      	lsls	r1, r1, #5
 8001308:	430a      	orrs	r2, r1
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	02c9      	lsls	r1, r1, #11
 8001324:	430a      	orrs	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	02db      	lsls	r3, r3, #11
 8001330:	4013      	ands	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001336:	0021      	movs	r1, r4
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2218      	movs	r2, #24
 800133c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2202      	movs	r2, #2
 8001342:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2203      	movs	r2, #3
 800134e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001350:	187b      	adds	r3, r7, r1
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	187b      	adds	r3, r7, r1
 8001358:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_SPI_MspInit+0x108>)
 800135a:	0019      	movs	r1, r3
 800135c:	0010      	movs	r0, r2
 800135e:	f001 f9dd 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001362:	e037      	b.n	80013d4 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <HAL_SPI_MspInit+0x10c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d132      	bne.n	80013d4 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	01c9      	lsls	r1, r1, #7
 8001378:	430a      	orrs	r2, r1
 800137a:	61da      	str	r2, [r3, #28]
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	01db      	lsls	r3, r3, #7
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	02c9      	lsls	r1, r1, #11
 8001394:	430a      	orrs	r2, r1
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0x104>)
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	02db      	lsls	r3, r3, #11
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80013a6:	211c      	movs	r1, #28
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	22c0      	movs	r2, #192	; 0xc0
 80013ac:	01d2      	lsls	r2, r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2202      	movs	r2, #2
 80013b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2203      	movs	r2, #3
 80013c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_SPI_MspInit+0x108>)
 80013cc:	0019      	movs	r1, r3
 80013ce:	0010      	movs	r0, r2
 80013d0:	f001 f9a4 	bl	800271c <HAL_GPIO_Init>
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b00d      	add	sp, #52	; 0x34
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400
 80013e8:	40003800 	.word	0x40003800

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_TIM_Base_MspInit+0x8c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11e      	bne.n	800143c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0109      	lsls	r1, r1, #4
 8001408:	430a      	orrs	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	200d      	movs	r0, #13
 8001420:	f000 fe9a 	bl	8002158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001424:	200d      	movs	r0, #13
 8001426:	f000 feac 	bl	8002182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2101      	movs	r1, #1
 800142e:	200e      	movs	r0, #14
 8001430:	f000 fe92 	bl	8002158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001434:	200e      	movs	r0, #14
 8001436:	f000 fea4 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800143a:	e019      	b.n	8001470 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	429a      	cmp	r2, r3
 8001446:	d113      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	61da      	str	r2, [r3, #28]
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	200f      	movs	r0, #15
 8001466:	f000 fe77 	bl	8002158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146a:	200f      	movs	r0, #15
 800146c:	f000 fe89 	bl	8002182 <HAL_NVIC_EnableIRQ>
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	2414      	movs	r4, #20
 800148a:	193b      	adds	r3, r7, r4
 800148c:	0018      	movs	r0, r3
 800148e:	2314      	movs	r3, #20
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f004 fde6 	bl	8006064 <memset>
  if(htim->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <HAL_TIM_MspPostInit+0xd0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d126      	bne.n	80014f0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0289      	lsls	r1, r1, #10
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	029b      	lsls	r3, r3, #10
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	0021      	movs	r1, r4
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2202      	movs	r2, #2
 80014cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2202      	movs	r2, #2
 80014de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	187a      	adds	r2, r7, r1
 80014e2:	2390      	movs	r3, #144	; 0x90
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f001 f917 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ee:	e02a      	b.n	8001546 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d124      	bne.n	8001546 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	02c9      	lsls	r1, r1, #11
 8001506:	430a      	orrs	r2, r1
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_TIM_MspPostInit+0xd4>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	02db      	lsls	r3, r3, #11
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001518:	2114      	movs	r1, #20
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2202      	movs	r2, #2
 8001526:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2202      	movs	r2, #2
 8001538:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	187b      	adds	r3, r7, r1
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_TIM_MspPostInit+0xd8>)
 800153e:	0019      	movs	r1, r3
 8001540:	0010      	movs	r0, r2
 8001542:	f001 f8eb 	bl	800271c <HAL_GPIO_Init>
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b00b      	add	sp, #44	; 0x2c
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2414      	movs	r4, #20
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f004 fd78 	bl	8006064 <memset>
  if(huart->Instance==USART1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <HAL_UART_MspInit+0xa4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d13b      	bne.n	80015f6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_UART_MspInit+0xa8>)
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_UART_MspInit+0xa8>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	01c9      	lsls	r1, r1, #7
 8001588:	430a      	orrs	r2, r1
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_UART_MspInit+0xa8>)
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_UART_MspInit+0xa8>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_UART_MspInit+0xa8>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0289      	lsls	r1, r1, #10
 80015a4:	430a      	orrs	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_UART_MspInit+0xa8>)
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	22c0      	movs	r2, #192	; 0xc0
 80015ba:	00d2      	lsls	r2, r2, #3
 80015bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	0021      	movs	r1, r4
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2202      	movs	r2, #2
 80015c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2203      	movs	r2, #3
 80015d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2201      	movs	r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	187a      	adds	r2, r7, r1
 80015da:	2390      	movs	r3, #144	; 0x90
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 f89b 	bl	800271c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201b      	movs	r0, #27
 80015ec:	f000 fdb4 	bl	8002158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f0:	201b      	movs	r0, #27
 80015f2:	f000 fdc6 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b00b      	add	sp, #44	; 0x2c
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40013800 	.word	0x40013800
 8001604:	40021000 	.word	0x40021000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f8b8 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <DMA1_Channel1_IRQHandler+0x14>)
 800163e:	0018      	movs	r0, r3
 8001640:	f000 ff81 	bl	8002546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	2000008c 	.word	0x2000008c

08001650 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001656:	0018      	movs	r0, r3
 8001658:	f002 fdb0 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	200001f8 	.word	0x200001f8

08001668 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <TIM1_CC_IRQHandler+0x14>)
 800166e:	0018      	movs	r0, r3
 8001670:	f002 fda4 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	200001f8 	.word	0x200001f8

08001680 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <TIM2_IRQHandler+0x14>)
 8001686:	0018      	movs	r0, r3
 8001688:	f002 fd98 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000240 	.word	0x20000240

08001698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <USART1_IRQHandler+0x14>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f003 fd60 	bl	8005164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000288 	.word	0x20000288

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016e6:	f7ff ffe3 	bl	80016b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80016ea:	f004 fc97 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ee:	f7fe ff65 	bl	80005bc <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   r0, =_estack
 80016f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001700:	080060d0 	.word	0x080060d0
  ldr r2, =_sbss
 8001704:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001708:	20000378 	.word	0x20000378

0800170c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_COMP_IRQHandler>
	...

08001710 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_Init+0x24>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_Init+0x24>)
 800171a:	2110      	movs	r1, #16
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f809 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001726:	f7ff fc71 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40022000 	.word	0x40022000

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_InitTick+0x5c>)
 8001742:	681c      	ldr	r4, [r3, #0]
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_InitTick+0x60>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	0019      	movs	r1, r3
 800174a:	23fa      	movs	r3, #250	; 0xfa
 800174c:	0098      	lsls	r0, r3, #2
 800174e:	f7fe fcdb 	bl	8000108 <__udivsi3>
 8001752:	0003      	movs	r3, r0
 8001754:	0019      	movs	r1, r3
 8001756:	0020      	movs	r0, r4
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	0018      	movs	r0, r3
 8001760:	f000 fd1f 	bl	80021a2 <HAL_SYSTICK_Config>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e00f      	b.n	800178c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d80b      	bhi.n	800178a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	2301      	movs	r3, #1
 8001776:	425b      	negs	r3, r3
 8001778:	2200      	movs	r2, #0
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fcec 	bl	8002158 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_InitTick+0x64>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b003      	add	sp, #12
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	20000024 	.word	0x20000024
 8001798:	2000002c 	.word	0x2000002c
 800179c:	20000028 	.word	0x20000028

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x1c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	001a      	movs	r2, r3
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_IncTick+0x20>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	18d2      	adds	r2, r2, r3
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_IncTick+0x20>)
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	2000002c 	.word	0x2000002c
 80017c0:	20000374 	.word	0x20000374

080017c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <HAL_GetTick+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	20000374 	.word	0x20000374

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	001a      	movs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	f7ff ffe0 	bl	80017c4 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	2000002c 	.word	0x2000002c

08001820 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	230f      	movs	r3, #15
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e125      	b.n	8001a8a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2234      	movs	r2, #52	; 0x34
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff fbfc 	bl	8001054 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	2210      	movs	r2, #16
 8001862:	4013      	ands	r3, r2
 8001864:	d000      	beq.n	8001868 <HAL_ADC_Init+0x48>
 8001866:	e103      	b.n	8001a70 <HAL_ADC_Init+0x250>
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d000      	beq.n	8001874 <HAL_ADC_Init+0x54>
 8001872:	e0fd      	b.n	8001a70 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2204      	movs	r2, #4
 800187c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800187e:	d000      	beq.n	8001882 <HAL_ADC_Init+0x62>
 8001880:	e0f6      	b.n	8001a70 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	4a83      	ldr	r2, [pc, #524]	; (8001a94 <HAL_ADC_Init+0x274>)
 8001888:	4013      	ands	r3, r2
 800188a:	2202      	movs	r2, #2
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d112      	bne.n	80018c6 <HAL_ADC_Init+0xa6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d009      	beq.n	80018c2 <HAL_ADC_Init+0xa2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	401a      	ands	r2, r3
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	429a      	cmp	r2, r3
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Init+0xa6>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_ADC_Init+0xa8>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d116      	bne.n	80018fa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2218      	movs	r2, #24
 80018d4:	4393      	bics	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	0899      	lsrs	r1, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4964      	ldr	r1, [pc, #400]	; (8001a98 <HAL_ADC_Init+0x278>)
 8001906:	400a      	ands	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7e1b      	ldrb	r3, [r3, #24]
 800190e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e5b      	ldrb	r3, [r3, #25]
 8001914:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001916:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e9b      	ldrb	r3, [r3, #26]
 800191c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800191e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	2b01      	cmp	r3, #1
 8001926:	d002      	beq.n	800192e <HAL_ADC_Init+0x10e>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	e000      	b.n	8001930 <HAL_ADC_Init+0x110>
 800192e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001930:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001936:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d101      	bne.n	8001944 <HAL_ADC_Init+0x124>
 8001940:	2304      	movs	r3, #4
 8001942:	e000      	b.n	8001946 <HAL_ADC_Init+0x126>
 8001944:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001946:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2124      	movs	r1, #36	; 0x24
 800194c:	5c5b      	ldrb	r3, [r3, r1]
 800194e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001950:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	4313      	orrs	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7edb      	ldrb	r3, [r3, #27]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d115      	bne.n	800198c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e9b      	ldrb	r3, [r3, #26]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0252      	lsls	r2, r2, #9
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	e00b      	b.n	800198c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	2220      	movs	r2, #32
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	2201      	movs	r2, #1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	23c2      	movs	r3, #194	; 0xc2
 8001992:	33ff      	adds	r3, #255	; 0xff
 8001994:	429a      	cmp	r2, r3
 8001996:	d007      	beq.n	80019a8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68d9      	ldr	r1, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	055b      	lsls	r3, r3, #21
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d01b      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d017      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d013      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d00f      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d00b      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d007      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d003      	beq.n	80019fc <HAL_ADC_Init+0x1dc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d112      	bne.n	8001a22 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2107      	movs	r1, #7
 8001a08:	438a      	bics	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6959      	ldr	r1, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	2207      	movs	r2, #7
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_ADC_Init+0x27c>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10b      	bne.n	8001a4a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4393      	bics	r3, r2
 8001a40:	2201      	movs	r2, #1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a48:	e01c      	b.n	8001a84 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	2212      	movs	r2, #18
 8001a50:	4393      	bics	r3, r2
 8001a52:	2210      	movs	r2, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001a66:	230f      	movs	r3, #15
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a6e:	e009      	b.n	8001a84 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	2210      	movs	r2, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a84:	230f      	movs	r3, #15
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	781b      	ldrb	r3, [r3, #0]
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	fffffefd 	.word	0xfffffefd
 8001a98:	fffe0219 	.word	0xfffe0219
 8001a9c:	833fffe7 	.word	0x833fffe7

08001aa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aac:	2317      	movs	r3, #23
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d15e      	bne.n	8001b7e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2234      	movs	r2, #52	; 0x34
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Start_DMA+0x2e>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e05e      	b.n	8001b8c <HAL_ADC_Start_DMA+0xec>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2234      	movs	r2, #52	; 0x34
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	7e5b      	ldrb	r3, [r3, #25]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fc      	adds	r4, r7, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f983 	bl	8001df0 <ADC_Enable>
 8001aea:	0003      	movs	r3, r0
 8001aec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aee:	2317      	movs	r3, #23
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d146      	bne.n	8001b86 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_ADC_Start_DMA+0xf4>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0052      	lsls	r2, r2, #1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2234      	movs	r2, #52	; 0x34
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_ADC_Start_DMA+0xf8>)
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_ADC_Start_DMA+0xfc>)
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_ADC_Start_DMA+0x100>)
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	221c      	movs	r2, #28
 8001b36:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2110      	movs	r1, #16
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3340      	adds	r3, #64	; 0x40
 8001b62:	0019      	movs	r1, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f000 fc0a 	bl	8002380 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2104      	movs	r1, #4
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	e003      	b.n	8001b86 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b7e:	2317      	movs	r3, #23
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2202      	movs	r2, #2
 8001b84:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b86:	2317      	movs	r3, #23
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b007      	add	sp, #28
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	fffff0fe 	.word	0xfffff0fe
 8001b98:	08001ef9 	.word	0x08001ef9
 8001b9c:	08001fad 	.word	0x08001fad
 8001ba0:	08001fcb 	.word	0x08001fcb

08001ba4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	055b      	lsls	r3, r3, #21
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d011      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x46>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d00d      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x46>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d009      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x46>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d005      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x46>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d001      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x46>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2234      	movs	r2, #52	; 0x34
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x54>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0d0      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1f6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2234      	movs	r2, #52	; 0x34
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d000      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x6a>
 8001c3c:	e0b4      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a64      	ldr	r2, [pc, #400]	; (8001dd4 <HAL_ADC_ConfigChannel+0x200>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x76>
 8001c48:	e082      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	055b      	lsls	r3, r3, #21
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d037      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d033      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d02f      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d02b      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d027      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d023      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d01f      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	d01b      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2107      	movs	r1, #7
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d012      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2107      	movs	r1, #7
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d007      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0x120>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b11      	cmp	r3, #17
 8001cea:	d003      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0x120>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d163      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_ADC_ConfigChannel+0x204>)
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d009      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0x140>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d102      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x13a>
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	03db      	lsls	r3, r3, #15
 8001d0c:	e004      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x144>
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	045b      	lsls	r3, r3, #17
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x144>
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_ADC_ConfigChannel+0x204>)
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d14a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_ADC_ConfigChannel+0x208>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	492d      	ldr	r1, [pc, #180]	; (8001de0 <HAL_ADC_ConfigChannel+0x20c>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7fe f9eb 	bl	8000108 <__udivsi3>
 8001d32:	0003      	movs	r3, r0
 8001d34:	001a      	movs	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	189b      	adds	r3, r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x16e>
 8001d4e:	e035      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4099      	lsls	r1, r3
 8001d5e:	000b      	movs	r3, r1
 8001d60:	43d9      	mvns	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d007      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0x1ae>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d003      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0x1ae>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d11c      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_ADC_ConfigChannel+0x204>)
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d007      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x1ca>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b11      	cmp	r3, #17
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x1c6>
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_ADC_ConfigChannel+0x210>)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_ADC_ConfigChannel+0x214>)
 8001d9c:	e000      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_ADC_ConfigChannel+0x218>)
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_ADC_ConfigChannel+0x204>)
 8001da2:	400b      	ands	r3, r1
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e009      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	2220      	movs	r2, #32
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2234      	movs	r2, #52	; 0x34
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	00001001 	.word	0x00001001
 8001dd8:	40012708 	.word	0x40012708
 8001ddc:	20000024 	.word	0x20000024
 8001de0:	000f4240 	.word	0x000f4240
 8001de4:	ffbfffff 	.word	0xffbfffff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	ff7fffff 	.word	0xff7fffff

08001df0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2203      	movs	r2, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d112      	bne.n	8001e34 <ADC_Enable+0x44>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d009      	beq.n	8001e30 <ADC_Enable+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	401a      	ands	r2, r3
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d101      	bne.n	8001e34 <ADC_Enable+0x44>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <ADC_Enable+0x46>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d152      	bne.n	8001ee0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <ADC_Enable+0xfc>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	2201      	movs	r2, #1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e03f      	b.n	8001ee2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <ADC_Enable+0x100>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	491f      	ldr	r1, [pc, #124]	; (8001ef4 <ADC_Enable+0x104>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe f945 	bl	8000108 <__udivsi3>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e82:	e002      	b.n	8001e8a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e90:	f7ff fc98 	bl	80017c4 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e98:	e01b      	b.n	8001ed2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9a:	f7ff fc93 	bl	80017c4 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d914      	bls.n	8001ed2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00d      	beq.n	8001ed2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	2210      	movs	r2, #16
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e007      	b.n	8001ee2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1dc      	bne.n	8001e9a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	80000017 	.word	0x80000017
 8001ef0:	20000024 	.word	0x20000024
 8001ef4:	000f4240 	.word	0x000f4240

08001ef8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d140      	bne.n	8001f92 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	23c0      	movs	r3, #192	; 0xc0
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d12d      	bne.n	8001f88 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d129      	bne.n	8001f88 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d110      	bne.n	8001f70 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	210c      	movs	r1, #12
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <ADC_DMAConvCplt+0xb0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	2201      	movs	r2, #1
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f6e:	e00b      	b.n	8001f88 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2201      	movs	r2, #1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff fe0a 	bl	8001ba4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001f90:	e005      	b.n	8001f9e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	4798      	blx	r3
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	fffffefe 	.word	0xfffffefe

08001fac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff fdf9 	bl	8001bb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2204      	movs	r2, #4
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fde6 	bl	8001bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	0002      	movs	r2, r0
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b7f      	cmp	r3, #127	; 0x7f
 8002012:	d809      	bhi.n	8002028 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	001a      	movs	r2, r3
 800201a:	231f      	movs	r3, #31
 800201c:	401a      	ands	r2, r3
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__NVIC_EnableIRQ+0x30>)
 8002020:	2101      	movs	r1, #1
 8002022:	4091      	lsls	r1, r2
 8002024:	000a      	movs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
  }
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	0002      	movs	r2, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b7f      	cmp	r3, #127	; 0x7f
 8002048:	d828      	bhi.n	800209c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <__NVIC_SetPriority+0xd4>)
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	33c0      	adds	r3, #192	; 0xc0
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	589b      	ldr	r3, [r3, r2]
 800205a:	1dfa      	adds	r2, r7, #7
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	0011      	movs	r1, r2
 8002060:	2203      	movs	r2, #3
 8002062:	400a      	ands	r2, r1
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	401a      	ands	r2, r3
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0018      	movs	r0, r3
 8002080:	2303      	movs	r3, #3
 8002082:	4003      	ands	r3, r0
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002088:	481f      	ldr	r0, [pc, #124]	; (8002108 <__NVIC_SetPriority+0xd4>)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	430a      	orrs	r2, r1
 8002094:	33c0      	adds	r3, #192	; 0xc0
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800209a:	e031      	b.n	8002100 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <__NVIC_SetPriority+0xd8>)
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	0019      	movs	r1, r3
 80020a4:	230f      	movs	r3, #15
 80020a6:	400b      	ands	r3, r1
 80020a8:	3b08      	subs	r3, #8
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3306      	adds	r3, #6
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	3304      	adds	r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1dfa      	adds	r2, r7, #7
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	0011      	movs	r1, r2
 80020bc:	2203      	movs	r2, #3
 80020be:	400a      	ands	r2, r1
 80020c0:	00d2      	lsls	r2, r2, #3
 80020c2:	21ff      	movs	r1, #255	; 0xff
 80020c4:	4091      	lsls	r1, r2
 80020c6:	000a      	movs	r2, r1
 80020c8:	43d2      	mvns	r2, r2
 80020ca:	401a      	ands	r2, r3
 80020cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	019b      	lsls	r3, r3, #6
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	401a      	ands	r2, r3
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0018      	movs	r0, r3
 80020dc:	2303      	movs	r3, #3
 80020de:	4003      	ands	r3, r0
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <__NVIC_SetPriority+0xd8>)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	001c      	movs	r4, r3
 80020ec:	230f      	movs	r3, #15
 80020ee:	4023      	ands	r3, r4
 80020f0:	3b08      	subs	r3, #8
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	430a      	orrs	r2, r1
 80020f6:	3306      	adds	r3, #6
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	18c3      	adds	r3, r0, r3
 80020fc:	3304      	adds	r3, #4
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b003      	add	sp, #12
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	045b      	lsls	r3, r3, #17
 8002120:	429a      	cmp	r2, r3
 8002122:	d301      	bcc.n	8002128 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002124:	2301      	movs	r3, #1
 8002126:	e010      	b.n	800214a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <SysTick_Config+0x44>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	3a01      	subs	r2, #1
 800212e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002130:	2301      	movs	r3, #1
 8002132:	425b      	negs	r3, r3
 8002134:	2103      	movs	r1, #3
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff7c 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x44>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x44>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b002      	add	sp, #8
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	210f      	movs	r1, #15
 8002164:	187b      	adds	r3, r7, r1
 8002166:	1c02      	adds	r2, r0, #0
 8002168:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	187b      	adds	r3, r7, r1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	0002      	movs	r2, r0
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ff33 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ffaf 	bl	8002110 <SysTick_Config>
 80021b2:	0003      	movs	r3, r0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e015      	b.n	80021fa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe ffe7 	bl	80011b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_DAC_ConfigChannel+0x20>
 800221e:	2302      	movs	r3, #2
 8002220:	e029      	b.n	8002276 <HAL_DAC_ConfigChannel+0x74>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2202      	movs	r2, #2
 800222c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002236:	223e      	movs	r2, #62	; 0x3e
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4013      	ands	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b006      	add	sp, #24
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	795b      	ldrb	r3, [r3, #5]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_DAC_Start+0x16>
 8002290:	2302      	movs	r3, #2
 8002292:	e028      	b.n	80022e6 <HAL_DAC_Start+0x68>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	409a      	lsls	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10e      	bne.n	80022d8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	223c      	movs	r2, #60	; 0x3c
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b3c      	cmp	r3, #60	; 0x3c
 80022c6:	d107      	bne.n	80022d8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e036      	b.n	8002374 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2221      	movs	r2, #33	; 0x21
 800230a:	2102      	movs	r1, #2
 800230c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_DMA_Init+0x8c>)
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f9c4 	bl	80026e4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2221      	movs	r2, #33	; 0x21
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}  
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	ffffc00f 	.word	0xffffc00f

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800238e:	2317      	movs	r3, #23
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x24>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e04f      	b.n	8002444 <HAL_DMA_Start_IT+0xc4>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	2101      	movs	r1, #1
 80023aa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d13a      	bne.n	800242e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	2102      	movs	r1, #2
 80023be:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	438a      	bics	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f954 	bl	800268a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	210e      	movs	r1, #14
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00f      	b.n	800241c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	210a      	movs	r1, #10
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2104      	movs	r1, #4
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002436:	2317      	movs	r3, #23
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800243e:	2317      	movs	r3, #23
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
} 
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2221      	movs	r2, #33	; 0x21
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d008      	beq.n	8002472 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e020      	b.n	80024b4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	210e      	movs	r1, #14
 800247e:	438a      	bics	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	438a      	bics	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	2101      	movs	r1, #1
 800249c:	4091      	lsls	r1, r2
 800249e:	000a      	movs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2221      	movs	r2, #33	; 0x21
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	210f      	movs	r1, #15
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d006      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e028      	b.n	8002538 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	210e      	movs	r1, #14
 80024f2:	438a      	bics	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	438a      	bics	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2101      	movs	r1, #1
 8002510:	4091      	lsls	r1, r2
 8002512:	000a      	movs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2221      	movs	r2, #33	; 0x21
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	0010      	movs	r0, r2
 8002536:	4798      	blx	r3
    } 
  }
  return status;
 8002538:	230f      	movs	r3, #15
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2204      	movs	r2, #4
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	d024      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x72>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	d020      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2220      	movs	r2, #32
 800257e:	4013      	ands	r3, r2
 8002580:	d107      	bne.n	8002592 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2104      	movs	r1, #4
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2104      	movs	r1, #4
 800259c:	4091      	lsls	r1, r2
 800259e:	000a      	movs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_DMA_IRQHandler+0x66>
 80025aa:	e06a      	b.n	8002682 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	0010      	movs	r0, r2
 80025b4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80025b6:	e064      	b.n	8002682 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2202      	movs	r2, #2
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	d02b      	beq.n	8002620 <HAL_DMA_IRQHandler+0xda>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d027      	beq.n	8002620 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d10b      	bne.n	80025f4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	210a      	movs	r1, #10
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2221      	movs	r2, #33	; 0x21
 80025f0:	2101      	movs	r1, #1
 80025f2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	2102      	movs	r1, #2
 80025fe:	4091      	lsls	r1, r2
 8002600:	000a      	movs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d036      	beq.n	8002682 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	0010      	movs	r0, r2
 800261c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800261e:	e030      	b.n	8002682 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2208      	movs	r2, #8
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	d028      	beq.n	8002682 <HAL_DMA_IRQHandler+0x13c>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2208      	movs	r2, #8
 8002634:	4013      	ands	r3, r2
 8002636:	d024      	beq.n	8002682 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	210e      	movs	r1, #14
 8002644:	438a      	bics	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	2101      	movs	r1, #1
 8002652:	4091      	lsls	r1, r2
 8002654:	000a      	movs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2221      	movs	r2, #33	; 0x21
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	0010      	movs	r0, r2
 800267e:	4798      	blx	r3
    }
   }
}  
 8002680:	e7ff      	b.n	8002682 <HAL_DMA_IRQHandler+0x13c>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}

0800268a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	2101      	movs	r1, #1
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d108      	bne.n	80026ca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026c8:	e007      	b.n	80026da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	60da      	str	r2, [r3, #12]
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <DMA_CalcBaseAndBitshift+0x30>)
 80026f2:	4694      	mov	ip, r2
 80026f4:	4463      	add	r3, ip
 80026f6:	2114      	movs	r1, #20
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fd fd05 	bl	8000108 <__udivsi3>
 80026fe:	0003      	movs	r3, r0
 8002700:	009a      	lsls	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a03      	ldr	r2, [pc, #12]	; (8002718 <DMA_CalcBaseAndBitshift+0x34>)
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	bffdfff8 	.word	0xbffdfff8
 8002718:	40020000 	.word	0x40020000

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e14f      	b.n	80029cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4091      	lsls	r1, r2
 8002736:	000a      	movs	r2, r1
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d100      	bne.n	8002744 <HAL_GPIO_Init+0x28>
 8002742:	e140      	b.n	80029c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2203      	movs	r2, #3
 800274a:	4013      	ands	r3, r2
 800274c:	2b01      	cmp	r3, #1
 800274e:	d005      	beq.n	800275c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002758:	2b02      	cmp	r3, #2
 800275a:	d130      	bne.n	80027be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	409a      	lsls	r2, r3
 800276a:	0013      	movs	r3, r2
 800276c:	43da      	mvns	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002792:	2201      	movs	r2, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
 8002798:	0013      	movs	r3, r2
 800279a:	43da      	mvns	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	2201      	movs	r2, #1
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
 80027b0:	0013      	movs	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d017      	beq.n	80027fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	409a      	lsls	r2, r3
 80027d8:	0013      	movs	r3, r2
 80027da:	43da      	mvns	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2203      	movs	r2, #3
 8002800:	4013      	ands	r3, r2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d123      	bne.n	800284e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	58d3      	ldr	r3, [r2, r3]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2207      	movs	r2, #7
 8002818:	4013      	ands	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	43da      	mvns	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2107      	movs	r1, #7
 8002832:	400b      	ands	r3, r1
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	409a      	lsls	r2, r3
 8002838:	0013      	movs	r3, r2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	409a      	lsls	r2, r3
 800285c:	0013      	movs	r3, r2
 800285e:	43da      	mvns	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	401a      	ands	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	23c0      	movs	r3, #192	; 0xc0
 8002888:	029b      	lsls	r3, r3, #10
 800288a:	4013      	ands	r3, r2
 800288c:	d100      	bne.n	8002890 <HAL_GPIO_Init+0x174>
 800288e:	e09a      	b.n	80029c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002890:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_GPIO_Init+0x2c8>)
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_GPIO_Init+0x2c8>)
 8002896:	2101      	movs	r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
 800289c:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_GPIO_Init+0x2c8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a8:	4a4f      	ldr	r2, [pc, #316]	; (80029e8 <HAL_GPIO_Init+0x2cc>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2203      	movs	r2, #3
 80028ba:	4013      	ands	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	409a      	lsls	r2, r3
 80028c2:	0013      	movs	r3, r2
 80028c4:	43da      	mvns	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	2390      	movs	r3, #144	; 0x90
 80028d0:	05db      	lsls	r3, r3, #23
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x1e2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a44      	ldr	r2, [pc, #272]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x1de>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a43      	ldr	r2, [pc, #268]	; (80029f0 <HAL_GPIO_Init+0x2d4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x1da>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_GPIO_Init+0x2d8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x1d6>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e004      	b.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e002      	b.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x1e4>
 80028fe:	2300      	movs	r3, #0
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	2103      	movs	r1, #3
 8002904:	400a      	ands	r2, r1
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4093      	lsls	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002910:	4935      	ldr	r1, [pc, #212]	; (80029e8 <HAL_GPIO_Init+0x2cc>)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43da      	mvns	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	025b      	lsls	r3, r3, #9
 8002936:	4013      	ands	r3, r2
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43da      	mvns	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	4013      	ands	r3, r2
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43da      	mvns	r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	035b      	lsls	r3, r3, #13
 800298a:	4013      	ands	r3, r2
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	039b      	lsls	r3, r3, #14
 80029b4:	4013      	ands	r3, r2
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_GPIO_Init+0x2dc>)
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	40da      	lsrs	r2, r3
 80029d4:	1e13      	subs	r3, r2, #0
 80029d6:	d000      	beq.n	80029da <HAL_GPIO_Init+0x2be>
 80029d8:	e6a8      	b.n	800272c <HAL_GPIO_Init+0x10>
  } 
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b006      	add	sp, #24
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	48000400 	.word	0x48000400
 80029f0:	48000800 	.word	0x48000800
 80029f4:	48000c00 	.word	0x48000c00
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	000a      	movs	r2, r1
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	1cba      	adds	r2, r7, #2
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	4013      	ands	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a16:	230f      	movs	r3, #15
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002a28:	230f      	movs	r3, #15
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
  }
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b004      	add	sp, #16
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	0008      	movs	r0, r1
 8002a40:	0011      	movs	r1, r2
 8002a42:	1cbb      	adds	r3, r7, #2
 8002a44:	1c02      	adds	r2, r0, #0
 8002a46:	801a      	strh	r2, [r3, #0]
 8002a48:	1c7b      	adds	r3, r7, #1
 8002a4a:	1c0a      	adds	r2, r1, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4e:	1c7b      	adds	r3, r7, #1
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a56:	1cbb      	adds	r3, r7, #2
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a5e:	e003      	b.n	8002a68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a60:	1cbb      	adds	r3, r7, #2
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e082      	b.n	8002b88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2241      	movs	r2, #65	; 0x41
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fe fbd1 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2241      	movs	r2, #65	; 0x41
 8002aa2:	2124      	movs	r1, #36	; 0x24
 8002aa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4934      	ldr	r1, [pc, #208]	; (8002b90 <HAL_I2C_Init+0x120>)
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4931      	ldr	r1, [pc, #196]	; (8002b94 <HAL_I2C_Init+0x124>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d108      	bne.n	8002aee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	0209      	lsls	r1, r1, #8
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e007      	b.n	8002afe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2184      	movs	r1, #132	; 0x84
 8002af8:	0209      	lsls	r1, r1, #8
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d104      	bne.n	8002b10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	491f      	ldr	r1, [pc, #124]	; (8002b98 <HAL_I2C_Init+0x128>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	491a      	ldr	r1, [pc, #104]	; (8002b94 <HAL_I2C_Init+0x124>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69d9      	ldr	r1, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2241      	movs	r2, #65	; 0x41
 8002b74:	2120      	movs	r1, #32
 8002b76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2242      	movs	r2, #66	; 0x42
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	f0ffffff 	.word	0xf0ffffff
 8002b94:	ffff7fff 	.word	0xffff7fff
 8002b98:	02008000 	.word	0x02008000

08002b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2241      	movs	r2, #65	; 0x41
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d138      	bne.n	8002c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e032      	b.n	8002c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2240      	movs	r2, #64	; 0x40
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2241      	movs	r2, #65	; 0x41
 8002bcc:	2124      	movs	r1, #36	; 0x24
 8002bce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	438a      	bics	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4911      	ldr	r1, [pc, #68]	; (8002c30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2241      	movs	r2, #65	; 0x41
 8002c14:	2120      	movs	r1, #32
 8002c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b002      	add	sp, #8
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	ffffefff 	.word	0xffffefff

08002c34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2241      	movs	r2, #65	; 0x41
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d139      	bne.n	8002cbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	5c9b      	ldrb	r3, [r3, r2]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e033      	b.n	8002cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2241      	movs	r2, #65	; 0x41
 8002c64:	2124      	movs	r1, #36	; 0x24
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2241      	movs	r2, #65	; 0x41
 8002cae:	2120      	movs	r1, #32
 8002cb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b004      	add	sp, #16
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	fffff0ff 	.word	0xfffff0ff

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e301      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d100      	bne.n	8002cea <HAL_RCC_OscConfig+0x1e>
 8002ce8:	e08d      	b.n	8002e06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cea:	4bc3      	ldr	r3, [pc, #780]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	220c      	movs	r2, #12
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00e      	beq.n	8002d14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf6:	4bc0      	ldr	r3, [pc, #768]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x64>
 8002d02:	4bbd      	ldr	r3, [pc, #756]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	025b      	lsls	r3, r3, #9
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	025b      	lsls	r3, r3, #9
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4bb8      	ldr	r3, [pc, #736]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <HAL_RCC_OscConfig+0x56>
 8002d20:	e070      	b.n	8002e04 <HAL_RCC_OscConfig+0x138>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d000      	beq.n	8002d2c <HAL_RCC_OscConfig+0x60>
 8002d2a:	e06b      	b.n	8002e04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2d8      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_OscConfig+0x7c>
 8002d38:	4baf      	ldr	r3, [pc, #700]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4bae      	ldr	r3, [pc, #696]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	0249      	lsls	r1, r1, #9
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e02f      	b.n	8002da8 <HAL_RCC_OscConfig+0xdc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x9e>
 8002d50:	4ba9      	ldr	r3, [pc, #676]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4ba8      	ldr	r3, [pc, #672]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d56:	49a9      	ldr	r1, [pc, #676]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4ba6      	ldr	r3, [pc, #664]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4ba5      	ldr	r3, [pc, #660]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d62:	49a7      	ldr	r1, [pc, #668]	; (8003000 <HAL_RCC_OscConfig+0x334>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e01e      	b.n	8002da8 <HAL_RCC_OscConfig+0xdc>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10e      	bne.n	8002d90 <HAL_RCC_OscConfig+0xc4>
 8002d72:	4ba1      	ldr	r3, [pc, #644]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4ba0      	ldr	r3, [pc, #640]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	02c9      	lsls	r1, r1, #11
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	4b9d      	ldr	r3, [pc, #628]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	0249      	lsls	r1, r1, #9
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xdc>
 8002d90:	4b99      	ldr	r3, [pc, #612]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b98      	ldr	r3, [pc, #608]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	4999      	ldr	r1, [pc, #612]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	4b96      	ldr	r3, [pc, #600]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b95      	ldr	r3, [pc, #596]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002da2:	4997      	ldr	r1, [pc, #604]	; (8003000 <HAL_RCC_OscConfig+0x334>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d014      	beq.n	8002dda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fd08 	bl	80017c4 <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd03 	bl	80017c4 <HAL_GetTick>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e28a      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0xee>
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fcf3 	bl	80017c4 <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fcee 	bl	80017c4 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e275      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x118>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_RCC_OscConfig+0x146>
 8002e10:	e069      	b.n	8002ee6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e12:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	220c      	movs	r2, #12
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e1c:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	220c      	movs	r2, #12
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d11c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x196>
 8002e28:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	025b      	lsls	r3, r3, #9
 8002e30:	4013      	ands	r3, r2
 8002e32:	d116      	bne.n	8002e62 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e34:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x17e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e24b      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	22f8      	movs	r2, #248	; 0xf8
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00da      	lsls	r2, r3, #3
 8002e5a:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e60:	e041      	b.n	8002ee6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe fca5 	bl	80017c4 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe fca0 	bl	80017c4 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e227      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d0f1      	beq.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	22f8      	movs	r2, #248	; 0xf8
 8002ea2:	4393      	bics	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00da      	lsls	r2, r3, #3
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e018      	b.n	8002ee6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fc80 	bl	80017c4 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eca:	f7fe fc7b 	bl	80017c4 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e202      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f1      	bne.n	8002eca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	4013      	ands	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d019      	beq.n	8002f2c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	430a      	orrs	r2, r1
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fc5e 	bl	80017c4 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fc59 	bl	80017c4 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1e0      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d0f1      	beq.n	8002f0e <HAL_RCC_OscConfig+0x242>
 8002f2a:	e018      	b.n	8002f5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2c:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f30:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	438a      	bics	r2, r1
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fc44 	bl	80017c4 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fc3f 	bl	80017c4 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1c6      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1f1      	bne.n	8002f42 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d100      	bne.n	8002f6a <HAL_RCC_OscConfig+0x29e>
 8002f68:	e0b4      	b.n	80030d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	201f      	movs	r0, #31
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	055b      	lsls	r3, r3, #21
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d110      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0549      	lsls	r1, r1, #21
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	055b      	lsls	r3, r3, #21
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_RCC_OscConfig+0x338>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d11a      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_OscConfig+0x338>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_RCC_OscConfig+0x338>)
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	0049      	lsls	r1, r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fc03 	bl	80017c4 <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fe fbfe 	bl	80017c4 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e185      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_OscConfig+0x338>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10e      	bne.n	8003008 <HAL_RCC_OscConfig+0x33c>
 8002fea:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	621a      	str	r2, [r3, #32]
 8002ff6:	e035      	b.n	8003064 <HAL_RCC_OscConfig+0x398>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	fffeffff 	.word	0xfffeffff
 8003000:	fffbffff 	.word	0xfffbffff
 8003004:	40007000 	.word	0x40007000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x35e>
 8003010:	4bb6      	ldr	r3, [pc, #728]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	4bb5      	ldr	r3, [pc, #724]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	621a      	str	r2, [r3, #32]
 800301c:	4bb3      	ldr	r3, [pc, #716]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	4bb2      	ldr	r3, [pc, #712]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003022:	2104      	movs	r1, #4
 8003024:	438a      	bics	r2, r1
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	e01c      	b.n	8003064 <HAL_RCC_OscConfig+0x398>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x380>
 8003032:	4bae      	ldr	r3, [pc, #696]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	4bad      	ldr	r3, [pc, #692]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003038:	2104      	movs	r1, #4
 800303a:	430a      	orrs	r2, r1
 800303c:	621a      	str	r2, [r3, #32]
 800303e:	4bab      	ldr	r3, [pc, #684]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	4baa      	ldr	r3, [pc, #680]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003044:	2101      	movs	r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	621a      	str	r2, [r3, #32]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x398>
 800304c:	4ba7      	ldr	r3, [pc, #668]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	4ba6      	ldr	r3, [pc, #664]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	621a      	str	r2, [r3, #32]
 8003058:	4ba4      	ldr	r3, [pc, #656]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800305e:	2104      	movs	r1, #4
 8003060:	438a      	bics	r2, r1
 8003062:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d014      	beq.n	8003096 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe fbaa 	bl	80017c4 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	e009      	b.n	800308a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fba5 	bl	80017c4 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4a9b      	ldr	r2, [pc, #620]	; (80032f0 <HAL_RCC_OscConfig+0x624>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e12b      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	4b98      	ldr	r3, [pc, #608]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x3aa>
 8003094:	e013      	b.n	80030be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fb95 	bl	80017c4 <HAL_GetTick>
 800309a:	0003      	movs	r3, r0
 800309c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	e009      	b.n	80030b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fb90 	bl	80017c4 <HAL_GetTick>
 80030a4:	0002      	movs	r2, r0
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	4a91      	ldr	r2, [pc, #580]	; (80032f0 <HAL_RCC_OscConfig+0x624>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e116      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4013      	ands	r3, r2
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	4b87      	ldr	r3, [pc, #540]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030ce:	4989      	ldr	r1, [pc, #548]	; (80032f4 <HAL_RCC_OscConfig+0x628>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	4013      	ands	r3, r2
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12a      	bne.n	800313c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030e6:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	4b80      	ldr	r3, [pc, #512]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030ec:	2104      	movs	r1, #4
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030f2:	4b7e      	ldr	r3, [pc, #504]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f6:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fb61 	bl	80017c4 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003108:	f7fe fb5c 	bl	80017c4 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0e3      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800311a:	4b74      	ldr	r3, [pc, #464]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d0f1      	beq.n	8003108 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003124:	4b71      	ldr	r3, [pc, #452]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	22f8      	movs	r2, #248	; 0xf8
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	00da      	lsls	r2, r3, #3
 8003134:	4b6d      	ldr	r3, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003136:	430a      	orrs	r2, r1
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
 800313a:	e034      	b.n	80031a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	3305      	adds	r3, #5
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003144:	4b69      	ldr	r3, [pc, #420]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800314a:	2104      	movs	r1, #4
 800314c:	438a      	bics	r2, r1
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	22f8      	movs	r2, #248	; 0xf8
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	4b62      	ldr	r3, [pc, #392]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
 8003166:	e01e      	b.n	80031a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003168:	4b60      	ldr	r3, [pc, #384]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800316e:	2104      	movs	r1, #4
 8003170:	430a      	orrs	r2, r1
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003174:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003178:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800317a:	2101      	movs	r1, #1
 800317c:	438a      	bics	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7fe fb20 	bl	80017c4 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800318a:	f7fe fb1b 	bl	80017c4 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0a2      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1f1      	bne.n	800318a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d100      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4e4>
 80031ae:	e097      	b.n	80032e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	220c      	movs	r2, #12
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d100      	bne.n	80031be <HAL_RCC_OscConfig+0x4f2>
 80031bc:	e06b      	b.n	8003296 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d14c      	bne.n	8003260 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80031cc:	494a      	ldr	r1, [pc, #296]	; (80032f8 <HAL_RCC_OscConfig+0x62c>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe faf7 	bl	80017c4 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe faf2 	bl	80017c4 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e079      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	049b      	lsls	r3, r3, #18
 80031f6:	4013      	ands	r3, r2
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fa:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	220f      	movs	r2, #15
 8003200:	4393      	bics	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800320a:	430a      	orrs	r2, r1
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_RCC_OscConfig+0x630>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	431a      	orrs	r2, r3
 8003222:	4b32      	ldr	r3, [pc, #200]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800322e:	2180      	movs	r1, #128	; 0x80
 8003230:	0449      	lsls	r1, r1, #17
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fac5 	bl	80017c4 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fac0 	bl	80017c4 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e047      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	049b      	lsls	r3, r3, #18
 800325a:	4013      	ands	r3, r2
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x574>
 800325e:	e03f      	b.n	80032e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 8003266:	4924      	ldr	r1, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x62c>)
 8003268:	400a      	ands	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe faaa 	bl	80017c4 <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe faa5 	bl	80017c4 <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e02c      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	049b      	lsls	r3, r3, #18
 8003290:	4013      	ands	r3, r2
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x5aa>
 8003294:	e024      	b.n	80032e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e01f      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_RCC_OscConfig+0x620>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	025b      	lsls	r3, r3, #9
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d10e      	bne.n	80032dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	220f      	movs	r2, #15
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	23f0      	movs	r3, #240	; 0xf0
 80032d0:	039b      	lsls	r3, r3, #14
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b008      	add	sp, #32
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	40021000 	.word	0x40021000
 80032f0:	00001388 	.word	0x00001388
 80032f4:	efffffff 	.word	0xefffffff
 80032f8:	feffffff 	.word	0xfeffffff
 80032fc:	ffc2ffff 	.word	0xffc2ffff

08003300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b3      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d911      	bls.n	8003346 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	4393      	bics	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	4b55      	ldr	r3, [pc, #340]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09a      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2202      	movs	r2, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d015      	beq.n	800337c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2204      	movs	r2, #4
 8003356:	4013      	ands	r3, r2
 8003358:	d006      	beq.n	8003368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800335a:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003360:	21e0      	movs	r1, #224	; 0xe0
 8003362:	00c9      	lsls	r1, r1, #3
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	22f0      	movs	r2, #240	; 0xf0
 800336e:	4393      	bics	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	4013      	ands	r3, r2
 8003398:	d114      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06e      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	049b      	lsls	r3, r3, #18
 80033ae:	4013      	ands	r3, r2
 80033b0:	d108      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e062      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e05b      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2203      	movs	r2, #3
 80033ca:	4393      	bics	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fe f9f4 	bl	80017c4 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e0:	e009      	b.n	80033f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e2:	f7fe f9ef 	bl	80017c4 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_RCC_ClockConfig+0x18c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e042      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	220c      	movs	r2, #12
 80033fc:	401a      	ands	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1ec      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d211      	bcs.n	800343a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4393      	bics	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x184>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d001      	beq.n	800343a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e020      	b.n	800347c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_RCC_ClockConfig+0x190>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003458:	f000 f820 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345c:	0001      	movs	r1, r0
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x188>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	220f      	movs	r2, #15
 8003466:	4013      	ands	r3, r2
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x194>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	000a      	movs	r2, r1
 800346e:	40da      	lsrs	r2, r3
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x198>)
 8003472:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003474:	2003      	movs	r0, #3
 8003476:	f7fe f95f 	bl	8001738 <HAL_InitTick>
  
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40022000 	.word	0x40022000
 8003488:	40021000 	.word	0x40021000
 800348c:	00001388 	.word	0x00001388
 8003490:	fffff8ff 	.word	0xfffff8ff
 8003494:	080060b0 	.word	0x080060b0
 8003498:	20000024 	.word	0x20000024

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b08f      	sub	sp, #60	; 0x3c
 80034a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034a2:	2314      	movs	r3, #20
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034aa:	c313      	stmia	r3!, {r0, r1, r4}
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034b6:	c313      	stmia	r3!, {r0, r1, r4}
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c4:	2300      	movs	r3, #0
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034d0:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	220c      	movs	r2, #12
 80034da:	4013      	ands	r3, r2
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d002      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d003      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x50>
 80034e4:	e02d      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034ea:	e02d      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	220f      	movs	r2, #15
 80034f2:	4013      	ands	r3, r2
 80034f4:	2214      	movs	r2, #20
 80034f6:	18ba      	adds	r2, r7, r2
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	220f      	movs	r2, #15
 8003502:	4013      	ands	r3, r2
 8003504:	1d3a      	adds	r2, r7, #4
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800350a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	025b      	lsls	r3, r3, #9
 8003510:	4013      	ands	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003516:	4812      	ldr	r0, [pc, #72]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003518:	f7fc fdf6 	bl	8000108 <__udivsi3>
 800351c:	0003      	movs	r3, r0
 800351e:	001a      	movs	r2, r3
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	4353      	muls	r3, r2
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
 8003526:	e009      	b.n	800353c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352a:	000a      	movs	r2, r1
 800352c:	0152      	lsls	r2, r2, #5
 800352e:	1a52      	subs	r2, r2, r1
 8003530:	0193      	lsls	r3, r2, #6
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	185b      	adds	r3, r3, r1
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003540:	e002      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003546:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b00f      	add	sp, #60	; 0x3c
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	0800608c 	.word	0x0800608c
 8003558:	0800609c 	.word	0x0800609c
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b02      	ldr	r3, [pc, #8]	; (8003574 <HAL_RCC_GetHCLKFreq+0x10>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000024 	.word	0x20000024

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800357c:	f7ff fff2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003580:	0001      	movs	r1, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	2207      	movs	r2, #7
 800358a:	4013      	ands	r3, r2
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	40d9      	lsrs	r1, r3
 8003592:	000b      	movs	r3, r1
}    
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	40021000 	.word	0x40021000
 80035a0:	080060c0 	.word	0x080060c0

080035a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	025b      	lsls	r3, r3, #9
 80035bc:	4013      	ands	r3, r2
 80035be:	d100      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035c0:	e08e      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2017      	movs	r0, #23
 80035c4:	183b      	adds	r3, r7, r0
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	055b      	lsls	r3, r3, #21
 80035d2:	4013      	ands	r3, r2
 80035d4:	d110      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	0549      	lsls	r1, r1, #21
 80035e0:	430a      	orrs	r2, r1
 80035e2:	61da      	str	r2, [r3, #28]
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	055b      	lsls	r3, r3, #21
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	183b      	adds	r3, r7, r0
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b54      	ldr	r3, [pc, #336]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d11a      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003604:	4b51      	ldr	r3, [pc, #324]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	0049      	lsls	r1, r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe f8d7 	bl	80017c4 <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	e008      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fe f8d2 	bl	80017c4 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e087      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d0f0      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800363a:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800363c:	6a1a      	ldr	r2, [r3, #32]
 800363e:	23c0      	movs	r3, #192	; 0xc0
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d034      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	23c0      	movs	r3, #192	; 0xc0
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4013      	ands	r3, r2
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	429a      	cmp	r2, r3
 800365a:	d02c      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800365c:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0249      	lsls	r1, r1, #9
 8003670:	430a      	orrs	r2, r1
 8003672:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003674:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	4b33      	ldr	r3, [pc, #204]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800367a:	4936      	ldr	r1, [pc, #216]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800367c:	400a      	ands	r2, r1
 800367e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe f899 	bl	80017c4 <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe f894 	bl	80017c4 <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	4a2d      	ldr	r2, [pc, #180]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e048      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a25      	ldr	r2, [pc, #148]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ca:	2317      	movs	r3, #23
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036da:	4920      	ldr	r1, [pc, #128]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036dc:	400a      	ands	r2, r1
 80036de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	2203      	movs	r2, #3
 80036f0:	4393      	bics	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2220      	movs	r2, #32
 8003704:	4013      	ands	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2210      	movs	r2, #16
 800370e:	4393      	bics	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003718:	430a      	orrs	r2, r1
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4013      	ands	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	2240      	movs	r2, #64	; 0x40
 800372e:	4393      	bics	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003738:	430a      	orrs	r2, r1
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	fffffcff 	.word	0xfffffcff
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	00001388 	.word	0x00001388
 800375c:	efffffff 	.word	0xefffffff

08003760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0a8      	b.n	80038c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	2382      	movs	r3, #130	; 0x82
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	429a      	cmp	r2, r3
 8003784:	d009      	beq.n	800379a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	61da      	str	r2, [r3, #28]
 800378c:	e005      	b.n	800379a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	225d      	movs	r2, #93	; 0x5d
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	225c      	movs	r2, #92	; 0x5c
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fd90 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	225d      	movs	r2, #93	; 0x5d
 80037c0:	2102      	movs	r1, #2
 80037c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	438a      	bics	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	23e0      	movs	r3, #224	; 0xe0
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	429a      	cmp	r2, r3
 80037de:	d902      	bls.n	80037e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e002      	b.n	80037ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	015b      	lsls	r3, r3, #5
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	23f0      	movs	r3, #240	; 0xf0
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d008      	beq.n	800380a <HAL_SPI_Init+0xaa>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	23e0      	movs	r3, #224	; 0xe0
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	429a      	cmp	r2, r3
 8003802:	d002      	beq.n	800380a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	2382      	movs	r3, #130	; 0x82
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	2384      	movs	r3, #132	; 0x84
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	400b      	ands	r3, r1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2102      	movs	r1, #2
 8003826:	400b      	ands	r3, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2101      	movs	r1, #1
 8003830:	400b      	ands	r3, r1
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6999      	ldr	r1, [r3, #24]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	400b      	ands	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2138      	movs	r1, #56	; 0x38
 8003846:	400b      	ands	r3, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	400b      	ands	r3, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	0011      	movs	r1, r2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	401a      	ands	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	2204      	movs	r2, #4
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2110      	movs	r1, #16
 8003878:	400b      	ands	r3, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	2108      	movs	r1, #8
 8003882:	400b      	ands	r3, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68d9      	ldr	r1, [r3, #12]
 800388a:	23f0      	movs	r3, #240	; 0xf0
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	400b      	ands	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	0011      	movs	r1, r2
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	015b      	lsls	r3, r3, #5
 800389a:	401a      	ands	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4907      	ldr	r1, [pc, #28]	; (80038cc <HAL_SPI_Init+0x16c>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	225d      	movs	r2, #93	; 0x5d
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b004      	add	sp, #16
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	fffff7ff 	.word	0xfffff7ff

080038d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e0:	231f      	movs	r3, #31
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	225c      	movs	r2, #92	; 0x5c
 80038ec:	5c9b      	ldrb	r3, [r3, r2]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_Transmit+0x26>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e140      	b.n	8003b78 <HAL_SPI_Transmit+0x2a8>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	225c      	movs	r2, #92	; 0x5c
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038fe:	f7fd ff61 	bl	80017c4 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003906:	2316      	movs	r3, #22
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	1dba      	adds	r2, r7, #6
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	225d      	movs	r2, #93	; 0x5d
 8003914:	5c9b      	ldrb	r3, [r3, r2]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d004      	beq.n	8003926 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800391c:	231f      	movs	r3, #31
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2202      	movs	r2, #2
 8003922:	701a      	strb	r2, [r3, #0]
    goto error;
 8003924:	e11d      	b.n	8003b62 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_SPI_Transmit+0x64>
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003934:	231f      	movs	r3, #31
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
    goto error;
 800393c:	e111      	b.n	8003b62 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	225d      	movs	r2, #93	; 0x5d
 8003942:	2103      	movs	r1, #3
 8003944:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1dba      	adds	r2, r7, #6
 8003956:	8812      	ldrh	r2, [r2, #0]
 8003958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1dba      	adds	r2, r7, #6
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2244      	movs	r2, #68	; 0x44
 800396c:	2100      	movs	r1, #0
 800396e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2246      	movs	r2, #70	; 0x46
 8003974:	2100      	movs	r1, #0
 8003976:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	429a      	cmp	r2, r3
 800398e:	d110      	bne.n	80039b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	01c9      	lsls	r1, r1, #7
 80039ae:	430a      	orrs	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2240      	movs	r2, #64	; 0x40
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d007      	beq.n	80039d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2140      	movs	r1, #64	; 0x40
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	23e0      	movs	r3, #224	; 0xe0
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	429a      	cmp	r2, r3
 80039da:	d94e      	bls.n	8003a7a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_SPI_Transmit+0x11e>
 80039e4:	2316      	movs	r3, #22
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d13f      	bne.n	8003a6e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a12:	e02c      	b.n	8003a6e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d112      	bne.n	8003a48 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a46:	e012      	b.n	8003a6e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a48:	f7fd febc 	bl	80017c4 <HAL_GetTick>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d802      	bhi.n	8003a5e <HAL_SPI_Transmit+0x18e>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_Transmit+0x194>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003a64:	231f      	movs	r3, #31
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2203      	movs	r2, #3
 8003a6a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a6c:	e079      	b.n	8003b62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1cd      	bne.n	8003a14 <HAL_SPI_Transmit+0x144>
 8003a78:	e04f      	b.n	8003b1a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_SPI_Transmit+0x1bc>
 8003a82:	2316      	movs	r3, #22
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d141      	bne.n	8003b10 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003ab2:	e02d      	b.n	8003b10 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2202      	movs	r2, #2
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d113      	bne.n	8003aea <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ae8:	e012      	b.n	8003b10 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aea:	f7fd fe6b 	bl	80017c4 <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d802      	bhi.n	8003b00 <HAL_SPI_Transmit+0x230>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Transmit+0x236>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003b06:	231f      	movs	r3, #31
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b0e:	e028      	b.n	8003b62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1cc      	bne.n	8003ab4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f95d 	bl	8003de0 <SPI_EndRxTxTransaction>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003b56:	231f      	movs	r3, #31
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e000      	b.n	8003b62 <HAL_SPI_Transmit+0x292>
  }

error:
 8003b60:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	225d      	movs	r2, #93	; 0x5d
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	225c      	movs	r2, #92	; 0x5c
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	781b      	ldrb	r3, [r3, #0]
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b008      	add	sp, #32
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b90:	f7fd fe18 	bl	80017c4 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba0:	f7fd fe10 	bl	80017c4 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ba8:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	015b      	lsls	r3, r3, #5
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	4353      	muls	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb6:	e058      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	d055      	beq.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bbe:	f7fd fe01 	bl	80017c4 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d902      	bls.n	8003bd4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d142      	bne.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	21e0      	movs	r1, #224	; 0xe0
 8003be0:	438a      	bics	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	2382      	movs	r3, #130	; 0x82
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d113      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d005      	beq.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2140      	movs	r1, #64	; 0x40
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	019b      	lsls	r3, r3, #6
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d110      	bne.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	491a      	ldr	r1, [pc, #104]	; (8003c98 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0189      	lsls	r1, r1, #6
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	225d      	movs	r2, #93	; 0x5d
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	225c      	movs	r2, #92	; 0x5c
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e017      	b.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	425a      	negs	r2, r3
 8003c7a:	4153      	adcs	r3, r2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	001a      	movs	r2, r3
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d197      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b008      	add	sp, #32
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000024 	.word	0x20000024
 8003c98:	ffffdfff 	.word	0xffffdfff

08003c9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003caa:	2317      	movs	r3, #23
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cb2:	f7fd fd87 	bl	80017c4 <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cc2:	f7fd fd7f 	bl	80017c4 <HAL_GetTick>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	0013      	movs	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	00da      	lsls	r2, r3, #3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4353      	muls	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ce8:	e068      	b.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	23c0      	movs	r3, #192	; 0xc0
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d10a      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	2117      	movs	r1, #23
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d055      	beq.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d10:	f7fd fd58 	bl	80017c4 <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d902      	bls.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d142      	bne.n	8003dac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	21e0      	movs	r1, #224	; 0xe0
 8003d32:	438a      	bics	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	2382      	movs	r3, #130	; 0x82
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d113      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d005      	beq.n	8003d5a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d107      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	438a      	bics	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d110      	bne.n	8003d98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4916      	ldr	r1, [pc, #88]	; (8003ddc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0189      	lsls	r1, r1, #6
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	225d      	movs	r2, #93	; 0x5d
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	225c      	movs	r2, #92	; 0x5c
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e010      	b.n	8003dce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d18e      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b00a      	add	sp, #40	; 0x28
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	20000024 	.word	0x20000024
 8003ddc:	ffffdfff 	.word	0xffffdfff

08003de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	23c0      	movs	r3, #192	; 0xc0
 8003df0:	0159      	lsls	r1, r3, #5
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	0013      	movs	r3, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f7ff ff4e 	bl	8003c9c <SPI_WaitFifoStateUntilTimeout>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d007      	beq.n	8003e14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	2220      	movs	r2, #32
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e027      	b.n	8003e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	f7ff fead 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d007      	beq.n	8003e3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	2220      	movs	r2, #32
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e014      	b.n	8003e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	23c0      	movs	r3, #192	; 0xc0
 8003e3e:	00d9      	lsls	r1, r3, #3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	0013      	movs	r3, r2
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f7ff ff27 	bl	8003c9c <SPI_WaitFifoStateUntilTimeout>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d007      	beq.n	8003e62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	2220      	movs	r2, #32
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e000      	b.n	8003e64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e042      	b.n	8003f04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223d      	movs	r2, #61	; 0x3d
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223c      	movs	r2, #60	; 0x3c
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7fd faa9 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223d      	movs	r2, #61	; 0x3d
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	0019      	movs	r1, r3
 8003eac:	0010      	movs	r0, r2
 8003eae:	f000 fc55 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2246      	movs	r2, #70	; 0x46
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223e      	movs	r2, #62	; 0x3e
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223f      	movs	r2, #63	; 0x3f
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2241      	movs	r2, #65	; 0x41
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2242      	movs	r2, #66	; 0x42
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2243      	movs	r2, #67	; 0x43
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2244      	movs	r2, #68	; 0x44
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2245      	movs	r2, #69	; 0x45
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	223d      	movs	r2, #61	; 0x3d
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	230f      	movs	r3, #15
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <HAL_TIM_OC_Start_IT+0x2a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	223e      	movs	r2, #62	; 0x3e
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	4193      	sbcs	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e01f      	b.n	8003f76 <HAL_TIM_OC_Start_IT+0x6a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIM_OC_Start_IT+0x42>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	223f      	movs	r2, #63	; 0x3f
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	4193      	sbcs	r3, r2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e013      	b.n	8003f76 <HAL_TIM_OC_Start_IT+0x6a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d108      	bne.n	8003f66 <HAL_TIM_OC_Start_IT+0x5a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2240      	movs	r2, #64	; 0x40
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	4193      	sbcs	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e007      	b.n	8003f76 <HAL_TIM_OC_Start_IT+0x6a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2241      	movs	r2, #65	; 0x41
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	4193      	sbcs	r3, r2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0b7      	b.n	80040ee <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_OC_Start_IT+0x82>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	223e      	movs	r2, #62	; 0x3e
 8003f88:	2102      	movs	r1, #2
 8003f8a:	5499      	strb	r1, [r3, r2]
 8003f8c:	e013      	b.n	8003fb6 <HAL_TIM_OC_Start_IT+0xaa>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_OC_Start_IT+0x92>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	223f      	movs	r2, #63	; 0x3f
 8003f98:	2102      	movs	r1, #2
 8003f9a:	5499      	strb	r1, [r3, r2]
 8003f9c:	e00b      	b.n	8003fb6 <HAL_TIM_OC_Start_IT+0xaa>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_OC_Start_IT+0xa2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	2102      	movs	r1, #2
 8003faa:	5499      	strb	r1, [r3, r2]
 8003fac:	e003      	b.n	8003fb6 <HAL_TIM_OC_Start_IT+0xaa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2241      	movs	r2, #65	; 0x41
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d02a      	beq.n	8004012 <HAL_TIM_OC_Start_IT+0x106>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b0c      	cmp	r3, #12
 8003fc0:	d830      	bhi.n	8004024 <HAL_TIM_OC_Start_IT+0x118>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d01b      	beq.n	8004000 <HAL_TIM_OC_Start_IT+0xf4>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d82a      	bhi.n	8004024 <HAL_TIM_OC_Start_IT+0x118>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_TIM_OC_Start_IT+0xd0>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d009      	beq.n	8003fee <HAL_TIM_OC_Start_IT+0xe2>
 8003fda:	e023      	b.n	8004024 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]
      break;
 8003fec:	e01f      	b.n	800402e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	60da      	str	r2, [r3, #12]
      break;
 8003ffe:	e016      	b.n	800402e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2108      	movs	r1, #8
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]
      break;
 8004010:	e00d      	b.n	800402e <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2110      	movs	r1, #16
 800401e:	430a      	orrs	r2, r1
 8004020:	60da      	str	r2, [r3, #12]
      break;
 8004022:	e004      	b.n	800402e <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004024:	230f      	movs	r3, #15
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
      break;
 800402c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800402e:	230f      	movs	r3, #15
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d157      	bne.n	80040e8 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	0018      	movs	r0, r3
 8004042:	f000 fea1 	bl	8004d88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_TIM_OC_Start_IT+0x1ec>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIM_OC_Start_IT+0x162>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_TIM_OC_Start_IT+0x1f0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIM_OC_Start_IT+0x162>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_OC_Start_IT+0x162>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_TIM_OC_Start_IT+0x1f8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d101      	bne.n	8004072 <HAL_TIM_OC_Start_IT+0x166>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_TIM_OC_Start_IT+0x168>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2180      	movs	r1, #128	; 0x80
 8004084:	0209      	lsls	r1, r1, #8
 8004086:	430a      	orrs	r2, r1
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00f      	beq.n	80040b4 <HAL_TIM_OC_Start_IT+0x1a8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	05db      	lsls	r3, r3, #23
 800409c:	429a      	cmp	r2, r3
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_OC_Start_IT+0x1a8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_TIM_OC_Start_IT+0x1fc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_OC_Start_IT+0x1a8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_TIM_OC_Start_IT+0x1f0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2207      	movs	r2, #7
 80040bc:	4013      	ands	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d010      	beq.n	80040e8 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e007      	b.n	80040e8 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2101      	movs	r1, #1
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	40000400 	.word	0x40000400

0800410c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e042      	b.n	80041a4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223d      	movs	r2, #61	; 0x3d
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223c      	movs	r2, #60	; 0x3c
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f839 	bl	80041ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	223d      	movs	r2, #61	; 0x3d
 800413e:	2102      	movs	r1, #2
 8004140:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f000 fb05 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2246      	movs	r2, #70	; 0x46
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223e      	movs	r2, #62	; 0x3e
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223f      	movs	r2, #63	; 0x3f
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2241      	movs	r2, #65	; 0x41
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2242      	movs	r2, #66	; 0x42
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2243      	movs	r2, #67	; 0x43
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2244      	movs	r2, #68	; 0x44
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2245      	movs	r2, #69	; 0x45
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223d      	movs	r2, #61	; 0x3d
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2202      	movs	r2, #2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d124      	bne.n	800421c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2202      	movs	r2, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11d      	bne.n	800421c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2203      	movs	r2, #3
 80041e6:	4252      	negs	r2, r2
 80041e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2203      	movs	r2, #3
 80041f8:	4013      	ands	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 fa94 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 8004204:	e007      	b.n	8004216 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f7fc f809 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fa93 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2204      	movs	r2, #4
 8004224:	4013      	ands	r3, r2
 8004226:	2b04      	cmp	r3, #4
 8004228:	d125      	bne.n	8004276 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2204      	movs	r2, #4
 8004232:	4013      	ands	r3, r2
 8004234:	2b04      	cmp	r3, #4
 8004236:	d11e      	bne.n	8004276 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2205      	movs	r2, #5
 800423e:	4252      	negs	r2, r2
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	23c0      	movs	r3, #192	; 0xc0
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fa67 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 800425e:	e007      	b.n	8004270 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f7fb ffdc 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f000 fa66 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2208      	movs	r2, #8
 800427e:	4013      	ands	r3, r2
 8004280:	2b08      	cmp	r3, #8
 8004282:	d124      	bne.n	80042ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2208      	movs	r2, #8
 800428c:	4013      	ands	r3, r2
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11d      	bne.n	80042ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2209      	movs	r2, #9
 8004298:	4252      	negs	r2, r2
 800429a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4013      	ands	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fa3b 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fb ffb0 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fa3a 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2210      	movs	r2, #16
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d125      	bne.n	8004328 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2210      	movs	r2, #16
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d11e      	bne.n	8004328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2211      	movs	r2, #17
 80042f0:	4252      	negs	r2, r2
 80042f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2208      	movs	r2, #8
 80042f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	23c0      	movs	r3, #192	; 0xc0
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 fa0e 	bl	800472c <HAL_TIM_IC_CaptureCallback>
 8004310:	e007      	b.n	8004322 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f7fb ff83 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 fa0d 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10f      	bne.n	8004356 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	4013      	ands	r3, r2
 8004340:	2b01      	cmp	r3, #1
 8004342:	d108      	bne.n	8004356 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2202      	movs	r2, #2
 800434a:	4252      	negs	r2, r2
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f9e3 	bl	800471c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	4013      	ands	r3, r2
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d10f      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	4013      	ands	r3, r2
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d108      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2281      	movs	r2, #129	; 0x81
 8004378:	4252      	negs	r2, r2
 800437a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fdea 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	4013      	ands	r3, r2
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d10f      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2240      	movs	r2, #64	; 0x40
 800439a:	4013      	ands	r3, r2
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d108      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2241      	movs	r2, #65	; 0x41
 80043a6:	4252      	negs	r2, r2
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f9cd 	bl	800474c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2220      	movs	r2, #32
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d10f      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d108      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2221      	movs	r2, #33	; 0x21
 80043d4:	4252      	negs	r2, r2
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 fdb4 	bl	8004f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2317      	movs	r3, #23
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	223c      	movs	r2, #60	; 0x3c
 8004400:	5c9b      	ldrb	r3, [r3, r2]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004406:	2302      	movs	r3, #2
 8004408:	e0ad      	b.n	8004566 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	223c      	movs	r2, #60	; 0x3c
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d100      	bne.n	800441a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004418:	e076      	b.n	8004508 <HAL_TIM_PWM_ConfigChannel+0x120>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b0c      	cmp	r3, #12
 800441e:	d900      	bls.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004420:	e095      	b.n	800454e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d04e      	beq.n	80044c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b08      	cmp	r3, #8
 800442c:	d900      	bls.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x48>
 800442e:	e08e      	b.n	800454e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d021      	beq.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x98>
 800443c:	e087      	b.n	800454e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	0011      	movs	r1, r2
 8004446:	0018      	movs	r0, r3
 8004448:	f000 fa08 	bl	800485c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2108      	movs	r1, #8
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2104      	movs	r1, #4
 8004468:	438a      	bics	r2, r1
 800446a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	619a      	str	r2, [r3, #24]
      break;
 800447e:	e06b      	b.n	8004558 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	0011      	movs	r1, r2
 8004488:	0018      	movs	r0, r3
 800448a:	f000 fa6f 	bl	800496c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0109      	lsls	r1, r1, #4
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4931      	ldr	r1, [pc, #196]	; (8004570 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6999      	ldr	r1, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	619a      	str	r2, [r3, #24]
      break;
 80044c4:	e048      	b.n	8004558 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	0011      	movs	r1, r2
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 fad0 	bl	8004a74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2108      	movs	r1, #8
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2104      	movs	r1, #4
 80044f0:	438a      	bics	r2, r1
 80044f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69d9      	ldr	r1, [r3, #28]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	61da      	str	r2, [r3, #28]
      break;
 8004506:	e027      	b.n	8004558 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fb35 	bl	8004b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	0109      	lsls	r1, r1, #4
 8004524:	430a      	orrs	r2, r1
 8004526:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	490f      	ldr	r1, [pc, #60]	; (8004570 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004534:	400a      	ands	r2, r1
 8004536:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69d9      	ldr	r1, [r3, #28]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]
      break;
 800454c:	e004      	b.n	8004558 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800454e:	2317      	movs	r3, #23
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
      break;
 8004556:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	223c      	movs	r2, #60	; 0x3c
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

  return status;
 8004560:	2317      	movs	r3, #23
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b006      	add	sp, #24
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	fffffbff 	.word	0xfffffbff

08004574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	230f      	movs	r3, #15
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	223c      	movs	r2, #60	; 0x3c
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x20>
 8004590:	2302      	movs	r3, #2
 8004592:	e0bc      	b.n	800470e <HAL_TIM_ConfigClockSource+0x19a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223c      	movs	r2, #60	; 0x3c
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	223d      	movs	r2, #61	; 0x3d
 80045a0:	2102      	movs	r1, #2
 80045a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2277      	movs	r2, #119	; 0x77
 80045b0:	4393      	bics	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a58      	ldr	r2, [pc, #352]	; (8004718 <HAL_TIM_ConfigClockSource+0x1a4>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	0192      	lsls	r2, r2, #6
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d040      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0xde>
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	0192      	lsls	r2, r2, #6
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d900      	bls.n	80045da <HAL_TIM_ConfigClockSource+0x66>
 80045d8:	e088      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	0152      	lsls	r2, r2, #5
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <HAL_TIM_ConfigClockSource+0x70>
 80045e2:	e088      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x182>
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	0152      	lsls	r2, r2, #5
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d900      	bls.n	80045ee <HAL_TIM_ConfigClockSource+0x7a>
 80045ec:	e07e      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045ee:	2b70      	cmp	r3, #112	; 0x70
 80045f0:	d018      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0xb0>
 80045f2:	d900      	bls.n	80045f6 <HAL_TIM_ConfigClockSource+0x82>
 80045f4:	e07a      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045f6:	2b60      	cmp	r3, #96	; 0x60
 80045f8:	d04f      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x126>
 80045fa:	d900      	bls.n	80045fe <HAL_TIM_ConfigClockSource+0x8a>
 80045fc:	e076      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045fe:	2b50      	cmp	r3, #80	; 0x50
 8004600:	d03b      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x106>
 8004602:	d900      	bls.n	8004606 <HAL_TIM_ConfigClockSource+0x92>
 8004604:	e072      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d057      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x146>
 800460a:	d900      	bls.n	800460e <HAL_TIM_ConfigClockSource+0x9a>
 800460c:	e06e      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	d063      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004612:	d86b      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d060      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004618:	d868      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d05d      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 800461e:	2b10      	cmp	r3, #16
 8004620:	d05b      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004622:	e063      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f000 fb88 	bl	8004d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2277      	movs	r2, #119	; 0x77
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e052      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f000 fb71 	bl	8004d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	01c9      	lsls	r1, r1, #7
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
      break;
 8004678:	e03e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	001a      	movs	r2, r3
 8004688:	f000 fae4 	bl	8004c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2150      	movs	r1, #80	; 0x50
 8004692:	0018      	movs	r0, r3
 8004694:	f000 fb3e 	bl	8004d14 <TIM_ITRx_SetConfig>
      break;
 8004698:	e02e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	001a      	movs	r2, r3
 80046a8:	f000 fb02 	bl	8004cb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2160      	movs	r1, #96	; 0x60
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 fb2e 	bl	8004d14 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e01e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	001a      	movs	r2, r3
 80046c8:	f000 fac4 	bl	8004c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 fb1e 	bl	8004d14 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e00e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	0019      	movs	r1, r3
 80046e4:	0010      	movs	r0, r2
 80046e6:	f000 fb15 	bl	8004d14 <TIM_ITRx_SetConfig>
      break;
 80046ea:	e005      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046ec:	230f      	movs	r3, #15
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
      break;
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223d      	movs	r2, #61	; 0x3d
 80046fc:	2101      	movs	r1, #1
 80046fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	223c      	movs	r2, #60	; 0x3c
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]

  return status;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	781b      	ldrb	r3, [r3, #0]
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	ffff00ff 	.word	0xffff00ff

0800471c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a34      	ldr	r2, [pc, #208]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d008      	beq.n	8004786 <TIM_Base_SetConfig+0x2a>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	05db      	lsls	r3, r3, #23
 800477a:	429a      	cmp	r2, r3
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x2a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a30      	ldr	r2, [pc, #192]	; (8004844 <TIM_Base_SetConfig+0xe8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2270      	movs	r2, #112	; 0x70
 800478a:	4393      	bics	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a29      	ldr	r2, [pc, #164]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	05db      	lsls	r3, r3, #23
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d013      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a25      	ldr	r2, [pc, #148]	; (8004844 <TIM_Base_SetConfig+0xe8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00f      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a24      	ldr	r2, [pc, #144]	; (8004848 <TIM_Base_SetConfig+0xec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00b      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <TIM_Base_SetConfig+0xf0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a22      	ldr	r2, [pc, #136]	; (8004850 <TIM_Base_SetConfig+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_Base_SetConfig+0x76>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_Base_SetConfig+0xf8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d108      	bne.n	80047e4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_Base_SetConfig+0xfc>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	4393      	bics	r3, r2
 80047ea:	001a      	movs	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_Base_SetConfig+0xce>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <TIM_Base_SetConfig+0xf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_Base_SetConfig+0xce>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <TIM_Base_SetConfig+0xf4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_Base_SetConfig+0xce>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a0b      	ldr	r2, [pc, #44]	; (8004854 <TIM_Base_SetConfig+0xf8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d103      	bne.n	8004832 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	615a      	str	r2, [r3, #20]
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b004      	add	sp, #16
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40000400 	.word	0x40000400
 8004848:	40002000 	.word	0x40002000
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800
 8004858:	fffffcff 	.word	0xfffffcff

0800485c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	2201      	movs	r2, #1
 800486c:	4393      	bics	r3, r2
 800486e:	001a      	movs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2270      	movs	r2, #112	; 0x70
 800488a:	4393      	bics	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2203      	movs	r2, #3
 8004892:	4393      	bics	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2202      	movs	r2, #2
 80048a4:	4393      	bics	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <TIM_OC1_SetConfig+0xf8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_OC1_SetConfig+0x76>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <TIM_OC1_SetConfig+0xfc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_OC1_SetConfig+0x76>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a25      	ldr	r2, [pc, #148]	; (800495c <TIM_OC1_SetConfig+0x100>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_OC1_SetConfig+0x76>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a24      	ldr	r2, [pc, #144]	; (8004960 <TIM_OC1_SetConfig+0x104>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10c      	bne.n	80048ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2208      	movs	r2, #8
 80048d6:	4393      	bics	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2204      	movs	r2, #4
 80048e8:	4393      	bics	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a19      	ldr	r2, [pc, #100]	; (8004954 <TIM_OC1_SetConfig+0xf8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_OC1_SetConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <TIM_OC1_SetConfig+0xfc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_OC1_SetConfig+0xb0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a17      	ldr	r2, [pc, #92]	; (800495c <TIM_OC1_SetConfig+0x100>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC1_SetConfig+0xb0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a16      	ldr	r2, [pc, #88]	; (8004960 <TIM_OC1_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d111      	bne.n	8004930 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <TIM_OC1_SetConfig+0x108>)
 8004910:	4013      	ands	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <TIM_OC1_SetConfig+0x10c>)
 8004918:	4013      	ands	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b006      	add	sp, #24
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800
 8004964:	fffffeff 	.word	0xfffffeff
 8004968:	fffffdff 	.word	0xfffffdff

0800496c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	2210      	movs	r2, #16
 800497c:	4393      	bics	r3, r2
 800497e:	001a      	movs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <TIM_OC2_SetConfig+0xe8>)
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a2d      	ldr	r2, [pc, #180]	; (8004a58 <TIM_OC2_SetConfig+0xec>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2220      	movs	r2, #32
 80049b6:	4393      	bics	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a24      	ldr	r2, [pc, #144]	; (8004a5c <TIM_OC2_SetConfig+0xf0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10d      	bne.n	80049ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	4393      	bics	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	4393      	bics	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <TIM_OC2_SetConfig+0xf0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_OC2_SetConfig+0x9e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <TIM_OC2_SetConfig+0xf4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_OC2_SetConfig+0x9e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <TIM_OC2_SetConfig+0xf8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC2_SetConfig+0x9e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <TIM_OC2_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <TIM_OC2_SetConfig+0x100>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <TIM_OC2_SetConfig+0x104>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b006      	add	sp, #24
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	ffff8fff 	.word	0xffff8fff
 8004a58:	fffffcff 	.word	0xfffffcff
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800
 8004a6c:	fffffbff 	.word	0xfffffbff
 8004a70:	fffff7ff 	.word	0xfffff7ff

08004a74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <TIM_OC3_SetConfig+0xe4>)
 8004a84:	401a      	ands	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2270      	movs	r2, #112	; 0x70
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	4393      	bics	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <TIM_OC3_SetConfig+0xe8>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <TIM_OC3_SetConfig+0xec>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10d      	bne.n	8004aee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <TIM_OC3_SetConfig+0xf0>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <TIM_OC3_SetConfig+0xf4>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <TIM_OC3_SetConfig+0xec>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_OC3_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <TIM_OC3_SetConfig+0xf8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_OC3_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <TIM_OC3_SetConfig+0xfc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_OC3_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <TIM_OC3_SetConfig+0x100>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d113      	bne.n	8004b36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <TIM_OC3_SetConfig+0x104>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <TIM_OC3_SetConfig+0x108>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b006      	add	sp, #24
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	fffffeff 	.word	0xfffffeff
 8004b5c:	fffffdff 	.word	0xfffffdff
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	fffff7ff 	.word	0xfffff7ff
 8004b68:	fffffbff 	.word	0xfffffbff
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800
 8004b78:	ffffefff 	.word	0xffffefff
 8004b7c:	ffffdfff 	.word	0xffffdfff

08004b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <TIM_OC4_SetConfig+0xb0>)
 8004b90:	401a      	ands	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <TIM_OC4_SetConfig+0xb4>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <TIM_OC4_SetConfig+0xb8>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <TIM_OC4_SetConfig+0xbc>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <TIM_OC4_SetConfig+0xc0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_OC4_SetConfig+0x78>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <TIM_OC4_SetConfig+0xc4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_OC4_SetConfig+0x78>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <TIM_OC4_SetConfig+0xc8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_OC4_SetConfig+0x78>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <TIM_OC4_SetConfig+0xcc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d109      	bne.n	8004c0c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <TIM_OC4_SetConfig+0xd0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	019b      	lsls	r3, r3, #6
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b006      	add	sp, #24
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	ffffefff 	.word	0xffffefff
 8004c34:	ffff8fff 	.word	0xffff8fff
 8004c38:	fffffcff 	.word	0xfffffcff
 8004c3c:	ffffdfff 	.word	0xffffdfff
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800
 8004c50:	ffffbfff 	.word	0xffffbfff

08004c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	001a      	movs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	22f0      	movs	r2, #240	; 0xf0
 8004c7e:	4393      	bics	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	220a      	movs	r2, #10
 8004c90:	4393      	bics	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	621a      	str	r2, [r3, #32]
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b006      	add	sp, #24
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <TIM_TI2_ConfigInputStage+0x60>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	22a0      	movs	r2, #160	; 0xa0
 8004cec:	4393      	bics	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b006      	add	sp, #24
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	ffff0fff 	.word	0xffff0fff

08004d14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2270      	movs	r2, #112	; 0x70
 8004d28:	4393      	bics	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	2207      	movs	r2, #7
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <TIM_ETR_SetConfig+0x3c>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b006      	add	sp, #24
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	ffff00ff 	.word	0xffff00ff

08004d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	221f      	movs	r2, #31
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	0013      	movs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	43d2      	mvns	r2, r2
 8004daa:	401a      	ands	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	211f      	movs	r1, #31
 8004db8:	400b      	ands	r3, r1
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4099      	lsls	r1, r3
 8004dbe:	000b      	movs	r3, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b006      	add	sp, #24
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	223c      	movs	r2, #60	; 0x3c
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e047      	b.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223c      	movs	r2, #60	; 0x3c
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	223d      	movs	r2, #61	; 0x3d
 8004df4:	2102      	movs	r1, #2
 8004df6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2270      	movs	r2, #112	; 0x70
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00f      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	05db      	lsls	r3, r3, #23
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d009      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	4393      	bics	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	223d      	movs	r2, #61	; 0x3d
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223c      	movs	r2, #60	; 0x3c
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40014000 	.word	0x40014000

08004e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	223c      	movs	r2, #60	; 0x3c
 8004e9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e03e      	b.n	8004f26 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	223c      	movs	r2, #60	; 0x3c
 8004eac:	2101      	movs	r1, #1
 8004eae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004ec4:	401a      	ands	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004eee:	401a      	ands	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004efc:	401a      	ands	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223c      	movs	r2, #60	; 0x3c
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffffcff 	.word	0xfffffcff
 8004f34:	fffffbff 	.word	0xfffffbff
 8004f38:	fffff7ff 	.word	0xfffff7ff
 8004f3c:	ffffefff 	.word	0xffffefff
 8004f40:	ffffdfff 	.word	0xffffdfff
 8004f44:	ffffbfff 	.word	0xffffbfff

08004f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e044      	b.n	8005004 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2274      	movs	r2, #116	; 0x74
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7fc fae5 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2224      	movs	r2, #36	; 0x24
 8004f96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	438a      	bics	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f000 fbce 	bl	800574c <UART_SetConfig>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e024      	b.n	8005004 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fd01 	bl	80059cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	490d      	ldr	r1, [pc, #52]	; (800500c <HAL_UART_Init+0xa4>)
 8004fd6:	400a      	ands	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	212a      	movs	r1, #42	; 0x2a
 8004fe6:	438a      	bics	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f000 fd99 	bl	8005b34 <UART_CheckIdleState>
 8005002:	0003      	movs	r3, r0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	ffffb7ff 	.word	0xffffb7ff

08005010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	1dbb      	adds	r3, r7, #6
 800501e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005024:	2b20      	cmp	r3, #32
 8005026:	d000      	beq.n	800502a <HAL_UART_Transmit+0x1a>
 8005028:	e096      	b.n	8005158 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_UART_Transmit+0x28>
 8005030:	1dbb      	adds	r3, r7, #6
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e08e      	b.n	800515a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	015b      	lsls	r3, r3, #5
 8005044:	429a      	cmp	r2, r3
 8005046:	d109      	bne.n	800505c <HAL_UART_Transmit+0x4c>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d105      	bne.n	800505c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2201      	movs	r2, #1
 8005054:	4013      	ands	r3, r2
 8005056:	d001      	beq.n	800505c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e07e      	b.n	800515a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2274      	movs	r2, #116	; 0x74
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_UART_Transmit+0x5a>
 8005066:	2302      	movs	r3, #2
 8005068:	e077      	b.n	800515a <HAL_UART_Transmit+0x14a>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2274      	movs	r2, #116	; 0x74
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	2100      	movs	r1, #0
 8005078:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2221      	movs	r2, #33	; 0x21
 800507e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005080:	f7fc fba0 	bl	80017c4 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	1dba      	adds	r2, r7, #6
 800508c:	2150      	movs	r1, #80	; 0x50
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1dba      	adds	r2, r7, #6
 8005096:	2152      	movs	r1, #82	; 0x52
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d108      	bne.n	80050ba <HAL_UART_Transmit+0xaa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e003      	b.n	80050c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2274      	movs	r2, #116	; 0x74
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80050ca:	e02d      	b.n	8005128 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	0013      	movs	r3, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	f000 fd73 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e039      	b.n	800515a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	881a      	ldrh	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	05d2      	lsls	r2, r2, #23
 80050f6:	0dd2      	lsrs	r2, r2, #23
 80050f8:	b292      	uxth	r2, r2
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	3302      	adds	r3, #2
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	e008      	b.n	8005116 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b292      	uxth	r2, r2
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2252      	movs	r2, #82	; 0x52
 800511a:	5a9b      	ldrh	r3, [r3, r2]
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b299      	uxth	r1, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2252      	movs	r2, #82	; 0x52
 8005126:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2252      	movs	r2, #82	; 0x52
 800512c:	5a9b      	ldrh	r3, [r3, r2]
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1cb      	bne.n	80050cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	0013      	movs	r3, r2
 800513e:	2200      	movs	r2, #0
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	f000 fd3f 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005146:	1e03      	subs	r3, r0, #0
 8005148:	d001      	beq.n	800514e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e005      	b.n	800515a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b008      	add	sp, #32
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b0ab      	sub	sp, #172	; 0xac
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	22a4      	movs	r2, #164	; 0xa4
 8005174:	18b9      	adds	r1, r7, r2
 8005176:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	20a0      	movs	r0, #160	; 0xa0
 8005180:	1839      	adds	r1, r7, r0
 8005182:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	219c      	movs	r1, #156	; 0x9c
 800518c:	1879      	adds	r1, r7, r1
 800518e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005190:	0011      	movs	r1, r2
 8005192:	18bb      	adds	r3, r7, r2
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a99      	ldr	r2, [pc, #612]	; (80053fc <HAL_UART_IRQHandler+0x298>)
 8005198:	4013      	ands	r3, r2
 800519a:	2298      	movs	r2, #152	; 0x98
 800519c:	18bc      	adds	r4, r7, r2
 800519e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80051a0:	18bb      	adds	r3, r7, r2
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d114      	bne.n	80051d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2220      	movs	r2, #32
 80051ae:	4013      	ands	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051b2:	183b      	adds	r3, r7, r0
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2220      	movs	r2, #32
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00a      	beq.n	80051d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d100      	bne.n	80051c6 <HAL_UART_IRQHandler+0x62>
 80051c4:	e296      	b.n	80056f4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	0010      	movs	r0, r2
 80051ce:	4798      	blx	r3
      }
      return;
 80051d0:	e290      	b.n	80056f4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051d2:	2398      	movs	r3, #152	; 0x98
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d100      	bne.n	80051de <HAL_UART_IRQHandler+0x7a>
 80051dc:	e114      	b.n	8005408 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051de:	239c      	movs	r3, #156	; 0x9c
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	4013      	ands	r3, r2
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051ea:	23a0      	movs	r3, #160	; 0xa0
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a83      	ldr	r2, [pc, #524]	; (8005400 <HAL_UART_IRQHandler+0x29c>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	d100      	bne.n	80051f8 <HAL_UART_IRQHandler+0x94>
 80051f6:	e107      	b.n	8005408 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051f8:	23a4      	movs	r3, #164	; 0xa4
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	4013      	ands	r3, r2
 8005202:	d012      	beq.n	800522a <HAL_UART_IRQHandler+0xc6>
 8005204:	23a0      	movs	r3, #160	; 0xa0
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4013      	ands	r3, r2
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	589b      	ldr	r3, [r3, r2]
 8005220:	2201      	movs	r2, #1
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800522a:	23a4      	movs	r3, #164	; 0xa4
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d011      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
 8005236:	239c      	movs	r3, #156	; 0x9c
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	4013      	ands	r3, r2
 8005240:	d00b      	beq.n	800525a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2202      	movs	r2, #2
 8005248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	589b      	ldr	r3, [r3, r2]
 8005250:	2204      	movs	r2, #4
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525a:	23a4      	movs	r3, #164	; 0xa4
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2204      	movs	r2, #4
 8005262:	4013      	ands	r3, r2
 8005264:	d011      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
 8005266:	239c      	movs	r3, #156	; 0x9c
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	4013      	ands	r3, r2
 8005270:	d00b      	beq.n	800528a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2204      	movs	r2, #4
 8005278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	589b      	ldr	r3, [r3, r2]
 8005280:	2202      	movs	r2, #2
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800528a:	23a4      	movs	r3, #164	; 0xa4
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	4013      	ands	r3, r2
 8005294:	d017      	beq.n	80052c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005296:	23a0      	movs	r3, #160	; 0xa0
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2220      	movs	r2, #32
 800529e:	4013      	ands	r3, r2
 80052a0:	d105      	bne.n	80052ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052a2:	239c      	movs	r3, #156	; 0x9c
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2208      	movs	r2, #8
 80052b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	589b      	ldr	r3, [r3, r2]
 80052bc:	2208      	movs	r2, #8
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2180      	movs	r1, #128	; 0x80
 80052c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052c6:	23a4      	movs	r3, #164	; 0xa4
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	4013      	ands	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_UART_IRQHandler+0x198>
 80052d4:	23a0      	movs	r3, #160	; 0xa0
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2380      	movs	r3, #128	; 0x80
 80052dc:	04db      	lsls	r3, r3, #19
 80052de:	4013      	ands	r3, r2
 80052e0:	d00c      	beq.n	80052fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	589b      	ldr	r3, [r3, r2]
 80052f2:	2220      	movs	r2, #32
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	589b      	ldr	r3, [r3, r2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d100      	bne.n	8005308 <HAL_UART_IRQHandler+0x1a4>
 8005306:	e1f7      	b.n	80056f8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005308:	23a4      	movs	r3, #164	; 0xa4
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2220      	movs	r2, #32
 8005310:	4013      	ands	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005314:	23a0      	movs	r3, #160	; 0xa0
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2220      	movs	r2, #32
 800531c:	4013      	ands	r3, r2
 800531e:	d008      	beq.n	8005332 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	0010      	movs	r0, r2
 8005330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	589b      	ldr	r3, [r3, r2]
 8005338:	2194      	movs	r1, #148	; 0x94
 800533a:	187a      	adds	r2, r7, r1
 800533c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d004      	beq.n	8005356 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800534c:	187b      	adds	r3, r7, r1
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2228      	movs	r2, #40	; 0x28
 8005352:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005354:	d047      	beq.n	80053e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fcf7 	bl	8005d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	4013      	ands	r3, r2
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d137      	bne.n	80053dc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536c:	f3ef 8310 	mrs	r3, PRIMASK
 8005370:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005374:	2090      	movs	r0, #144	; 0x90
 8005376:	183a      	adds	r2, r7, r0
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	2301      	movs	r3, #1
 800537c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	438a      	bics	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
 8005396:	183b      	adds	r3, r7, r0
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a14      	ldr	r2, [pc, #80]	; (8005404 <HAL_UART_IRQHandler+0x2a0>)
 80053b2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fd f87f 	bl	80024bc <HAL_DMA_Abort_IT>
 80053be:	1e03      	subs	r3, r0, #0
 80053c0:	d01a      	beq.n	80053f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	0018      	movs	r0, r3
 80053ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e012      	b.n	80053f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f000 f9a5 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053da:	e00d      	b.n	80053f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f9a0 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e008      	b.n	80053f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 f99b 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	2100      	movs	r1, #0
 80053f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80053f6:	e17f      	b.n	80056f8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	46c0      	nop			; (mov r8, r8)
    return;
 80053fa:	e17d      	b.n	80056f8 <HAL_UART_IRQHandler+0x594>
 80053fc:	0000080f 	.word	0x0000080f
 8005400:	04000120 	.word	0x04000120
 8005404:	08005e11 	.word	0x08005e11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	2b01      	cmp	r3, #1
 800540e:	d000      	beq.n	8005412 <HAL_UART_IRQHandler+0x2ae>
 8005410:	e131      	b.n	8005676 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005412:	23a4      	movs	r3, #164	; 0xa4
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2210      	movs	r2, #16
 800541a:	4013      	ands	r3, r2
 800541c:	d100      	bne.n	8005420 <HAL_UART_IRQHandler+0x2bc>
 800541e:	e12a      	b.n	8005676 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005420:	23a0      	movs	r3, #160	; 0xa0
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2210      	movs	r2, #16
 8005428:	4013      	ands	r3, r2
 800542a:	d100      	bne.n	800542e <HAL_UART_IRQHandler+0x2ca>
 800542c:	e123      	b.n	8005676 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2210      	movs	r2, #16
 8005434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	4013      	ands	r3, r2
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d000      	beq.n	8005446 <HAL_UART_IRQHandler+0x2e2>
 8005444:	e09b      	b.n	800557e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	217e      	movs	r1, #126	; 0x7e
 8005450:	187b      	adds	r3, r7, r1
 8005452:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005454:	187b      	adds	r3, r7, r1
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d100      	bne.n	800545e <HAL_UART_IRQHandler+0x2fa>
 800545c:	e14e      	b.n	80056fc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2258      	movs	r2, #88	; 0x58
 8005462:	5a9b      	ldrh	r3, [r3, r2]
 8005464:	187a      	adds	r2, r7, r1
 8005466:	8812      	ldrh	r2, [r2, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d300      	bcc.n	800546e <HAL_UART_IRQHandler+0x30a>
 800546c:	e146      	b.n	80056fc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	187a      	adds	r2, r7, r1
 8005472:	215a      	movs	r1, #90	; 0x5a
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b20      	cmp	r3, #32
 8005480:	d06e      	beq.n	8005560 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800548a:	67bb      	str	r3, [r7, #120]	; 0x78
 800548c:	2301      	movs	r3, #1
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	499a      	ldr	r1, [pc, #616]	; (800570c <HAL_UART_IRQHandler+0x5a8>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b4:	f3ef 8310 	mrs	r3, PRIMASK
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80054ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	677b      	str	r3, [r7, #116]	; 0x74
 80054be:	2301      	movs	r3, #1
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2101      	movs	r1, #1
 80054d6:	438a      	bics	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	f383 8810 	msr	PRIMASK, r3
}
 80054e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	673b      	str	r3, [r7, #112]	; 0x70
 80054f0:	2301      	movs	r3, #1
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2140      	movs	r1, #64	; 0x40
 8005508:	438a      	bics	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005524:	f3ef 8310 	mrs	r3, PRIMASK
 8005528:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800552a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800552e:	2301      	movs	r3, #1
 8005530:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005534:	f383 8810 	msr	PRIMASK, r3
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2110      	movs	r1, #16
 8005546:	438a      	bics	r2, r1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	0018      	movs	r0, r3
 800555c:	f7fc ff76 	bl	800244c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2258      	movs	r2, #88	; 0x58
 8005564:	5a9a      	ldrh	r2, [r3, r2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	215a      	movs	r1, #90	; 0x5a
 800556a:	5a5b      	ldrh	r3, [r3, r1]
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0011      	movs	r1, r2
 8005576:	0018      	movs	r0, r3
 8005578:	f000 f8dc 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800557c:	e0be      	b.n	80056fc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2258      	movs	r2, #88	; 0x58
 8005582:	5a99      	ldrh	r1, [r3, r2]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	225a      	movs	r2, #90	; 0x5a
 8005588:	5a9b      	ldrh	r3, [r3, r2]
 800558a:	b29a      	uxth	r2, r3
 800558c:	208e      	movs	r0, #142	; 0x8e
 800558e:	183b      	adds	r3, r7, r0
 8005590:	1a8a      	subs	r2, r1, r2
 8005592:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	225a      	movs	r2, #90	; 0x5a
 8005598:	5a9b      	ldrh	r3, [r3, r2]
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d100      	bne.n	80055a2 <HAL_UART_IRQHandler+0x43e>
 80055a0:	e0ae      	b.n	8005700 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80055a2:	183b      	adds	r3, r7, r0
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d100      	bne.n	80055ac <HAL_UART_IRQHandler+0x448>
 80055aa:	e0a9      	b.n	8005700 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80055b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b4:	2488      	movs	r4, #136	; 0x88
 80055b6:	193a      	adds	r2, r7, r4
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	2301      	movs	r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	494f      	ldr	r1, [pc, #316]	; (8005710 <HAL_UART_IRQHandler+0x5ac>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	193b      	adds	r3, r7, r4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e4:	f3ef 8310 	mrs	r3, PRIMASK
 80055e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80055ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	2484      	movs	r4, #132	; 0x84
 80055ee:	193a      	adds	r2, r7, r4
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	2301      	movs	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f383 8810 	msr	PRIMASK, r3
}
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	438a      	bics	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
 800560e:	193b      	adds	r3, r7, r4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	f383 8810 	msr	PRIMASK, r3
}
 800561a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562e:	f3ef 8310 	mrs	r3, PRIMASK
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	2480      	movs	r4, #128	; 0x80
 8005638:	193a      	adds	r2, r7, r4
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	2301      	movs	r3, #1
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2110      	movs	r1, #16
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	193b      	adds	r3, r7, r4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	f383 8810 	msr	PRIMASK, r3
}
 8005664:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005666:	183b      	adds	r3, r7, r0
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0011      	movs	r1, r2
 800566e:	0018      	movs	r0, r3
 8005670:	f000 f860 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005674:	e044      	b.n	8005700 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005676:	23a4      	movs	r3, #164	; 0xa4
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	035b      	lsls	r3, r3, #13
 8005680:	4013      	ands	r3, r2
 8005682:	d010      	beq.n	80056a6 <HAL_UART_IRQHandler+0x542>
 8005684:	239c      	movs	r3, #156	; 0x9c
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	03db      	lsls	r3, r3, #15
 800568e:	4013      	ands	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	0352      	lsls	r2, r2, #13
 800569a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 fbf8 	bl	8005e94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056a4:	e02f      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056a6:	23a4      	movs	r3, #164	; 0xa4
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	4013      	ands	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056b2:	23a0      	movs	r3, #160	; 0xa0
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	4013      	ands	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01e      	beq.n	8005704 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	0010      	movs	r0, r2
 80056ce:	4798      	blx	r3
    }
    return;
 80056d0:	e018      	b.n	8005704 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056d2:	23a4      	movs	r3, #164	; 0xa4
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2240      	movs	r2, #64	; 0x40
 80056da:	4013      	ands	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_UART_IRQHandler+0x5a2>
 80056de:	23a0      	movs	r3, #160	; 0xa0
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2240      	movs	r2, #64	; 0x40
 80056e6:	4013      	ands	r3, r2
 80056e8:	d00d      	beq.n	8005706 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 fba6 	bl	8005e3e <UART_EndTransmit_IT>
    return;
 80056f2:	e008      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
      return;
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	e006      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
    return;
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	e004      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
      return;
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	e002      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	e000      	b.n	8005706 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005704:	46c0      	nop			; (mov r8, r8)
  }

}
 8005706:	46bd      	mov	sp, r7
 8005708:	b02b      	add	sp, #172	; 0xac
 800570a:	bd90      	pop	{r4, r7, pc}
 800570c:	fffffeff 	.word	0xfffffeff
 8005710:	fffffedf 	.word	0xfffffedf

08005714 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	000a      	movs	r2, r1
 800573e:	1cbb      	adds	r3, r7, #2
 8005740:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	b002      	add	sp, #8
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005754:	231e      	movs	r3, #30
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a8d      	ldr	r2, [pc, #564]	; (80059b0 <UART_SetConfig+0x264>)
 800577c:	4013      	ands	r3, r2
 800577e:	0019      	movs	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a88      	ldr	r2, [pc, #544]	; (80059b4 <UART_SetConfig+0x268>)
 8005792:	4013      	ands	r3, r2
 8005794:	0019      	movs	r1, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a7f      	ldr	r2, [pc, #508]	; (80059b8 <UART_SetConfig+0x26c>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a7b      	ldr	r2, [pc, #492]	; (80059bc <UART_SetConfig+0x270>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d127      	bne.n	8005822 <UART_SetConfig+0xd6>
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <UART_SetConfig+0x274>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	2203      	movs	r2, #3
 80057d8:	4013      	ands	r3, r2
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d00d      	beq.n	80057fa <UART_SetConfig+0xae>
 80057de:	d81b      	bhi.n	8005818 <UART_SetConfig+0xcc>
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d014      	beq.n	800580e <UART_SetConfig+0xc2>
 80057e4:	d818      	bhi.n	8005818 <UART_SetConfig+0xcc>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <UART_SetConfig+0xa4>
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d00a      	beq.n	8005804 <UART_SetConfig+0xb8>
 80057ee:	e013      	b.n	8005818 <UART_SetConfig+0xcc>
 80057f0:	231f      	movs	r3, #31
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e021      	b.n	800583e <UART_SetConfig+0xf2>
 80057fa:	231f      	movs	r3, #31
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2202      	movs	r2, #2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e01c      	b.n	800583e <UART_SetConfig+0xf2>
 8005804:	231f      	movs	r3, #31
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2204      	movs	r2, #4
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e017      	b.n	800583e <UART_SetConfig+0xf2>
 800580e:	231f      	movs	r3, #31
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2208      	movs	r2, #8
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e012      	b.n	800583e <UART_SetConfig+0xf2>
 8005818:	231f      	movs	r3, #31
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	2210      	movs	r2, #16
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e00d      	b.n	800583e <UART_SetConfig+0xf2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a67      	ldr	r2, [pc, #412]	; (80059c4 <UART_SetConfig+0x278>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d104      	bne.n	8005836 <UART_SetConfig+0xea>
 800582c:	231f      	movs	r3, #31
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e003      	b.n	800583e <UART_SetConfig+0xf2>
 8005836:	231f      	movs	r3, #31
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2210      	movs	r2, #16
 800583c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	429a      	cmp	r2, r3
 8005848:	d15d      	bne.n	8005906 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800584a:	231f      	movs	r3, #31
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d015      	beq.n	8005880 <UART_SetConfig+0x134>
 8005854:	dc18      	bgt.n	8005888 <UART_SetConfig+0x13c>
 8005856:	2b04      	cmp	r3, #4
 8005858:	d00d      	beq.n	8005876 <UART_SetConfig+0x12a>
 800585a:	dc15      	bgt.n	8005888 <UART_SetConfig+0x13c>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <UART_SetConfig+0x11a>
 8005860:	2b02      	cmp	r3, #2
 8005862:	d005      	beq.n	8005870 <UART_SetConfig+0x124>
 8005864:	e010      	b.n	8005888 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fd fe87 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 800586a:	0003      	movs	r3, r0
 800586c:	61bb      	str	r3, [r7, #24]
        break;
 800586e:	e012      	b.n	8005896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005870:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <UART_SetConfig+0x27c>)
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e00f      	b.n	8005896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005876:	f7fd fe11 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800587a:	0003      	movs	r3, r0
 800587c:	61bb      	str	r3, [r7, #24]
        break;
 800587e:	e00a      	b.n	8005896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	61bb      	str	r3, [r7, #24]
        break;
 8005886:	e006      	b.n	8005896 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800588c:	231e      	movs	r3, #30
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
        break;
 8005894:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d100      	bne.n	800589e <UART_SetConfig+0x152>
 800589c:	e07b      	b.n	8005996 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	18d2      	adds	r2, r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	0019      	movs	r1, r3
 80058b0:	0010      	movs	r0, r2
 80058b2:	f7fa fc29 	bl	8000108 <__udivsi3>
 80058b6:	0003      	movs	r3, r0
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	d91c      	bls.n	80058fc <UART_SetConfig+0x1b0>
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	025b      	lsls	r3, r3, #9
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d217      	bcs.n	80058fc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	200e      	movs	r0, #14
 80058d2:	183b      	adds	r3, r7, r0
 80058d4:	210f      	movs	r1, #15
 80058d6:	438a      	bics	r2, r1
 80058d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2207      	movs	r2, #7
 80058e2:	4013      	ands	r3, r2
 80058e4:	b299      	uxth	r1, r3
 80058e6:	183b      	adds	r3, r7, r0
 80058e8:	183a      	adds	r2, r7, r0
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	183a      	adds	r2, r7, r0
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e04c      	b.n	8005996 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80058fc:	231e      	movs	r3, #30
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e047      	b.n	8005996 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005906:	231f      	movs	r3, #31
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d015      	beq.n	800593c <UART_SetConfig+0x1f0>
 8005910:	dc18      	bgt.n	8005944 <UART_SetConfig+0x1f8>
 8005912:	2b04      	cmp	r3, #4
 8005914:	d00d      	beq.n	8005932 <UART_SetConfig+0x1e6>
 8005916:	dc15      	bgt.n	8005944 <UART_SetConfig+0x1f8>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <UART_SetConfig+0x1d6>
 800591c:	2b02      	cmp	r3, #2
 800591e:	d005      	beq.n	800592c <UART_SetConfig+0x1e0>
 8005920:	e010      	b.n	8005944 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7fd fe29 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8005926:	0003      	movs	r3, r0
 8005928:	61bb      	str	r3, [r7, #24]
        break;
 800592a:	e012      	b.n	8005952 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592c:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <UART_SetConfig+0x27c>)
 800592e:	61bb      	str	r3, [r7, #24]
        break;
 8005930:	e00f      	b.n	8005952 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005932:	f7fd fdb3 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8005936:	0003      	movs	r3, r0
 8005938:	61bb      	str	r3, [r7, #24]
        break;
 800593a:	e00a      	b.n	8005952 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	61bb      	str	r3, [r7, #24]
        break;
 8005942:	e006      	b.n	8005952 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005948:	231e      	movs	r3, #30
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
        break;
 8005950:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01e      	beq.n	8005996 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	085a      	lsrs	r2, r3, #1
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	18d2      	adds	r2, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	0019      	movs	r1, r3
 8005968:	0010      	movs	r0, r2
 800596a:	f7fa fbcd 	bl	8000108 <__udivsi3>
 800596e:	0003      	movs	r3, r0
 8005970:	b29b      	uxth	r3, r3
 8005972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d909      	bls.n	800598e <UART_SetConfig+0x242>
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	025b      	lsls	r3, r3, #9
 8005980:	429a      	cmp	r2, r3
 8005982:	d204      	bcs.n	800598e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	e003      	b.n	8005996 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800598e:	231e      	movs	r3, #30
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059a2:	231e      	movs	r3, #30
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	781b      	ldrb	r3, [r3, #0]
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b008      	add	sp, #32
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	ffff69f3 	.word	0xffff69f3
 80059b4:	ffffcfff 	.word	0xffffcfff
 80059b8:	fffff4ff 	.word	0xfffff4ff
 80059bc:	40013800 	.word	0x40013800
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40004400 	.word	0x40004400
 80059c8:	007a1200 	.word	0x007a1200

080059cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2201      	movs	r2, #1
 80059da:	4013      	ands	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a4a      	ldr	r2, [pc, #296]	; (8005b10 <UART_AdvFeatureConfig+0x144>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	0019      	movs	r1, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2202      	movs	r2, #2
 80059fc:	4013      	ands	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a43      	ldr	r2, [pc, #268]	; (8005b14 <UART_AdvFeatureConfig+0x148>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	4a3b      	ldr	r2, [pc, #236]	; (8005b18 <UART_AdvFeatureConfig+0x14c>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2208      	movs	r2, #8
 8005a40:	4013      	ands	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4a34      	ldr	r2, [pc, #208]	; (8005b1c <UART_AdvFeatureConfig+0x150>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2210      	movs	r2, #16
 8005a62:	4013      	ands	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	; (8005b20 <UART_AdvFeatureConfig+0x154>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2220      	movs	r2, #32
 8005a84:	4013      	ands	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <UART_AdvFeatureConfig+0x158>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	0019      	movs	r1, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <UART_AdvFeatureConfig+0x15c>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	035b      	lsls	r3, r3, #13
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d10b      	bne.n	8005ae6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <UART_AdvFeatureConfig+0x160>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	4013      	ands	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <UART_AdvFeatureConfig+0x164>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	fffdffff 	.word	0xfffdffff
 8005b14:	fffeffff 	.word	0xfffeffff
 8005b18:	fffbffff 	.word	0xfffbffff
 8005b1c:	ffff7fff 	.word	0xffff7fff
 8005b20:	ffffefff 	.word	0xffffefff
 8005b24:	ffffdfff 	.word	0xffffdfff
 8005b28:	ffefffff 	.word	0xffefffff
 8005b2c:	ff9fffff 	.word	0xff9fffff
 8005b30:	fff7ffff 	.word	0xfff7ffff

08005b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2280      	movs	r2, #128	; 0x80
 8005b40:	2100      	movs	r1, #0
 8005b42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b44:	f7fb fe3e 	bl	80017c4 <HAL_GetTick>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2208      	movs	r2, #8
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d10c      	bne.n	8005b74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	0391      	lsls	r1, r2, #14
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <UART_CheckIdleState+0x8c>)
 8005b64:	9200      	str	r2, [sp, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f000 f82c 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d001      	beq.n	8005b74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e021      	b.n	8005bb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d10c      	bne.n	8005b9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	03d1      	lsls	r1, r2, #15
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <UART_CheckIdleState+0x8c>)
 8005b8c:	9200      	str	r2, [sp, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f000 f818 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005b94:	1e03      	subs	r3, r0, #0
 8005b96:	d001      	beq.n	8005b9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e00d      	b.n	8005bb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2274      	movs	r2, #116	; 0x74
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	01ffffff 	.word	0x01ffffff

08005bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b094      	sub	sp, #80	; 0x50
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	1dfb      	adds	r3, r7, #7
 8005bd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	e0a3      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd8:	3301      	adds	r3, #1
 8005bda:	d100      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0x1a>
 8005bdc:	e09f      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fb fdf1 	bl	80017c4 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d13d      	bne.n	8005c70 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfe:	2301      	movs	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	494c      	ldr	r1, [pc, #304]	; (8005d48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005c16:	400a      	ands	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c26:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c30:	2301      	movs	r3, #1
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	f383 8810 	msr	PRIMASK, r3
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2101      	movs	r1, #1
 8005c48:	438a      	bics	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2274      	movs	r2, #116	; 0x74
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e067      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2204      	movs	r2, #4
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d050      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	401a      	ands	r2, r3
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d146      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2280      	movs	r2, #128	; 0x80
 8005c96:	0112      	lsls	r2, r2, #4
 8005c98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9e:	613b      	str	r3, [r7, #16]
  return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f383 8810 	msr	PRIMASK, r3
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4923      	ldr	r1, [pc, #140]	; (8005d48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f383 8810 	msr	PRIMASK, r3
}
 8005cca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f383 8810 	msr	PRIMASK, r3
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2101      	movs	r1, #1
 8005cee:	438a      	bics	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	f383 8810 	msr	PRIMASK, r3
}
 8005cfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	2120      	movs	r1, #32
 8005d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2274      	movs	r2, #116	; 0x74
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e010      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	425a      	negs	r2, r3
 8005d2e:	4153      	adcs	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	001a      	movs	r2, r3
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d100      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x17a>
 8005d3c:	e74b      	b.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	0018      	movs	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b014      	add	sp, #80	; 0x50
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	fffffe5f 	.word	0xfffffe5f

08005d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	; 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d54:	f3ef 8310 	mrs	r3, PRIMASK
 8005d58:	617b      	str	r3, [r7, #20]
  return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4925      	ldr	r1, [pc, #148]	; (8005e0c <UART_EndRxTransfer+0xc0>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d86:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d90:	2301      	movs	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f383 8810 	msr	PRIMASK, r3
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2101      	movs	r1, #1
 8005da8:	438a      	bics	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f383 8810 	msr	PRIMASK, r3
}
 8005db6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d118      	bne.n	8005df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dca:	2301      	movs	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2110      	movs	r1, #16
 8005de2:	438a      	bics	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b00e      	add	sp, #56	; 0x38
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	fffffedf 	.word	0xfffffedf

08005e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	225a      	movs	r2, #90	; 0x5a
 8005e22:	2100      	movs	r1, #0
 8005e24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2252      	movs	r2, #82	; 0x52
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7ff fc77 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b004      	add	sp, #16
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e46:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	2301      	movs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f383 8810 	msr	PRIMASK, r3
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	438a      	bics	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f383 8810 	msr	PRIMASK, r3
}
 8005e76:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f7ff fc44 	bl	8005714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b006      	add	sp, #24
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	1d3b      	adds	r3, r7, #4
 8005eae:	6019      	str	r1, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2317      	movs	r3, #23
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2274      	movs	r2, #116	; 0x74
 8005ebe:	5c9b      	ldrb	r3, [r3, r2]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e04a      	b.n	8005f5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2274      	movs	r2, #116	; 0x74
 8005ecc:	2101      	movs	r1, #1
 8005ece:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2224      	movs	r2, #36	; 0x24
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	438a      	bics	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	f000 f860 	bl	8005fd2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f22:	f7fb fc4f 	bl	80017c4 <HAL_GetTick>
 8005f26:	0003      	movs	r3, r0
 8005f28:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2280      	movs	r2, #128	; 0x80
 8005f2e:	03d1      	lsls	r1, r2, #15
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8005f34:	9200      	str	r2, [sp, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f7ff fe44 	bl	8005bc4 <UART_WaitOnFlagUntilTimeout>
 8005f3c:	1e03      	subs	r3, r0, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8005f40:	2317      	movs	r3, #23
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2203      	movs	r2, #3
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2274      	movs	r2, #116	; 0x74
 8005f54:	2100      	movs	r1, #0
 8005f56:	5499      	strb	r1, [r3, r2]

  return status;
 8005f58:	2317      	movs	r3, #23
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	781b      	ldrb	r3, [r3, #0]
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b006      	add	sp, #24
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	ffcfffff 	.word	0xffcfffff
 8005f6c:	01ffffff 	.word	0x01ffffff

08005f70 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2274      	movs	r2, #116	; 0x74
 8005f7c:	5c9b      	ldrb	r3, [r3, r2]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UARTEx_EnableStopMode+0x16>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e021      	b.n	8005fca <HAL_UARTEx_EnableStopMode+0x5a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2274      	movs	r2, #116	; 0x74
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f94:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2102      	movs	r1, #2
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f383 8810 	msr	PRIMASK, r3
}
 8005fbe:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2274      	movs	r2, #116	; 0x74
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b006      	add	sp, #24
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	6019      	str	r1, [r3, #0]
 8005fde:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	4393      	bics	r3, r2
 8005fea:	001a      	movs	r2, r3
 8005fec:	1d3b      	adds	r3, r7, #4
 8005fee:	889b      	ldrh	r3, [r3, #4]
 8005ff0:	0019      	movs	r1, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	0a19      	lsrs	r1, r3, #8
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	799b      	ldrb	r3, [r3, #6]
 8006008:	061a      	lsls	r2, r3, #24
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b004      	add	sp, #16
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	2600      	movs	r6, #0
 8006020:	4d0c      	ldr	r5, [pc, #48]	; (8006054 <__libc_init_array+0x38>)
 8006022:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006024:	1b64      	subs	r4, r4, r5
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	42a6      	cmp	r6, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	2600      	movs	r6, #0
 800602e:	f000 f821 	bl	8006074 <_init>
 8006032:	4d0a      	ldr	r5, [pc, #40]	; (800605c <__libc_init_array+0x40>)
 8006034:	4c0a      	ldr	r4, [pc, #40]	; (8006060 <__libc_init_array+0x44>)
 8006036:	1b64      	subs	r4, r4, r5
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	42a6      	cmp	r6, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	00b3      	lsls	r3, r6, #2
 8006042:	58eb      	ldr	r3, [r5, r3]
 8006044:	4798      	blx	r3
 8006046:	3601      	adds	r6, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	00b3      	lsls	r3, r6, #2
 800604c:	58eb      	ldr	r3, [r5, r3]
 800604e:	4798      	blx	r3
 8006050:	3601      	adds	r6, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	080060c8 	.word	0x080060c8
 8006058:	080060c8 	.word	0x080060c8
 800605c:	080060c8 	.word	0x080060c8
 8006060:	080060cc 	.word	0x080060cc

08006064 <memset>:
 8006064:	0003      	movs	r3, r0
 8006066:	1882      	adds	r2, r0, r2
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	7019      	strb	r1, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <_init>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr

08006080 <_fini>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr
