
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000737c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800762c  0800762c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800762c  0800762c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800762c  0800762c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000030  08007664  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08007664  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164c9  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  00036521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000391b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186f1  00000000  00000000  0004ee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e8d  00000000  00000000  00067535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc3c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b4  00000000  00000000  000dc414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007424 	.word	0x08007424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08007424 	.word	0x08007424

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
	return ret;
}


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b093      	sub	sp, #76	; 0x4c
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bda      	ldr	r3, [pc, #872]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e370      	b.n	8000938 <HAL_TIM_OC_DelayElapsedCallback+0x6f4>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000256:	4bd9      	ldr	r3, [pc, #868]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d100      	bne.n	8000260 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 800025e:	e09f      	b.n	80003a0 <HAL_TIM_OC_DelayElapsedCallback+0x15c>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	011b      	lsls	r3, r3, #4
 8000266:	4ad6      	ldr	r2, [pc, #856]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000268:	0019      	movs	r1, r3
 800026a:	0010      	movs	r0, r2
 800026c:	f002 fefe 	bl	800306c <HAL_GPIO_ReadPin>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d1f6      	bne.n	8000262 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000274:	49d3      	ldr	r1, [pc, #844]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000276:	48d4      	ldr	r0, [pc, #848]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000278:	2301      	movs	r3, #1
 800027a:	2201      	movs	r2, #1
 800027c:	f004 fa9c 	bl	80047b8 <HAL_SPI_Transmit>
		SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000280:	4bd2      	ldr	r3, [pc, #840]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4bd1      	ldr	r3, [pc, #836]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000286:	49d2      	ldr	r1, [pc, #840]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000288:	400a      	ands	r2, r1
 800028a:	601a      	str	r2, [r3, #0]
		while (!(SPI2->SR));
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	4bcf      	ldr	r3, [pc, #828]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0fb      	beq.n	800028e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	    erpa_raw = SPI2->DR;
 8000296:	4bcd      	ldr	r3, [pc, #820]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	001a      	movs	r2, r3
 800029c:	4bcd      	ldr	r3, [pc, #820]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800029e:	601a      	str	r2, [r3, #0]


		DAC->DHR12R1 = DAC_OUT[step];
 80002a0:	4bcd      	ldr	r3, [pc, #820]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	0019      	movs	r1, r3
 80002a6:	4bcd      	ldr	r3, [pc, #820]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002a8:	4acd      	ldr	r2, [pc, #820]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002aa:	0089      	lsls	r1, r1, #2
 80002ac:	588a      	ldr	r2, [r1, r2]
 80002ae:	609a      	str	r2, [r3, #8]

		HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002b0:	2311      	movs	r3, #17
 80002b2:	001a      	movs	r2, r3
 80002b4:	49cb      	ldr	r1, [pc, #812]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002b6:	4bcc      	ldr	r3, [pc, #816]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 ff29 	bl	8002110 <HAL_ADC_Start_DMA>
						  adcChannelCount);
		uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80002be:	2132      	movs	r1, #50	; 0x32
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	4ac8      	ldr	r2, [pc, #800]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002c4:	8812      	ldrh	r2, [r2, #0]
 80002c6:	801a      	strh	r2, [r3, #0]
		uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002c8:	2030      	movs	r0, #48	; 0x30
 80002ca:	183b      	adds	r3, r7, r0
 80002cc:	4ac5      	ldr	r2, [pc, #788]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002ce:	8992      	ldrh	r2, [r2, #12]
 80002d0:	801a      	strh	r2, [r3, #0]
		uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002d2:	242e      	movs	r4, #46	; 0x2e
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	4ac3      	ldr	r2, [pc, #780]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002d8:	89d2      	ldrh	r2, [r2, #14]
 80002da:	801a      	strh	r2, [r3, #0]
		uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002dc:	252c      	movs	r5, #44	; 0x2c
 80002de:	197b      	adds	r3, r7, r5
 80002e0:	4ac0      	ldr	r2, [pc, #768]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002e2:	8a12      	ldrh	r2, [r2, #16]
 80002e4:	801a      	strh	r2, [r3, #0]

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80002e6:	22aa      	movs	r2, #170	; 0xaa
 80002e8:	4bc0      	ldr	r3, [pc, #768]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002ea:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002ec:	22aa      	movs	r2, #170	; 0xaa
 80002ee:	4bbf      	ldr	r3, [pc, #764]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002f0:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80002f2:	4bbf      	ldr	r3, [pc, #764]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	0a1b      	lsrs	r3, r3, #8
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	4bbb      	ldr	r3, [pc, #748]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002fe:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000300:	4bbb      	ldr	r3, [pc, #748]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4bb9      	ldr	r3, [pc, #740]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000308:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800030a:	187b      	adds	r3, r7, r1
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	0a1b      	lsrs	r3, r3, #8
 8000310:	b29b      	uxth	r3, r3
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4bb5      	ldr	r3, [pc, #724]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000316:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 8000318:	187b      	adds	r3, r7, r1
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4bb3      	ldr	r3, [pc, #716]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000320:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000322:	183b      	adds	r3, r7, r0
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	b29b      	uxth	r3, r3
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4baf      	ldr	r3, [pc, #700]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800032e:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 8000330:	183b      	adds	r3, r7, r0
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4bad      	ldr	r3, [pc, #692]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000338:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800033a:	193b      	adds	r3, r7, r4
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	0a1b      	lsrs	r3, r3, #8
 8000340:	b29b      	uxth	r3, r3
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4ba9      	ldr	r3, [pc, #676]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000346:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000348:	193b      	adds	r3, r7, r4
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4ba7      	ldr	r3, [pc, #668]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000350:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000352:	197b      	adds	r3, r7, r5
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	0a1b      	lsrs	r3, r3, #8
 8000358:	b29b      	uxth	r3, r3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4ba3      	ldr	r3, [pc, #652]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800035e:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000360:	197b      	adds	r3, r7, r5
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4ba1      	ldr	r3, [pc, #644]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000368:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 800036a:	4b9a      	ldr	r3, [pc, #616]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	121b      	asrs	r3, r3, #8
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b9e      	ldr	r3, [pc, #632]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000374:	731a      	strb	r2, [r3, #12]
		erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000376:	4b97      	ldr	r3, [pc, #604]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b9b      	ldr	r3, [pc, #620]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800037e:	735a      	strb	r2, [r3, #13]

		erpa_seq++;
 8000380:	4b9b      	ldr	r3, [pc, #620]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b99      	ldr	r3, [pc, #612]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800038a:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 800038c:	4b8b      	ldr	r3, [pc, #556]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d005      	beq.n	80003a0 <HAL_TIM_OC_DelayElapsedCallback+0x15c>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000394:	4995      	ldr	r1, [pc, #596]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000396:	4897      	ldr	r0, [pc, #604]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000398:	2364      	movs	r3, #100	; 0x64
 800039a:	220e      	movs	r2, #14
 800039c:	f005 fdac 	bl	8005ef8 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 80003a0:	4b95      	ldr	r3, [pc, #596]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d100      	bne.n	80003aa <HAL_TIM_OC_DelayElapsedCallback+0x166>
 80003a8:	e31b      	b.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
      {
        if (hk_counter == HK_CADENCE)
 80003aa:	4b94      	ldr	r3, [pc, #592]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2201      	movs	r2, #1
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d000      	beq.n	80003b6 <HAL_TIM_OC_DelayElapsedCallback+0x172>
 80003b4:	e2a8      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 80003b6:	2200      	movs	r2, #0
 80003b8:	250c      	movs	r5, #12
 80003ba:	197b      	adds	r3, r7, r5
 80003bc:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80003be:	2390      	movs	r3, #144	; 0x90
 80003c0:	b299      	uxth	r1, r3
 80003c2:	262b      	movs	r6, #43	; 0x2b
 80003c4:	19bc      	adds	r4, r7, r6
 80003c6:	197a      	adds	r2, r7, r5
 80003c8:	488d      	ldr	r0, [pc, #564]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003ca:	23fa      	movs	r3, #250	; 0xfa
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2301      	movs	r3, #1
 80003d2:	f002 ff1b 	bl	800320c <HAL_I2C_Master_Transmit>
 80003d6:	0003      	movs	r3, r0
 80003d8:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 80003da:	19bb      	adds	r3, r7, r6
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80003e2:	197b      	adds	r3, r7, r5
 80003e4:	4a87      	ldr	r2, [pc, #540]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003e6:	ca03      	ldmia	r2!, {r0, r1}
 80003e8:	c303      	stmia	r3!, {r0, r1}
 80003ea:	8811      	ldrh	r1, [r2, #0]
 80003ec:	8019      	strh	r1, [r3, #0]
 80003ee:	7892      	ldrb	r2, [r2, #2]
 80003f0:	709a      	strb	r2, [r3, #2]
 80003f2:	e02b      	b.n	800044c <HAL_TIM_OC_DelayElapsedCallback+0x208>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	b299      	uxth	r1, r3
 80003f8:	252b      	movs	r5, #43	; 0x2b
 80003fa:	197c      	adds	r4, r7, r5
 80003fc:	260c      	movs	r6, #12
 80003fe:	19ba      	adds	r2, r7, r6
 8000400:	487f      	ldr	r0, [pc, #508]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000402:	23fa      	movs	r3, #250	; 0xfa
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2302      	movs	r3, #2
 800040a:	f003 f807 	bl	800341c <HAL_I2C_Master_Receive>
 800040e:	0003      	movs	r3, r0
 8000410:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000412:	197b      	adds	r3, r7, r5
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <HAL_TIM_OC_DelayElapsedCallback+0x1e8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800041a:	19bb      	adds	r3, r7, r6
 800041c:	4a7a      	ldr	r2, [pc, #488]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 800041e:	ca03      	ldmia	r2!, {r0, r1}
 8000420:	c303      	stmia	r3!, {r0, r1}
 8000422:	8811      	ldrh	r1, [r2, #0]
 8000424:	8019      	strh	r1, [r3, #0]
 8000426:	7892      	ldrb	r2, [r2, #2]
 8000428:	709a      	strb	r2, [r3, #2]
 800042a:	e00f      	b.n	800044c <HAL_TIM_OC_DelayElapsedCallback+0x208>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 800042c:	200c      	movs	r0, #12
 800042e:	183b      	adds	r3, r7, r0
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	021a      	lsls	r2, r3, #8
 8000434:	213e      	movs	r1, #62	; 0x3e
 8000436:	187b      	adds	r3, r7, r1
 8000438:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2200      	movs	r2, #0
 800043e:	5e9b      	ldrsh	r3, [r3, r2]
 8000440:	183a      	adds	r2, r7, r0
 8000442:	7852      	ldrb	r2, [r2, #1]
 8000444:	4313      	orrs	r3, r2
 8000446:	10da      	asrs	r2, r3, #3
 8000448:	187b      	adds	r3, r7, r1
 800044a:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 800044c:	2200      	movs	r2, #0
 800044e:	250c      	movs	r5, #12
 8000450:	197b      	adds	r3, r7, r5
 8000452:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000454:	2394      	movs	r3, #148	; 0x94
 8000456:	b299      	uxth	r1, r3
 8000458:	262b      	movs	r6, #43	; 0x2b
 800045a:	19bc      	adds	r4, r7, r6
 800045c:	197a      	adds	r2, r7, r5
 800045e:	4868      	ldr	r0, [pc, #416]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000460:	23fa      	movs	r3, #250	; 0xfa
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	f002 fed0 	bl	800320c <HAL_I2C_Master_Transmit>
 800046c:	0003      	movs	r3, r0
 800046e:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000470:	19bb      	adds	r3, r7, r6
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <HAL_TIM_OC_DelayElapsedCallback+0x246>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000478:	197b      	adds	r3, r7, r5
 800047a:	4a62      	ldr	r2, [pc, #392]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 800047c:	ca03      	ldmia	r2!, {r0, r1}
 800047e:	c303      	stmia	r3!, {r0, r1}
 8000480:	8811      	ldrh	r1, [r2, #0]
 8000482:	8019      	strh	r1, [r3, #0]
 8000484:	7892      	ldrb	r2, [r2, #2]
 8000486:	709a      	strb	r2, [r3, #2]
 8000488:	e02b      	b.n	80004e2 <HAL_TIM_OC_DelayElapsedCallback+0x29e>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800048a:	2394      	movs	r3, #148	; 0x94
 800048c:	b299      	uxth	r1, r3
 800048e:	252b      	movs	r5, #43	; 0x2b
 8000490:	197c      	adds	r4, r7, r5
 8000492:	260c      	movs	r6, #12
 8000494:	19ba      	adds	r2, r7, r6
 8000496:	485a      	ldr	r0, [pc, #360]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2302      	movs	r3, #2
 80004a0:	f002 ffbc 	bl	800341c <HAL_I2C_Master_Receive>
 80004a4:	0003      	movs	r3, r0
 80004a6:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004a8:	197b      	adds	r3, r7, r5
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <HAL_TIM_OC_DelayElapsedCallback+0x27e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80004b0:	19bb      	adds	r3, r7, r6
 80004b2:	4a55      	ldr	r2, [pc, #340]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004b4:	ca03      	ldmia	r2!, {r0, r1}
 80004b6:	c303      	stmia	r3!, {r0, r1}
 80004b8:	8811      	ldrh	r1, [r2, #0]
 80004ba:	8019      	strh	r1, [r3, #0]
 80004bc:	7892      	ldrb	r2, [r2, #2]
 80004be:	709a      	strb	r2, [r3, #2]
 80004c0:	e00f      	b.n	80004e2 <HAL_TIM_OC_DelayElapsedCallback+0x29e>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 80004c2:	200c      	movs	r0, #12
 80004c4:	183b      	adds	r3, r7, r0
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	021a      	lsls	r2, r3, #8
 80004ca:	213c      	movs	r1, #60	; 0x3c
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	5e9b      	ldrsh	r3, [r3, r2]
 80004d6:	183a      	adds	r2, r7, r0
 80004d8:	7852      	ldrb	r2, [r2, #1]
 80004da:	4313      	orrs	r3, r2
 80004dc:	10da      	asrs	r2, r3, #3
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 80004e2:	2200      	movs	r2, #0
 80004e4:	250c      	movs	r5, #12
 80004e6:	197b      	adds	r3, r7, r5
 80004e8:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004ea:	2392      	movs	r3, #146	; 0x92
 80004ec:	b299      	uxth	r1, r3
 80004ee:	262b      	movs	r6, #43	; 0x2b
 80004f0:	19bc      	adds	r4, r7, r6
 80004f2:	197a      	adds	r2, r7, r5
 80004f4:	4842      	ldr	r0, [pc, #264]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	f002 fe85 	bl	800320c <HAL_I2C_Master_Transmit>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d008      	beq.n	8000520 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800050e:	197b      	adds	r3, r7, r5
 8000510:	4a3c      	ldr	r2, [pc, #240]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000512:	ca03      	ldmia	r2!, {r0, r1}
 8000514:	c303      	stmia	r3!, {r0, r1}
 8000516:	8811      	ldrh	r1, [r2, #0]
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	7892      	ldrb	r2, [r2, #2]
 800051c:	709a      	strb	r2, [r3, #2]
 800051e:	e02b      	b.n	8000578 <HAL_TIM_OC_DelayElapsedCallback+0x334>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000520:	2392      	movs	r3, #146	; 0x92
 8000522:	b299      	uxth	r1, r3
 8000524:	252b      	movs	r5, #43	; 0x2b
 8000526:	197c      	adds	r4, r7, r5
 8000528:	260c      	movs	r6, #12
 800052a:	19ba      	adds	r2, r7, r6
 800052c:	4834      	ldr	r0, [pc, #208]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800052e:	23fa      	movs	r3, #250	; 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2302      	movs	r3, #2
 8000536:	f002 ff71 	bl	800341c <HAL_I2C_Master_Receive>
 800053a:	0003      	movs	r3, r0
 800053c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800053e:	197b      	adds	r3, r7, r5
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <HAL_TIM_OC_DelayElapsedCallback+0x314>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000546:	19bb      	adds	r3, r7, r6
 8000548:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 800054a:	ca03      	ldmia	r2!, {r0, r1}
 800054c:	c303      	stmia	r3!, {r0, r1}
 800054e:	8811      	ldrh	r1, [r2, #0]
 8000550:	8019      	strh	r1, [r3, #0]
 8000552:	7892      	ldrb	r2, [r2, #2]
 8000554:	709a      	strb	r2, [r3, #2]
 8000556:	e00f      	b.n	8000578 <HAL_TIM_OC_DelayElapsedCallback+0x334>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000558:	200c      	movs	r0, #12
 800055a:	183b      	adds	r3, r7, r0
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	021a      	lsls	r2, r3, #8
 8000560:	213a      	movs	r1, #58	; 0x3a
 8000562:	187b      	adds	r3, r7, r1
 8000564:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	5e9b      	ldrsh	r3, [r3, r2]
 800056c:	183a      	adds	r2, r7, r0
 800056e:	7852      	ldrb	r2, [r2, #1]
 8000570:	4313      	orrs	r3, r2
 8000572:	10da      	asrs	r2, r3, #3
 8000574:	187b      	adds	r3, r7, r1
 8000576:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000578:	2200      	movs	r2, #0
 800057a:	250c      	movs	r5, #12
 800057c:	197b      	adds	r3, r7, r5
 800057e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000580:	2396      	movs	r3, #150	; 0x96
 8000582:	b299      	uxth	r1, r3
 8000584:	262b      	movs	r6, #43	; 0x2b
 8000586:	19bc      	adds	r4, r7, r6
 8000588:	197a      	adds	r2, r7, r5
 800058a:	481d      	ldr	r0, [pc, #116]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	f002 fe3a 	bl	800320c <HAL_I2C_Master_Transmit>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800059c:	19bb      	adds	r3, r7, r6
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d033      	beq.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80005a4:	197b      	adds	r3, r7, r5
 80005a6:	4a17      	ldr	r2, [pc, #92]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80005a8:	ca03      	ldmia	r2!, {r0, r1}
 80005aa:	c303      	stmia	r3!, {r0, r1}
 80005ac:	8811      	ldrh	r1, [r2, #0]
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	7892      	ldrb	r2, [r2, #2]
 80005b2:	709a      	strb	r2, [r3, #2]
 80005b4:	e056      	b.n	8000664 <HAL_TIM_OC_DelayElapsedCallback+0x420>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	20000240 	.word	0x20000240
 80005bc:	20000021 	.word	0x20000021
 80005c0:	48000400 	.word	0x48000400
 80005c4:	080074c4 	.word	0x080074c4
 80005c8:	20000194 	.word	0x20000194
 80005cc:	40003800 	.word	0x40003800
 80005d0:	fffffbff 	.word	0xfffffbff
 80005d4:	200003a0 	.word	0x200003a0
 80005d8:	2000039a 	.word	0x2000039a
 80005dc:	40007400 	.word	0x40007400
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000378 	.word	0x20000378
 80005e8:	2000004c 	.word	0x2000004c
 80005ec:	200003a4 	.word	0x200003a4
 80005f0:	200003b2 	.word	0x200003b2
 80005f4:	20000288 	.word	0x20000288
 80005f8:	20000022 	.word	0x20000022
 80005fc:	200003e4 	.word	0x200003e4
 8000600:	200000e4 	.word	0x200000e4
 8000604:	0800743c 	.word	0x0800743c
 8000608:	08007448 	.word	0x08007448
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 800060c:	2396      	movs	r3, #150	; 0x96
 800060e:	b299      	uxth	r1, r3
 8000610:	252b      	movs	r5, #43	; 0x2b
 8000612:	197c      	adds	r4, r7, r5
 8000614:	260c      	movs	r6, #12
 8000616:	19ba      	adds	r2, r7, r6
 8000618:	48be      	ldr	r0, [pc, #760]	; (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	f002 fefb 	bl	800341c <HAL_I2C_Master_Receive>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800062a:	197b      	adds	r3, r7, r5
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d008      	beq.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x400>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000632:	19bb      	adds	r3, r7, r6
 8000634:	4ab8      	ldr	r2, [pc, #736]	; (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 8000636:	ca03      	ldmia	r2!, {r0, r1}
 8000638:	c303      	stmia	r3!, {r0, r1}
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	8019      	strh	r1, [r3, #0]
 800063e:	7892      	ldrb	r2, [r2, #2]
 8000640:	709a      	strb	r2, [r3, #2]
 8000642:	e00f      	b.n	8000664 <HAL_TIM_OC_DelayElapsedCallback+0x420>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000644:	200c      	movs	r0, #12
 8000646:	183b      	adds	r3, r7, r0
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	021a      	lsls	r2, r3, #8
 800064c:	2138      	movs	r1, #56	; 0x38
 800064e:	187b      	adds	r3, r7, r1
 8000650:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	5e9b      	ldrsh	r3, [r3, r2]
 8000658:	183a      	adds	r2, r7, r0
 800065a:	7852      	ldrb	r2, [r2, #1]
 800065c:	4313      	orrs	r3, r2
 800065e:	10da      	asrs	r2, r3, #3
 8000660:	187b      	adds	r3, r7, r1
 8000662:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000664:	2311      	movs	r3, #17
 8000666:	001a      	movs	r2, r3
 8000668:	49ac      	ldr	r1, [pc, #688]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 800066a:	4bad      	ldr	r3, [pc, #692]	; (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x6dc>)
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fd4f 	bl	8002110 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000672:	2128      	movs	r1, #40	; 0x28
 8000674:	187b      	adds	r3, r7, r1
 8000676:	4aa9      	ldr	r2, [pc, #676]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000678:	8852      	ldrh	r2, [r2, #2]
 800067a:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 800067c:	2026      	movs	r0, #38	; 0x26
 800067e:	183b      	adds	r3, r7, r0
 8000680:	4aa6      	ldr	r2, [pc, #664]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000682:	8892      	ldrh	r2, [r2, #4]
 8000684:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000686:	2424      	movs	r4, #36	; 0x24
 8000688:	193b      	adds	r3, r7, r4
 800068a:	4aa4      	ldr	r2, [pc, #656]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 800068c:	88d2      	ldrh	r2, [r2, #6]
 800068e:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000690:	2522      	movs	r5, #34	; 0x22
 8000692:	197b      	adds	r3, r7, r5
 8000694:	4aa1      	ldr	r2, [pc, #644]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 8000696:	8912      	ldrh	r2, [r2, #8]
 8000698:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800069a:	2620      	movs	r6, #32
 800069c:	19bb      	adds	r3, r7, r6
 800069e:	4a9f      	ldr	r2, [pc, #636]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006a0:	8952      	ldrh	r2, [r2, #10]
 80006a2:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80006a4:	231e      	movs	r3, #30
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	4a9c      	ldr	r2, [pc, #624]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006aa:	8a52      	ldrh	r2, [r2, #18]
 80006ac:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80006ae:	221c      	movs	r2, #28
 80006b0:	18bb      	adds	r3, r7, r2
 80006b2:	4a9a      	ldr	r2, [pc, #616]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006b4:	8a92      	ldrh	r2, [r2, #20]
 80006b6:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80006b8:	231a      	movs	r3, #26
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	4a97      	ldr	r2, [pc, #604]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006be:	8ad2      	ldrh	r2, [r2, #22]
 80006c0:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80006c2:	2218      	movs	r2, #24
 80006c4:	18bb      	adds	r3, r7, r2
 80006c6:	4a95      	ldr	r2, [pc, #596]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006c8:	8b12      	ldrh	r2, [r2, #24]
 80006ca:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80006cc:	2316      	movs	r3, #22
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	4a92      	ldr	r2, [pc, #584]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006d2:	8b52      	ldrh	r2, [r2, #26]
 80006d4:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80006d6:	2214      	movs	r2, #20
 80006d8:	18bb      	adds	r3, r7, r2
 80006da:	4a90      	ldr	r2, [pc, #576]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006dc:	8b92      	ldrh	r2, [r2, #28]
 80006de:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 80006e0:	2312      	movs	r3, #18
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	4a8d      	ldr	r2, [pc, #564]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006e6:	8bd2      	ldrh	r2, [r2, #30]
 80006e8:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 80006ea:	2210      	movs	r2, #16
 80006ec:	18bb      	adds	r3, r7, r2
 80006ee:	4a8b      	ldr	r2, [pc, #556]	; (800091c <HAL_TIM_OC_DelayElapsedCallback+0x6d8>)
 80006f0:	8c12      	ldrh	r2, [r2, #32]
 80006f2:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 80006f4:	22cc      	movs	r2, #204	; 0xcc
 80006f6:	4b8b      	ldr	r3, [pc, #556]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80006f8:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 80006fa:	22cc      	movs	r2, #204	; 0xcc
 80006fc:	4b89      	ldr	r3, [pc, #548]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80006fe:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000700:	4b89      	ldr	r3, [pc, #548]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b86      	ldr	r3, [pc, #536]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800070c:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 800070e:	4b86      	ldr	r3, [pc, #536]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b83      	ldr	r3, [pc, #524]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000716:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000718:	2312      	movs	r3, #18
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b7f      	ldr	r3, [pc, #508]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000726:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000728:	2312      	movs	r3, #18
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b7c      	ldr	r3, [pc, #496]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000732:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 8000734:	2210      	movs	r2, #16
 8000736:	18bb      	adds	r3, r7, r2
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b78      	ldr	r3, [pc, #480]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000742:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 8000744:	2210      	movs	r2, #16
 8000746:	18bb      	adds	r3, r7, r2
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b75      	ldr	r3, [pc, #468]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800074e:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000750:	233e      	movs	r3, #62	; 0x3e
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	5e9b      	ldrsh	r3, [r3, r2]
 8000758:	121b      	asrs	r3, r3, #8
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b71      	ldr	r3, [pc, #452]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800075e:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000760:	233e      	movs	r3, #62	; 0x3e
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b6e      	ldr	r3, [pc, #440]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800076a:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 800076c:	233c      	movs	r3, #60	; 0x3c
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	2200      	movs	r2, #0
 8000772:	5e9b      	ldrsh	r3, [r3, r2]
 8000774:	121b      	asrs	r3, r3, #8
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b6a      	ldr	r3, [pc, #424]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800077a:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 800077c:	233c      	movs	r3, #60	; 0x3c
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b67      	ldr	r3, [pc, #412]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000786:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000788:	233a      	movs	r3, #58	; 0x3a
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2200      	movs	r2, #0
 800078e:	5e9b      	ldrsh	r3, [r3, r2]
 8000790:	121b      	asrs	r3, r3, #8
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b63      	ldr	r3, [pc, #396]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000796:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000798:	233a      	movs	r3, #58	; 0x3a
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b60      	ldr	r3, [pc, #384]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007a2:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 80007a4:	2338      	movs	r3, #56	; 0x38
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	2200      	movs	r2, #0
 80007aa:	5e9b      	ldrsh	r3, [r3, r2]
 80007ac:	121b      	asrs	r3, r3, #8
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b5c      	ldr	r3, [pc, #368]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007b2:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 80007b4:	2338      	movs	r3, #56	; 0x38
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007be:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b56      	ldr	r3, [pc, #344]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007cc:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b53      	ldr	r3, [pc, #332]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007d6:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 80007d8:	183b      	adds	r3, r7, r0
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b50      	ldr	r3, [pc, #320]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007e4:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 80007e6:	183b      	adds	r3, r7, r0
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007ee:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 80007f0:	211e      	movs	r1, #30
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80007fe:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000800:	187b      	adds	r3, r7, r1
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000808:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 800080a:	193b      	adds	r3, r7, r4
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000816:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000818:	193b      	adds	r3, r7, r4
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000820:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000822:	201a      	movs	r0, #26
 8000824:	183b      	adds	r3, r7, r0
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	b29b      	uxth	r3, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000830:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000832:	183b      	adds	r3, r7, r0
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800083a:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 800083c:	2018      	movs	r0, #24
 800083e:	183b      	adds	r3, r7, r0
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800084a:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 800084c:	183b      	adds	r3, r7, r0
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b34      	ldr	r3, [pc, #208]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000854:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000856:	211c      	movs	r1, #28
 8000858:	187b      	adds	r3, r7, r1
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000864:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000866:	187b      	adds	r3, r7, r1
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800086e:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000870:	2114      	movs	r1, #20
 8000872:	187b      	adds	r3, r7, r1
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 800087e:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000880:	187b      	adds	r3, r7, r1
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000888:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 800088a:	2016      	movs	r0, #22
 800088c:	183b      	adds	r3, r7, r0
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 8000898:	2220      	movs	r2, #32
 800089a:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 800089c:	183b      	adds	r3, r7, r0
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b2d9      	uxtb	r1, r3
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008a4:	2221      	movs	r2, #33	; 0x21
 80008a6:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 80008a8:	197b      	adds	r3, r7, r5
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b2d9      	uxtb	r1, r3
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008b4:	2222      	movs	r2, #34	; 0x22
 80008b6:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 80008b8:	197b      	adds	r3, r7, r5
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008c0:	2223      	movs	r2, #35	; 0x23
 80008c2:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 80008c4:	19bb      	adds	r3, r7, r6
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008d0:	2224      	movs	r2, #36	; 0x24
 80008d2:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 80008d4:	19bb      	adds	r3, r7, r6
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b2d9      	uxtb	r1, r3
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008dc:	2225      	movs	r2, #37	; 0x25
 80008de:	5499      	strb	r1, [r3, r2]

          if (HK_ON)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_TIM_OC_DelayElapsedCallback+0x6e8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6b0>
          {
           HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80008e8:	490e      	ldr	r1, [pc, #56]	; (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x6e0>)
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0x6ec>)
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	2226      	movs	r2, #38	; 0x26
 80008f0:	f005 fb02 	bl	8005ef8 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
          hk_seq++;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x6e4>)
 8000904:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000906:	e06c      	b.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
          hk_counter++;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0x6f0>)
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	e066      	b.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
 8000914:	200000e4 	.word	0x200000e4
 8000918:	08007448 	.word	0x08007448
 800091c:	20000378 	.word	0x20000378
 8000920:	2000004c 	.word	0x2000004c
 8000924:	200003bc 	.word	0x200003bc
 8000928:	200003e2 	.word	0x200003e2
 800092c:	20000022 	.word	0x20000022
 8000930:	20000288 	.word	0x20000288
 8000934:	200003e4 	.word	0x200003e4
  else if (htim == &htim1)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <HAL_TIM_OC_DelayElapsedCallback+0x7a8>)
 800093c:	429a      	cmp	r2, r3
 800093e:	d150      	bne.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
      if (PMT_ON)
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d04c      	beq.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x79e>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	005a      	lsls	r2, r3, #1
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fb89 	bl	800306c <HAL_GPIO_ReadPin>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d1f5      	bne.n	800094a <HAL_TIM_OC_DelayElapsedCallback+0x706>
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 800095e:	4925      	ldr	r1, [pc, #148]	; (80009f4 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000960:	4825      	ldr	r0, [pc, #148]	; (80009f8 <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000962:	2301      	movs	r3, #1
 8000964:	2201      	movs	r2, #1
 8000966:	f003 ff27 	bl	80047b8 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000970:	4923      	ldr	r1, [pc, #140]	; (8000a00 <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000972:	400a      	ands	r2, r1
 8000974:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0fb      	beq.n	8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>
		pmt_raw = SPI1->DR;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	001a      	movs	r2, r3
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 8000988:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 8000990:	22bb      	movs	r2, #187	; 0xbb
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 8000994:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000996:	22bb      	movs	r2, #187	; 0xbb
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 800099a:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_TIM_OC_DelayElapsedCallback+0x7c8>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009a8:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_TIM_OC_DelayElapsedCallback+0x7c8>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009b2:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	121b      	asrs	r3, r3, #8
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009be:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009c8:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_TIM_OC_DelayElapsedCallback+0x7c8>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_TIM_OC_DelayElapsedCallback+0x7c8>)
 80009d4:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <HAL_TIM_OC_DelayElapsedCallback+0x7cc>)
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	2206      	movs	r2, #6
 80009de:	f005 fa8b 	bl	8005ef8 <HAL_UART_Transmit>
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b011      	add	sp, #68	; 0x44
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200001f8 	.word	0x200001f8
 80009f0:	20000020 	.word	0x20000020
 80009f4:	080074c4 	.word	0x080074c4
 80009f8:	20000130 	.word	0x20000130
 80009fc:	40013000 	.word	0x40013000
 8000a00:	fffffbff 	.word	0xfffffbff
 8000a04:	2000039c 	.word	0x2000039c
 8000a08:	200003b4 	.word	0x200003b4
 8000a0c:	200003ba 	.word	0x200003ba
 8000a10:	20000288 	.word	0x20000288

08000a14 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000a1c:	4974      	ldr	r1, [pc, #464]	; (8000bf0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a1e:	4b75      	ldr	r3, [pc, #468]	; (8000bf4 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f005 fb11 	bl	800604a <HAL_UART_Receive_IT>
  char key = rx_buf[0];
 8000a28:	210f      	movs	r1, #15
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	4a70      	ldr	r2, [pc, #448]	; (8000bf0 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3b21      	subs	r3, #33	; 0x21
 8000a38:	2b52      	cmp	r3, #82	; 0x52
 8000a3a:	d900      	bls.n	8000a3e <HAL_UART_RxCpltCallback+0x2a>
 8000a3c:	e0d3      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
 8000a3e:	009a      	lsls	r2, r3, #2
 8000a40:	4b6d      	ldr	r3, [pc, #436]	; (8000bf8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a42:	18d3      	adds	r3, r2, r3
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	469f      	mov	pc, r3
  {
  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a48:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <HAL_UART_RxCpltCallback+0x1e8>)
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fb29 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000a54:	e0c7      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a56:	4b69      	ldr	r3, [pc, #420]	; (8000bfc <HAL_UART_RxCpltCallback+0x1e8>)
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 fb22 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000a62:	e0c0      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000a64:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <HAL_UART_RxCpltCallback+0x1e8>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fb1b 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000a70:	e0b9      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000a72:	4b62      	ldr	r3, [pc, #392]	; (8000bfc <HAL_UART_RxCpltCallback+0x1e8>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	2200      	movs	r2, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 fb14 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000a7e:	e0b2      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '<':
  {
    if (step < 7)
 8000a80:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d900      	bls.n	8000a8a <HAL_UART_RxCpltCallback+0x76>
 8000a88:	e0aa      	b.n	8000be0 <HAL_UART_RxCpltCallback+0x1cc>
    {
      step++;
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b5b      	ldr	r3, [pc, #364]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a94:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000a96:	e0a3      	b.n	8000be0 <HAL_UART_RxCpltCallback+0x1cc>
  }
  case '>':
  {
    if (step > 0)
 8000a98:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d100      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x8e>
 8000aa0:	e0a0      	b.n	8000be4 <HAL_UART_RxCpltCallback+0x1d0>
    {
      step--;
 8000aa2:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <HAL_UART_RxCpltCallback+0x1ec>)
 8000aac:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000aae:	e099      	b.n	8000be4 <HAL_UART_RxCpltCallback+0x1d0>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <HAL_UART_RxCpltCallback+0x1f0>)
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 faf5 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000abc:	e093      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_UART_RxCpltCallback+0x1f0>)
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 faee 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000aca:	e08c      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000acc:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_UART_RxCpltCallback+0x1f0>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fae7 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000ad8:	e085      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000ada:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <HAL_UART_RxCpltCallback+0x1f0>)
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	2200      	movs	r2, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 fae0 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000ae6:	e07e      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000ae8:	4847      	ldr	r0, [pc, #284]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	2201      	movs	r2, #1
 8000af0:	0019      	movs	r1, r3
 8000af2:	f002 fad8 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000af6:	e076      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000af8:	4843      	ldr	r0, [pc, #268]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	2200      	movs	r2, #0
 8000b00:	0019      	movs	r1, r3
 8000b02:	f002 fad0 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b06:	e06e      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b08:	483f      	ldr	r0, [pc, #252]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	2201      	movs	r2, #1
 8000b10:	0019      	movs	r1, r3
 8000b12:	f002 fac8 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b16:	e066      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b18:	483b      	ldr	r0, [pc, #236]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	2200      	movs	r2, #0
 8000b20:	0019      	movs	r1, r3
 8000b22:	f002 fac0 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b26:	e05e      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 fab9 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b34:	e057      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fab2 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b42:	e050      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b44:	4830      	ldr	r0, [pc, #192]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	f002 faaa 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b52:	e048      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	482c      	ldr	r0, [pc, #176]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	f002 faa2 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b62:	e040      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	f002 fa9a 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b72:	e038      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	f002 fa92 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b82:	e030      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	2201      	movs	r2, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f002 fa8b 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b90:	e029      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	2200      	movs	r2, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 fa84 	bl	80030a6 <HAL_GPIO_WritePin>
    break;
 8000b9e:	e022      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case 's':
  {
      HAL_SuspendTick();
 8000ba0:	f001 f968 	bl	8001e74 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f002 ffd0 	bl	8003b4c <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000bac:	f7ff fb38 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_UART_RxCpltCallback+0x1f8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
    break;
 8000bb6:	e016      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '!':
  {
    PMT_ON = 0;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_RxCpltCallback+0x1f8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
    break;
 8000bbe:	e012      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '2':
  {
    ERPA_ON = 1;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
    break;
 8000bc6:	e00e      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '@':
  {
    ERPA_ON = 0;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    break;
 8000bce:	e00a      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '3':
  {
    HK_ON = 1;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_UART_RxCpltCallback+0x200>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
    break;
 8000bd6:	e006      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
  }
  case '#':
  {
    HK_ON = 0;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_RxCpltCallback+0x200>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
    break;
 8000bde:	e002      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
    break;
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	e000      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x1d2>
    break;
 8000be4:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	2000030c 	.word	0x2000030c
 8000bf4:	20000288 	.word	0x20000288
 8000bf8:	080074c8 	.word	0x080074c8
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	2000039a 	.word	0x2000039a
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	20000020 	.word	0x20000020
 8000c10:	20000021 	.word	0x20000021
 8000c14:	20000022 	.word	0x20000022

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f001 f8c5 	bl	8001dac <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f885 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 fc9f 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2a:	f000 fc7f 	bl	800152c <MX_DMA_Init>
  MX_SPI2_Init();
 8000c2e:	f000 fac7 	bl	80011c0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c32:	f000 fb05 	bl	8001240 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c36:	f000 fbb9 	bl	80013ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c3a:	f000 fa81 	bl	8001140 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c3e:	f000 fc35 	bl	80014ac <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000c42:	f000 fa0b 	bl	800105c <MX_DAC1_Init>
  MX_ADC_Init();
 8000c46:	f000 f8dd 	bl	8000e04 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c4a:	f000 fa39 	bl	80010c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < (sizeof(gpios) / sizeof(gpios[0])); i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e010      	b.n	8000c76 <main+0x5e>
    	  HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <main+0xfc>)
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	00d2      	lsls	r2, r2, #3
 8000c5a:	58d0      	ldr	r0, [r2, r3]
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	; (8000d14 <main+0xfc>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	3304      	adds	r3, #4
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f002 fa1b 	bl	80030a6 <HAL_GPIO_WritePin>
  for (int i = 0; i < (sizeof(gpios) / sizeof(gpios[0])); i++) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3301      	adds	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	d9eb      	bls.n	8000c54 <main+0x3c>
    }

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main+0x100>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fe34 	bl	80028ee <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <main+0x104>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f004 f8b2 	bl	8004df4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x108>)
 8000c92:	210c      	movs	r1, #12
 8000c94:	0018      	movs	r0, r3
 8000c96:	f004 f8ad 	bl	8004df4 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <main+0x10c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	69da      	ldr	r2, [r3, #28]
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	025b      	lsls	r3, r3, #9
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	025b      	lsls	r3, r3, #9
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d0f5      	beq.n	8000c9c <main+0x84>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <main+0x10c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	69da      	ldr	r2, [r3, #28]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	03db      	lsls	r3, r3, #15
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d1f5      	bne.n	8000cb2 <main+0x9a>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <main+0x110>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <main+0x110>)
 8000cce:	2210      	movs	r2, #16
 8000cd0:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <main+0x110>)
 8000cd4:	2223      	movs	r2, #35	; 0x23
 8000cd6:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <main+0x110>)
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <main+0x10c>)
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	f006 fab8 	bl	8007254 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <main+0xd4>
      Error_Handler();
 8000ce8:	f000 fcd8 	bl	800169c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <main+0x10c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <main+0x10c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	03c9      	lsls	r1, r1, #15
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <main+0x10c>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f006 fb0d 	bl	8007320 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000d06:	4909      	ldr	r1, [pc, #36]	; (8000d2c <main+0x114>)
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <main+0x10c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f005 f99c 	bl	800604a <HAL_UART_Receive_IT>
 8000d12:	e7f8      	b.n	8000d06 <main+0xee>
 8000d14:	08007474 	.word	0x08007474
 8000d18:	200000d0 	.word	0x200000d0
 8000d1c:	200001f8 	.word	0x200001f8
 8000d20:	20000240 	.word	0x20000240
 8000d24:	20000288 	.word	0x20000288
 8000d28:	20000370 	.word	0x20000370
 8000d2c:	2000030c 	.word	0x2000030c

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b097      	sub	sp, #92	; 0x5c
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	2428      	movs	r4, #40	; 0x28
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2330      	movs	r3, #48	; 0x30
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f006 fb67 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	2318      	movs	r3, #24
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f006 fb5f 	bl	8007414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f006 fb58 	bl	8007414 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d64:	0021      	movs	r1, r4
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2212      	movs	r2, #18
 8000d6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2201      	movs	r2, #1
 8000d76:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2210      	movs	r2, #16
 8000d82:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2202      	movs	r2, #2
 8000d88:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	22a0      	movs	r2, #160	; 0xa0
 8000d94:	0392      	lsls	r2, r2, #14
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 ff07 	bl	8003bb4 <HAL_RCC_OscConfig>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000daa:	f000 fc77 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	2118      	movs	r1, #24
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2207      	movs	r2, #7
 8000db4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f003 fa0b 	bl	80041e8 <HAL_RCC_ClockConfig>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dd6:	f000 fc61 	bl	800169c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2221      	movs	r2, #33	; 0x21
 8000dde:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2203      	movs	r2, #3
 8000de4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	0018      	movs	r0, r3
 8000df0:	f003 fb4c 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000df8:	f000 fc50 	bl	800169c <Error_Handler>
  }
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b017      	add	sp, #92	; 0x5c
 8000e02:	bd90      	pop	{r4, r7, pc}

08000e04 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	230c      	movs	r3, #12
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f006 fafe 	bl	8007414 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e18:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <MX_ADC_Init+0x250>)
 8000e1a:	4a8f      	ldr	r2, [pc, #572]	; (8001058 <MX_ADC_Init+0x254>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e1e:	4b8d      	ldr	r3, [pc, #564]	; (8001054 <MX_ADC_Init+0x250>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e24:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <MX_ADC_Init+0x250>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2a:	4b8a      	ldr	r3, [pc, #552]	; (8001054 <MX_ADC_Init+0x250>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e30:	4b88      	ldr	r3, [pc, #544]	; (8001054 <MX_ADC_Init+0x250>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e36:	4b87      	ldr	r3, [pc, #540]	; (8001054 <MX_ADC_Init+0x250>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e3c:	4b85      	ldr	r3, [pc, #532]	; (8001054 <MX_ADC_Init+0x250>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e42:	4b84      	ldr	r3, [pc, #528]	; (8001054 <MX_ADC_Init+0x250>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e48:	4b82      	ldr	r3, [pc, #520]	; (8001054 <MX_ADC_Init+0x250>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b81      	ldr	r3, [pc, #516]	; (8001054 <MX_ADC_Init+0x250>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b7f      	ldr	r3, [pc, #508]	; (8001054 <MX_ADC_Init+0x250>)
 8000e56:	22c2      	movs	r2, #194	; 0xc2
 8000e58:	32ff      	adds	r2, #255	; 0xff
 8000e5a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5c:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <MX_ADC_Init+0x250>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e62:	4b7c      	ldr	r3, [pc, #496]	; (8001054 <MX_ADC_Init+0x250>)
 8000e64:	2224      	movs	r2, #36	; 0x24
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e6a:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <MX_ADC_Init+0x250>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <MX_ADC_Init+0x250>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 f80c 	bl	8001e90 <HAL_ADC_Init>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f000 fc0e 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	0152      	lsls	r2, r2, #5
 8000e8c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	0552      	lsls	r2, r2, #21
 8000e94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e96:	1d3a      	adds	r2, r7, #4
 8000e98:	4b6e      	ldr	r3, [pc, #440]	; (8001054 <MX_ADC_Init+0x250>)
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 f9d1 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ea6:	f000 fbf9 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb0:	1d3a      	adds	r2, r7, #4
 8000eb2:	4b68      	ldr	r3, [pc, #416]	; (8001054 <MX_ADC_Init+0x250>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 f9c4 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 fbec 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eca:	1d3a      	adds	r2, r7, #4
 8000ecc:	4b61      	ldr	r3, [pc, #388]	; (8001054 <MX_ADC_Init+0x250>)
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 f9b7 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000eda:	f000 fbdf 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ee4:	1d3a      	adds	r2, r7, #4
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <MX_ADC_Init+0x250>)
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 f9aa 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000ef4:	f000 fbd2 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2205      	movs	r2, #5
 8000efc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000efe:	1d3a      	adds	r2, r7, #4
 8000f00:	4b54      	ldr	r3, [pc, #336]	; (8001054 <MX_ADC_Init+0x250>)
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f001 f99d 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000f0e:	f000 fbc5 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2206      	movs	r2, #6
 8000f16:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f18:	1d3a      	adds	r2, r7, #4
 8000f1a:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <MX_ADC_Init+0x250>)
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 f990 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000f28:	f000 fbb8 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2207      	movs	r2, #7
 8000f30:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	4b47      	ldr	r3, [pc, #284]	; (8001054 <MX_ADC_Init+0x250>)
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 f983 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000f42:	f000 fbab 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2208      	movs	r2, #8
 8000f4a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f4c:	1d3a      	adds	r2, r7, #4
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <MX_ADC_Init+0x250>)
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 f976 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000f5c:	f000 fb9e 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2209      	movs	r2, #9
 8000f64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f66:	1d3a      	adds	r2, r7, #4
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_ADC_Init+0x250>)
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 f969 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000f76:	f000 fb91 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f80:	1d3a      	adds	r2, r7, #4
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <MX_ADC_Init+0x250>)
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f001 f95c 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f90:	f000 fb84 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	220b      	movs	r2, #11
 8000f98:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_ADC_Init+0x250>)
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 f94f 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000faa:	f000 fb77 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	220c      	movs	r2, #12
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <MX_ADC_Init+0x250>)
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 f942 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000fc4:	f000 fb6a 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	220d      	movs	r2, #13
 8000fcc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_ADC_Init+0x250>)
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 f935 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000fde:	f000 fb5d 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	220e      	movs	r2, #14
 8000fe6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe8:	1d3a      	adds	r2, r7, #4
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_ADC_Init+0x250>)
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 f928 	bl	8002244 <HAL_ADC_ConfigChannel>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000ff8:	f000 fb50 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	220f      	movs	r2, #15
 8001000:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001002:	1d3a      	adds	r2, r7, #4
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_ADC_Init+0x250>)
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f001 f91b 	bl	8002244 <HAL_ADC_ConfigChannel>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8001012:	f000 fb43 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2210      	movs	r2, #16
 800101a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800101c:	1d3a      	adds	r2, r7, #4
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_ADC_Init+0x250>)
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f90e 	bl	8002244 <HAL_ADC_ConfigChannel>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 800102c:	f000 fb36 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2211      	movs	r2, #17
 8001034:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_ADC_Init+0x250>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f001 f901 	bl	8002244 <HAL_ADC_ConfigChannel>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8001046:	f000 fb29 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	2000004c 	.word	0x2000004c
 8001058:	40012400 	.word	0x40012400

0800105c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_DAC1_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001068:	003b      	movs	r3, r7
 800106a:	0018      	movs	r0, r3
 800106c:	2308      	movs	r3, #8
 800106e:	001a      	movs	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	f006 f9cf 	bl	8007414 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_DAC1_Init+0x5c>)
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <MX_DAC1_Init+0x60>)
 800107a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_DAC1_Init+0x5c>)
 800107e:	0018      	movs	r0, r3
 8001080:	f001 fbd4 	bl	800282c <HAL_DAC_Init>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001088:	f000 fb08 	bl	800169c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800108c:	003b      	movs	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001092:	003b      	movs	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001098:	0039      	movs	r1, r7
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_DAC1_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 fbe7 	bl	8002872 <HAL_DAC_ConfigChannel>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 80010a8:	f000 faf8 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000039a 	.word	0x2000039a
 80010b8:	200000d0 	.word	0x200000d0
 80010bc:	40007400 	.word	0x40007400

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_I2C1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_I2C1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_I2C1_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <MX_I2C1_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_I2C1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C1_Init+0x74>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 ffef 	bl	80030e0 <HAL_I2C_Init>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fac9 	bl	800169c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C1_Init+0x74>)
 800110c:	2100      	movs	r1, #0
 800110e:	0018      	movs	r0, r3
 8001110:	f002 fc84 	bl	8003a1c <HAL_I2CEx_ConfigAnalogFilter>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fac0 	bl	800169c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <MX_I2C1_Init+0x74>)
 800111e:	2100      	movs	r1, #0
 8001120:	0018      	movs	r0, r3
 8001122:	f002 fcc7 	bl	8003ab4 <HAL_I2CEx_ConfigDigitalFilter>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fab7 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000e4 	.word	0x200000e4
 8001138:	40005400 	.word	0x40005400
 800113c:	2000090e 	.word	0x2000090e

08001140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <MX_SPI1_Init+0x7c>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_SPI1_Init+0x78>)
 800114c:	2282      	movs	r2, #130	; 0x82
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	00d2      	lsls	r2, r2, #3
 8001158:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI1_Init+0x78>)
 800115c:	22f0      	movs	r2, #240	; 0xf0
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_SPI1_Init+0x78>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001178:	2230      	movs	r2, #48	; 0x30
 800117a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI1_Init+0x78>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_SPI1_Init+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001190:	2207      	movs	r2, #7
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI1_Init+0x78>)
 800119c:	2208      	movs	r2, #8
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <MX_SPI1_Init+0x78>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f003 fa50 	bl	8004648 <HAL_SPI_Init>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 fa76 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000130 	.word	0x20000130
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_SPI2_Init+0x78>)
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <MX_SPI2_Init+0x7c>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_SPI2_Init+0x78>)
 80011cc:	2282      	movs	r2, #130	; 0x82
 80011ce:	0052      	lsls	r2, r2, #1
 80011d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_SPI2_Init+0x78>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	00d2      	lsls	r2, r2, #3
 80011d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_SPI2_Init+0x78>)
 80011dc:	22f0      	movs	r2, #240	; 0xf0
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_SPI2_Init+0x78>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_SPI2_Init+0x78>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_SPI2_Init+0x78>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_SPI2_Init+0x78>)
 80011f8:	2230      	movs	r2, #48	; 0x30
 80011fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI2_Init+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_SPI2_Init+0x78>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_SPI2_Init+0x78>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_SPI2_Init+0x78>)
 8001210:	2207      	movs	r2, #7
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_SPI2_Init+0x78>)
 8001216:	2200      	movs	r2, #0
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_SPI2_Init+0x78>)
 800121c:	2208      	movs	r2, #8
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MX_SPI2_Init+0x78>)
 8001222:	0018      	movs	r0, r3
 8001224:	f003 fa10 	bl	8004648 <HAL_SPI_Init>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800122c:	f000 fa36 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000194 	.word	0x20000194
 800123c:	40003800 	.word	0x40003800

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	2348      	movs	r3, #72	; 0x48
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	0018      	movs	r0, r3
 800124c:	2310      	movs	r3, #16
 800124e:	001a      	movs	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	f006 f8df 	bl	8007414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	0018      	movs	r0, r3
 800125c:	2308      	movs	r3, #8
 800125e:	001a      	movs	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	f006 f8d7 	bl	8007414 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	2324      	movs	r3, #36	; 0x24
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	231c      	movs	r3, #28
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f006 f8cf 	bl	8007414 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	0018      	movs	r0, r3
 800127a:	2320      	movs	r3, #32
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f006 f8c8 	bl	8007414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001286:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <MX_TIM1_Init+0x164>)
 8001288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800128a:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <MX_TIM1_Init+0x160>)
 800128c:	2263      	movs	r2, #99	; 0x63
 800128e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001298:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <MX_TIM1_Init+0x168>)
 800129a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <MX_TIM1_Init+0x160>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f003 fd4f 	bl	8004d54 <HAL_TIM_Base_Init>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80012ba:	f000 f9ef 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	2148      	movs	r1, #72	; 0x48
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0152      	lsls	r2, r2, #5
 80012c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c8:	187a      	adds	r2, r7, r1
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f004 f8c4 	bl	800545c <HAL_TIM_ConfigClockSource>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012d8:	f000 f9e0 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f003 fe88 	bl	8004ff4 <HAL_TIM_PWM_Init>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80012e8:	f000 f9d8 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fa:	187a      	adds	r2, r7, r1
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_TIM1_Init+0x160>)
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f004 fcd9 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800130a:	f000 f9c7 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130e:	2124      	movs	r1, #36	; 0x24
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2260      	movs	r2, #96	; 0x60
 8001314:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	22e0      	movs	r2, #224	; 0xe0
 800131a:	32ff      	adds	r2, #255	; 0xff
 800131c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	1879      	adds	r1, r7, r1
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001340:	2200      	movs	r2, #0
 8001342:	0018      	movs	r0, r3
 8001344:	f003 ffc4 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800134c:	f000 f9a6 	bl	800169c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	0192      	lsls	r2, r2, #6
 8001374:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137c:	1d3a      	adds	r2, r7, #4
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f004 fcf6 	bl	8005d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800138c:	f000 f986 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <MX_TIM1_Init+0x160>)
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fbc2 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b016      	add	sp, #88	; 0x58
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f8 	.word	0x200001f8
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	0000bb7f 	.word	0x0000bb7f

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	2328      	movs	r3, #40	; 0x28
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	0018      	movs	r0, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f006 f829 	bl	8007414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	2320      	movs	r3, #32
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	0018      	movs	r0, r3
 80013c8:	2308      	movs	r3, #8
 80013ca:	001a      	movs	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f006 f821 	bl	8007414 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	0018      	movs	r0, r3
 80013d6:	231c      	movs	r3, #28
 80013d8:	001a      	movs	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f006 f81a 	bl	8007414 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_TIM2_Init+0xf8>)
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	05d2      	lsls	r2, r2, #23
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_TIM2_Init+0xf8>)
 80013ea:	2263      	movs	r2, #99	; 0x63
 80013ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_TIM2_Init+0xf8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_TIM2_Init+0xf8>)
 80013f6:	4a2c      	ldr	r2, [pc, #176]	; (80014a8 <MX_TIM2_Init+0xfc>)
 80013f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_TIM2_Init+0xf8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001408:	0018      	movs	r0, r3
 800140a:	f003 fca3 	bl	8004d54 <HAL_TIM_Base_Init>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 f943 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001416:	2128      	movs	r1, #40	; 0x28
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0152      	lsls	r2, r2, #5
 800141e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001420:	187a      	adds	r2, r7, r1
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f004 f818 	bl	800545c <HAL_TIM_ConfigClockSource>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001430:	f000 f934 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001436:	0018      	movs	r0, r3
 8001438:	f003 fddc 	bl	8004ff4 <HAL_TIM_PWM_Init>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001440:	f000 f92c 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2120      	movs	r1, #32
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001452:	187a      	adds	r2, r7, r1
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f004 fc2d 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001462:	f000 f91b 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2260      	movs	r2, #96	; 0x60
 800146a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 - 1;
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	22e0      	movs	r2, #224	; 0xe0
 8001470:	32ff      	adds	r2, #255	; 0xff
 8001472:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001480:	1d39      	adds	r1, r7, #4
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001484:	220c      	movs	r2, #12
 8001486:	0018      	movs	r0, r3
 8001488:	f003 ff22 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001490:	f000 f904 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <MX_TIM2_Init+0xf8>)
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fb40 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b00e      	add	sp, #56	; 0x38
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000240 	.word	0x20000240
 80014a8:	0000ea5f 	.word	0x0000ea5f

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_USART1_UART_Init+0x6c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_USART1_UART_Init+0x70>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_USART1_UART_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <MX_USART1_UART_Init+0x7c>)
 80014c6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014ca:	22e1      	movs	r2, #225	; 0xe1
 80014cc:	0212      	lsls	r2, r2, #8
 80014ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014e4:	220c      	movs	r2, #12
 80014e6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <MX_USART1_UART_Init+0x78>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x78>)
 8001502:	0018      	movs	r0, r3
 8001504:	f004 fca4 	bl	8005e50 <HAL_UART_Init>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 800150c:	f000 f8c6 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	200003b2 	.word	0x200003b2
 800151c:	200003ba 	.word	0x200003ba
 8001520:	200003e2 	.word	0x200003e2
 8001524:	20000288 	.word	0x20000288
 8001528:	40013800 	.word	0x40013800

0800152c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_DMA_Init+0x38>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_DMA_Init+0x38>)
 8001538:	2101      	movs	r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_DMA_Init+0x38>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2009      	movs	r0, #9
 8001550:	f001 f93a 	bl	80027c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001554:	2009      	movs	r0, #9
 8001556:	f001 f94c 	bl	80027f2 <HAL_NVIC_EnableIRQ>

}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40021000 	.word	0x40021000

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	2414      	movs	r4, #20
 8001570:	193b      	adds	r3, r7, r4
 8001572:	0018      	movs	r0, r3
 8001574:	2314      	movs	r3, #20
 8001576:	001a      	movs	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f005 ff4b 	bl	8007414 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <MX_GPIO_Init+0x124>)
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	4b42      	ldr	r3, [pc, #264]	; (800168c <MX_GPIO_Init+0x124>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	0309      	lsls	r1, r1, #12
 8001588:	430a      	orrs	r2, r1
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <MX_GPIO_Init+0x124>)
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <MX_GPIO_Init+0x124>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <MX_GPIO_Init+0x124>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	03c9      	lsls	r1, r1, #15
 80015a4:	430a      	orrs	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	4b38      	ldr	r3, [pc, #224]	; (800168c <MX_GPIO_Init+0x124>)
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	03db      	lsls	r3, r3, #15
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b35      	ldr	r3, [pc, #212]	; (800168c <MX_GPIO_Init+0x124>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <MX_GPIO_Init+0x124>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0289      	lsls	r1, r1, #10
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b31      	ldr	r3, [pc, #196]	; (800168c <MX_GPIO_Init+0x124>)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <MX_GPIO_Init+0x124>)
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <MX_GPIO_Init+0x124>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	02c9      	lsls	r1, r1, #11
 80015dc:	430a      	orrs	r2, r1
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <MX_GPIO_Init+0x124>)
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	02db      	lsls	r3, r3, #11
 80015e8:	4013      	ands	r3, r2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80015ee:	239f      	movs	r3, #159	; 0x9f
 80015f0:	019b      	lsls	r3, r3, #6
 80015f2:	4827      	ldr	r0, [pc, #156]	; (8001690 <MX_GPIO_Init+0x128>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	0019      	movs	r1, r3
 80015f8:	f001 fd55 	bl	80030a6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <MX_GPIO_Init+0x12c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	21c0      	movs	r1, #192	; 0xc0
 8001602:	0018      	movs	r0, r3
 8001604:	f001 fd4f 	bl	80030a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <MX_GPIO_Init+0x130>)
 800160a:	2200      	movs	r2, #0
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	0018      	movs	r0, r3
 8001610:	f001 fd49 	bl	80030a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001614:	193b      	adds	r3, r7, r4
 8001616:	229f      	movs	r2, #159	; 0x9f
 8001618:	0192      	lsls	r2, r2, #6
 800161a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2201      	movs	r2, #1
 8001620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	193b      	adds	r3, r7, r4
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <MX_GPIO_Init+0x128>)
 8001632:	0019      	movs	r1, r3
 8001634:	0010      	movs	r0, r2
 8001636:	f001 fba9 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	22c0      	movs	r2, #192	; 0xc0
 800163e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2201      	movs	r2, #1
 8001644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001652:	193b      	adds	r3, r7, r4
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <MX_GPIO_Init+0x12c>)
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f001 fb97 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800165e:	0021      	movs	r1, r4
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	187b      	adds	r3, r7, r1
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <MX_GPIO_Init+0x130>)
 800167c:	0019      	movs	r1, r3
 800167e:	0010      	movs	r0, r2
 8001680:	f001 fb84 	bl	8002d8c <HAL_GPIO_Init>

}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b00b      	add	sp, #44	; 0x2c
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	48000800 	.word	0x48000800
 8001694:	48001400 	.word	0x48001400
 8001698:	48000400 	.word	0x48000400

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x44>)
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_MspInit+0x44>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x44>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x44>)
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_MspInit+0x44>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0549      	lsls	r1, r1, #21
 80016d0:	430a      	orrs	r2, r1
 80016d2:	61da      	str	r2, [r3, #28]
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_MspInit+0x44>)
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	055b      	lsls	r3, r3, #21
 80016dc:	4013      	ands	r3, r2
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b08d      	sub	sp, #52	; 0x34
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	241c      	movs	r4, #28
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	0018      	movs	r0, r3
 80016fe:	2314      	movs	r3, #20
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f005 fe86 	bl	8007414 <memset>
  if(hadc->Instance==ADC1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <HAL_ADC_MspInit+0x148>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d000      	beq.n	8001714 <HAL_ADC_MspInit+0x24>
 8001712:	e08d      	b.n	8001830 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_ADC_MspInit+0x14c>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0089      	lsls	r1, r1, #2
 800171e:	430a      	orrs	r2, r1
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0309      	lsls	r1, r1, #12
 800173a:	430a      	orrs	r2, r1
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	031b      	lsls	r3, r3, #12
 8001746:	4013      	ands	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_ADC_MspInit+0x14c>)
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0289      	lsls	r1, r1, #10
 8001756:	430a      	orrs	r2, r1
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_ADC_MspInit+0x14c>)
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	029b      	lsls	r3, r3, #10
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_ADC_MspInit+0x14c>)
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_ADC_MspInit+0x14c>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	02c9      	lsls	r1, r1, #11
 8001772:	430a      	orrs	r2, r1
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_ADC_MspInit+0x14c>)
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	02db      	lsls	r3, r3, #11
 800177e:	4013      	ands	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001784:	193b      	adds	r3, r7, r4
 8001786:	223f      	movs	r2, #63	; 0x3f
 8001788:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2203      	movs	r2, #3
 800178e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	193b      	adds	r3, r7, r4
 8001798:	4a29      	ldr	r2, [pc, #164]	; (8001840 <HAL_ADC_MspInit+0x150>)
 800179a:	0019      	movs	r1, r3
 800179c:	0010      	movs	r0, r2
 800179e:	f001 faf5 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	22ef      	movs	r2, #239	; 0xef
 80017a6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2203      	movs	r2, #3
 80017ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	193a      	adds	r2, r7, r4
 80017b6:	2390      	movs	r3, #144	; 0x90
 80017b8:	05db      	lsls	r3, r3, #23
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f001 fae5 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2203      	movs	r2, #3
 80017c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	2203      	movs	r2, #3
 80017cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_ADC_MspInit+0x154>)
 80017d8:	0019      	movs	r1, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	f001 fad6 	bl	8002d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_ADC_MspInit+0x158>)
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_ADC_MspInit+0x15c>)
 80017e4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_ADC_MspInit+0x158>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_ADC_MspInit+0x158>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_ADC_MspInit+0x158>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_ADC_MspInit+0x158>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_ADC_MspInit+0x158>)
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	00d2      	lsls	r2, r2, #3
 8001806:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_ADC_MspInit+0x158>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_ADC_MspInit+0x158>)
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_ADC_MspInit+0x158>)
 8001816:	0018      	movs	r0, r3
 8001818:	f001 f8a2 	bl	8002960 <HAL_DMA_Init>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001820:	f7ff ff3c 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_ADC_MspInit+0x158>)
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_ADC_MspInit+0x158>)
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b00d      	add	sp, #52	; 0x34
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	40012400 	.word	0x40012400
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800
 8001844:	48000400 	.word	0x48000400
 8001848:	2000008c 	.word	0x2000008c
 800184c:	40020008 	.word	0x40020008

08001850 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b08b      	sub	sp, #44	; 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	2414      	movs	r4, #20
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0018      	movs	r0, r3
 800185e:	2314      	movs	r3, #20
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f005 fdd6 	bl	8007414 <memset>
  if(hdac->Instance==DAC)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_DAC_MspInit+0x84>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12b      	bne.n	80018ca <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	0589      	lsls	r1, r1, #22
 800187c:	430a      	orrs	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	059b      	lsls	r3, r3, #22
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0289      	lsls	r1, r1, #10
 8001898:	430a      	orrs	r2, r1
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_DAC_MspInit+0x88>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	2210      	movs	r2, #16
 80018ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	2203      	movs	r2, #3
 80018b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	193a      	adds	r2, r7, r4
 80018be:	2390      	movs	r3, #144	; 0x90
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f001 fa61 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b00b      	add	sp, #44	; 0x2c
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40007400 	.word	0x40007400
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b08b      	sub	sp, #44	; 0x2c
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	2414      	movs	r4, #20
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	0018      	movs	r0, r3
 80018ea:	2314      	movs	r3, #20
 80018ec:	001a      	movs	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	f005 fd90 	bl	8007414 <memset>
  if(hi2c->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_I2C_MspInit+0x90>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d132      	bne.n	8001964 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_I2C_MspInit+0x94>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_I2C_MspInit+0x94>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	02c9      	lsls	r1, r1, #11
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_I2C_MspInit+0x94>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	02db      	lsls	r3, r3, #11
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	22c0      	movs	r2, #192	; 0xc0
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	0021      	movs	r1, r4
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2212      	movs	r2, #18
 8001928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2203      	movs	r2, #3
 8001934:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	187b      	adds	r3, r7, r1
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_I2C_MspInit+0x98>)
 8001940:	0019      	movs	r1, r3
 8001942:	0010      	movs	r0, r2
 8001944:	f001 fa22 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_I2C_MspInit+0x94>)
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_I2C_MspInit+0x94>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0389      	lsls	r1, r1, #14
 8001952:	430a      	orrs	r2, r1
 8001954:	61da      	str	r2, [r3, #28]
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_I2C_MspInit+0x94>)
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	039b      	lsls	r3, r3, #14
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b00b      	add	sp, #44	; 0x2c
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	40005400 	.word	0x40005400
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08d      	sub	sp, #52	; 0x34
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	241c      	movs	r4, #28
 8001982:	193b      	adds	r3, r7, r4
 8001984:	0018      	movs	r0, r3
 8001986:	2314      	movs	r3, #20
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f005 fd42 	bl	8007414 <memset>
  if(hspi->Instance==SPI1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_SPI_MspInit+0x100>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d132      	bne.n	8001a00 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0149      	lsls	r1, r1, #5
 80019a4:	430a      	orrs	r2, r1
 80019a6:	619a      	str	r2, [r3, #24]
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	015b      	lsls	r3, r3, #5
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	02c9      	lsls	r1, r1, #11
 80019c0:	430a      	orrs	r2, r1
 80019c2:	615a      	str	r2, [r3, #20]
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	02db      	lsls	r3, r3, #11
 80019cc:	4013      	ands	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019d2:	0021      	movs	r1, r4
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	2218      	movs	r2, #24
 80019d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2202      	movs	r2, #2
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2203      	movs	r2, #3
 80019ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_SPI_MspInit+0x108>)
 80019f6:	0019      	movs	r1, r3
 80019f8:	0010      	movs	r0, r2
 80019fa:	f001 f9c7 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019fe:	e037      	b.n	8001a70 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_SPI_MspInit+0x10c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d132      	bne.n	8001a70 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	01c9      	lsls	r1, r1, #7
 8001a14:	430a      	orrs	r2, r1
 8001a16:	61da      	str	r2, [r3, #28]
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	02c9      	lsls	r1, r1, #11
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_SPI_MspInit+0x104>)
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	02db      	lsls	r3, r3, #11
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a42:	211c      	movs	r1, #28
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	22c0      	movs	r2, #192	; 0xc0
 8001a48:	01d2      	lsls	r2, r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2202      	movs	r2, #2
 8001a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_SPI_MspInit+0x108>)
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f001 f98e 	bl	8002d8c <HAL_GPIO_Init>
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b00d      	add	sp, #52	; 0x34
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	40013000 	.word	0x40013000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	40003800 	.word	0x40003800

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_TIM_Base_MspInit+0x8c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d11e      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0109      	lsls	r1, r1, #4
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	200d      	movs	r0, #13
 8001abc:	f000 fe84 	bl	80027c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001ac0:	200d      	movs	r0, #13
 8001ac2:	f000 fe96 	bl	80027f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2101      	movs	r1, #1
 8001aca:	200e      	movs	r0, #14
 8001acc:	f000 fe7c 	bl	80027c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ad0:	200e      	movs	r0, #14
 8001ad2:	f000 fe8e 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad6:	e019      	b.n	8001b0c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d113      	bne.n	8001b0c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	61da      	str	r2, [r3, #28]
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_TIM_Base_MspInit+0x90>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	200f      	movs	r0, #15
 8001b02:	f000 fe61 	bl	80027c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 fe73 	bl	80027f2 <HAL_NVIC_EnableIRQ>
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b004      	add	sp, #16
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40012c00 	.word	0x40012c00
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	2414      	movs	r4, #20
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	0018      	movs	r0, r3
 8001b2a:	2314      	movs	r3, #20
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	2100      	movs	r1, #0
 8001b30:	f005 fc70 	bl	8007414 <memset>
  if(htim->Instance==TIM1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <HAL_TIM_MspPostInit+0xd0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d126      	bne.n	8001b8c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0289      	lsls	r1, r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	0052      	lsls	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	0021      	movs	r1, r4
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2202      	movs	r2, #2
 8001b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	2202      	movs	r2, #2
 8001b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	187a      	adds	r2, r7, r1
 8001b7e:	2390      	movs	r3, #144	; 0x90
 8001b80:	05db      	lsls	r3, r3, #23
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f001 f901 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b8a:	e02a      	b.n	8001be2 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	05db      	lsls	r3, r3, #23
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d124      	bne.n	8001be2 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	02c9      	lsls	r1, r1, #11
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_TIM_MspPostInit+0xd4>)
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	02db      	lsls	r3, r3, #11
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bb4:	2114      	movs	r1, #20
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_TIM_MspPostInit+0xd8>)
 8001bda:	0019      	movs	r1, r3
 8001bdc:	0010      	movs	r0, r2
 8001bde:	f001 f8d5 	bl	8002d8c <HAL_GPIO_Init>
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b00b      	add	sp, #44	; 0x2c
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000400 	.word	0x48000400

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b08b      	sub	sp, #44	; 0x2c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	2414      	movs	r4, #20
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	2314      	movs	r3, #20
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f005 fc02 	bl	8007414 <memset>
  if(huart->Instance==USART1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_UART_MspInit+0xa4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13b      	bne.n	8001c92 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	01c9      	lsls	r1, r1, #7
 8001c24:	430a      	orrs	r2, r1
 8001c26:	619a      	str	r2, [r3, #24]
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0289      	lsls	r1, r1, #10
 8001c40:	430a      	orrs	r2, r1
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_UART_MspInit+0xa8>)
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	029b      	lsls	r3, r3, #10
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	22c0      	movs	r2, #192	; 0xc0
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	0021      	movs	r1, r4
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2202      	movs	r2, #2
 8001c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2201      	movs	r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	187a      	adds	r2, r7, r1
 8001c76:	2390      	movs	r3, #144	; 0x90
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f001 f885 	bl	8002d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	201b      	movs	r0, #27
 8001c88:	f000 fd9e 	bl	80027c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c8c:	201b      	movs	r0, #27
 8001c8e:	f000 fdb0 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b00b      	add	sp, #44	; 0x2c
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc8:	f000 f8b8 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <DMA1_Channel1_IRQHandler+0x14>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f000 ff6b 	bl	8002bb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	2000008c 	.word	0x2000008c

08001cec <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f003 f9d6 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	200001f8 	.word	0x200001f8

08001d04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <TIM1_CC_IRQHandler+0x14>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f003 f9ca 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	200001f8 	.word	0x200001f8

08001d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <TIM2_IRQHandler+0x14>)
 8001d22:	0018      	movs	r0, r3
 8001d24:	f003 f9be 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	20000240 	.word	0x20000240

08001d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <USART1_IRQHandler+0x14>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f004 f9e6 	bl	800610c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000288 	.word	0x20000288

08001d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5e:	490e      	ldr	r1, [pc, #56]	; (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d74:	4c0b      	ldr	r4, [pc, #44]	; (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d82:	f7ff ffe3 	bl	8001d4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d86:	f005 fb21 	bl	80073cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8a:	f7fe ff45 	bl	8000c18 <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   r0, =_estack
 8001d90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001d9c:	08007634 	.word	0x08007634
  ldr r2, =_sbss
 8001da0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001da4:	200003ec 	.word	0x200003ec

08001da8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_COMP_IRQHandler>
	...

08001dac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_Init+0x24>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_Init+0x24>)
 8001db6:	2110      	movs	r1, #16
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f809 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc2:	f7ff fc71 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_InitTick+0x5c>)
 8001dde:	681c      	ldr	r4, [r3, #0]
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_InitTick+0x60>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	0019      	movs	r1, r3
 8001de6:	23fa      	movs	r3, #250	; 0xfa
 8001de8:	0098      	lsls	r0, r3, #2
 8001dea:	f7fe f98d 	bl	8000108 <__udivsi3>
 8001dee:	0003      	movs	r3, r0
 8001df0:	0019      	movs	r1, r3
 8001df2:	0020      	movs	r0, r4
 8001df4:	f7fe f988 	bl	8000108 <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fd09 	bl	8002812 <HAL_SYSTICK_Config>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e00f      	b.n	8001e28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d80b      	bhi.n	8001e26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	2301      	movs	r3, #1
 8001e12:	425b      	negs	r3, r3
 8001e14:	2200      	movs	r2, #0
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fcd6 	bl	80027c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_InitTick+0x64>)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b003      	add	sp, #12
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	20000024 	.word	0x20000024
 8001e34:	2000002c 	.word	0x2000002c
 8001e38:	20000028 	.word	0x20000028

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	001a      	movs	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x20>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	18d2      	adds	r2, r2, r3
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_IncTick+0x20>)
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	2000002c 	.word	0x2000002c
 8001e5c:	200003e8 	.word	0x200003e8

08001e60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_GetTick+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	200003e8 	.word	0x200003e8

08001e74 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_SuspendTick+0x18>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_SuspendTick+0x18>)
 8001e7e:	2102      	movs	r1, #2
 8001e80:	438a      	bics	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e125      	b.n	80020fa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2234      	movs	r2, #52	; 0x34
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff fc12 	bl	80016f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d000      	beq.n	8001ed8 <HAL_ADC_Init+0x48>
 8001ed6:	e103      	b.n	80020e0 <HAL_ADC_Init+0x250>
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d000      	beq.n	8001ee4 <HAL_ADC_Init+0x54>
 8001ee2:	e0fd      	b.n	80020e0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001eee:	d000      	beq.n	8001ef2 <HAL_ADC_Init+0x62>
 8001ef0:	e0f6      	b.n	80020e0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a83      	ldr	r2, [pc, #524]	; (8002104 <HAL_ADC_Init+0x274>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2202      	movs	r2, #2
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d112      	bne.n	8001f36 <HAL_ADC_Init+0xa6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d009      	beq.n	8001f32 <HAL_ADC_Init+0xa2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	401a      	ands	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0xa6>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_Init+0xa8>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d116      	bne.n	8001f6a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2218      	movs	r2, #24
 8001f44:	4393      	bics	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	0899      	lsrs	r1, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4964      	ldr	r1, [pc, #400]	; (8002108 <HAL_ADC_Init+0x278>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7e1b      	ldrb	r3, [r3, #24]
 8001f7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e5b      	ldrb	r3, [r3, #25]
 8001f84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7e9b      	ldrb	r3, [r3, #26]
 8001f8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d002      	beq.n	8001f9e <HAL_ADC_Init+0x10e>
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_Init+0x110>
 8001f9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fa0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fa6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_Init+0x124>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_Init+0x126>
 8001fb4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001fb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2124      	movs	r1, #36	; 0x24
 8001fbc:	5c5b      	ldrb	r3, [r3, r1]
 8001fbe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fc0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7edb      	ldrb	r3, [r3, #27]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d115      	bne.n	8001ffc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e9b      	ldrb	r3, [r3, #26]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	0252      	lsls	r2, r2, #9
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	e00b      	b.n	8001ffc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	2220      	movs	r2, #32
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	23c2      	movs	r3, #194	; 0xc2
 8002002:	33ff      	adds	r3, #255	; 0xff
 8002004:	429a      	cmp	r2, r3
 8002006:	d007      	beq.n	8002018 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002010:	4313      	orrs	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4313      	orrs	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68d9      	ldr	r1, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	429a      	cmp	r2, r3
 8002032:	d01b      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d017      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	2b02      	cmp	r3, #2
 8002042:	d013      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2b03      	cmp	r3, #3
 800204a:	d00f      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00b      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	2b05      	cmp	r3, #5
 800205a:	d007      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	2b06      	cmp	r3, #6
 8002062:	d003      	beq.n	800206c <HAL_ADC_Init+0x1dc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b07      	cmp	r3, #7
 800206a:	d112      	bne.n	8002092 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2107      	movs	r1, #7
 8002078:	438a      	bics	r2, r1
 800207a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6959      	ldr	r1, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	2207      	movs	r2, #7
 8002088:	401a      	ands	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_ADC_Init+0x27c>)
 800209a:	4013      	ands	r3, r2
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d10b      	bne.n	80020ba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	2203      	movs	r2, #3
 80020ae:	4393      	bics	r3, r2
 80020b0:	2201      	movs	r2, #1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020b8:	e01c      	b.n	80020f4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	2212      	movs	r2, #18
 80020c0:	4393      	bics	r3, r2
 80020c2:	2210      	movs	r2, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80020d6:	230f      	movs	r3, #15
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020de:	e009      	b.n	80020f4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	2210      	movs	r2, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020ec:	230f      	movs	r3, #15
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	fffffefd 	.word	0xfffffefd
 8002108:	fffe0219 	.word	0xfffe0219
 800210c:	833fffe7 	.word	0x833fffe7

08002110 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2317      	movs	r3, #23
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d15e      	bne.n	80021ee <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2234      	movs	r2, #52	; 0x34
 8002134:	5c9b      	ldrb	r3, [r3, r2]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_Start_DMA+0x2e>
 800213a:	2302      	movs	r3, #2
 800213c:	e05e      	b.n	80021fc <HAL_ADC_Start_DMA+0xec>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2234      	movs	r2, #52	; 0x34
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	7e5b      	ldrb	r3, [r3, #25]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d007      	beq.n	800215e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800214e:	2317      	movs	r3, #23
 8002150:	18fc      	adds	r4, r7, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f983 	bl	8002460 <ADC_Enable>
 800215a:	0003      	movs	r3, r0
 800215c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d146      	bne.n	80021f6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_ADC_Start_DMA+0xf4>)
 800216e:	4013      	ands	r3, r2
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2234      	movs	r2, #52	; 0x34
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_ADC_Start_DMA+0xf8>)
 800218e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_ADC_Start_DMA+0xfc>)
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_ADC_Start_DMA+0x100>)
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	221c      	movs	r2, #28
 80021a6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2110      	movs	r1, #16
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3340      	adds	r3, #64	; 0x40
 80021d2:	0019      	movs	r1, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f000 fc0a 	bl	80029f0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2104      	movs	r1, #4
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ee:	2317      	movs	r3, #23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021f6:	2317      	movs	r3, #23
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b007      	add	sp, #28
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	fffff0fe 	.word	0xfffff0fe
 8002208:	08002569 	.word	0x08002569
 800220c:	0800261d 	.word	0x0800261d
 8002210:	0800263b 	.word	0x0800263b

08002214 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224e:	230f      	movs	r3, #15
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	055b      	lsls	r3, r3, #21
 8002262:	429a      	cmp	r2, r3
 8002264:	d011      	beq.n	800228a <HAL_ADC_ConfigChannel+0x46>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d00d      	beq.n	800228a <HAL_ADC_ConfigChannel+0x46>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	2b02      	cmp	r3, #2
 8002274:	d009      	beq.n	800228a <HAL_ADC_ConfigChannel+0x46>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	2b03      	cmp	r3, #3
 800227c:	d005      	beq.n	800228a <HAL_ADC_ConfigChannel+0x46>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	2b04      	cmp	r3, #4
 8002284:	d001      	beq.n	800228a <HAL_ADC_ConfigChannel+0x46>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2234      	movs	r2, #52	; 0x34
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x54>
 8002294:	2302      	movs	r3, #2
 8002296:	e0d0      	b.n	800243a <HAL_ADC_ConfigChannel+0x1f6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2234      	movs	r2, #52	; 0x34
 800229c:	2101      	movs	r1, #1
 800229e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d000      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x6a>
 80022ac:	e0b4      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_ADC_ConfigChannel+0x200>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d100      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x76>
 80022b8:	e082      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	409a      	lsls	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	429a      	cmp	r2, r3
 80022da:	d037      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d033      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d02f      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d02b      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d027      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b05      	cmp	r3, #5
 8002302:	d023      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b06      	cmp	r3, #6
 800230a:	d01f      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	2b07      	cmp	r3, #7
 8002312:	d01b      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2107      	movs	r1, #7
 8002320:	400b      	ands	r3, r1
 8002322:	429a      	cmp	r2, r3
 8002324:	d012      	beq.n	800234c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2107      	movs	r1, #7
 8002332:	438a      	bics	r2, r1
 8002334:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2207      	movs	r2, #7
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d007      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x120>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b11      	cmp	r3, #17
 800235a:	d003      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x120>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d163      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_ADC_ConfigChannel+0x204>)
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d009      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x140>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b11      	cmp	r3, #17
 8002376:	d102      	bne.n	800237e <HAL_ADC_ConfigChannel+0x13a>
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	03db      	lsls	r3, r3, #15
 800237c:	e004      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	045b      	lsls	r3, r3, #17
 8002382:	e001      	b.n	8002388 <HAL_ADC_ConfigChannel+0x144>
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_ADC_ConfigChannel+0x204>)
 800238a:	430b      	orrs	r3, r1
 800238c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d14a      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_ADC_ConfigChannel+0x208>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	492d      	ldr	r1, [pc, #180]	; (8002450 <HAL_ADC_ConfigChannel+0x20c>)
 800239c:	0018      	movs	r0, r3
 800239e:	f7fd feb3 	bl	8000108 <__udivsi3>
 80023a2:	0003      	movs	r3, r0
 80023a4:	001a      	movs	r2, r3
 80023a6:	0013      	movs	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f9      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x16e>
 80023be:	e035      	b.n	800242c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	4099      	lsls	r1, r3
 80023ce:	000b      	movs	r3, r1
 80023d0:	43d9      	mvns	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d007      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x1ae>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b11      	cmp	r3, #17
 80023e8:	d003      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x1ae>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d11c      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_ADC_ConfigChannel+0x204>)
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d007      	beq.n	800240e <HAL_ADC_ConfigChannel+0x1ca>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b11      	cmp	r3, #17
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x1c6>
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_ADC_ConfigChannel+0x210>)
 8002408:	e002      	b.n	8002410 <HAL_ADC_ConfigChannel+0x1cc>
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_ADC_ConfigChannel+0x214>)
 800240c:	e000      	b.n	8002410 <HAL_ADC_ConfigChannel+0x1cc>
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_ADC_ConfigChannel+0x218>)
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_ADC_ConfigChannel+0x204>)
 8002412:	400b      	ands	r3, r1
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e009      	b.n	800242c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	2220      	movs	r2, #32
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2234      	movs	r2, #52	; 0x34
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781b      	ldrb	r3, [r3, #0]
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	00001001 	.word	0x00001001
 8002448:	40012708 	.word	0x40012708
 800244c:	20000024 	.word	0x20000024
 8002450:	000f4240 	.word	0x000f4240
 8002454:	ffbfffff 	.word	0xffbfffff
 8002458:	feffffff 	.word	0xfeffffff
 800245c:	ff7fffff 	.word	0xff7fffff

08002460 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2203      	movs	r2, #3
 8002478:	4013      	ands	r3, r2
 800247a:	2b01      	cmp	r3, #1
 800247c:	d112      	bne.n	80024a4 <ADC_Enable+0x44>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	2b01      	cmp	r3, #1
 800248a:	d009      	beq.n	80024a0 <ADC_Enable+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	401a      	ands	r2, r3
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	429a      	cmp	r2, r3
 800249e:	d101      	bne.n	80024a4 <ADC_Enable+0x44>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <ADC_Enable+0x46>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d152      	bne.n	8002550 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a2a      	ldr	r2, [pc, #168]	; (800255c <ADC_Enable+0xfc>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	2210      	movs	r2, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	2201      	movs	r2, #1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e03f      	b.n	8002552 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <ADC_Enable+0x100>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	491f      	ldr	r1, [pc, #124]	; (8002564 <ADC_Enable+0x104>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fd fe0d 	bl	8000108 <__udivsi3>
 80024ee:	0003      	movs	r3, r0
 80024f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024f2:	e002      	b.n	80024fa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002500:	f7ff fcae 	bl	8001e60 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002508:	e01b      	b.n	8002542 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800250a:	f7ff fca9 	bl	8001e60 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d914      	bls.n	8002542 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	4013      	ands	r3, r2
 8002522:	2b01      	cmp	r3, #1
 8002524:	d00d      	beq.n	8002542 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	2210      	movs	r2, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	2201      	movs	r2, #1
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e007      	b.n	8002552 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	2b01      	cmp	r3, #1
 800254e:	d1dc      	bne.n	800250a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	80000017 	.word	0x80000017
 8002560:	20000024 	.word	0x20000024
 8002564:	000f4240 	.word	0x000f4240

08002568 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	2250      	movs	r2, #80	; 0x50
 800257c:	4013      	ands	r3, r2
 800257e:	d140      	bne.n	8002602 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d12d      	bne.n	80025f8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d129      	bne.n	80025f8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2208      	movs	r2, #8
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d122      	bne.n	80025f8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2204      	movs	r2, #4
 80025ba:	4013      	ands	r3, r2
 80025bc:	d110      	bne.n	80025e0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	210c      	movs	r1, #12
 80025ca:	438a      	bics	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <ADC_DMAConvCplt+0xb0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	2201      	movs	r2, #1
 80025d8:	431a      	orrs	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
 80025de:	e00b      	b.n	80025f8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2220      	movs	r2, #32
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	2201      	movs	r2, #1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff fe0a 	bl	8002214 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002600:	e005      	b.n	800260e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	0010      	movs	r0, r2
 800260c:	4798      	blx	r3
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	fffffefe 	.word	0xfffffefe

0800261c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff fdf9 	bl	8002224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}

0800263a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	2204      	movs	r2, #4
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0018      	movs	r0, r3
 8002664:	f7ff fde6 	bl	8002234 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b004      	add	sp, #16
 800266e:	bd80      	pop	{r7, pc}

08002670 <__NVIC_EnableIRQ>:
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	0002      	movs	r2, r0
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b7f      	cmp	r3, #127	; 0x7f
 8002682:	d809      	bhi.n	8002698 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002684:	1dfb      	adds	r3, r7, #7
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	001a      	movs	r2, r3
 800268a:	231f      	movs	r3, #31
 800268c:	401a      	ands	r2, r3
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_EnableIRQ+0x30>)
 8002690:	2101      	movs	r1, #1
 8002692:	4091      	lsls	r1, r2
 8002694:	000a      	movs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	0002      	movs	r2, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b7f      	cmp	r3, #127	; 0x7f
 80026b8:	d828      	bhi.n	800270c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026ba:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <__NVIC_SetPriority+0xd4>)
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	33c0      	adds	r3, #192	; 0xc0
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	589b      	ldr	r3, [r3, r2]
 80026ca:	1dfa      	adds	r2, r7, #7
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	0011      	movs	r1, r2
 80026d0:	2203      	movs	r2, #3
 80026d2:	400a      	ands	r2, r1
 80026d4:	00d2      	lsls	r2, r2, #3
 80026d6:	21ff      	movs	r1, #255	; 0xff
 80026d8:	4091      	lsls	r1, r2
 80026da:	000a      	movs	r2, r1
 80026dc:	43d2      	mvns	r2, r2
 80026de:	401a      	ands	r2, r3
 80026e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	401a      	ands	r2, r3
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	0018      	movs	r0, r3
 80026f0:	2303      	movs	r3, #3
 80026f2:	4003      	ands	r3, r0
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f8:	481f      	ldr	r0, [pc, #124]	; (8002778 <__NVIC_SetPriority+0xd4>)
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	430a      	orrs	r2, r1
 8002704:	33c0      	adds	r3, #192	; 0xc0
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	501a      	str	r2, [r3, r0]
}
 800270a:	e031      	b.n	8002770 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <__NVIC_SetPriority+0xd8>)
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	0019      	movs	r1, r3
 8002714:	230f      	movs	r3, #15
 8002716:	400b      	ands	r3, r1
 8002718:	3b08      	subs	r3, #8
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3306      	adds	r3, #6
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	18d3      	adds	r3, r2, r3
 8002722:	3304      	adds	r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1dfa      	adds	r2, r7, #7
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	0011      	movs	r1, r2
 800272c:	2203      	movs	r2, #3
 800272e:	400a      	ands	r2, r1
 8002730:	00d2      	lsls	r2, r2, #3
 8002732:	21ff      	movs	r1, #255	; 0xff
 8002734:	4091      	lsls	r1, r2
 8002736:	000a      	movs	r2, r1
 8002738:	43d2      	mvns	r2, r2
 800273a:	401a      	ands	r2, r3
 800273c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	401a      	ands	r2, r3
 8002746:	1dfb      	adds	r3, r7, #7
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	0018      	movs	r0, r3
 800274c:	2303      	movs	r3, #3
 800274e:	4003      	ands	r3, r0
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <__NVIC_SetPriority+0xd8>)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	001c      	movs	r4, r3
 800275c:	230f      	movs	r3, #15
 800275e:	4023      	ands	r3, r4
 8002760:	3b08      	subs	r3, #8
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	430a      	orrs	r2, r1
 8002766:	3306      	adds	r3, #6
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	18c3      	adds	r3, r0, r3
 800276c:	3304      	adds	r3, #4
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b003      	add	sp, #12
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1e5a      	subs	r2, r3, #1
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	045b      	lsls	r3, r3, #17
 8002790:	429a      	cmp	r2, r3
 8002792:	d301      	bcc.n	8002798 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002794:	2301      	movs	r3, #1
 8002796:	e010      	b.n	80027ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <SysTick_Config+0x44>)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	3a01      	subs	r2, #1
 800279e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a0:	2301      	movs	r3, #1
 80027a2:	425b      	negs	r3, r3
 80027a4:	2103      	movs	r1, #3
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff ff7c 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Config+0x44>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <SysTick_Config+0x44>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b002      	add	sp, #8
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	210f      	movs	r1, #15
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	1c02      	adds	r2, r0, #0
 80027d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff ff5d 	bl	80026a4 <__NVIC_SetPriority>
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b004      	add	sp, #16
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	0002      	movs	r2, r0
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fe:	1dfb      	adds	r3, r7, #7
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b25b      	sxtb	r3, r3
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff ff33 	bl	8002670 <__NVIC_EnableIRQ>
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f7ff ffaf 	bl	8002780 <SysTick_Config>
 8002822:	0003      	movs	r3, r0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e015      	b.n	800286a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0018      	movs	r0, r3
 8002852:	f7fe fffd 	bl	8001850 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	795b      	ldrb	r3, [r3, #5]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_DAC_ConfigChannel+0x20>
 800288e:	2302      	movs	r3, #2
 8002890:	e029      	b.n	80028e6 <HAL_DAC_ConfigChannel+0x74>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2202      	movs	r2, #2
 800289c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80028a6:	223e      	movs	r2, #62	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	409a      	lsls	r2, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	43da      	mvns	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4013      	ands	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	409a      	lsls	r2, r3
 80028c8:	0013      	movs	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b006      	add	sp, #24
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	795b      	ldrb	r3, [r3, #5]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_DAC_Start+0x16>
 8002900:	2302      	movs	r3, #2
 8002902:	e028      	b.n	8002956 <HAL_DAC_Start+0x68>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	409a      	lsls	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	223c      	movs	r2, #60	; 0x3c
 8002932:	4013      	ands	r3, r2
 8002934:	2b3c      	cmp	r3, #60	; 0x3c
 8002936:	d107      	bne.n	8002948 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e036      	b.n	80029e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2221      	movs	r2, #33	; 0x21
 800297a:	2102      	movs	r1, #2
 800297c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_DMA_Init+0x8c>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f9c4 	bl	8002d54 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2221      	movs	r2, #33	; 0x21
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}  
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b004      	add	sp, #16
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	ffffc00f 	.word	0xffffc00f

080029f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2317      	movs	r3, #23
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Start_IT+0x24>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e04f      	b.n	8002ab4 <HAL_DMA_Start_IT+0xc4>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2221      	movs	r2, #33	; 0x21
 8002a20:	5c9b      	ldrb	r3, [r3, r2]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d13a      	bne.n	8002a9e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	438a      	bics	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f954 	bl	8002cfa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	210e      	movs	r1, #14
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e00f      	b.n	8002a8c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	210a      	movs	r1, #10
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2104      	movs	r1, #4
 8002a88:	438a      	bics	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e007      	b.n	8002aae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002aae:	2317      	movs	r3, #23
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
} 
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b006      	add	sp, #24
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d008      	beq.n	8002ae2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e020      	b.n	8002b24 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	210e      	movs	r1, #14
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	438a      	bics	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4091      	lsls	r1, r2
 8002b0e:	000a      	movs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2221      	movs	r2, #33	; 0x21
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	210f      	movs	r1, #15
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2221      	movs	r2, #33	; 0x21
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d006      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e028      	b.n	8002ba8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	210e      	movs	r1, #14
 8002b62:	438a      	bics	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	438a      	bics	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4091      	lsls	r1, r2
 8002b82:	000a      	movs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2221      	movs	r2, #33	; 0x21
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	4798      	blx	r3
    } 
  }
  return status;
 8002ba8:	230f      	movs	r3, #15
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	0013      	movs	r3, r2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d024      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x72>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d020      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2220      	movs	r2, #32
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d107      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	438a      	bics	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	4091      	lsls	r1, r2
 8002c0e:	000a      	movs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d100      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x66>
 8002c1a:	e06a      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	0010      	movs	r0, r2
 8002c24:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c26:	e064      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	d02b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xda>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d027      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2220      	movs	r2, #32
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d10b      	bne.n	8002c64 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	210a      	movs	r1, #10
 8002c58:	438a      	bics	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	2101      	movs	r1, #1
 8002c62:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4091      	lsls	r1, r2
 8002c70:	000a      	movs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d036      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	0010      	movs	r0, r2
 8002c8c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c8e:	e030      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d028      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d024      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	210e      	movs	r1, #14
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4091      	lsls	r1, r2
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	0010      	movs	r0, r2
 8002cee:	4798      	blx	r3
    }
   }
}  
 8002cf0:	e7ff      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x13c>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b004      	add	sp, #16
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	2101      	movs	r1, #1
 8002d12:	4091      	lsls	r1, r2
 8002d14:	000a      	movs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d108      	bne.n	8002d3a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d38:	e007      	b.n	8002d4a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <DMA_CalcBaseAndBitshift+0x30>)
 8002d62:	4694      	mov	ip, r2
 8002d64:	4463      	add	r3, ip
 8002d66:	2114      	movs	r1, #20
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd f9cd 	bl	8000108 <__udivsi3>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a03      	ldr	r2, [pc, #12]	; (8002d88 <DMA_CalcBaseAndBitshift+0x34>)
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	bffdfff8 	.word	0xbffdfff8
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e14f      	b.n	800303c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4091      	lsls	r1, r2
 8002da6:	000a      	movs	r2, r1
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d100      	bne.n	8002db4 <HAL_GPIO_Init+0x28>
 8002db2:	e140      	b.n	8003036 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
 8002e08:	0013      	movs	r3, r2
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	2201      	movs	r2, #1
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	409a      	lsls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	58d3      	ldr	r3, [r2, r3]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2107      	movs	r1, #7
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2203      	movs	r2, #3
 8002edc:	401a      	ands	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	4013      	ands	r3, r2
 8002efc:	d100      	bne.n	8002f00 <HAL_GPIO_Init+0x174>
 8002efe:	e09a      	b.n	8003036 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f06:	2101      	movs	r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x2cc>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	589b      	ldr	r3, [r3, r2]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	409a      	lsls	r2, r3
 8002f32:	0013      	movs	r3, r2
 8002f34:	43da      	mvns	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	2390      	movs	r3, #144	; 0x90
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x1e2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a44      	ldr	r2, [pc, #272]	; (800305c <HAL_GPIO_Init+0x2d0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x1de>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_GPIO_Init+0x2d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x1da>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_GPIO_Init+0x2d8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x1d6>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e004      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	2103      	movs	r1, #3
 8002f74:	400a      	ands	r2, r1
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	4093      	lsls	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f80:	4935      	ldr	r1, [pc, #212]	; (8003058 <HAL_GPIO_Init+0x2cc>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	025b      	lsls	r3, r3, #9
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	029b      	lsls	r3, r3, #10
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	035b      	lsls	r3, r3, #13
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43da      	mvns	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	039b      	lsls	r3, r3, #14
 8003024:	4013      	ands	r3, r2
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	40da      	lsrs	r2, r3
 8003044:	1e13      	subs	r3, r2, #0
 8003046:	d000      	beq.n	800304a <HAL_GPIO_Init+0x2be>
 8003048:	e6a8      	b.n	8002d9c <HAL_GPIO_Init+0x10>
  } 
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b006      	add	sp, #24
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40010000 	.word	0x40010000
 800305c:	48000400 	.word	0x48000400
 8003060:	48000800 	.word	0x48000800
 8003064:	48000c00 	.word	0x48000c00
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	000a      	movs	r2, r1
 8003076:	1cbb      	adds	r3, r7, #2
 8003078:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	1cba      	adds	r2, r7, #2
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	4013      	ands	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003086:	230f      	movs	r3, #15
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e003      	b.n	8003098 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
  }
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	0008      	movs	r0, r1
 80030b0:	0011      	movs	r1, r2
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	1c02      	adds	r2, r0, #0
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	1c7b      	adds	r3, r7, #1
 80030ba:	1c0a      	adds	r2, r1, #0
 80030bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030be:	1c7b      	adds	r3, r7, #1
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c6:	1cbb      	adds	r3, r7, #2
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030d0:	1cbb      	adds	r3, r7, #2
 80030d2:	881a      	ldrh	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e082      	b.n	80031f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2241      	movs	r2, #65	; 0x41
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2240      	movs	r2, #64	; 0x40
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f7fe fbe7 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2241      	movs	r2, #65	; 0x41
 8003112:	2124      	movs	r1, #36	; 0x24
 8003114:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4934      	ldr	r1, [pc, #208]	; (8003200 <HAL_I2C_Init+0x120>)
 8003130:	400a      	ands	r2, r1
 8003132:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4931      	ldr	r1, [pc, #196]	; (8003204 <HAL_I2C_Init+0x124>)
 8003140:	400a      	ands	r2, r1
 8003142:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0209      	lsls	r1, r1, #8
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e007      	b.n	800316e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2184      	movs	r1, #132	; 0x84
 8003168:	0209      	lsls	r1, r1, #8
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d104      	bne.n	8003180 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	491f      	ldr	r1, [pc, #124]	; (8003208 <HAL_I2C_Init+0x128>)
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	491a      	ldr	r1, [pc, #104]	; (8003204 <HAL_I2C_Init+0x124>)
 800319c:	400a      	ands	r2, r1
 800319e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69d9      	ldr	r1, [r3, #28]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2241      	movs	r2, #65	; 0x41
 80031e4:	2120      	movs	r1, #32
 80031e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2242      	movs	r2, #66	; 0x42
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	f0ffffff 	.word	0xf0ffffff
 8003204:	ffff7fff 	.word	0xffff7fff
 8003208:	02008000 	.word	0x02008000

0800320c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	0008      	movs	r0, r1
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	0019      	movs	r1, r3
 800321a:	230a      	movs	r3, #10
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	1c02      	adds	r2, r0, #0
 8003220:	801a      	strh	r2, [r3, #0]
 8003222:	2308      	movs	r3, #8
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	1c0a      	adds	r2, r1, #0
 8003228:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2241      	movs	r2, #65	; 0x41
 800322e:	5c9b      	ldrb	r3, [r3, r2]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	d000      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x2c>
 8003236:	e0e7      	b.n	8003408 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2C_Master_Transmit+0x3a>
 8003242:	2302      	movs	r3, #2
 8003244:	e0e1      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800324e:	f7fe fe07 	bl	8001e60 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	0219      	lsls	r1, r3, #8
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2319      	movs	r3, #25
 8003262:	2201      	movs	r2, #1
 8003264:	f000 fa04 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2241      	movs	r2, #65	; 0x41
 8003274:	2121      	movs	r1, #33	; 0x21
 8003276:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2242      	movs	r2, #66	; 0x42
 800327c:	2110      	movs	r1, #16
 800327e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2208      	movs	r2, #8
 8003290:	18ba      	adds	r2, r7, r2
 8003292:	8812      	ldrh	r2, [r2, #0]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2bff      	cmp	r3, #255	; 0xff
 80032a4:	d911      	bls.n	80032ca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	045c      	lsls	r4, r3, #17
 80032b6:	230a      	movs	r3, #10
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	8819      	ldrh	r1, [r3, #0]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	4b55      	ldr	r3, [pc, #340]	; (8003414 <HAL_I2C_Master_Transmit+0x208>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	0023      	movs	r3, r4
 80032c4:	f000 fb74 	bl	80039b0 <I2C_TransferConfig>
 80032c8:	e075      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	049c      	lsls	r4, r3, #18
 80032de:	230a      	movs	r3, #10
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	8819      	ldrh	r1, [r3, #0]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_I2C_Master_Transmit+0x208>)
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	0023      	movs	r3, r4
 80032ec:	f000 fb60 	bl	80039b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032f0:	e061      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 f9f8 	bl	80036ee <I2C_WaitOnTXISFlagUntilTimeout>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e081      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03a      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x1aa>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d136      	bne.n	80033b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	0013      	movs	r3, r2
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	f000 f98b 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e053      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	d911      	bls.n	8003390 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	045c      	lsls	r4, r3, #17
 800337c:	230a      	movs	r3, #10
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	8819      	ldrh	r1, [r3, #0]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	0023      	movs	r3, r4
 800338a:	f000 fb11 	bl	80039b0 <I2C_TransferConfig>
 800338e:	e012      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	049c      	lsls	r4, r3, #18
 80033a4:	230a      	movs	r3, #10
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	8819      	ldrh	r1, [r3, #0]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	2300      	movs	r3, #0
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	0023      	movs	r3, r4
 80033b2:	f000 fafd 	bl	80039b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d198      	bne.n	80032f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f9d0 	bl	800376c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2220      	movs	r2, #32
 80033da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	490c      	ldr	r1, [pc, #48]	; (8003418 <HAL_I2C_Master_Transmit+0x20c>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2241      	movs	r2, #65	; 0x41
 80033f0:	2120      	movs	r1, #32
 80033f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2242      	movs	r2, #66	; 0x42
 80033f8:	2100      	movs	r1, #0
 80033fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b007      	add	sp, #28
 8003410:	bd90      	pop	{r4, r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	80002000 	.word	0x80002000
 8003418:	fe00e800 	.word	0xfe00e800

0800341c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	0008      	movs	r0, r1
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	0019      	movs	r1, r3
 800342a:	230a      	movs	r3, #10
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	1c02      	adds	r2, r0, #0
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	2308      	movs	r3, #8
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	1c0a      	adds	r2, r1, #0
 8003438:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b20      	cmp	r3, #32
 8003444:	d000      	beq.n	8003448 <HAL_I2C_Master_Receive+0x2c>
 8003446:	e0e8      	b.n	800361a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	5c9b      	ldrb	r3, [r3, r2]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Master_Receive+0x3a>
 8003452:	2302      	movs	r3, #2
 8003454:	e0e2      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345e:	f7fe fcff 	bl	8001e60 <HAL_GetTick>
 8003462:	0003      	movs	r3, r0
 8003464:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	0219      	lsls	r1, r3, #8
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	f000 f8fc 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cd      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2241      	movs	r2, #65	; 0x41
 8003484:	2122      	movs	r1, #34	; 0x22
 8003486:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2242      	movs	r2, #66	; 0x42
 800348c:	2110      	movs	r1, #16
 800348e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2208      	movs	r2, #8
 80034a0:	18ba      	adds	r2, r7, r2
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2bff      	cmp	r3, #255	; 0xff
 80034b4:	d911      	bls.n	80034da <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	045c      	lsls	r4, r3, #17
 80034c6:	230a      	movs	r3, #10
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	8819      	ldrh	r1, [r3, #0]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_I2C_Master_Receive+0x208>)
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	0023      	movs	r3, r4
 80034d4:	f000 fa6c 	bl	80039b0 <I2C_TransferConfig>
 80034d8:	e076      	b.n	80035c8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	049c      	lsls	r4, r3, #18
 80034ee:	230a      	movs	r3, #10
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	8819      	ldrh	r1, [r3, #0]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_I2C_Master_Receive+0x208>)
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	0023      	movs	r3, r4
 80034fc:	f000 fa58 	bl	80039b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003500:	e062      	b.n	80035c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f96b 	bl	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e082      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03a      	beq.n	80035c8 <HAL_I2C_Master_Receive+0x1ac>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d136      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	0013      	movs	r3, r2
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	f000 f882 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e053      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	; 0xff
 800357c:	d911      	bls.n	80035a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	045c      	lsls	r4, r3, #17
 800358e:	230a      	movs	r3, #10
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	8819      	ldrh	r1, [r3, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	0023      	movs	r3, r4
 800359c:	f000 fa08 	bl	80039b0 <I2C_TransferConfig>
 80035a0:	e012      	b.n	80035c8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	049c      	lsls	r4, r3, #18
 80035b6:	230a      	movs	r3, #10
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	8819      	ldrh	r1, [r3, #0]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	0023      	movs	r3, r4
 80035c4:	f000 f9f4 	bl	80039b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d197      	bne.n	8003502 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f8c7 	bl	800376c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01a      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2220      	movs	r2, #32
 80035ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	490b      	ldr	r1, [pc, #44]	; (8003628 <HAL_I2C_Master_Receive+0x20c>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2241      	movs	r2, #65	; 0x41
 8003602:	2120      	movs	r1, #32
 8003604:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2242      	movs	r2, #66	; 0x42
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b007      	add	sp, #28
 8003622:	bd90      	pop	{r4, r7, pc}
 8003624:	80002400 	.word	0x80002400
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d103      	bne.n	800364a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	2b01      	cmp	r3, #1
 8003656:	d007      	beq.n	8003668 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]
  }
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	1dfb      	adds	r3, r7, #7
 800367e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003680:	e021      	b.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	d01e      	beq.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe fbea 	bl	8001e60 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d113      	bne.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	2220      	movs	r2, #32
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2241      	movs	r2, #65	; 0x41
 80036ae:	2120      	movs	r1, #32
 80036b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2242      	movs	r2, #66	; 0x42
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00f      	b.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	425a      	negs	r2, r3
 80036d6:	4153      	adcs	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	001a      	movs	r2, r3
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d0ce      	beq.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}

080036ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036fa:	e02b      	b.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f8da 	bl	80038bc <I2C_IsAcknowledgeFailed>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e029      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3301      	adds	r3, #1
 8003714:	d01e      	beq.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fba3 	bl	8001e60 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	2220      	movs	r2, #32
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	2120      	movs	r1, #32
 800373e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2242      	movs	r2, #66	; 0x42
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2202      	movs	r2, #2
 800375c:	4013      	ands	r3, r2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d1cc      	bne.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	e028      	b.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f89b 	bl	80038bc <I2C_IsAcknowledgeFailed>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e026      	b.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fb67 	bl	8001e60 <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	2220      	movs	r2, #32
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2241      	movs	r2, #65	; 0x41
 80037b4:	2120      	movs	r1, #32
 80037b6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2242      	movs	r2, #66	; 0x42
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	2100      	movs	r1, #0
 80037c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2220      	movs	r2, #32
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d1cf      	bne.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b004      	add	sp, #16
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f0:	e055      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f85f 	bl	80038bc <I2C_IsAcknowledgeFailed>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e053      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2220      	movs	r2, #32
 800380e:	4013      	ands	r3, r2
 8003810:	2b20      	cmp	r3, #32
 8003812:	d129      	bne.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2204      	movs	r2, #4
 800381c:	4013      	ands	r3, r2
 800381e:	2b04      	cmp	r3, #4
 8003820:	d105      	bne.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e03f      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	491d      	ldr	r1, [pc, #116]	; (80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003842:	400a      	ands	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2241      	movs	r2, #65	; 0x41
 8003850:	2120      	movs	r1, #32
 8003852:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2242      	movs	r2, #66	; 0x42
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e022      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fe fafa 	bl	8001e60 <HAL_GetTick>
 800386c:	0002      	movs	r2, r0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	2220      	movs	r2, #32
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2241      	movs	r2, #65	; 0x41
 800388e:	2120      	movs	r1, #32
 8003890:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2240      	movs	r2, #64	; 0x40
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2204      	movs	r2, #4
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d1a2      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2210      	movs	r2, #16
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d164      	bne.n	80039a0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	049b      	lsls	r3, r3, #18
 80038e0:	401a      	ands	r2, r3
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	049b      	lsls	r3, r3, #18
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d02b      	beq.n	8003942 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	01c9      	lsls	r1, r1, #7
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fc:	e021      	b.n	8003942 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	d01e      	beq.n	8003942 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003904:	f7fe faac 	bl	8001e60 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <I2C_IsAcknowledgeFailed+0x5e>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	2220      	movs	r2, #32
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2241      	movs	r2, #65	; 0x41
 800392a:	2120      	movs	r1, #32
 800392c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2242      	movs	r2, #66	; 0x42
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e02f      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2220      	movs	r2, #32
 800394a:	4013      	ands	r3, r2
 800394c:	2b20      	cmp	r3, #32
 800394e:	d1d6      	bne.n	80038fe <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2210      	movs	r2, #16
 8003956:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2220      	movs	r2, #32
 800395e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff fe62 	bl	800362c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	490e      	ldr	r1, [pc, #56]	; (80039ac <I2C_IsAcknowledgeFailed+0xf0>)
 8003974:	400a      	ands	r2, r1
 8003976:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	2204      	movs	r2, #4
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2241      	movs	r2, #65	; 0x41
 8003988:	2120      	movs	r1, #32
 800398a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2242      	movs	r2, #66	; 0x42
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	fe00e800 	.word	0xfe00e800

080039b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	0008      	movs	r0, r1
 80039ba:	0011      	movs	r1, r2
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	240a      	movs	r4, #10
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	1c02      	adds	r2, r0, #0
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	2009      	movs	r0, #9
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	1c0a      	adds	r2, r1, #0
 80039cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	0d51      	lsrs	r1, r2, #21
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	00d2      	lsls	r2, r2, #3
 80039dc:	400a      	ands	r2, r1
 80039de:	490e      	ldr	r1, [pc, #56]	; (8003a18 <I2C_TransferConfig+0x68>)
 80039e0:	430a      	orrs	r2, r1
 80039e2:	43d2      	mvns	r2, r2
 80039e4:	401a      	ands	r2, r3
 80039e6:	0011      	movs	r1, r2
 80039e8:	193b      	adds	r3, r7, r4
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	059b      	lsls	r3, r3, #22
 80039ee:	0d9a      	lsrs	r2, r3, #22
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	0418      	lsls	r0, r3, #16
 80039f6:	23ff      	movs	r3, #255	; 0xff
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	4003      	ands	r3, r0
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b005      	add	sp, #20
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	03ff63ff 	.word	0x03ff63ff

08003a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2241      	movs	r2, #65	; 0x41
 8003a2a:	5c9b      	ldrb	r3, [r3, r2]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d138      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e032      	b.n	8003aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2241      	movs	r2, #65	; 0x41
 8003a4c:	2124      	movs	r1, #36	; 0x24
 8003a4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2241      	movs	r2, #65	; 0x41
 8003a94:	2120      	movs	r1, #32
 8003a96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	ffffefff 	.word	0xffffefff

08003ab4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2241      	movs	r2, #65	; 0x41
 8003ac2:	5c9b      	ldrb	r3, [r3, r2]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d139      	bne.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2240      	movs	r2, #64	; 0x40
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e033      	b.n	8003b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2241      	movs	r2, #65	; 0x41
 8003ae4:	2124      	movs	r1, #36	; 0x24
 8003ae6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	438a      	bics	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2241      	movs	r2, #65	; 0x41
 8003b2e:	2120      	movs	r1, #32
 8003b30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fffff0ff 	.word	0xfffff0ff

08003b4c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	000a      	movs	r2, r1
 8003b56:	1cfb      	adds	r3, r7, #3
 8003b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_PWR_EnterSTOPMode+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2203      	movs	r2, #3
 8003b68:	4393      	bics	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_PWR_EnterSTOPMode+0x60>)
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b80:	2104      	movs	r1, #4
 8003b82:	430a      	orrs	r2, r1
 8003b84:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003b86:	1cfb      	adds	r3, r7, #3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b8e:	bf30      	wfi
 8003b90:	e002      	b.n	8003b98 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b92:	bf40      	sev
    __WFE();
 8003b94:	bf20      	wfe
    __WFE();
 8003b96:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <HAL_PWR_EnterSTOPMode+0x64>)
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	611a      	str	r2, [r3, #16]
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e301      	b.n	80041ca <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x1e>
 8003bd0:	e08d      	b.n	8003cee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bd2:	4bc3      	ldr	r3, [pc, #780]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00e      	beq.n	8003bfc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bde:	4bc0      	ldr	r3, [pc, #768]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	220c      	movs	r2, #12
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x64>
 8003bea:	4bbd      	ldr	r3, [pc, #756]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	025b      	lsls	r3, r3, #9
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	4bb8      	ldr	r3, [pc, #736]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	4013      	ands	r3, r2
 8003c06:	d100      	bne.n	8003c0a <HAL_RCC_OscConfig+0x56>
 8003c08:	e070      	b.n	8003cec <HAL_RCC_OscConfig+0x138>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <HAL_RCC_OscConfig+0x60>
 8003c12:	e06b      	b.n	8003cec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e2d8      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_OscConfig+0x7c>
 8003c20:	4baf      	ldr	r3, [pc, #700]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4bae      	ldr	r3, [pc, #696]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0249      	lsls	r1, r1, #9
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e02f      	b.n	8003c90 <HAL_RCC_OscConfig+0xdc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCC_OscConfig+0x9e>
 8003c38:	4ba9      	ldr	r3, [pc, #676]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4ba8      	ldr	r3, [pc, #672]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	49a9      	ldr	r1, [pc, #676]	; (8003ee4 <HAL_RCC_OscConfig+0x330>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	4ba6      	ldr	r3, [pc, #664]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4ba5      	ldr	r3, [pc, #660]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c4a:	49a7      	ldr	r1, [pc, #668]	; (8003ee8 <HAL_RCC_OscConfig+0x334>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e01e      	b.n	8003c90 <HAL_RCC_OscConfig+0xdc>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10e      	bne.n	8003c78 <HAL_RCC_OscConfig+0xc4>
 8003c5a:	4ba1      	ldr	r3, [pc, #644]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4ba0      	ldr	r3, [pc, #640]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	02c9      	lsls	r1, r1, #11
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	4b9d      	ldr	r3, [pc, #628]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b9c      	ldr	r3, [pc, #624]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	2180      	movs	r1, #128	; 0x80
 8003c70:	0249      	lsls	r1, r1, #9
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0xdc>
 8003c78:	4b99      	ldr	r3, [pc, #612]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b98      	ldr	r3, [pc, #608]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	4999      	ldr	r1, [pc, #612]	; (8003ee4 <HAL_RCC_OscConfig+0x330>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	4b96      	ldr	r3, [pc, #600]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b95      	ldr	r3, [pc, #596]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	4997      	ldr	r1, [pc, #604]	; (8003ee8 <HAL_RCC_OscConfig+0x334>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d014      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe f8e2 	bl	8001e60 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca2:	f7fe f8dd 	bl	8001e60 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b64      	cmp	r3, #100	; 0x64
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e28a      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb4:	4b8a      	ldr	r3, [pc, #552]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	029b      	lsls	r3, r3, #10
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0xee>
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe f8cd 	bl	8001e60 <HAL_GetTick>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fe f8c8 	bl	8001e60 <HAL_GetTick>
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e275      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	4b80      	ldr	r3, [pc, #512]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x118>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <HAL_RCC_OscConfig+0x146>
 8003cf8:	e069      	b.n	8003dce <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cfa:	4b79      	ldr	r3, [pc, #484]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	220c      	movs	r2, #12
 8003d00:	4013      	ands	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d04:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	220c      	movs	r2, #12
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d11c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x196>
 8003d10:	4b73      	ldr	r3, [pc, #460]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	025b      	lsls	r3, r3, #9
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d116      	bne.n	8003d4a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1c:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e24b      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b6b      	ldr	r3, [pc, #428]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	22f8      	movs	r2, #248	; 0xf8
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00da      	lsls	r2, r3, #3
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d48:	e041      	b.n	8003dce <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d024      	beq.n	8003d9c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	2101      	movs	r1, #1
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe f87f 	bl	8001e60 <HAL_GetTick>
 8003d62:	0003      	movs	r3, r0
 8003d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d68:	f7fe f87a 	bl	8001e60 <HAL_GetTick>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e227      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d0f1      	beq.n	8003d68 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	22f8      	movs	r2, #248	; 0xf8
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00da      	lsls	r2, r3, #3
 8003d94:	4b52      	ldr	r3, [pc, #328]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e018      	b.n	8003dce <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9c:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe f85a 	bl	8001e60 <HAL_GetTick>
 8003dac:	0003      	movs	r3, r0
 8003dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db2:	f7fe f855 	bl	8001e60 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e202      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d1f1      	bne.n	8003db2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d019      	beq.n	8003e14 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de0:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de4:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003de6:	2101      	movs	r1, #1
 8003de8:	430a      	orrs	r2, r1
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe f838 	bl	8001e60 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fe f833 	bl	8001e60 <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e1e0      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d0f1      	beq.n	8003df6 <HAL_RCC_OscConfig+0x242>
 8003e12:	e018      	b.n	8003e46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fe f81e 	bl	8001e60 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fe f819 	bl	8001e60 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1c6      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2202      	movs	r2, #2
 8003e42:	4013      	ands	r3, r2
 8003e44:	d1f1      	bne.n	8003e2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCC_OscConfig+0x29e>
 8003e50:	e0b4      	b.n	8003fbc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e52:	201f      	movs	r0, #31
 8003e54:	183b      	adds	r3, r7, r0
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	055b      	lsls	r3, r3, #21
 8003e62:	4013      	ands	r3, r2
 8003e64:	d110      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	0549      	lsls	r1, r1, #21
 8003e70:	430a      	orrs	r2, r1
 8003e72:	61da      	str	r2, [r3, #28]
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	055b      	lsls	r3, r3, #21
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e82:	183b      	adds	r3, r7, r0
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d11a      	bne.n	8003eca <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	0049      	lsls	r1, r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd ffdd 	bl	8001e60 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7fd ffd8 	bl	8001e60 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e185      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x33c>
 8003ed2:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	2101      	movs	r1, #1
 8003eda:	430a      	orrs	r2, r1
 8003edc:	621a      	str	r2, [r3, #32]
 8003ede:	e035      	b.n	8003f4c <HAL_RCC_OscConfig+0x398>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	fffeffff 	.word	0xfffeffff
 8003ee8:	fffbffff 	.word	0xfffbffff
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_OscConfig+0x35e>
 8003ef8:	4bb6      	ldr	r3, [pc, #728]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	4bb5      	ldr	r3, [pc, #724]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	621a      	str	r2, [r3, #32]
 8003f04:	4bb3      	ldr	r3, [pc, #716]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	4bb2      	ldr	r3, [pc, #712]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	621a      	str	r2, [r3, #32]
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x398>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x380>
 8003f1a:	4bae      	ldr	r3, [pc, #696]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	4bad      	ldr	r3, [pc, #692]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f20:	2104      	movs	r1, #4
 8003f22:	430a      	orrs	r2, r1
 8003f24:	621a      	str	r2, [r3, #32]
 8003f26:	4bab      	ldr	r3, [pc, #684]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	4baa      	ldr	r3, [pc, #680]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	621a      	str	r2, [r3, #32]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0x398>
 8003f34:	4ba7      	ldr	r3, [pc, #668]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	4ba6      	ldr	r3, [pc, #664]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	4ba4      	ldr	r3, [pc, #656]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	4ba3      	ldr	r3, [pc, #652]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f46:	2104      	movs	r1, #4
 8003f48:	438a      	bics	r2, r1
 8003f4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d014      	beq.n	8003f7e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f54:	f7fd ff84 	bl	8001e60 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e009      	b.n	8003f72 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd ff7f 	bl	8001e60 <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	4a9b      	ldr	r2, [pc, #620]	; (80041d8 <HAL_RCC_OscConfig+0x624>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e12b      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b98      	ldr	r3, [pc, #608]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x3aa>
 8003f7c:	e013      	b.n	8003fa6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd ff6f 	bl	8001e60 <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	e009      	b.n	8003f9c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fd ff6a 	bl	8001e60 <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	4a91      	ldr	r2, [pc, #580]	; (80041d8 <HAL_RCC_OscConfig+0x624>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e116      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa6:	231f      	movs	r3, #31
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	4b87      	ldr	r3, [pc, #540]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fb6:	4989      	ldr	r1, [pc, #548]	; (80041dc <HAL_RCC_OscConfig+0x628>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d12a      	bne.n	8004024 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fce:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd2:	4b80      	ldr	r3, [pc, #512]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003fda:	4b7e      	ldr	r3, [pc, #504]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fde:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd ff3b 	bl	8001e60 <HAL_GetTick>
 8003fea:	0003      	movs	r3, r0
 8003fec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ff0:	f7fd ff36 	bl	8001e60 <HAL_GetTick>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0e3      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004002:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d0f1      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800400c:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	22f8      	movs	r2, #248	; 0xf8
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	00da      	lsls	r2, r3, #3
 800401c:	4b6d      	ldr	r3, [pc, #436]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800401e:	430a      	orrs	r2, r1
 8004020:	635a      	str	r2, [r3, #52]	; 0x34
 8004022:	e034      	b.n	800408e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	3305      	adds	r3, #5
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800402c:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800402e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004032:	2104      	movs	r1, #4
 8004034:	438a      	bics	r2, r1
 8004036:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	22f8      	movs	r2, #248	; 0xf8
 800403e:	4393      	bics	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	00da      	lsls	r2, r3, #3
 8004048:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800404a:	430a      	orrs	r2, r1
 800404c:	635a      	str	r2, [r3, #52]	; 0x34
 800404e:	e01e      	b.n	800408e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004050:	4b60      	ldr	r3, [pc, #384]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004056:	2104      	movs	r1, #4
 8004058:	430a      	orrs	r2, r1
 800405a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800405c:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800405e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004060:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004062:	2101      	movs	r1, #1
 8004064:	438a      	bics	r2, r1
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004068:	f7fd fefa 	bl	8001e60 <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004072:	f7fd fef5 	bl	8001e60 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0a2      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004084:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	2202      	movs	r2, #2
 800408a:	4013      	ands	r3, r2
 800408c:	d1f1      	bne.n	8004072 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d100      	bne.n	8004098 <HAL_RCC_OscConfig+0x4e4>
 8004096:	e097      	b.n	80041c8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	220c      	movs	r2, #12
 800409e:	4013      	ands	r3, r2
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d100      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4f2>
 80040a4:	e06b      	b.n	800417e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d14c      	bne.n	8004148 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040b4:	494a      	ldr	r1, [pc, #296]	; (80041e0 <HAL_RCC_OscConfig+0x62c>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fd fed1 	bl	8001e60 <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd fecc 	bl	8001e60 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e079      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	049b      	lsls	r3, r3, #18
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e2:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	220f      	movs	r2, #15
 80040e8:	4393      	bics	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_RCC_OscConfig+0x630>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	431a      	orrs	r2, r3
 800410a:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004116:	2180      	movs	r1, #128	; 0x80
 8004118:	0449      	lsls	r1, r1, #17
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fd fe9f 	bl	8001e60 <HAL_GetTick>
 8004122:	0003      	movs	r3, r0
 8004124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd fe9a 	bl	8001e60 <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e047      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	049b      	lsls	r3, r3, #18
 8004142:	4013      	ands	r3, r2
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x574>
 8004146:	e03f      	b.n	80041c8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800414e:	4924      	ldr	r1, [pc, #144]	; (80041e0 <HAL_RCC_OscConfig+0x62c>)
 8004150:	400a      	ands	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fe84 	bl	8001e60 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd fe7f 	bl	8001e60 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e02c      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	049b      	lsls	r3, r3, #18
 8004178:	4013      	ands	r3, r2
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x5aa>
 800417c:	e024      	b.n	80041c8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e01f      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCC_OscConfig+0x620>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	025b      	lsls	r3, r3, #9
 800419c:	401a      	ands	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d10e      	bne.n	80041c4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	220f      	movs	r2, #15
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	23f0      	movs	r3, #240	; 0xf0
 80041b8:	039b      	lsls	r3, r3, #14
 80041ba:	401a      	ands	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b008      	add	sp, #32
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000
 80041d8:	00001388 	.word	0x00001388
 80041dc:	efffffff 	.word	0xefffffff
 80041e0:	feffffff 	.word	0xfeffffff
 80041e4:	ffc2ffff 	.word	0xffc2ffff

080041e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b3      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041fc:	4b5b      	ldr	r3, [pc, #364]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d911      	bls.n	800422e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b58      	ldr	r3, [pc, #352]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	4393      	bics	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	4b55      	ldr	r3, [pc, #340]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e09a      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d015      	beq.n	8004264 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	4013      	ands	r3, r2
 8004240:	d006      	beq.n	8004250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004242:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004248:	21e0      	movs	r1, #224	; 0xe0
 800424a:	00c9      	lsls	r1, r1, #3
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	22f0      	movs	r2, #240	; 0xf0
 8004256:	4393      	bics	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	4b44      	ldr	r3, [pc, #272]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	4013      	ands	r3, r2
 8004280:	d114      	bne.n	80042ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06e      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	049b      	lsls	r3, r3, #18
 8004296:	4013      	ands	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e062      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b34      	ldr	r3, [pc, #208]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2202      	movs	r2, #2
 80042a4:	4013      	ands	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e05b      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ac:	4b30      	ldr	r3, [pc, #192]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	4393      	bics	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fd fdce 	bl	8001e60 <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c8:	e009      	b.n	80042de <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ca:	f7fd fdc9 	bl	8001e60 <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_RCC_ClockConfig+0x18c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e042      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	220c      	movs	r2, #12
 80042e4:	401a      	ands	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1ec      	bne.n	80042ca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4013      	ands	r3, r2
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d211      	bcs.n	8004322 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	4393      	bics	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <HAL_RCC_ClockConfig+0x184>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e020      	b.n	8004364 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2204      	movs	r2, #4
 8004328:	4013      	ands	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a11      	ldr	r2, [pc, #68]	; (8004378 <HAL_RCC_ClockConfig+0x190>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004340:	f000 f820 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8004344:	0001      	movs	r1, r0
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <HAL_RCC_ClockConfig+0x188>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	220f      	movs	r2, #15
 800434e:	4013      	ands	r3, r2
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <HAL_RCC_ClockConfig+0x194>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	000a      	movs	r2, r1
 8004356:	40da      	lsrs	r2, r3
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x198>)
 800435a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800435c:	2003      	movs	r0, #3
 800435e:	f7fd fd39 	bl	8001dd4 <HAL_InitTick>
  
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40022000 	.word	0x40022000
 8004370:	40021000 	.word	0x40021000
 8004374:	00001388 	.word	0x00001388
 8004378:	fffff8ff 	.word	0xfffff8ff
 800437c:	08007614 	.word	0x08007614
 8004380:	20000024 	.word	0x20000024

08004384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b08f      	sub	sp, #60	; 0x3c
 8004388:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800438a:	2314      	movs	r3, #20
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	4a2b      	ldr	r2, [pc, #172]	; (800443c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004390:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004392:	c313      	stmia	r3!, {r0, r1, r4}
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_RCC_GetSysClockFreq+0xbc>)
 800439c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800439e:	c313      	stmia	r3!, {r0, r1, r4}
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a8:	2300      	movs	r3, #0
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	220c      	movs	r2, #12
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d002      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x4a>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d003      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x50>
 80043cc:	e02d      	b.n	800442a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80043d2:	e02d      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	0c9b      	lsrs	r3, r3, #18
 80043d8:	220f      	movs	r2, #15
 80043da:	4013      	ands	r3, r2
 80043dc:	2214      	movs	r2, #20
 80043de:	18ba      	adds	r2, r7, r2
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	220f      	movs	r2, #15
 80043ea:	4013      	ands	r3, r2
 80043ec:	1d3a      	adds	r2, r7, #4
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	025b      	lsls	r3, r3, #9
 80043f8:	4013      	ands	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043fe:	4812      	ldr	r0, [pc, #72]	; (8004448 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004400:	f7fb fe82 	bl	8000108 <__udivsi3>
 8004404:	0003      	movs	r3, r0
 8004406:	001a      	movs	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	4353      	muls	r3, r2
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	e009      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004412:	000a      	movs	r2, r1
 8004414:	0152      	lsls	r2, r2, #5
 8004416:	1a52      	subs	r2, r2, r1
 8004418:	0193      	lsls	r3, r2, #6
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	185b      	adds	r3, r3, r1
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004428:	e002      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_RCC_GetSysClockFreq+0xc4>)
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800442e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b00f      	add	sp, #60	; 0x3c
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	08007454 	.word	0x08007454
 8004440:	08007464 	.word	0x08007464
 8004444:	40021000 	.word	0x40021000
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <HAL_RCC_GetHCLKFreq+0x10>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	20000024 	.word	0x20000024

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004464:	f7ff fff2 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004468:	0001      	movs	r1, r0
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	2207      	movs	r2, #7
 8004472:	4013      	ands	r3, r2
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	40d9      	lsrs	r1, r3
 800447a:	000b      	movs	r3, r1
}    
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40021000 	.word	0x40021000
 8004488:	08007624 	.word	0x08007624

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	025b      	lsls	r3, r3, #9
 80044a4:	4013      	ands	r3, r2
 80044a6:	d100      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80044a8:	e08e      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2017      	movs	r0, #23
 80044ac:	183b      	adds	r3, r7, r0
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	055b      	lsls	r3, r3, #21
 80044ba:	4013      	ands	r3, r2
 80044bc:	d110      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	4b5b      	ldr	r3, [pc, #364]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	0549      	lsls	r1, r1, #21
 80044c8:	430a      	orrs	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]
 80044cc:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	055b      	lsls	r3, r3, #21
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	183b      	adds	r3, r7, r0
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b54      	ldr	r3, [pc, #336]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	d11a      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ec:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b50      	ldr	r3, [pc, #320]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	0049      	lsls	r1, r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fcb1 	bl	8001e60 <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7fd fcac 	bl	8001e60 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e087      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4013      	ands	r3, r2
 8004520:	d0f0      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004522:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	23c0      	movs	r3, #192	; 0xc0
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d034      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4013      	ands	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d02c      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004544:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a3b      	ldr	r2, [pc, #236]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454e:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	4b37      	ldr	r3, [pc, #220]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0249      	lsls	r1, r1, #9
 8004558:	430a      	orrs	r2, r1
 800455a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800455c:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	4b33      	ldr	r3, [pc, #204]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004562:	4936      	ldr	r1, [pc, #216]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004564:	400a      	ands	r2, r1
 8004566:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd fc73 	bl	8001e60 <HAL_GetTick>
 800457a:	0003      	movs	r3, r0
 800457c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fd fc6e 	bl	8001e60 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e048      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	2202      	movs	r2, #2
 800459a:	4013      	ands	r3, r2
 800459c:	d0f0      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a25      	ldr	r2, [pc, #148]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045b2:	2317      	movs	r3, #23
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045bc:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045c2:	4920      	ldr	r1, [pc, #128]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	2203      	movs	r2, #3
 80045d8:	4393      	bics	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e2:	430a      	orrs	r2, r1
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2220      	movs	r2, #32
 80045ec:	4013      	ands	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	2210      	movs	r2, #16
 80045f6:	4393      	bics	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004600:	430a      	orrs	r2, r1
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4013      	ands	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	2240      	movs	r2, #64	; 0x40
 8004616:	4393      	bics	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004620:	430a      	orrs	r2, r1
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b006      	add	sp, #24
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
 8004638:	fffffcff 	.word	0xfffffcff
 800463c:	fffeffff 	.word	0xfffeffff
 8004640:	00001388 	.word	0x00001388
 8004644:	efffffff 	.word	0xefffffff

08004648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0a8      	b.n	80047ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	2382      	movs	r3, #130	; 0x82
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	429a      	cmp	r2, r3
 800466c:	d009      	beq.n	8004682 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
 8004674:	e005      	b.n	8004682 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	225d      	movs	r2, #93	; 0x5d
 800468c:	5c9b      	ldrb	r3, [r3, r2]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	225c      	movs	r2, #92	; 0x5c
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7fd f96a 	bl	8001978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	225d      	movs	r2, #93	; 0x5d
 80046a8:	2102      	movs	r1, #2
 80046aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	438a      	bics	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	23e0      	movs	r3, #224	; 0xe0
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e002      	b.n	80046d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	015b      	lsls	r3, r3, #5
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	23f0      	movs	r3, #240	; 0xf0
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	429a      	cmp	r2, r3
 80046de:	d008      	beq.n	80046f2 <HAL_SPI_Init+0xaa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	23e0      	movs	r3, #224	; 0xe0
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	2382      	movs	r3, #130	; 0x82
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	401a      	ands	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	2384      	movs	r3, #132	; 0x84
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	400b      	ands	r3, r1
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2102      	movs	r1, #2
 800470e:	400b      	ands	r3, r1
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2101      	movs	r1, #1
 8004718:	400b      	ands	r3, r1
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6999      	ldr	r1, [r3, #24]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	400b      	ands	r3, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2138      	movs	r1, #56	; 0x38
 800472e:	400b      	ands	r3, r1
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	2180      	movs	r1, #128	; 0x80
 8004738:	400b      	ands	r3, r1
 800473a:	431a      	orrs	r2, r3
 800473c:	0011      	movs	r1, r2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	2204      	movs	r2, #4
 8004758:	401a      	ands	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2110      	movs	r1, #16
 8004760:	400b      	ands	r3, r1
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	2108      	movs	r1, #8
 800476a:	400b      	ands	r3, r1
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	23f0      	movs	r3, #240	; 0xf0
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	400b      	ands	r3, r1
 8004778:	431a      	orrs	r2, r3
 800477a:	0011      	movs	r1, r2
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	401a      	ands	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4907      	ldr	r1, [pc, #28]	; (80047b4 <HAL_SPI_Init+0x16c>)
 8004798:	400a      	ands	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	225d      	movs	r2, #93	; 0x5d
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	fffff7ff 	.word	0xfffff7ff

080047b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	1dbb      	adds	r3, r7, #6
 80047c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047c8:	231f      	movs	r3, #31
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	225c      	movs	r2, #92	; 0x5c
 80047d4:	5c9b      	ldrb	r3, [r3, r2]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_SPI_Transmit+0x26>
 80047da:	2302      	movs	r3, #2
 80047dc:	e140      	b.n	8004a60 <HAL_SPI_Transmit+0x2a8>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	225c      	movs	r2, #92	; 0x5c
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e6:	f7fd fb3b 	bl	8001e60 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047ee:	2316      	movs	r3, #22
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	1dba      	adds	r2, r7, #6
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	225d      	movs	r2, #93	; 0x5d
 80047fc:	5c9b      	ldrb	r3, [r3, r2]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d004      	beq.n	800480e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004804:	231f      	movs	r3, #31
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
    goto error;
 800480c:	e11d      	b.n	8004a4a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_SPI_Transmit+0x64>
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800481c:	231f      	movs	r3, #31
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
    goto error;
 8004824:	e111      	b.n	8004a4a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	225d      	movs	r2, #93	; 0x5d
 800482a:	2103      	movs	r1, #3
 800482c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1dba      	adds	r2, r7, #6
 800483e:	8812      	ldrh	r2, [r2, #0]
 8004840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1dba      	adds	r2, r7, #6
 8004846:	8812      	ldrh	r2, [r2, #0]
 8004848:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2244      	movs	r2, #68	; 0x44
 8004854:	2100      	movs	r1, #0
 8004856:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2246      	movs	r2, #70	; 0x46
 800485c:	2100      	movs	r1, #0
 800485e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	429a      	cmp	r2, r3
 8004876:	d110      	bne.n	800489a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	438a      	bics	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	01c9      	lsls	r1, r1, #7
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2140      	movs	r1, #64	; 0x40
 80048b4:	430a      	orrs	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	23e0      	movs	r3, #224	; 0xe0
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d94e      	bls.n	8004962 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <HAL_SPI_Transmit+0x11e>
 80048cc:	2316      	movs	r3, #22
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d13f      	bne.n	8004956 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048fa:	e02c      	b.n	8004956 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d112      	bne.n	8004930 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	881a      	ldrh	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	1c9a      	adds	r2, r3, #2
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800492e:	e012      	b.n	8004956 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004930:	f7fd fa96 	bl	8001e60 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d802      	bhi.n	8004946 <HAL_SPI_Transmit+0x18e>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	d102      	bne.n	800494c <HAL_SPI_Transmit+0x194>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800494c:	231f      	movs	r3, #31
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	2203      	movs	r2, #3
 8004952:	701a      	strb	r2, [r3, #0]
          goto error;
 8004954:	e079      	b.n	8004a4a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1cd      	bne.n	80048fc <HAL_SPI_Transmit+0x144>
 8004960:	e04f      	b.n	8004a02 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <HAL_SPI_Transmit+0x1bc>
 800496a:	2316      	movs	r3, #22
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d141      	bne.n	80049f8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	7812      	ldrb	r2, [r2, #0]
 8004980:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800499a:	e02d      	b.n	80049f8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2202      	movs	r2, #2
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d113      	bne.n	80049d2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049d0:	e012      	b.n	80049f8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d2:	f7fd fa45 	bl	8001e60 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d802      	bhi.n	80049e8 <HAL_SPI_Transmit+0x230>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	d102      	bne.n	80049ee <HAL_SPI_Transmit+0x236>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80049ee:	231f      	movs	r3, #31
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2203      	movs	r2, #3
 80049f4:	701a      	strb	r2, [r3, #0]
          goto error;
 80049f6:	e028      	b.n	8004a4a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1cc      	bne.n	800499c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f95d 	bl	8004cc8 <SPI_EndRxTxTransaction>
 8004a0e:	1e03      	subs	r3, r0, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004a3e:	231f      	movs	r3, #31
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e000      	b.n	8004a4a <HAL_SPI_Transmit+0x292>
  }

error:
 8004a48:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	225d      	movs	r2, #93	; 0x5d
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	225c      	movs	r2, #92	; 0x5c
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a5a:	231f      	movs	r3, #31
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	781b      	ldrb	r3, [r3, #0]
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b008      	add	sp, #32
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a78:	f7fd f9f2 	bl	8001e60 <HAL_GetTick>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a88:	f7fd f9ea 	bl	8001e60 <HAL_GetTick>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a90:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	015b      	lsls	r3, r3, #5
 8004a96:	0d1b      	lsrs	r3, r3, #20
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	4353      	muls	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9e:	e058      	b.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	d055      	beq.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aa6:	f7fd f9db 	bl	8001e60 <HAL_GetTick>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d902      	bls.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x54>
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d142      	bne.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	21e0      	movs	r1, #224	; 0xe0
 8004ac8:	438a      	bics	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	2382      	movs	r3, #130	; 0x82
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d113      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d005      	beq.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d107      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2140      	movs	r1, #64	; 0x40
 8004afc:	438a      	bics	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	019b      	lsls	r3, r3, #6
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d110      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	491a      	ldr	r1, [pc, #104]	; (8004b80 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	0189      	lsls	r1, r1, #6
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	225d      	movs	r2, #93	; 0x5d
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	225c      	movs	r2, #92	; 0x5c
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e017      	b.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	425a      	negs	r2, r3
 8004b62:	4153      	adcs	r3, r2
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	001a      	movs	r2, r3
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d197      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b008      	add	sp, #32
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	20000024 	.word	0x20000024
 8004b80:	ffffdfff 	.word	0xffffdfff

08004b84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b92:	2317      	movs	r3, #23
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b9a:	f7fd f961 	bl	8001e60 <HAL_GetTick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004baa:	f7fd f959 	bl	8001e60 <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bba:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	0013      	movs	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	00da      	lsls	r2, r3, #3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	0d1b      	lsrs	r3, r3, #20
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	4353      	muls	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bd0:	e068      	b.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d10a      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	2117      	movs	r1, #23
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	d055      	beq.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bf8:	f7fd f932 	bl	8001e60 <HAL_GetTick>
 8004bfc:	0002      	movs	r2, r0
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d902      	bls.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d142      	bne.n	8004c94 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	21e0      	movs	r1, #224	; 0xe0
 8004c1a:	438a      	bics	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	2382      	movs	r3, #130	; 0x82
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d113      	bne.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d005      	beq.n	8004c42 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d107      	bne.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2140      	movs	r1, #64	; 0x40
 8004c4e:	438a      	bics	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d110      	bne.n	8004c80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4916      	ldr	r1, [pc, #88]	; (8004cc4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	0189      	lsls	r1, r1, #6
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	225d      	movs	r2, #93	; 0x5d
 8004c84:	2101      	movs	r1, #1
 8004c86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	225c      	movs	r2, #92	; 0x5c
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e010      	b.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d18e      	bne.n	8004bd2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b00a      	add	sp, #40	; 0x28
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	20000024 	.word	0x20000024
 8004cc4:	ffffdfff 	.word	0xffffdfff

08004cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	23c0      	movs	r3, #192	; 0xc0
 8004cd8:	0159      	lsls	r1, r3, #5
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f7ff ff4e 	bl	8004b84 <SPI_WaitFifoStateUntilTimeout>
 8004ce8:	1e03      	subs	r3, r0, #0
 8004cea:	d007      	beq.n	8004cfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e027      	b.n	8004d4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	0013      	movs	r3, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	f7ff fead 	bl	8004a68 <SPI_WaitFlagStateUntilTimeout>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d007      	beq.n	8004d22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	2220      	movs	r2, #32
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e014      	b.n	8004d4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	23c0      	movs	r3, #192	; 0xc0
 8004d26:	00d9      	lsls	r1, r3, #3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	0013      	movs	r3, r2
 8004d30:	2200      	movs	r2, #0
 8004d32:	f7ff ff27 	bl	8004b84 <SPI_WaitFifoStateUntilTimeout>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d007      	beq.n	8004d4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	2220      	movs	r2, #32
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e000      	b.n	8004d4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b004      	add	sp, #16
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e042      	b.n	8004dec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	223d      	movs	r2, #61	; 0x3d
 8004d6a:	5c9b      	ldrb	r3, [r3, r2]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223c      	movs	r2, #60	; 0x3c
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7fc fe83 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	223d      	movs	r2, #61	; 0x3d
 8004d86:	2102      	movs	r1, #2
 8004d88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	0019      	movs	r1, r3
 8004d94:	0010      	movs	r0, r2
 8004d96:	f000 fc55 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2246      	movs	r2, #70	; 0x46
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	223e      	movs	r2, #62	; 0x3e
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	223f      	movs	r2, #63	; 0x3f
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2240      	movs	r2, #64	; 0x40
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2241      	movs	r2, #65	; 0x41
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2242      	movs	r2, #66	; 0x42
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2243      	movs	r2, #67	; 0x43
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2244      	movs	r2, #68	; 0x44
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2245      	movs	r2, #69	; 0x45
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	223d      	movs	r2, #61	; 0x3d
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	230f      	movs	r3, #15
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <HAL_TIM_OC_Start_IT+0x2a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	223e      	movs	r2, #62	; 0x3e
 8004e10:	5c9b      	ldrb	r3, [r3, r2]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	4193      	sbcs	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e01f      	b.n	8004e5e <HAL_TIM_OC_Start_IT+0x6a>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d108      	bne.n	8004e36 <HAL_TIM_OC_Start_IT+0x42>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223f      	movs	r2, #63	; 0x3f
 8004e28:	5c9b      	ldrb	r3, [r3, r2]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	4193      	sbcs	r3, r2
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e013      	b.n	8004e5e <HAL_TIM_OC_Start_IT+0x6a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d108      	bne.n	8004e4e <HAL_TIM_OC_Start_IT+0x5a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	5c9b      	ldrb	r3, [r3, r2]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	4193      	sbcs	r3, r2
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e007      	b.n	8004e5e <HAL_TIM_OC_Start_IT+0x6a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2241      	movs	r2, #65	; 0x41
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	4193      	sbcs	r3, r2
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0b7      	b.n	8004fd6 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_OC_Start_IT+0x82>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	223e      	movs	r2, #62	; 0x3e
 8004e70:	2102      	movs	r1, #2
 8004e72:	5499      	strb	r1, [r3, r2]
 8004e74:	e013      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0xaa>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_OC_Start_IT+0x92>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223f      	movs	r2, #63	; 0x3f
 8004e80:	2102      	movs	r1, #2
 8004e82:	5499      	strb	r1, [r3, r2]
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0xaa>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_OC_Start_IT+0xa2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	2102      	movs	r1, #2
 8004e92:	5499      	strb	r1, [r3, r2]
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_OC_Start_IT+0xaa>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2241      	movs	r2, #65	; 0x41
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d02a      	beq.n	8004efa <HAL_TIM_OC_Start_IT+0x106>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d830      	bhi.n	8004f0c <HAL_TIM_OC_Start_IT+0x118>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d01b      	beq.n	8004ee8 <HAL_TIM_OC_Start_IT+0xf4>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d82a      	bhi.n	8004f0c <HAL_TIM_OC_Start_IT+0x118>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_TIM_OC_Start_IT+0xd0>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIM_OC_Start_IT+0xe2>
 8004ec2:	e023      	b.n	8004f0c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2102      	movs	r1, #2
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	60da      	str	r2, [r3, #12]
      break;
 8004ed4:	e01f      	b.n	8004f16 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	60da      	str	r2, [r3, #12]
      break;
 8004ee6:	e016      	b.n	8004f16 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2108      	movs	r1, #8
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]
      break;
 8004ef8:	e00d      	b.n	8004f16 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2110      	movs	r1, #16
 8004f06:	430a      	orrs	r2, r1
 8004f08:	60da      	str	r2, [r3, #12]
      break;
 8004f0a:	e004      	b.n	8004f16 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
      break;
 8004f14:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004f16:	230f      	movs	r3, #15
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d157      	bne.n	8004fd0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 fea1 	bl	8005c70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIM_OC_Start_IT+0x162>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIM_OC_Start_IT+0x162>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a28      	ldr	r2, [pc, #160]	; (8004fe8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIM_OC_Start_IT+0x162>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a26      	ldr	r2, [pc, #152]	; (8004fec <HAL_TIM_OC_Start_IT+0x1f8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_OC_Start_IT+0x166>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_OC_Start_IT+0x168>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	0209      	lsls	r1, r1, #8
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00f      	beq.n	8004f9c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	05db      	lsls	r3, r3, #23
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d009      	beq.n	8004f9c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_TIM_OC_Start_IT+0x1fc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIM_OC_Start_IT+0x1a8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d010      	beq.n	8004fd0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2101      	movs	r1, #1
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	e007      	b.n	8004fd0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b004      	add	sp, #16
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800
 8004ff0:	40000400 	.word	0x40000400

08004ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e042      	b.n	800508c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	223d      	movs	r2, #61	; 0x3d
 800500a:	5c9b      	ldrb	r3, [r3, r2]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	223c      	movs	r2, #60	; 0x3c
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 f839 	bl	8005094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	223d      	movs	r2, #61	; 0x3d
 8005026:	2102      	movs	r1, #2
 8005028:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	0019      	movs	r1, r3
 8005034:	0010      	movs	r0, r2
 8005036:	f000 fb05 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2246      	movs	r2, #70	; 0x46
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223e      	movs	r2, #62	; 0x3e
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	223f      	movs	r2, #63	; 0x3f
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2241      	movs	r2, #65	; 0x41
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2242      	movs	r2, #66	; 0x42
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2243      	movs	r2, #67	; 0x43
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2244      	movs	r2, #68	; 0x44
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2245      	movs	r2, #69	; 0x45
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	223d      	movs	r2, #61	; 0x3d
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d124      	bne.n	8005104 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2202      	movs	r2, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11d      	bne.n	8005104 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2203      	movs	r2, #3
 80050ce:	4252      	negs	r2, r2
 80050d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2203      	movs	r2, #3
 80050e0:	4013      	ands	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 fa94 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e007      	b.n	80050fe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7fb f8a7 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 fa93 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2204      	movs	r2, #4
 800510c:	4013      	ands	r3, r2
 800510e:	2b04      	cmp	r3, #4
 8005110:	d125      	bne.n	800515e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2204      	movs	r2, #4
 800511a:	4013      	ands	r3, r2
 800511c:	2b04      	cmp	r3, #4
 800511e:	d11e      	bne.n	800515e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2205      	movs	r2, #5
 8005126:	4252      	negs	r2, r2
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	23c0      	movs	r3, #192	; 0xc0
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4013      	ands	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fa67 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005146:	e007      	b.n	8005158 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	0018      	movs	r0, r3
 800514c:	f7fb f87a 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0018      	movs	r0, r3
 8005154:	f000 fa66 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2208      	movs	r2, #8
 8005166:	4013      	ands	r3, r2
 8005168:	2b08      	cmp	r3, #8
 800516a:	d124      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2208      	movs	r2, #8
 8005174:	4013      	ands	r3, r2
 8005176:	2b08      	cmp	r3, #8
 8005178:	d11d      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2209      	movs	r2, #9
 8005180:	4252      	negs	r2, r2
 8005182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2204      	movs	r2, #4
 8005188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2203      	movs	r2, #3
 8005192:	4013      	ands	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 fa3b 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 800519e:	e007      	b.n	80051b0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fb f84e 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 fa3a 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2210      	movs	r2, #16
 80051be:	4013      	ands	r3, r2
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d125      	bne.n	8005210 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2210      	movs	r2, #16
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d11e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2211      	movs	r2, #17
 80051d8:	4252      	negs	r2, r2
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2208      	movs	r2, #8
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	23c0      	movs	r3, #192	; 0xc0
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4013      	ands	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 fa0e 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e007      	b.n	800520a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7fb f821 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0018      	movs	r0, r3
 8005206:	f000 fa0d 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2201      	movs	r2, #1
 8005218:	4013      	ands	r3, r2
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10f      	bne.n	800523e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	2b01      	cmp	r3, #1
 800522a:	d108      	bne.n	800523e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2202      	movs	r2, #2
 8005232:	4252      	negs	r2, r2
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	0018      	movs	r0, r3
 800523a:	f000 f9e3 	bl	8005604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	4013      	ands	r3, r2
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d10f      	bne.n	800526c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	4013      	ands	r3, r2
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d108      	bne.n	800526c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2281      	movs	r2, #129	; 0x81
 8005260:	4252      	negs	r2, r2
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fdea 	bl	8005e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2240      	movs	r2, #64	; 0x40
 8005274:	4013      	ands	r3, r2
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d10f      	bne.n	800529a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2240      	movs	r2, #64	; 0x40
 8005282:	4013      	ands	r3, r2
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d108      	bne.n	800529a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2241      	movs	r2, #65	; 0x41
 800528e:	4252      	negs	r2, r2
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f9cd 	bl	8005634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2220      	movs	r2, #32
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d10f      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d108      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2221      	movs	r2, #33	; 0x21
 80052bc:	4252      	negs	r2, r2
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 fdb4 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2317      	movs	r3, #23
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	223c      	movs	r2, #60	; 0x3c
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e0ad      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	223c      	movs	r2, #60	; 0x3c
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b0c      	cmp	r3, #12
 80052fe:	d100      	bne.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005300:	e076      	b.n	80053f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d900      	bls.n	800530a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005308:	e095      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x166>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d04e      	beq.n	80053ae <HAL_TIM_PWM_ConfigChannel+0xde>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d900      	bls.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005316:	e08e      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x56>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d021      	beq.n	8005368 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005324:	e087      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	0011      	movs	r1, r2
 800532e:	0018      	movs	r0, r3
 8005330:	f000 fa08 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2108      	movs	r1, #8
 8005340:	430a      	orrs	r2, r1
 8005342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2104      	movs	r1, #4
 8005350:	438a      	bics	r2, r1
 8005352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6999      	ldr	r1, [r3, #24]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	619a      	str	r2, [r3, #24]
      break;
 8005366:	e06b      	b.n	8005440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0011      	movs	r1, r2
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fa6f 	bl	8005854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	0109      	lsls	r1, r1, #4
 8005384:	430a      	orrs	r2, r1
 8005386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4931      	ldr	r1, [pc, #196]	; (8005458 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005394:	400a      	ands	r2, r1
 8005396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	619a      	str	r2, [r3, #24]
      break;
 80053ac:	e048      	b.n	8005440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 fad0 	bl	800595c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2108      	movs	r1, #8
 80053c8:	430a      	orrs	r2, r1
 80053ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2104      	movs	r1, #4
 80053d8:	438a      	bics	r2, r1
 80053da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69d9      	ldr	r1, [r3, #28]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	61da      	str	r2, [r3, #28]
      break;
 80053ee:	e027      	b.n	8005440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0011      	movs	r1, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 fb35 	bl	8005a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2180      	movs	r1, #128	; 0x80
 800540a:	0109      	lsls	r1, r1, #4
 800540c:	430a      	orrs	r2, r1
 800540e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	490f      	ldr	r1, [pc, #60]	; (8005458 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800541c:	400a      	ands	r2, r1
 800541e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69d9      	ldr	r1, [r3, #28]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	021a      	lsls	r2, r3, #8
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	61da      	str	r2, [r3, #28]
      break;
 8005434:	e004      	b.n	8005440 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	223c      	movs	r2, #60	; 0x3c
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

  return status;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	781b      	ldrb	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b006      	add	sp, #24
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	fffffbff 	.word	0xfffffbff

0800545c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	230f      	movs	r3, #15
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	223c      	movs	r2, #60	; 0x3c
 8005472:	5c9b      	ldrb	r3, [r3, r2]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIM_ConfigClockSource+0x20>
 8005478:	2302      	movs	r3, #2
 800547a:	e0bc      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x19a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	223c      	movs	r2, #60	; 0x3c
 8005480:	2101      	movs	r1, #1
 8005482:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	223d      	movs	r2, #61	; 0x3d
 8005488:	2102      	movs	r1, #2
 800548a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2277      	movs	r2, #119	; 0x77
 8005498:	4393      	bics	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a58      	ldr	r2, [pc, #352]	; (8005600 <HAL_TIM_ConfigClockSource+0x1a4>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	0192      	lsls	r2, r2, #6
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d040      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xde>
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	0192      	lsls	r2, r2, #6
 80054bc:	4293      	cmp	r3, r2
 80054be:	d900      	bls.n	80054c2 <HAL_TIM_ConfigClockSource+0x66>
 80054c0:	e088      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	0152      	lsls	r2, r2, #5
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d100      	bne.n	80054cc <HAL_TIM_ConfigClockSource+0x70>
 80054ca:	e088      	b.n	80055de <HAL_TIM_ConfigClockSource+0x182>
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	0152      	lsls	r2, r2, #5
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d900      	bls.n	80054d6 <HAL_TIM_ConfigClockSource+0x7a>
 80054d4:	e07e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054d6:	2b70      	cmp	r3, #112	; 0x70
 80054d8:	d018      	beq.n	800550c <HAL_TIM_ConfigClockSource+0xb0>
 80054da:	d900      	bls.n	80054de <HAL_TIM_ConfigClockSource+0x82>
 80054dc:	e07a      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054de:	2b60      	cmp	r3, #96	; 0x60
 80054e0:	d04f      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x126>
 80054e2:	d900      	bls.n	80054e6 <HAL_TIM_ConfigClockSource+0x8a>
 80054e4:	e076      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054e6:	2b50      	cmp	r3, #80	; 0x50
 80054e8:	d03b      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x106>
 80054ea:	d900      	bls.n	80054ee <HAL_TIM_ConfigClockSource+0x92>
 80054ec:	e072      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d057      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x146>
 80054f2:	d900      	bls.n	80054f6 <HAL_TIM_ConfigClockSource+0x9a>
 80054f4:	e06e      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054f6:	2b30      	cmp	r3, #48	; 0x30
 80054f8:	d063      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x166>
 80054fa:	d86b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d060      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x166>
 8005500:	d868      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05d      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x166>
 8005506:	2b10      	cmp	r3, #16
 8005508:	d05b      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x166>
 800550a:	e063      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 fb88 	bl	8005c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2277      	movs	r2, #119	; 0x77
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e052      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 fb71 	bl	8005c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	01c9      	lsls	r1, r1, #7
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e03e      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	001a      	movs	r2, r3
 8005570:	f000 fae4 	bl	8005b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2150      	movs	r1, #80	; 0x50
 800557a:	0018      	movs	r0, r3
 800557c:	f000 fb3e 	bl	8005bfc <TIM_ITRx_SetConfig>
      break;
 8005580:	e02e      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	001a      	movs	r2, r3
 8005590:	f000 fb02 	bl	8005b98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2160      	movs	r1, #96	; 0x60
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fb2e 	bl	8005bfc <TIM_ITRx_SetConfig>
      break;
 80055a0:	e01e      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	001a      	movs	r2, r3
 80055b0:	f000 fac4 	bl	8005b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 fb1e 	bl	8005bfc <TIM_ITRx_SetConfig>
      break;
 80055c0:	e00e      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	0019      	movs	r1, r3
 80055cc:	0010      	movs	r0, r2
 80055ce:	f000 fb15 	bl	8005bfc <TIM_ITRx_SetConfig>
      break;
 80055d2:	e005      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80055d4:	230f      	movs	r3, #15
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
      break;
 80055dc:	e000      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80055de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	223d      	movs	r2, #61	; 0x3d
 80055e4:	2101      	movs	r1, #1
 80055e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	223c      	movs	r2, #60	; 0x3c
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

  return status;
 80055f0:	230f      	movs	r3, #15
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	781b      	ldrb	r3, [r3, #0]
}
 80055f6:	0018      	movs	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b004      	add	sp, #16
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	ffff00ff 	.word	0xffff00ff

08005604 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d008      	beq.n	800566e <TIM_Base_SetConfig+0x2a>
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	05db      	lsls	r3, r3, #23
 8005662:	429a      	cmp	r2, r3
 8005664:	d003      	beq.n	800566e <TIM_Base_SetConfig+0x2a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a30      	ldr	r2, [pc, #192]	; (800572c <TIM_Base_SetConfig+0xe8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2270      	movs	r2, #112	; 0x70
 8005672:	4393      	bics	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	05db      	lsls	r3, r3, #23
 800568e:	429a      	cmp	r2, r3
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0xe8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0xec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <TIM_Base_SetConfig+0xf4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <TIM_Base_SetConfig+0xf8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <TIM_Base_SetConfig+0xfc>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	4393      	bics	r3, r2
 80056d2:	001a      	movs	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0xf4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <TIM_Base_SetConfig+0xf8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d103      	bne.n	800571a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	615a      	str	r2, [r3, #20]
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40002000 	.word	0x40002000
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	fffffcff 	.word	0xfffffcff

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	2201      	movs	r2, #1
 8005754:	4393      	bics	r3, r2
 8005756:	001a      	movs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2270      	movs	r2, #112	; 0x70
 8005772:	4393      	bics	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2203      	movs	r2, #3
 800577a:	4393      	bics	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2202      	movs	r2, #2
 800578c:	4393      	bics	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a27      	ldr	r2, [pc, #156]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a24      	ldr	r2, [pc, #144]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2208      	movs	r2, #8
 80057be:	4393      	bics	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2204      	movs	r2, #4
 80057d0:	4393      	bics	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d111      	bne.n	8005818 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <TIM_OC1_SetConfig+0x108>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a14      	ldr	r2, [pc, #80]	; (8005850 <TIM_OC1_SetConfig+0x10c>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	46bd      	mov	sp, r7
 8005836:	b006      	add	sp, #24
 8005838:	bd80      	pop	{r7, pc}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	fffffeff 	.word	0xfffffeff
 8005850:	fffffdff 	.word	0xfffffdff

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	2210      	movs	r2, #16
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a2e      	ldr	r2, [pc, #184]	; (800593c <TIM_OC2_SetConfig+0xe8>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <TIM_OC2_SetConfig+0xec>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2220      	movs	r2, #32
 800589e:	4393      	bics	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	4393      	bics	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2240      	movs	r2, #64	; 0x40
 80058ce:	4393      	bics	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <TIM_OC2_SetConfig+0xf4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a19      	ldr	r2, [pc, #100]	; (800594c <TIM_OC2_SetConfig+0xf8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a18      	ldr	r2, [pc, #96]	; (8005950 <TIM_OC2_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <TIM_OC2_SetConfig+0x100>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <TIM_OC2_SetConfig+0x104>)
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b006      	add	sp, #24
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffff8fff 	.word	0xffff8fff
 8005940:	fffffcff 	.word	0xfffffcff
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	fffffbff 	.word	0xfffffbff
 8005958:	fffff7ff 	.word	0xfffff7ff

0800595c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <TIM_OC3_SetConfig+0xe4>)
 800596c:	401a      	ands	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2270      	movs	r2, #112	; 0x70
 8005988:	4393      	bics	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	4393      	bics	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <TIM_OC3_SetConfig+0xe8>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10d      	bne.n	80059d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_OC3_SetConfig+0xf0>)
 80059be:	4013      	ands	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC3_SetConfig+0xf4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC3_SetConfig+0xf8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <TIM_OC3_SetConfig+0xfc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <TIM_OC3_SetConfig+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <TIM_OC3_SetConfig+0x104>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <TIM_OC3_SetConfig+0x108>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b006      	add	sp, #24
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	fffffeff 	.word	0xfffffeff
 8005a44:	fffffdff 	.word	0xfffffdff
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	fffff7ff 	.word	0xfffff7ff
 8005a50:	fffffbff 	.word	0xfffffbff
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	ffffefff 	.word	0xffffefff
 8005a64:	ffffdfff 	.word	0xffffdfff

08005a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_OC4_SetConfig+0xb0>)
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <TIM_OC4_SetConfig+0xb4>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC4_SetConfig+0xb8>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <TIM_OC4_SetConfig+0xbc>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <TIM_OC4_SetConfig+0xc0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <TIM_OC4_SetConfig+0xc4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <TIM_OC4_SetConfig+0xc8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <TIM_OC4_SetConfig+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <TIM_OC4_SetConfig+0xd0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b006      	add	sp, #24
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	ffffefff 	.word	0xffffefff
 8005b1c:	ffff8fff 	.word	0xffff8fff
 8005b20:	fffffcff 	.word	0xfffffcff
 8005b24:	ffffdfff 	.word	0xffffdfff
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	ffffbfff 	.word	0xffffbfff

08005b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	2201      	movs	r2, #1
 8005b54:	4393      	bics	r3, r2
 8005b56:	001a      	movs	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	22f0      	movs	r2, #240	; 0xf0
 8005b66:	4393      	bics	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	220a      	movs	r2, #10
 8005b78:	4393      	bics	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	46c0      	nop			; (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b006      	add	sp, #24
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	4393      	bics	r3, r2
 8005bac:	001a      	movs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <TIM_TI2_ConfigInputStage+0x60>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	22a0      	movs	r2, #160	; 0xa0
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b006      	add	sp, #24
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	ffff0fff 	.word	0xffff0fff

08005bfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2270      	movs	r2, #112	; 0x70
 8005c10:	4393      	bics	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	609a      	str	r2, [r3, #8]
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b004      	add	sp, #16
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <TIM_ETR_SetConfig+0x3c>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	021a      	lsls	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b006      	add	sp, #24
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	ffff00ff 	.word	0xffff00ff

08005c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	221f      	movs	r2, #31
 8005c80:	4013      	ands	r3, r2
 8005c82:	2201      	movs	r2, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	0013      	movs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	43d2      	mvns	r2, r2
 8005c92:	401a      	ands	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	211f      	movs	r1, #31
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4099      	lsls	r1, r3
 8005ca6:	000b      	movs	r3, r1
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	223c      	movs	r2, #60	; 0x3c
 8005cc6:	5c9b      	ldrb	r3, [r3, r2]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e047      	b.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	223c      	movs	r2, #60	; 0x3c
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	223d      	movs	r2, #61	; 0x3d
 8005cdc:	2102      	movs	r1, #2
 8005cde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2270      	movs	r2, #112	; 0x70
 8005cf4:	4393      	bics	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00f      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	2380      	movs	r3, #128	; 0x80
 8005d1a:	05db      	lsls	r3, r3, #23
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d10c      	bne.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	4393      	bics	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	223d      	movs	r2, #61	; 0x3d
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	223c      	movs	r2, #60	; 0x3c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40014000 	.word	0x40014000

08005d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	223c      	movs	r2, #60	; 0x3c
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e03e      	b.n	8005e0e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	223c      	movs	r2, #60	; 0x3c
 8005d94:	2101      	movs	r1, #1
 8005d96:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22ff      	movs	r2, #255	; 0xff
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	001a      	movs	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005dac:	401a      	ands	r2, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005dba:	401a      	ands	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005dc8:	401a      	ands	r2, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005de4:	401a      	ands	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005df2:	401a      	ands	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	223c      	movs	r2, #60	; 0x3c
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b004      	add	sp, #16
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	fffffcff 	.word	0xfffffcff
 8005e1c:	fffffbff 	.word	0xfffffbff
 8005e20:	fffff7ff 	.word	0xfffff7ff
 8005e24:	ffffefff 	.word	0xffffefff
 8005e28:	ffffdfff 	.word	0xffffdfff
 8005e2c:	ffffbfff 	.word	0xffffbfff

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b002      	add	sp, #8
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e044      	b.n	8005eec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2274      	movs	r2, #116	; 0x74
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fb febf 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2224      	movs	r2, #36	; 0x24
 8005e7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	438a      	bics	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 fc2e 	bl	80066f4 <UART_SetConfig>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e024      	b.n	8005eec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 fd61 	bl	8006974 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	490d      	ldr	r1, [pc, #52]	; (8005ef4 <HAL_UART_Init+0xa4>)
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	212a      	movs	r1, #42	; 0x2a
 8005ece:	438a      	bics	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2101      	movs	r1, #1
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 fdf9 	bl	8006adc <UART_CheckIdleState>
 8005eea:	0003      	movs	r3, r0
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b002      	add	sp, #8
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	ffffb7ff 	.word	0xffffb7ff

08005ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d000      	beq.n	8005f12 <HAL_UART_Transmit+0x1a>
 8005f10:	e096      	b.n	8006040 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_Transmit+0x28>
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e08e      	b.n	8006042 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	015b      	lsls	r3, r3, #5
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d109      	bne.n	8005f44 <HAL_UART_Transmit+0x4c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d001      	beq.n	8005f44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e07e      	b.n	8006042 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2274      	movs	r2, #116	; 0x74
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Transmit+0x5a>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e077      	b.n	8006042 <HAL_UART_Transmit+0x14a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2274      	movs	r2, #116	; 0x74
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2221      	movs	r2, #33	; 0x21
 8005f66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f68:	f7fb ff7a 	bl	8001e60 <HAL_GetTick>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1dba      	adds	r2, r7, #6
 8005f74:	2150      	movs	r1, #80	; 0x50
 8005f76:	8812      	ldrh	r2, [r2, #0]
 8005f78:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1dba      	adds	r2, r7, #6
 8005f7e:	2152      	movs	r1, #82	; 0x52
 8005f80:	8812      	ldrh	r2, [r2, #0]
 8005f82:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	015b      	lsls	r3, r3, #5
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d108      	bne.n	8005fa2 <HAL_UART_Transmit+0xaa>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e003      	b.n	8005faa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2274      	movs	r2, #116	; 0x74
 8005fae:	2100      	movs	r1, #0
 8005fb0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005fb2:	e02d      	b.n	8006010 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	0013      	movs	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	f000 fdd3 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e039      	b.n	8006042 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	05d2      	lsls	r2, r2, #23
 8005fde:	0dd2      	lsrs	r2, r2, #23
 8005fe0:	b292      	uxth	r2, r2
 8005fe2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3302      	adds	r3, #2
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e008      	b.n	8005ffe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2252      	movs	r2, #82	; 0x52
 8006002:	5a9b      	ldrh	r3, [r3, r2]
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b299      	uxth	r1, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2252      	movs	r2, #82	; 0x52
 800600e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2252      	movs	r2, #82	; 0x52
 8006014:	5a9b      	ldrh	r3, [r3, r2]
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1cb      	bne.n	8005fb4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	0013      	movs	r3, r2
 8006026:	2200      	movs	r2, #0
 8006028:	2140      	movs	r1, #64	; 0x40
 800602a:	f000 fd9f 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 800602e:	1e03      	subs	r3, r0, #0
 8006030:	d001      	beq.n	8006036 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e005      	b.n	8006042 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b008      	add	sp, #32
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b088      	sub	sp, #32
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605c:	2b20      	cmp	r3, #32
 800605e:	d150      	bne.n	8006102 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_Receive_IT+0x24>
 8006066:	1dbb      	adds	r3, r7, #6
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e048      	b.n	8006104 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	015b      	lsls	r3, r3, #5
 800607a:	429a      	cmp	r2, r3
 800607c:	d109      	bne.n	8006092 <HAL_UART_Receive_IT+0x48>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d105      	bne.n	8006092 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2201      	movs	r2, #1
 800608a:	4013      	ands	r3, r2
 800608c:	d001      	beq.n	8006092 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e038      	b.n	8006104 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2274      	movs	r2, #116	; 0x74
 8006096:	5c9b      	ldrb	r3, [r3, r2]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Receive_IT+0x56>
 800609c:	2302      	movs	r3, #2
 800609e:	e031      	b.n	8006104 <HAL_UART_Receive_IT+0xba>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2274      	movs	r2, #116	; 0x74
 80060a4:	2101      	movs	r1, #1
 80060a6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	4013      	ands	r3, r2
 80060ba:	d019      	beq.n	80060f0 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060bc:	f3ef 8310 	mrs	r3, PRIMASK
 80060c0:	613b      	str	r3, [r7, #16]
  return(result);
 80060c2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	2301      	movs	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f383 8810 	msr	PRIMASK, r3
}
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	04c9      	lsls	r1, r1, #19
 80060e0:	430a      	orrs	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 fdfb 	bl	8006cf4 <UART_Start_Receive_IT>
 80060fe:	0003      	movs	r3, r0
 8006100:	e000      	b.n	8006104 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b008      	add	sp, #32
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b0ab      	sub	sp, #172	; 0xac
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	22a4      	movs	r2, #164	; 0xa4
 800611c:	18b9      	adds	r1, r7, r2
 800611e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	20a0      	movs	r0, #160	; 0xa0
 8006128:	1839      	adds	r1, r7, r0
 800612a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	219c      	movs	r1, #156	; 0x9c
 8006134:	1879      	adds	r1, r7, r1
 8006136:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006138:	0011      	movs	r1, r2
 800613a:	18bb      	adds	r3, r7, r2
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a99      	ldr	r2, [pc, #612]	; (80063a4 <HAL_UART_IRQHandler+0x298>)
 8006140:	4013      	ands	r3, r2
 8006142:	2298      	movs	r2, #152	; 0x98
 8006144:	18bc      	adds	r4, r7, r2
 8006146:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006148:	18bb      	adds	r3, r7, r2
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d114      	bne.n	800617a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006150:	187b      	adds	r3, r7, r1
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2220      	movs	r2, #32
 8006156:	4013      	ands	r3, r2
 8006158:	d00f      	beq.n	800617a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800615a:	183b      	adds	r3, r7, r0
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2220      	movs	r2, #32
 8006160:	4013      	ands	r3, r2
 8006162:	d00a      	beq.n	800617a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006168:	2b00      	cmp	r3, #0
 800616a:	d100      	bne.n	800616e <HAL_UART_IRQHandler+0x62>
 800616c:	e296      	b.n	800669c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	0010      	movs	r0, r2
 8006176:	4798      	blx	r3
      }
      return;
 8006178:	e290      	b.n	800669c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800617a:	2398      	movs	r3, #152	; 0x98
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d100      	bne.n	8006186 <HAL_UART_IRQHandler+0x7a>
 8006184:	e114      	b.n	80063b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006186:	239c      	movs	r3, #156	; 0x9c
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	4013      	ands	r3, r2
 8006190:	d106      	bne.n	80061a0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006192:	23a0      	movs	r3, #160	; 0xa0
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a83      	ldr	r2, [pc, #524]	; (80063a8 <HAL_UART_IRQHandler+0x29c>)
 800619a:	4013      	ands	r3, r2
 800619c:	d100      	bne.n	80061a0 <HAL_UART_IRQHandler+0x94>
 800619e:	e107      	b.n	80063b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a0:	23a4      	movs	r3, #164	; 0xa4
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d012      	beq.n	80061d2 <HAL_UART_IRQHandler+0xc6>
 80061ac:	23a0      	movs	r3, #160	; 0xa0
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2280      	movs	r2, #128	; 0x80
 80061c6:	589b      	ldr	r3, [r3, r2]
 80061c8:	2201      	movs	r2, #1
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d2:	23a4      	movs	r3, #164	; 0xa4
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2202      	movs	r2, #2
 80061da:	4013      	ands	r3, r2
 80061dc:	d011      	beq.n	8006202 <HAL_UART_IRQHandler+0xf6>
 80061de:	239c      	movs	r3, #156	; 0x9c
 80061e0:	18fb      	adds	r3, r7, r3
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2201      	movs	r2, #1
 80061e6:	4013      	ands	r3, r2
 80061e8:	d00b      	beq.n	8006202 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2202      	movs	r2, #2
 80061f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	589b      	ldr	r3, [r3, r2]
 80061f8:	2204      	movs	r2, #4
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006202:	23a4      	movs	r3, #164	; 0xa4
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2204      	movs	r2, #4
 800620a:	4013      	ands	r3, r2
 800620c:	d011      	beq.n	8006232 <HAL_UART_IRQHandler+0x126>
 800620e:	239c      	movs	r3, #156	; 0x9c
 8006210:	18fb      	adds	r3, r7, r3
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2201      	movs	r2, #1
 8006216:	4013      	ands	r3, r2
 8006218:	d00b      	beq.n	8006232 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2204      	movs	r2, #4
 8006220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2280      	movs	r2, #128	; 0x80
 8006226:	589b      	ldr	r3, [r3, r2]
 8006228:	2202      	movs	r2, #2
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2180      	movs	r1, #128	; 0x80
 8006230:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006232:	23a4      	movs	r3, #164	; 0xa4
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2208      	movs	r2, #8
 800623a:	4013      	ands	r3, r2
 800623c:	d017      	beq.n	800626e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800623e:	23a0      	movs	r3, #160	; 0xa0
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2220      	movs	r2, #32
 8006246:	4013      	ands	r3, r2
 8006248:	d105      	bne.n	8006256 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800624a:	239c      	movs	r3, #156	; 0x9c
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2201      	movs	r2, #1
 8006252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006254:	d00b      	beq.n	800626e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2208      	movs	r2, #8
 800625c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	589b      	ldr	r3, [r3, r2]
 8006264:	2208      	movs	r2, #8
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800626e:	23a4      	movs	r3, #164	; 0xa4
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	4013      	ands	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_UART_IRQHandler+0x198>
 800627c:	23a0      	movs	r3, #160	; 0xa0
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	04db      	lsls	r3, r3, #19
 8006286:	4013      	ands	r3, r2
 8006288:	d00c      	beq.n	80062a4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2280      	movs	r2, #128	; 0x80
 8006298:	589b      	ldr	r3, [r3, r2]
 800629a:	2220      	movs	r2, #32
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2180      	movs	r1, #128	; 0x80
 80062a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2280      	movs	r2, #128	; 0x80
 80062a8:	589b      	ldr	r3, [r3, r2]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d100      	bne.n	80062b0 <HAL_UART_IRQHandler+0x1a4>
 80062ae:	e1f7      	b.n	80066a0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062b0:	23a4      	movs	r3, #164	; 0xa4
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2220      	movs	r2, #32
 80062b8:	4013      	ands	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062bc:	23a0      	movs	r3, #160	; 0xa0
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2220      	movs	r2, #32
 80062c4:	4013      	ands	r3, r2
 80062c6:	d008      	beq.n	80062da <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	0010      	movs	r0, r2
 80062d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2280      	movs	r2, #128	; 0x80
 80062de:	589b      	ldr	r3, [r3, r2]
 80062e0:	2194      	movs	r1, #148	; 0x94
 80062e2:	187a      	adds	r2, r7, r1
 80062e4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2240      	movs	r2, #64	; 0x40
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d004      	beq.n	80062fe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2228      	movs	r2, #40	; 0x28
 80062fa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062fc:	d047      	beq.n	800638e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f000 fd93 	bl	8006e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	4013      	ands	r3, r2
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d137      	bne.n	8006384 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006314:	f3ef 8310 	mrs	r3, PRIMASK
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800631a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631c:	2090      	movs	r0, #144	; 0x90
 800631e:	183a      	adds	r2, r7, r0
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	2301      	movs	r3, #1
 8006324:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006328:	f383 8810 	msr	PRIMASK, r3
}
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	438a      	bics	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
 800633e:	183b      	adds	r3, r7, r0
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	2b00      	cmp	r3, #0
 8006352:	d012      	beq.n	800637a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a14      	ldr	r2, [pc, #80]	; (80063ac <HAL_UART_IRQHandler+0x2a0>)
 800635a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	0018      	movs	r0, r3
 8006362:	f7fc fbe3 	bl	8002b2c <HAL_DMA_Abort_IT>
 8006366:	1e03      	subs	r3, r0, #0
 8006368:	d01a      	beq.n	80063a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	0018      	movs	r0, r3
 8006376:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e012      	b.n	80063a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0018      	movs	r0, r3
 800637e:	f000 f9a5 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006382:	e00d      	b.n	80063a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0018      	movs	r0, r3
 8006388:	f000 f9a0 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e008      	b.n	80063a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0018      	movs	r0, r3
 8006392:	f000 f99b 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	2100      	movs	r1, #0
 800639c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800639e:	e17f      	b.n	80066a0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	46c0      	nop			; (mov r8, r8)
    return;
 80063a2:	e17d      	b.n	80066a0 <HAL_UART_IRQHandler+0x594>
 80063a4:	0000080f 	.word	0x0000080f
 80063a8:	04000120 	.word	0x04000120
 80063ac:	08006ef1 	.word	0x08006ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d000      	beq.n	80063ba <HAL_UART_IRQHandler+0x2ae>
 80063b8:	e131      	b.n	800661e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ba:	23a4      	movs	r3, #164	; 0xa4
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2210      	movs	r2, #16
 80063c2:	4013      	ands	r3, r2
 80063c4:	d100      	bne.n	80063c8 <HAL_UART_IRQHandler+0x2bc>
 80063c6:	e12a      	b.n	800661e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063c8:	23a0      	movs	r3, #160	; 0xa0
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	4013      	ands	r3, r2
 80063d2:	d100      	bne.n	80063d6 <HAL_UART_IRQHandler+0x2ca>
 80063d4:	e123      	b.n	800661e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2240      	movs	r2, #64	; 0x40
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d000      	beq.n	80063ee <HAL_UART_IRQHandler+0x2e2>
 80063ec:	e09b      	b.n	8006526 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	217e      	movs	r1, #126	; 0x7e
 80063f8:	187b      	adds	r3, r7, r1
 80063fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80063fc:	187b      	adds	r3, r7, r1
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d100      	bne.n	8006406 <HAL_UART_IRQHandler+0x2fa>
 8006404:	e14e      	b.n	80066a4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2258      	movs	r2, #88	; 0x58
 800640a:	5a9b      	ldrh	r3, [r3, r2]
 800640c:	187a      	adds	r2, r7, r1
 800640e:	8812      	ldrh	r2, [r2, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d300      	bcc.n	8006416 <HAL_UART_IRQHandler+0x30a>
 8006414:	e146      	b.n	80066a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	187a      	adds	r2, r7, r1
 800641a:	215a      	movs	r1, #90	; 0x5a
 800641c:	8812      	ldrh	r2, [r2, #0]
 800641e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b20      	cmp	r3, #32
 8006428:	d06e      	beq.n	8006508 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8310 	mrs	r3, PRIMASK
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006432:	67bb      	str	r3, [r7, #120]	; 0x78
 8006434:	2301      	movs	r3, #1
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	499a      	ldr	r1, [pc, #616]	; (80066b4 <HAL_UART_IRQHandler+0x5a8>)
 800644c:	400a      	ands	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006452:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	f383 8810 	msr	PRIMASK, r3
}
 800645a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
 8006466:	2301      	movs	r3, #1
 8006468:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	438a      	bics	r2, r1
 8006480:	609a      	str	r2, [r3, #8]
 8006482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006484:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	673b      	str	r3, [r7, #112]	; 0x70
 8006498:	2301      	movs	r3, #1
 800649a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2140      	movs	r1, #64	; 0x40
 80064b0:	438a      	bics	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064cc:	f3ef 8310 	mrs	r3, PRIMASK
 80064d0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80064d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d6:	2301      	movs	r3, #1
 80064d8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2110      	movs	r1, #16
 80064ee:	438a      	bics	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	0018      	movs	r0, r3
 8006504:	f7fc fada 	bl	8002abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2258      	movs	r2, #88	; 0x58
 800650c:	5a9a      	ldrh	r2, [r3, r2]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	215a      	movs	r1, #90	; 0x5a
 8006512:	5a5b      	ldrh	r3, [r3, r1]
 8006514:	b29b      	uxth	r3, r3
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f000 f8dc 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006524:	e0be      	b.n	80066a4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2258      	movs	r2, #88	; 0x58
 800652a:	5a99      	ldrh	r1, [r3, r2]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	225a      	movs	r2, #90	; 0x5a
 8006530:	5a9b      	ldrh	r3, [r3, r2]
 8006532:	b29a      	uxth	r2, r3
 8006534:	208e      	movs	r0, #142	; 0x8e
 8006536:	183b      	adds	r3, r7, r0
 8006538:	1a8a      	subs	r2, r1, r2
 800653a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	225a      	movs	r2, #90	; 0x5a
 8006540:	5a9b      	ldrh	r3, [r3, r2]
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d100      	bne.n	800654a <HAL_UART_IRQHandler+0x43e>
 8006548:	e0ae      	b.n	80066a8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800654a:	183b      	adds	r3, r7, r0
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d100      	bne.n	8006554 <HAL_UART_IRQHandler+0x448>
 8006552:	e0a9      	b.n	80066a8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006554:	f3ef 8310 	mrs	r3, PRIMASK
 8006558:	60fb      	str	r3, [r7, #12]
  return(result);
 800655a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655c:	2488      	movs	r4, #136	; 0x88
 800655e:	193a      	adds	r2, r7, r4
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	2301      	movs	r3, #1
 8006564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f383 8810 	msr	PRIMASK, r3
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	494f      	ldr	r1, [pc, #316]	; (80066b8 <HAL_UART_IRQHandler+0x5ac>)
 800657a:	400a      	ands	r2, r1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	193b      	adds	r3, r7, r4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f383 8810 	msr	PRIMASK, r3
}
 800658a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658c:	f3ef 8310 	mrs	r3, PRIMASK
 8006590:	61bb      	str	r3, [r7, #24]
  return(result);
 8006592:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	2484      	movs	r4, #132	; 0x84
 8006596:	193a      	adds	r2, r7, r4
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	2301      	movs	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	438a      	bics	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
 80065b6:	193b      	adds	r3, r7, r4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	f383 8810 	msr	PRIMASK, r3
}
 80065c2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d6:	f3ef 8310 	mrs	r3, PRIMASK
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065de:	2480      	movs	r4, #128	; 0x80
 80065e0:	193a      	adds	r2, r7, r4
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	2301      	movs	r3, #1
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f383 8810 	msr	PRIMASK, r3
}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2110      	movs	r1, #16
 80065fc:	438a      	bics	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	193b      	adds	r3, r7, r4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	f383 8810 	msr	PRIMASK, r3
}
 800660c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800660e:	183b      	adds	r3, r7, r0
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f000 f860 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800661c:	e044      	b.n	80066a8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800661e:	23a4      	movs	r3, #164	; 0xa4
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	035b      	lsls	r3, r3, #13
 8006628:	4013      	ands	r3, r2
 800662a:	d010      	beq.n	800664e <HAL_UART_IRQHandler+0x542>
 800662c:	239c      	movs	r3, #156	; 0x9c
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	03db      	lsls	r3, r3, #15
 8006636:	4013      	ands	r3, r2
 8006638:	d009      	beq.n	800664e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	0352      	lsls	r2, r2, #13
 8006642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0018      	movs	r0, r3
 8006648:	f000 fdfc 	bl	8007244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664c:	e02f      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800664e:	23a4      	movs	r3, #164	; 0xa4
 8006650:	18fb      	adds	r3, r7, r3
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	4013      	ands	r3, r2
 8006658:	d00f      	beq.n	800667a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800665a:	23a0      	movs	r3, #160	; 0xa0
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	4013      	ands	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01e      	beq.n	80066ac <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	0010      	movs	r0, r2
 8006676:	4798      	blx	r3
    }
    return;
 8006678:	e018      	b.n	80066ac <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800667a:	23a4      	movs	r3, #164	; 0xa4
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2240      	movs	r2, #64	; 0x40
 8006682:	4013      	ands	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_UART_IRQHandler+0x5a2>
 8006686:	23a0      	movs	r3, #160	; 0xa0
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	4013      	ands	r3, r2
 8006690:	d00d      	beq.n	80066ae <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fc42 	bl	8006f1e <UART_EndTransmit_IT>
    return;
 800669a:	e008      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800669c:	46c0      	nop			; (mov r8, r8)
 800669e:	e006      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	e004      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80066a4:	46c0      	nop			; (mov r8, r8)
 80066a6:	e002      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80066a8:	46c0      	nop			; (mov r8, r8)
 80066aa:	e000      	b.n	80066ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80066ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b02b      	add	sp, #172	; 0xac
 80066b2:	bd90      	pop	{r4, r7, pc}
 80066b4:	fffffeff 	.word	0xfffffeff
 80066b8:	fffffedf 	.word	0xfffffedf

080066bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066c4:	46c0      	nop			; (mov r8, r8)
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b002      	add	sp, #8
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b002      	add	sp, #8
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	000a      	movs	r2, r1
 80066e6:	1cbb      	adds	r3, r7, #2
 80066e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b002      	add	sp, #8
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066fc:	231e      	movs	r3, #30
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a8d      	ldr	r2, [pc, #564]	; (8006958 <UART_SetConfig+0x264>)
 8006724:	4013      	ands	r3, r2
 8006726:	0019      	movs	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	430a      	orrs	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a88      	ldr	r2, [pc, #544]	; (800695c <UART_SetConfig+0x268>)
 800673a:	4013      	ands	r3, r2
 800673c:	0019      	movs	r1, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a7f      	ldr	r2, [pc, #508]	; (8006960 <UART_SetConfig+0x26c>)
 8006762:	4013      	ands	r3, r2
 8006764:	0019      	movs	r1, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	430a      	orrs	r2, r1
 800676e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7b      	ldr	r2, [pc, #492]	; (8006964 <UART_SetConfig+0x270>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d127      	bne.n	80067ca <UART_SetConfig+0xd6>
 800677a:	4b7b      	ldr	r3, [pc, #492]	; (8006968 <UART_SetConfig+0x274>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	2203      	movs	r2, #3
 8006780:	4013      	ands	r3, r2
 8006782:	2b03      	cmp	r3, #3
 8006784:	d00d      	beq.n	80067a2 <UART_SetConfig+0xae>
 8006786:	d81b      	bhi.n	80067c0 <UART_SetConfig+0xcc>
 8006788:	2b02      	cmp	r3, #2
 800678a:	d014      	beq.n	80067b6 <UART_SetConfig+0xc2>
 800678c:	d818      	bhi.n	80067c0 <UART_SetConfig+0xcc>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <UART_SetConfig+0xa4>
 8006792:	2b01      	cmp	r3, #1
 8006794:	d00a      	beq.n	80067ac <UART_SetConfig+0xb8>
 8006796:	e013      	b.n	80067c0 <UART_SetConfig+0xcc>
 8006798:	231f      	movs	r3, #31
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	e021      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067a2:	231f      	movs	r3, #31
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	2202      	movs	r2, #2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	e01c      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067ac:	231f      	movs	r3, #31
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	2204      	movs	r2, #4
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e017      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067b6:	231f      	movs	r3, #31
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2208      	movs	r2, #8
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e012      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067c0:	231f      	movs	r3, #31
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2210      	movs	r2, #16
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e00d      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a67      	ldr	r2, [pc, #412]	; (800696c <UART_SetConfig+0x278>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d104      	bne.n	80067de <UART_SetConfig+0xea>
 80067d4:	231f      	movs	r3, #31
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e003      	b.n	80067e6 <UART_SetConfig+0xf2>
 80067de:	231f      	movs	r3, #31
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2210      	movs	r2, #16
 80067e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d15d      	bne.n	80068ae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80067f2:	231f      	movs	r3, #31
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d015      	beq.n	8006828 <UART_SetConfig+0x134>
 80067fc:	dc18      	bgt.n	8006830 <UART_SetConfig+0x13c>
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00d      	beq.n	800681e <UART_SetConfig+0x12a>
 8006802:	dc15      	bgt.n	8006830 <UART_SetConfig+0x13c>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <UART_SetConfig+0x11a>
 8006808:	2b02      	cmp	r3, #2
 800680a:	d005      	beq.n	8006818 <UART_SetConfig+0x124>
 800680c:	e010      	b.n	8006830 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680e:	f7fd fe27 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006812:	0003      	movs	r3, r0
 8006814:	61bb      	str	r3, [r7, #24]
        break;
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b55      	ldr	r3, [pc, #340]	; (8006970 <UART_SetConfig+0x27c>)
 800681a:	61bb      	str	r3, [r7, #24]
        break;
 800681c:	e00f      	b.n	800683e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd fdb1 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8006822:	0003      	movs	r3, r0
 8006824:	61bb      	str	r3, [r7, #24]
        break;
 8006826:	e00a      	b.n	800683e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	61bb      	str	r3, [r7, #24]
        break;
 800682e:	e006      	b.n	800683e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006834:	231e      	movs	r3, #30
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
        break;
 800683c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d100      	bne.n	8006846 <UART_SetConfig+0x152>
 8006844:	e07b      	b.n	800693e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	005a      	lsls	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	18d2      	adds	r2, r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	0019      	movs	r1, r3
 8006858:	0010      	movs	r0, r2
 800685a:	f7f9 fc55 	bl	8000108 <__udivsi3>
 800685e:	0003      	movs	r3, r0
 8006860:	b29b      	uxth	r3, r3
 8006862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d91c      	bls.n	80068a4 <UART_SetConfig+0x1b0>
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	025b      	lsls	r3, r3, #9
 8006870:	429a      	cmp	r2, r3
 8006872:	d217      	bcs.n	80068a4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	b29a      	uxth	r2, r3
 8006878:	200e      	movs	r0, #14
 800687a:	183b      	adds	r3, r7, r0
 800687c:	210f      	movs	r1, #15
 800687e:	438a      	bics	r2, r1
 8006880:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	2207      	movs	r2, #7
 800688a:	4013      	ands	r3, r2
 800688c:	b299      	uxth	r1, r3
 800688e:	183b      	adds	r3, r7, r0
 8006890:	183a      	adds	r2, r7, r0
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	183a      	adds	r2, r7, r0
 800689e:	8812      	ldrh	r2, [r2, #0]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e04c      	b.n	800693e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80068a4:	231e      	movs	r3, #30
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e047      	b.n	800693e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ae:	231f      	movs	r3, #31
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d015      	beq.n	80068e4 <UART_SetConfig+0x1f0>
 80068b8:	dc18      	bgt.n	80068ec <UART_SetConfig+0x1f8>
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d00d      	beq.n	80068da <UART_SetConfig+0x1e6>
 80068be:	dc15      	bgt.n	80068ec <UART_SetConfig+0x1f8>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <UART_SetConfig+0x1d6>
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d005      	beq.n	80068d4 <UART_SetConfig+0x1e0>
 80068c8:	e010      	b.n	80068ec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ca:	f7fd fdc9 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80068ce:	0003      	movs	r3, r0
 80068d0:	61bb      	str	r3, [r7, #24]
        break;
 80068d2:	e012      	b.n	80068fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b26      	ldr	r3, [pc, #152]	; (8006970 <UART_SetConfig+0x27c>)
 80068d6:	61bb      	str	r3, [r7, #24]
        break;
 80068d8:	e00f      	b.n	80068fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068da:	f7fd fd53 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 80068de:	0003      	movs	r3, r0
 80068e0:	61bb      	str	r3, [r7, #24]
        break;
 80068e2:	e00a      	b.n	80068fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	61bb      	str	r3, [r7, #24]
        break;
 80068ea:	e006      	b.n	80068fa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068f0:	231e      	movs	r3, #30
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
        break;
 80068f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01e      	beq.n	800693e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085a      	lsrs	r2, r3, #1
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	18d2      	adds	r2, r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0019      	movs	r1, r3
 8006910:	0010      	movs	r0, r2
 8006912:	f7f9 fbf9 	bl	8000108 <__udivsi3>
 8006916:	0003      	movs	r3, r0
 8006918:	b29b      	uxth	r3, r3
 800691a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d909      	bls.n	8006936 <UART_SetConfig+0x242>
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	2380      	movs	r3, #128	; 0x80
 8006926:	025b      	lsls	r3, r3, #9
 8006928:	429a      	cmp	r2, r3
 800692a:	d204      	bcs.n	8006936 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	e003      	b.n	800693e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006936:	231e      	movs	r3, #30
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800694a:	231e      	movs	r3, #30
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	781b      	ldrb	r3, [r3, #0]
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b008      	add	sp, #32
 8006956:	bd80      	pop	{r7, pc}
 8006958:	ffff69f3 	.word	0xffff69f3
 800695c:	ffffcfff 	.word	0xffffcfff
 8006960:	fffff4ff 	.word	0xfffff4ff
 8006964:	40013800 	.word	0x40013800
 8006968:	40021000 	.word	0x40021000
 800696c:	40004400 	.word	0x40004400
 8006970:	007a1200 	.word	0x007a1200

08006974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2201      	movs	r2, #1
 8006982:	4013      	ands	r3, r2
 8006984:	d00b      	beq.n	800699e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4a4a      	ldr	r2, [pc, #296]	; (8006ab8 <UART_AdvFeatureConfig+0x144>)
 800698e:	4013      	ands	r3, r2
 8006990:	0019      	movs	r1, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2202      	movs	r2, #2
 80069a4:	4013      	ands	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4a43      	ldr	r2, [pc, #268]	; (8006abc <UART_AdvFeatureConfig+0x148>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	0019      	movs	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	2204      	movs	r2, #4
 80069c6:	4013      	ands	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a3b      	ldr	r2, [pc, #236]	; (8006ac0 <UART_AdvFeatureConfig+0x14c>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	0019      	movs	r1, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2208      	movs	r2, #8
 80069e8:	4013      	ands	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <UART_AdvFeatureConfig+0x150>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	0019      	movs	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2210      	movs	r2, #16
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4a2c      	ldr	r2, [pc, #176]	; (8006ac8 <UART_AdvFeatureConfig+0x154>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d00b      	beq.n	8006a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4a25      	ldr	r2, [pc, #148]	; (8006acc <UART_AdvFeatureConfig+0x158>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2240      	movs	r2, #64	; 0x40
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d01d      	beq.n	8006a8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <UART_AdvFeatureConfig+0x15c>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	035b      	lsls	r3, r3, #13
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10b      	bne.n	8006a8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <UART_AdvFeatureConfig+0x160>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2280      	movs	r2, #128	; 0x80
 8006a94:	4013      	ands	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <UART_AdvFeatureConfig+0x164>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	46c0      	nop			; (mov r8, r8)
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	fffdffff 	.word	0xfffdffff
 8006abc:	fffeffff 	.word	0xfffeffff
 8006ac0:	fffbffff 	.word	0xfffbffff
 8006ac4:	ffff7fff 	.word	0xffff7fff
 8006ac8:	ffffefff 	.word	0xffffefff
 8006acc:	ffffdfff 	.word	0xffffdfff
 8006ad0:	ffefffff 	.word	0xffefffff
 8006ad4:	ff9fffff 	.word	0xff9fffff
 8006ad8:	fff7ffff 	.word	0xfff7ffff

08006adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	2100      	movs	r1, #0
 8006aea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aec:	f7fb f9b8 	bl	8001e60 <HAL_GetTick>
 8006af0:	0003      	movs	r3, r0
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2208      	movs	r2, #8
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d10c      	bne.n	8006b1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2280      	movs	r2, #128	; 0x80
 8006b06:	0391      	lsls	r1, r2, #14
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4a17      	ldr	r2, [pc, #92]	; (8006b68 <UART_CheckIdleState+0x8c>)
 8006b0c:	9200      	str	r2, [sp, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f000 f82c 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006b14:	1e03      	subs	r3, r0, #0
 8006b16:	d001      	beq.n	8006b1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e021      	b.n	8006b60 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d10c      	bne.n	8006b44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	03d1      	lsls	r1, r2, #15
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4a0d      	ldr	r2, [pc, #52]	; (8006b68 <UART_CheckIdleState+0x8c>)
 8006b34:	9200      	str	r2, [sp, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f818 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006b3c:	1e03      	subs	r3, r0, #0
 8006b3e:	d001      	beq.n	8006b44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e00d      	b.n	8006b60 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2274      	movs	r2, #116	; 0x74
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	0018      	movs	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b004      	add	sp, #16
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	01ffffff 	.word	0x01ffffff

08006b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b094      	sub	sp, #80	; 0x50
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	1dfb      	adds	r3, r7, #7
 8006b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7c:	e0a3      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b80:	3301      	adds	r3, #1
 8006b82:	d100      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006b84:	e09f      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b86:	f7fb f96b 	bl	8001e60 <HAL_GetTick>
 8006b8a:	0002      	movs	r2, r0
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d13d      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	494c      	ldr	r1, [pc, #304]	; (8006cf0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006bbe:	400a      	ands	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	f383 8810 	msr	PRIMASK, r3
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bce:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd8:	2301      	movs	r3, #1
 8006bda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f383 8810 	msr	PRIMASK, r3
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2101      	movs	r1, #1
 8006bf0:	438a      	bics	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfa:	f383 8810 	msr	PRIMASK, r3
}
 8006bfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2274      	movs	r2, #116	; 0x74
 8006c10:	2100      	movs	r1, #0
 8006c12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e067      	b.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2204      	movs	r2, #4
 8006c20:	4013      	ands	r3, r2
 8006c22:	d050      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69da      	ldr	r2, [r3, #28]
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	401a      	ands	r2, r3
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d146      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2280      	movs	r2, #128	; 0x80
 8006c3e:	0112      	lsls	r2, r2, #4
 8006c40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	613b      	str	r3, [r7, #16]
  return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4923      	ldr	r1, [pc, #140]	; (8006cf0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c64:	400a      	ands	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c74:	f3ef 8310 	mrs	r3, PRIMASK
 8006c78:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c7e:	2301      	movs	r3, #1
 8006c80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	f383 8810 	msr	PRIMASK, r3
}
 8006c88:	46c0      	nop			; (mov r8, r8)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	438a      	bics	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	f383 8810 	msr	PRIMASK, r3
}
 8006ca4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2280      	movs	r2, #128	; 0x80
 8006cb6:	2120      	movs	r1, #32
 8006cb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2274      	movs	r2, #116	; 0x74
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e010      	b.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	425a      	negs	r2, r3
 8006cd6:	4153      	adcs	r3, r2
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	001a      	movs	r2, r3
 8006cdc:	1dfb      	adds	r3, r7, #7
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d100      	bne.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006ce4:	e74b      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b014      	add	sp, #80	; 0x50
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	fffffe5f 	.word	0xfffffe5f

08006cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	1dbb      	adds	r3, r7, #6
 8006d00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	1dba      	adds	r2, r7, #6
 8006d0c:	2158      	movs	r1, #88	; 0x58
 8006d0e:	8812      	ldrh	r2, [r2, #0]
 8006d10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1dba      	adds	r2, r7, #6
 8006d16:	215a      	movs	r1, #90	; 0x5a
 8006d18:	8812      	ldrh	r2, [r2, #0]
 8006d1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	2380      	movs	r3, #128	; 0x80
 8006d28:	015b      	lsls	r3, r3, #5
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d10d      	bne.n	8006d4a <UART_Start_Receive_IT+0x56>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <UART_Start_Receive_IT+0x4c>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	225c      	movs	r2, #92	; 0x5c
 8006d3a:	4939      	ldr	r1, [pc, #228]	; (8006e20 <UART_Start_Receive_IT+0x12c>)
 8006d3c:	5299      	strh	r1, [r3, r2]
 8006d3e:	e01a      	b.n	8006d76 <UART_Start_Receive_IT+0x82>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	225c      	movs	r2, #92	; 0x5c
 8006d44:	21ff      	movs	r1, #255	; 0xff
 8006d46:	5299      	strh	r1, [r3, r2]
 8006d48:	e015      	b.n	8006d76 <UART_Start_Receive_IT+0x82>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <UART_Start_Receive_IT+0x7a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <UART_Start_Receive_IT+0x70>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	225c      	movs	r2, #92	; 0x5c
 8006d5e:	21ff      	movs	r1, #255	; 0xff
 8006d60:	5299      	strh	r1, [r3, r2]
 8006d62:	e008      	b.n	8006d76 <UART_Start_Receive_IT+0x82>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	225c      	movs	r2, #92	; 0x5c
 8006d68:	217f      	movs	r1, #127	; 0x7f
 8006d6a:	5299      	strh	r1, [r3, r2]
 8006d6c:	e003      	b.n	8006d76 <UART_Start_Receive_IT+0x82>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	225c      	movs	r2, #92	; 0x5c
 8006d72:	2100      	movs	r1, #0
 8006d74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2280      	movs	r2, #128	; 0x80
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2222      	movs	r2, #34	; 0x22
 8006d82:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d84:	f3ef 8310 	mrs	r3, PRIMASK
 8006d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d8a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8e:	2301      	movs	r3, #1
 8006d90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2101      	movs	r1, #1
 8006da6:	430a      	orrs	r2, r1
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	f383 8810 	msr	PRIMASK, r3
}
 8006db4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	2380      	movs	r3, #128	; 0x80
 8006dbc:	015b      	lsls	r3, r3, #5
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d107      	bne.n	8006dd2 <UART_Start_Receive_IT+0xde>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <UART_Start_Receive_IT+0x130>)
 8006dce:	665a      	str	r2, [r3, #100]	; 0x64
 8006dd0:	e002      	b.n	8006dd8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <UART_Start_Receive_IT+0x134>)
 8006dd6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2274      	movs	r2, #116	; 0x74
 8006ddc:	2100      	movs	r1, #0
 8006dde:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8310 	mrs	r3, PRIMASK
 8006de4:	613b      	str	r3, [r7, #16]
  return(result);
 8006de6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dea:	2301      	movs	r3, #1
 8006dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2190      	movs	r1, #144	; 0x90
 8006e02:	0049      	lsls	r1, r1, #1
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f383 8810 	msr	PRIMASK, r3
}
 8006e12:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b00c      	add	sp, #48	; 0x30
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	000001ff 	.word	0x000001ff
 8006e24:	080070dd 	.word	0x080070dd
 8006e28:	08006f75 	.word	0x08006f75

08006e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08e      	sub	sp, #56	; 0x38
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e34:	f3ef 8310 	mrs	r3, PRIMASK
 8006e38:	617b      	str	r3, [r7, #20]
  return(result);
 8006e3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	f383 8810 	msr	PRIMASK, r3
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4925      	ldr	r1, [pc, #148]	; (8006eec <UART_EndRxTransfer+0xc0>)
 8006e56:	400a      	ands	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f383 8810 	msr	PRIMASK, r3
}
 8006e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e66:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e70:	2301      	movs	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2101      	movs	r1, #1
 8006e88:	438a      	bics	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	f383 8810 	msr	PRIMASK, r3
}
 8006e96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d118      	bne.n	8006ed2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eaa:	2301      	movs	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2110      	movs	r1, #16
 8006ec2:	438a      	bics	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f383 8810 	msr	PRIMASK, r3
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	b00e      	add	sp, #56	; 0x38
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	fffffedf 	.word	0xfffffedf

08006ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	225a      	movs	r2, #90	; 0x5a
 8006f02:	2100      	movs	r1, #0
 8006f04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2252      	movs	r2, #82	; 0x52
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7ff fbdb 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f26:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	2301      	movs	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2140      	movs	r1, #64	; 0x40
 8006f48:	438a      	bics	r2, r1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f383 8810 	msr	PRIMASK, r3
}
 8006f56:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7ff fba8 	bl	80066bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b006      	add	sp, #24
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b090      	sub	sp, #64	; 0x40
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f7c:	203e      	movs	r0, #62	; 0x3e
 8006f7e:	183b      	adds	r3, r7, r0
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	215c      	movs	r1, #92	; 0x5c
 8006f84:	5a52      	ldrh	r2, [r2, r1]
 8006f86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8c:	2b22      	cmp	r3, #34	; 0x22
 8006f8e:	d000      	beq.n	8006f92 <UART_RxISR_8BIT+0x1e>
 8006f90:	e095      	b.n	80070be <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	213c      	movs	r1, #60	; 0x3c
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006f9c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	183b      	adds	r3, r7, r0
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b2d9      	uxtb	r1, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	400a      	ands	r2, r1
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	225a      	movs	r2, #90	; 0x5a
 8006fc2:	5a9b      	ldrh	r3, [r3, r2]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b299      	uxth	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	225a      	movs	r2, #90	; 0x5a
 8006fce:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	225a      	movs	r2, #90	; 0x5a
 8006fd4:	5a9b      	ldrh	r3, [r3, r2]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d178      	bne.n	80070ce <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fe2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f383 8810 	msr	PRIMASK, r3
}
 8006ff0:	46c0      	nop			; (mov r8, r8)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4936      	ldr	r1, [pc, #216]	; (80070d8 <UART_RxISR_8BIT+0x164>)
 8006ffe:	400a      	ands	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f383 8810 	msr	PRIMASK, r3
}
 800700c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700e:	f3ef 8310 	mrs	r3, PRIMASK
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	637b      	str	r3, [r7, #52]	; 0x34
 8007018:	2301      	movs	r3, #1
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2101      	movs	r1, #1
 8007030:	438a      	bics	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	f383 8810 	msr	PRIMASK, r3
}
 800703e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007050:	2b01      	cmp	r3, #1
 8007052:	d12f      	bne.n	80070b4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705a:	f3ef 8310 	mrs	r3, PRIMASK
 800705e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007060:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	633b      	str	r3, [r7, #48]	; 0x30
 8007064:	2301      	movs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2110      	movs	r1, #16
 800707c:	438a      	bics	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	2210      	movs	r2, #16
 8007094:	4013      	ands	r3, r2
 8007096:	2b10      	cmp	r3, #16
 8007098:	d103      	bne.n	80070a2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2210      	movs	r2, #16
 80070a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2258      	movs	r2, #88	; 0x58
 80070a6:	5a9a      	ldrh	r2, [r3, r2]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0011      	movs	r1, r2
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff fb15 	bl	80066dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070b2:	e00c      	b.n	80070ce <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7f9 fcac 	bl	8000a14 <HAL_UART_RxCpltCallback>
}
 80070bc:	e007      	b.n	80070ce <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2108      	movs	r1, #8
 80070ca:	430a      	orrs	r2, r1
 80070cc:	619a      	str	r2, [r3, #24]
}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b010      	add	sp, #64	; 0x40
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	fffffedf 	.word	0xfffffedf

080070dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b090      	sub	sp, #64	; 0x40
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070e4:	203e      	movs	r0, #62	; 0x3e
 80070e6:	183b      	adds	r3, r7, r0
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	215c      	movs	r1, #92	; 0x5c
 80070ec:	5a52      	ldrh	r2, [r2, r1]
 80070ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f4:	2b22      	cmp	r3, #34	; 0x22
 80070f6:	d000      	beq.n	80070fa <UART_RxISR_16BIT+0x1e>
 80070f8:	e095      	b.n	8007226 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	213c      	movs	r1, #60	; 0x3c
 8007100:	187b      	adds	r3, r7, r1
 8007102:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007104:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800710c:	187b      	adds	r3, r7, r1
 800710e:	183a      	adds	r2, r7, r0
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	8812      	ldrh	r2, [r2, #0]
 8007114:	4013      	ands	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	225a      	movs	r2, #90	; 0x5a
 800712a:	5a9b      	ldrh	r3, [r3, r2]
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b299      	uxth	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	225a      	movs	r2, #90	; 0x5a
 8007136:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	225a      	movs	r2, #90	; 0x5a
 800713c:	5a9b      	ldrh	r3, [r3, r2]
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d178      	bne.n	8007236 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007144:	f3ef 8310 	mrs	r3, PRIMASK
 8007148:	617b      	str	r3, [r7, #20]
  return(result);
 800714a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	2301      	movs	r3, #1
 8007150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4936      	ldr	r1, [pc, #216]	; (8007240 <UART_RxISR_16BIT+0x164>)
 8007166:	400a      	ands	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f383 8810 	msr	PRIMASK, r3
}
 8007174:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007176:	f3ef 8310 	mrs	r3, PRIMASK
 800717a:	623b      	str	r3, [r7, #32]
  return(result);
 800717c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
 8007180:	2301      	movs	r3, #1
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	f383 8810 	msr	PRIMASK, r3
}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2101      	movs	r1, #1
 8007198:	438a      	bics	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	f383 8810 	msr	PRIMASK, r3
}
 80071a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d12f      	bne.n	800721c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c2:	f3ef 8310 	mrs	r3, PRIMASK
 80071c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80071c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f383 8810 	msr	PRIMASK, r3
}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2110      	movs	r1, #16
 80071e4:	438a      	bics	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	2210      	movs	r2, #16
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d103      	bne.n	800720a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2258      	movs	r2, #88	; 0x58
 800720e:	5a9a      	ldrh	r2, [r3, r2]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	0011      	movs	r1, r2
 8007214:	0018      	movs	r0, r3
 8007216:	f7ff fa61 	bl	80066dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800721a:	e00c      	b.n	8007236 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0018      	movs	r0, r3
 8007220:	f7f9 fbf8 	bl	8000a14 <HAL_UART_RxCpltCallback>
}
 8007224:	e007      	b.n	8007236 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2108      	movs	r1, #8
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	46bd      	mov	sp, r7
 800723a:	b010      	add	sp, #64	; 0x40
 800723c:	bd80      	pop	{r7, pc}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	fffffedf 	.word	0xfffffedf

08007244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800724c:	46c0      	nop			; (mov r8, r8)
 800724e:	46bd      	mov	sp, r7
 8007250:	b002      	add	sp, #8
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	6019      	str	r1, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2317      	movs	r3, #23
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2274      	movs	r2, #116	; 0x74
 800726e:	5c9b      	ldrb	r3, [r3, r2]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007274:	2302      	movs	r3, #2
 8007276:	e04a      	b.n	800730e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2274      	movs	r2, #116	; 0x74
 800727c:	2101      	movs	r1, #1
 800727e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2224      	movs	r2, #36	; 0x24
 8007284:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2101      	movs	r1, #1
 8007292:	438a      	bics	r2, r1
 8007294:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800729e:	4013      	ands	r3, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	1d3b      	adds	r3, r7, #4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	6819      	ldr	r1, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	f000 f860 	bl	8007382 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2101      	movs	r1, #1
 80072ce:	430a      	orrs	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072d2:	f7fa fdc5 	bl	8001e60 <HAL_GetTick>
 80072d6:	0003      	movs	r3, r0
 80072d8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	03d1      	lsls	r1, r2, #15
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	4a0e      	ldr	r2, [pc, #56]	; (800731c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80072e4:	9200      	str	r2, [sp, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f7ff fc40 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d004      	beq.n	80072fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80072f0:	2317      	movs	r3, #23
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	2203      	movs	r2, #3
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e002      	b.n	8007300 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2274      	movs	r2, #116	; 0x74
 8007304:	2100      	movs	r1, #0
 8007306:	5499      	strb	r1, [r3, r2]

  return status;
 8007308:	2317      	movs	r3, #23
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	781b      	ldrb	r3, [r3, #0]
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b006      	add	sp, #24
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	ffcfffff 	.word	0xffcfffff
 800731c:	01ffffff 	.word	0x01ffffff

08007320 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2274      	movs	r2, #116	; 0x74
 800732c:	5c9b      	ldrb	r3, [r3, r2]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UARTEx_EnableStopMode+0x16>
 8007332:	2302      	movs	r3, #2
 8007334:	e021      	b.n	800737a <HAL_UARTEx_EnableStopMode+0x5a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2274      	movs	r2, #116	; 0x74
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733e:	f3ef 8310 	mrs	r3, PRIMASK
 8007342:	60bb      	str	r3, [r7, #8]
  return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	2301      	movs	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f383 8810 	msr	PRIMASK, r3
}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2102      	movs	r1, #2
 8007360:	430a      	orrs	r2, r1
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2274      	movs	r2, #116	; 0x74
 8007374:	2100      	movs	r1, #0
 8007376:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	0018      	movs	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	b006      	add	sp, #24
 8007380:	bd80      	pop	{r7, pc}

08007382 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	6019      	str	r1, [r3, #0]
 800738e:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2210      	movs	r2, #16
 8007398:	4393      	bics	r3, r2
 800739a:	001a      	movs	r2, r3
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	889b      	ldrh	r3, [r3, #4]
 80073a0:	0019      	movs	r1, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	0a19      	lsrs	r1, r3, #8
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	799b      	ldrb	r3, [r3, #6]
 80073b8:	061a      	lsls	r2, r3, #24
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <__libc_init_array>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	2600      	movs	r6, #0
 80073d0:	4d0c      	ldr	r5, [pc, #48]	; (8007404 <__libc_init_array+0x38>)
 80073d2:	4c0d      	ldr	r4, [pc, #52]	; (8007408 <__libc_init_array+0x3c>)
 80073d4:	1b64      	subs	r4, r4, r5
 80073d6:	10a4      	asrs	r4, r4, #2
 80073d8:	42a6      	cmp	r6, r4
 80073da:	d109      	bne.n	80073f0 <__libc_init_array+0x24>
 80073dc:	2600      	movs	r6, #0
 80073de:	f000 f821 	bl	8007424 <_init>
 80073e2:	4d0a      	ldr	r5, [pc, #40]	; (800740c <__libc_init_array+0x40>)
 80073e4:	4c0a      	ldr	r4, [pc, #40]	; (8007410 <__libc_init_array+0x44>)
 80073e6:	1b64      	subs	r4, r4, r5
 80073e8:	10a4      	asrs	r4, r4, #2
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	d105      	bne.n	80073fa <__libc_init_array+0x2e>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	00b3      	lsls	r3, r6, #2
 80073f2:	58eb      	ldr	r3, [r5, r3]
 80073f4:	4798      	blx	r3
 80073f6:	3601      	adds	r6, #1
 80073f8:	e7ee      	b.n	80073d8 <__libc_init_array+0xc>
 80073fa:	00b3      	lsls	r3, r6, #2
 80073fc:	58eb      	ldr	r3, [r5, r3]
 80073fe:	4798      	blx	r3
 8007400:	3601      	adds	r6, #1
 8007402:	e7f2      	b.n	80073ea <__libc_init_array+0x1e>
 8007404:	0800762c 	.word	0x0800762c
 8007408:	0800762c 	.word	0x0800762c
 800740c:	0800762c 	.word	0x0800762c
 8007410:	08007630 	.word	0x08007630

08007414 <memset>:
 8007414:	0003      	movs	r3, r0
 8007416:	1882      	adds	r2, r0, r2
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	7019      	strb	r1, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <_init>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr

08007430 <_fini>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007436:	bc08      	pop	{r3}
 8007438:	469e      	mov	lr, r3
 800743a:	4770      	bx	lr
