
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd4  08006cd4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd4  08006cd4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000030  08006d0c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08006d0c  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160d3  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1d  00000000  00000000  0003612b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00038c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00039fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133c5  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d49  00000000  00000000  0004e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074ce6  00000000  00000000  0006633e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000db074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c68 	.word	0x08006c68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08006c68 	.word	0x08006c68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_OC_DelayElapsedCallback>:
//		//HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
//    }
//}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b093      	sub	sp, #76	; 0x4c
 8000224:	af02      	add	r7, sp, #8
 8000226:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4bda      	ldr	r3, [pc, #872]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d000      	beq.n	8000232 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000230:	e362      	b.n	80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x6d8>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000232:	4bd9      	ldr	r3, [pc, #868]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d100      	bne.n	800023c <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 800023a:	e09f      	b.n	800037c <HAL_TIM_OC_DelayElapsedCallback+0x15c>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	011b      	lsls	r3, r3, #4
 8000242:	4ad6      	ldr	r2, [pc, #856]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000244:	0019      	movs	r1, r3
 8000246:	0010      	movs	r0, r2
 8000248:	f002 fdca 	bl	8002de0 <HAL_GPIO_ReadPin>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d1f6      	bne.n	800023e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000250:	49d3      	ldr	r1, [pc, #844]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 8000252:	48d4      	ldr	r0, [pc, #848]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000254:	2301      	movs	r3, #1
 8000256:	2201      	movs	r2, #1
 8000258:	f004 f934 	bl	80044c4 <HAL_SPI_Transmit>
		SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800025c:	4bd2      	ldr	r3, [pc, #840]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4bd1      	ldr	r3, [pc, #836]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000262:	49d2      	ldr	r1, [pc, #840]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000264:	400a      	ands	r2, r1
 8000266:	601a      	str	r2, [r3, #0]
		while (!(SPI2->SR));
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	4bcf      	ldr	r3, [pc, #828]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0fb      	beq.n	800026a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	    erpa_raw = SPI2->DR;
 8000272:	4bcd      	ldr	r3, [pc, #820]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	001a      	movs	r2, r3
 8000278:	4bcd      	ldr	r3, [pc, #820]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800027a:	601a      	str	r2, [r3, #0]


		DAC->DHR12R1 = DAC_OUT[step];
 800027c:	4bcd      	ldr	r3, [pc, #820]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	0019      	movs	r1, r3
 8000282:	4bcd      	ldr	r3, [pc, #820]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000284:	4acd      	ldr	r2, [pc, #820]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000286:	0089      	lsls	r1, r1, #2
 8000288:	588a      	ldr	r2, [r1, r2]
 800028a:	609a      	str	r2, [r3, #8]

		HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 800028c:	2311      	movs	r3, #17
 800028e:	001a      	movs	r2, r3
 8000290:	49cb      	ldr	r1, [pc, #812]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000292:	4bcc      	ldr	r3, [pc, #816]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000294:	0018      	movs	r0, r3
 8000296:	f001 fdf5 	bl	8001e84 <HAL_ADC_Start_DMA>
						  adcChannelCount);
		uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 800029a:	2132      	movs	r1, #50	; 0x32
 800029c:	187b      	adds	r3, r7, r1
 800029e:	4ac8      	ldr	r2, [pc, #800]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002a0:	8812      	ldrh	r2, [r2, #0]
 80002a2:	801a      	strh	r2, [r3, #0]
		uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002a4:	2030      	movs	r0, #48	; 0x30
 80002a6:	183b      	adds	r3, r7, r0
 80002a8:	4ac5      	ldr	r2, [pc, #788]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002aa:	8992      	ldrh	r2, [r2, #12]
 80002ac:	801a      	strh	r2, [r3, #0]
		uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002ae:	242e      	movs	r4, #46	; 0x2e
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	4ac3      	ldr	r2, [pc, #780]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002b4:	89d2      	ldrh	r2, [r2, #14]
 80002b6:	801a      	strh	r2, [r3, #0]
		uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002b8:	252c      	movs	r5, #44	; 0x2c
 80002ba:	197b      	adds	r3, r7, r5
 80002bc:	4ac0      	ldr	r2, [pc, #768]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002be:	8a12      	ldrh	r2, [r2, #16]
 80002c0:	801a      	strh	r2, [r3, #0]

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80002c2:	22aa      	movs	r2, #170	; 0xaa
 80002c4:	4bc0      	ldr	r3, [pc, #768]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002c6:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002c8:	22aa      	movs	r2, #170	; 0xaa
 80002ca:	4bbf      	ldr	r3, [pc, #764]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002cc:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80002ce:	4bbf      	ldr	r3, [pc, #764]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	0a1b      	lsrs	r3, r3, #8
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	4bbb      	ldr	r3, [pc, #748]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002da:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80002dc:	4bbb      	ldr	r3, [pc, #748]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4bb9      	ldr	r3, [pc, #740]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002e4:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	0a1b      	lsrs	r3, r3, #8
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4bb5      	ldr	r3, [pc, #724]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002f2:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4bb3      	ldr	r3, [pc, #716]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002fc:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 80002fe:	183b      	adds	r3, r7, r0
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	0a1b      	lsrs	r3, r3, #8
 8000304:	b29b      	uxth	r3, r3
 8000306:	b2da      	uxtb	r2, r3
 8000308:	4baf      	ldr	r3, [pc, #700]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800030a:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 800030c:	183b      	adds	r3, r7, r0
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4bad      	ldr	r3, [pc, #692]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000314:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000316:	193b      	adds	r3, r7, r4
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	0a1b      	lsrs	r3, r3, #8
 800031c:	b29b      	uxth	r3, r3
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4ba9      	ldr	r3, [pc, #676]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000322:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000324:	193b      	adds	r3, r7, r4
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4ba7      	ldr	r3, [pc, #668]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800032c:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800032e:	197b      	adds	r3, r7, r5
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	0a1b      	lsrs	r3, r3, #8
 8000334:	b29b      	uxth	r3, r3
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4ba3      	ldr	r3, [pc, #652]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800033a:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800033c:	197b      	adds	r3, r7, r5
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4ba1      	ldr	r3, [pc, #644]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000344:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000346:	4b9a      	ldr	r3, [pc, #616]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	121b      	asrs	r3, r3, #8
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b9e      	ldr	r3, [pc, #632]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000350:	731a      	strb	r2, [r3, #12]
		erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000352:	4b97      	ldr	r3, [pc, #604]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b9b      	ldr	r3, [pc, #620]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800035a:	735a      	strb	r2, [r3, #13]

		erpa_seq++;
 800035c:	4b9b      	ldr	r3, [pc, #620]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b99      	ldr	r3, [pc, #612]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000366:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 8000368:	4b8b      	ldr	r3, [pc, #556]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d005      	beq.n	800037c <HAL_TIM_OC_DelayElapsedCallback+0x15c>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000370:	4995      	ldr	r1, [pc, #596]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000372:	4897      	ldr	r0, [pc, #604]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	220e      	movs	r2, #14
 8000378:	f005 fc44 	bl	8005c04 <HAL_UART_Transmit>
		}
      }
      if (HK_ON)
 800037c:	4b95      	ldr	r3, [pc, #596]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d100      	bne.n	8000386 <HAL_TIM_OC_DelayElapsedCallback+0x166>
 8000384:	e318      	b.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x798>
      {
        if (hk_counter == HK_CADENCE)
 8000386:	4b94      	ldr	r3, [pc, #592]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2201      	movs	r2, #1
 800038c:	4293      	cmp	r3, r2
 800038e:	d000      	beq.n	8000392 <HAL_TIM_OC_DelayElapsedCallback+0x172>
 8000390:	e29e      	b.n	80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x6b0>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000392:	2200      	movs	r2, #0
 8000394:	250c      	movs	r5, #12
 8000396:	197b      	adds	r3, r7, r5
 8000398:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800039a:	2390      	movs	r3, #144	; 0x90
 800039c:	b299      	uxth	r1, r3
 800039e:	262b      	movs	r6, #43	; 0x2b
 80003a0:	19bc      	adds	r4, r7, r6
 80003a2:	197a      	adds	r2, r7, r5
 80003a4:	488d      	ldr	r0, [pc, #564]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003a6:	23fa      	movs	r3, #250	; 0xfa
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2301      	movs	r3, #1
 80003ae:	f002 fde7 	bl	8002f80 <HAL_I2C_Master_Transmit>
 80003b2:	0003      	movs	r3, r0
 80003b4:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80003b6:	19bb      	adds	r3, r7, r6
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80003be:	197b      	adds	r3, r7, r5
 80003c0:	4a87      	ldr	r2, [pc, #540]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003c2:	ca03      	ldmia	r2!, {r0, r1}
 80003c4:	c303      	stmia	r3!, {r0, r1}
 80003c6:	8811      	ldrh	r1, [r2, #0]
 80003c8:	8019      	strh	r1, [r3, #0]
 80003ca:	7892      	ldrb	r2, [r2, #2]
 80003cc:	709a      	strb	r2, [r3, #2]
 80003ce:	e02b      	b.n	8000428 <HAL_TIM_OC_DelayElapsedCallback+0x208>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003d0:	2390      	movs	r3, #144	; 0x90
 80003d2:	b299      	uxth	r1, r3
 80003d4:	252b      	movs	r5, #43	; 0x2b
 80003d6:	197c      	adds	r4, r7, r5
 80003d8:	260c      	movs	r6, #12
 80003da:	19ba      	adds	r2, r7, r6
 80003dc:	487f      	ldr	r0, [pc, #508]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003de:	23fa      	movs	r3, #250	; 0xfa
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2302      	movs	r3, #2
 80003e6:	f002 fed3 	bl	8003190 <HAL_I2C_Master_Receive>
 80003ea:	0003      	movs	r3, r0
 80003ec:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80003ee:	197b      	adds	r3, r7, r5
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d008      	beq.n	8000408 <HAL_TIM_OC_DelayElapsedCallback+0x1e8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80003f6:	19bb      	adds	r3, r7, r6
 80003f8:	4a7a      	ldr	r2, [pc, #488]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80003fa:	ca03      	ldmia	r2!, {r0, r1}
 80003fc:	c303      	stmia	r3!, {r0, r1}
 80003fe:	8811      	ldrh	r1, [r2, #0]
 8000400:	8019      	strh	r1, [r3, #0]
 8000402:	7892      	ldrb	r2, [r2, #2]
 8000404:	709a      	strb	r2, [r3, #2]
 8000406:	e00f      	b.n	8000428 <HAL_TIM_OC_DelayElapsedCallback+0x208>
            }
            else
            {

              output1 = (int16_t)(buf[0] << 8);
 8000408:	200c      	movs	r0, #12
 800040a:	183b      	adds	r3, r7, r0
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	021a      	lsls	r2, r3, #8
 8000410:	213e      	movs	r1, #62	; 0x3e
 8000412:	187b      	adds	r3, r7, r1
 8000414:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	5e9b      	ldrsh	r3, [r3, r2]
 800041c:	183a      	adds	r2, r7, r0
 800041e:	7852      	ldrb	r2, [r2, #1]
 8000420:	4313      	orrs	r3, r2
 8000422:	10da      	asrs	r2, r3, #3
 8000424:	187b      	adds	r3, r7, r1
 8000426:	801a      	strh	r2, [r3, #0]
            }
          }

          // Tell ADT7410_2 that we want to read from the temperature register
          buf[0] = REG_TEMP;
 8000428:	2200      	movs	r2, #0
 800042a:	250c      	movs	r5, #12
 800042c:	197b      	adds	r3, r7, r5
 800042e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000430:	2394      	movs	r3, #148	; 0x94
 8000432:	b299      	uxth	r1, r3
 8000434:	262b      	movs	r6, #43	; 0x2b
 8000436:	19bc      	adds	r4, r7, r6
 8000438:	197a      	adds	r2, r7, r5
 800043a:	4868      	ldr	r0, [pc, #416]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800043c:	23fa      	movs	r3, #250	; 0xfa
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2301      	movs	r3, #1
 8000444:	f002 fd9c 	bl	8002f80 <HAL_I2C_Master_Transmit>
 8000448:	0003      	movs	r3, r0
 800044a:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 800044c:	19bb      	adds	r3, r7, r6
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <HAL_TIM_OC_DelayElapsedCallback+0x246>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000454:	197b      	adds	r3, r7, r5
 8000456:	4a62      	ldr	r2, [pc, #392]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000458:	ca03      	ldmia	r2!, {r0, r1}
 800045a:	c303      	stmia	r3!, {r0, r1}
 800045c:	8811      	ldrh	r1, [r2, #0]
 800045e:	8019      	strh	r1, [r3, #0]
 8000460:	7892      	ldrb	r2, [r2, #2]
 8000462:	709a      	strb	r2, [r3, #2]
 8000464:	e02b      	b.n	80004be <HAL_TIM_OC_DelayElapsedCallback+0x29e>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000466:	2394      	movs	r3, #148	; 0x94
 8000468:	b299      	uxth	r1, r3
 800046a:	252b      	movs	r5, #43	; 0x2b
 800046c:	197c      	adds	r4, r7, r5
 800046e:	260c      	movs	r6, #12
 8000470:	19ba      	adds	r2, r7, r6
 8000472:	485a      	ldr	r0, [pc, #360]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000474:	23fa      	movs	r3, #250	; 0xfa
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2302      	movs	r3, #2
 800047c:	f002 fe88 	bl	8003190 <HAL_I2C_Master_Receive>
 8000480:	0003      	movs	r3, r0
 8000482:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000484:	197b      	adds	r3, r7, r5
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <HAL_TIM_OC_DelayElapsedCallback+0x27e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800048c:	19bb      	adds	r3, r7, r6
 800048e:	4a55      	ldr	r2, [pc, #340]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000490:	ca03      	ldmia	r2!, {r0, r1}
 8000492:	c303      	stmia	r3!, {r0, r1}
 8000494:	8811      	ldrh	r1, [r2, #0]
 8000496:	8019      	strh	r1, [r3, #0]
 8000498:	7892      	ldrb	r2, [r2, #2]
 800049a:	709a      	strb	r2, [r3, #2]
 800049c:	e00f      	b.n	80004be <HAL_TIM_OC_DelayElapsedCallback+0x29e>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800049e:	200c      	movs	r0, #12
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	021a      	lsls	r2, r3, #8
 80004a6:	213c      	movs	r1, #60	; 0x3c
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	5e9b      	ldrsh	r3, [r3, r2]
 80004b2:	183a      	adds	r2, r7, r0
 80004b4:	7852      	ldrb	r2, [r2, #1]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	10da      	asrs	r2, r3, #3
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 80004be:	2200      	movs	r2, #0
 80004c0:	250c      	movs	r5, #12
 80004c2:	197b      	adds	r3, r7, r5
 80004c4:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004c6:	2392      	movs	r3, #146	; 0x92
 80004c8:	b299      	uxth	r1, r3
 80004ca:	262b      	movs	r6, #43	; 0x2b
 80004cc:	19bc      	adds	r4, r7, r6
 80004ce:	197a      	adds	r2, r7, r5
 80004d0:	4842      	ldr	r0, [pc, #264]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80004d2:	23fa      	movs	r3, #250	; 0xfa
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2301      	movs	r3, #1
 80004da:	f002 fd51 	bl	8002f80 <HAL_I2C_Master_Transmit>
 80004de:	0003      	movs	r3, r0
 80004e0:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80004e2:	19bb      	adds	r3, r7, r6
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <HAL_TIM_OC_DelayElapsedCallback+0x2dc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004ea:	197b      	adds	r3, r7, r5
 80004ec:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80004ee:	ca03      	ldmia	r2!, {r0, r1}
 80004f0:	c303      	stmia	r3!, {r0, r1}
 80004f2:	8811      	ldrh	r1, [r2, #0]
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	7892      	ldrb	r2, [r2, #2]
 80004f8:	709a      	strb	r2, [r3, #2]
 80004fa:	e02b      	b.n	8000554 <HAL_TIM_OC_DelayElapsedCallback+0x334>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 80004fc:	2392      	movs	r3, #146	; 0x92
 80004fe:	b299      	uxth	r1, r3
 8000500:	252b      	movs	r5, #43	; 0x2b
 8000502:	197c      	adds	r4, r7, r5
 8000504:	260c      	movs	r6, #12
 8000506:	19ba      	adds	r2, r7, r6
 8000508:	4834      	ldr	r0, [pc, #208]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800050a:	23fa      	movs	r3, #250	; 0xfa
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2302      	movs	r3, #2
 8000512:	f002 fe3d 	bl	8003190 <HAL_I2C_Master_Receive>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800051a:	197b      	adds	r3, r7, r5
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <HAL_TIM_OC_DelayElapsedCallback+0x314>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000522:	19bb      	adds	r3, r7, r6
 8000524:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000526:	ca03      	ldmia	r2!, {r0, r1}
 8000528:	c303      	stmia	r3!, {r0, r1}
 800052a:	8811      	ldrh	r1, [r2, #0]
 800052c:	8019      	strh	r1, [r3, #0]
 800052e:	7892      	ldrb	r2, [r2, #2]
 8000530:	709a      	strb	r2, [r3, #2]
 8000532:	e00f      	b.n	8000554 <HAL_TIM_OC_DelayElapsedCallback+0x334>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000534:	200c      	movs	r0, #12
 8000536:	183b      	adds	r3, r7, r0
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	021a      	lsls	r2, r3, #8
 800053c:	213a      	movs	r1, #58	; 0x3a
 800053e:	187b      	adds	r3, r7, r1
 8000540:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	5e9b      	ldrsh	r3, [r3, r2]
 8000548:	183a      	adds	r2, r7, r0
 800054a:	7852      	ldrb	r2, [r2, #1]
 800054c:	4313      	orrs	r3, r2
 800054e:	10da      	asrs	r2, r3, #3
 8000550:	187b      	adds	r3, r7, r1
 8000552:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 4
          buf[0] = REG_TEMP;
 8000554:	2200      	movs	r2, #0
 8000556:	250c      	movs	r5, #12
 8000558:	197b      	adds	r3, r7, r5
 800055a:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800055c:	2396      	movs	r3, #150	; 0x96
 800055e:	b299      	uxth	r1, r3
 8000560:	262b      	movs	r6, #43	; 0x2b
 8000562:	19bc      	adds	r4, r7, r6
 8000564:	197a      	adds	r2, r7, r5
 8000566:	481d      	ldr	r0, [pc, #116]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000568:	23fa      	movs	r3, #250	; 0xfa
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	f002 fd06 	bl	8002f80 <HAL_I2C_Master_Transmit>
 8000574:	0003      	movs	r3, r0
 8000576:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000578:	19bb      	adds	r3, r7, r6
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d033      	beq.n	80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3c8>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000580:	197b      	adds	r3, r7, r5
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000584:	ca03      	ldmia	r2!, {r0, r1}
 8000586:	c303      	stmia	r3!, {r0, r1}
 8000588:	8811      	ldrh	r1, [r2, #0]
 800058a:	8019      	strh	r1, [r3, #0]
 800058c:	7892      	ldrb	r2, [r2, #2]
 800058e:	709a      	strb	r2, [r3, #2]
 8000590:	e056      	b.n	8000640 <HAL_TIM_OC_DelayElapsedCallback+0x420>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000240 	.word	0x20000240
 8000598:	20000021 	.word	0x20000021
 800059c:	48000400 	.word	0x48000400
 80005a0:	08006cb8 	.word	0x08006cb8
 80005a4:	20000194 	.word	0x20000194
 80005a8:	40003800 	.word	0x40003800
 80005ac:	fffffbff 	.word	0xfffffbff
 80005b0:	2000033c 	.word	0x2000033c
 80005b4:	20000336 	.word	0x20000336
 80005b8:	40007400 	.word	0x40007400
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000314 	.word	0x20000314
 80005c4:	2000004c 	.word	0x2000004c
 80005c8:	20000340 	.word	0x20000340
 80005cc:	2000034e 	.word	0x2000034e
 80005d0:	20000288 	.word	0x20000288
 80005d4:	20000022 	.word	0x20000022
 80005d8:	20000380 	.word	0x20000380
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	08006c80 	.word	0x08006c80
 80005e4:	08006c8c 	.word	0x08006c8c
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80005e8:	2396      	movs	r3, #150	; 0x96
 80005ea:	b299      	uxth	r1, r3
 80005ec:	252b      	movs	r5, #43	; 0x2b
 80005ee:	197c      	adds	r4, r7, r5
 80005f0:	260c      	movs	r6, #12
 80005f2:	19ba      	adds	r2, r7, r6
 80005f4:	48b9      	ldr	r0, [pc, #740]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 80005f6:	23fa      	movs	r3, #250	; 0xfa
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2302      	movs	r3, #2
 80005fe:	f002 fdc7 	bl	8003190 <HAL_I2C_Master_Receive>
 8000602:	0003      	movs	r3, r0
 8000604:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000606:	197b      	adds	r3, r7, r5
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d008      	beq.n	8000620 <HAL_TIM_OC_DelayElapsedCallback+0x400>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800060e:	19bb      	adds	r3, r7, r6
 8000610:	4ab3      	ldr	r2, [pc, #716]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>)
 8000612:	ca03      	ldmia	r2!, {r0, r1}
 8000614:	c303      	stmia	r3!, {r0, r1}
 8000616:	8811      	ldrh	r1, [r2, #0]
 8000618:	8019      	strh	r1, [r3, #0]
 800061a:	7892      	ldrb	r2, [r2, #2]
 800061c:	709a      	strb	r2, [r3, #2]
 800061e:	e00f      	b.n	8000640 <HAL_TIM_OC_DelayElapsedCallback+0x420>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 8000620:	200c      	movs	r0, #12
 8000622:	183b      	adds	r3, r7, r0
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	021a      	lsls	r2, r3, #8
 8000628:	2138      	movs	r1, #56	; 0x38
 800062a:	187b      	adds	r3, r7, r1
 800062c:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	5e9b      	ldrsh	r3, [r3, r2]
 8000634:	183a      	adds	r2, r7, r0
 8000636:	7852      	ldrb	r2, [r2, #1]
 8000638:	4313      	orrs	r3, r2
 800063a:	10da      	asrs	r2, r3, #3
 800063c:	187b      	adds	r3, r7, r1
 800063e:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000640:	2311      	movs	r3, #17
 8000642:	001a      	movs	r2, r3
 8000644:	49a7      	ldr	r1, [pc, #668]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000646:	4ba8      	ldr	r3, [pc, #672]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x6c8>)
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fc1b 	bl	8001e84 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 800064e:	2128      	movs	r1, #40	; 0x28
 8000650:	187b      	adds	r3, r7, r1
 8000652:	4aa4      	ldr	r2, [pc, #656]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000654:	8852      	ldrh	r2, [r2, #2]
 8000656:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 8000658:	2026      	movs	r0, #38	; 0x26
 800065a:	183b      	adds	r3, r7, r0
 800065c:	4aa1      	ldr	r2, [pc, #644]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 800065e:	8892      	ldrh	r2, [r2, #4]
 8000660:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 8000662:	2424      	movs	r4, #36	; 0x24
 8000664:	193b      	adds	r3, r7, r4
 8000666:	4a9f      	ldr	r2, [pc, #636]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000668:	88d2      	ldrh	r2, [r2, #6]
 800066a:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 800066c:	2522      	movs	r5, #34	; 0x22
 800066e:	197b      	adds	r3, r7, r5
 8000670:	4a9c      	ldr	r2, [pc, #624]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000672:	8912      	ldrh	r2, [r2, #8]
 8000674:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 8000676:	2620      	movs	r6, #32
 8000678:	19bb      	adds	r3, r7, r6
 800067a:	4a9a      	ldr	r2, [pc, #616]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 800067c:	8952      	ldrh	r2, [r2, #10]
 800067e:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000680:	231e      	movs	r3, #30
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	4a97      	ldr	r2, [pc, #604]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000686:	8a52      	ldrh	r2, [r2, #18]
 8000688:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 800068a:	221c      	movs	r2, #28
 800068c:	18bb      	adds	r3, r7, r2
 800068e:	4a95      	ldr	r2, [pc, #596]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 8000690:	8a92      	ldrh	r2, [r2, #20]
 8000692:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000694:	231a      	movs	r3, #26
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	4a92      	ldr	r2, [pc, #584]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 800069a:	8ad2      	ldrh	r2, [r2, #22]
 800069c:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 800069e:	2218      	movs	r2, #24
 80006a0:	18bb      	adds	r3, r7, r2
 80006a2:	4a90      	ldr	r2, [pc, #576]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80006a4:	8b12      	ldrh	r2, [r2, #24]
 80006a6:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80006a8:	2316      	movs	r3, #22
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	4a8d      	ldr	r2, [pc, #564]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80006ae:	8b52      	ldrh	r2, [r2, #26]
 80006b0:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80006b2:	2214      	movs	r2, #20
 80006b4:	18bb      	adds	r3, r7, r2
 80006b6:	4a8b      	ldr	r2, [pc, #556]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80006b8:	8b92      	ldrh	r2, [r2, #28]
 80006ba:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 80006bc:	2312      	movs	r3, #18
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	4a88      	ldr	r2, [pc, #544]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80006c2:	8bd2      	ldrh	r2, [r2, #30]
 80006c4:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 80006c6:	2210      	movs	r2, #16
 80006c8:	18bb      	adds	r3, r7, r2
 80006ca:	4a86      	ldr	r2, [pc, #536]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80006cc:	8c12      	ldrh	r2, [r2, #32]
 80006ce:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 80006d0:	22cc      	movs	r2, #204	; 0xcc
 80006d2:	4b86      	ldr	r3, [pc, #536]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80006d4:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 80006d6:	22cc      	movs	r2, #204	; 0xcc
 80006d8:	4b84      	ldr	r3, [pc, #528]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80006da:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 80006dc:	4b84      	ldr	r3, [pc, #528]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b81      	ldr	r3, [pc, #516]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80006e8:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 80006ea:	4b81      	ldr	r3, [pc, #516]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b7e      	ldr	r3, [pc, #504]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80006f2:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80006f4:	2312      	movs	r3, #18
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b7a      	ldr	r3, [pc, #488]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000702:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000704:	2312      	movs	r3, #18
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b77      	ldr	r3, [pc, #476]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800070e:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 8000710:	2210      	movs	r2, #16
 8000712:	18bb      	adds	r3, r7, r2
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b73      	ldr	r3, [pc, #460]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800071e:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 8000720:	2210      	movs	r2, #16
 8000722:	18bb      	adds	r3, r7, r2
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b70      	ldr	r3, [pc, #448]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800072a:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 800072c:	233e      	movs	r3, #62	; 0x3e
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	2200      	movs	r2, #0
 8000732:	5e9b      	ldrsh	r3, [r3, r2]
 8000734:	121b      	asrs	r3, r3, #8
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b6c      	ldr	r3, [pc, #432]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800073a:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 800073c:	233e      	movs	r3, #62	; 0x3e
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b69      	ldr	r3, [pc, #420]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000746:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000748:	233c      	movs	r3, #60	; 0x3c
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	2200      	movs	r2, #0
 800074e:	5e9b      	ldrsh	r3, [r3, r2]
 8000750:	121b      	asrs	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b65      	ldr	r3, [pc, #404]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000756:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000758:	233c      	movs	r3, #60	; 0x3c
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b62      	ldr	r3, [pc, #392]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000762:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000764:	233a      	movs	r3, #58	; 0x3a
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	5e9b      	ldrsh	r3, [r3, r2]
 800076c:	121b      	asrs	r3, r3, #8
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b5e      	ldr	r3, [pc, #376]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000772:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000774:	233a      	movs	r3, #58	; 0x3a
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b5b      	ldr	r3, [pc, #364]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800077e:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000780:	2338      	movs	r3, #56	; 0x38
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	2200      	movs	r2, #0
 8000786:	5e9b      	ldrsh	r3, [r3, r2]
 8000788:	121b      	asrs	r3, r3, #8
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b57      	ldr	r3, [pc, #348]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800078e:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000790:	2338      	movs	r3, #56	; 0x38
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b54      	ldr	r3, [pc, #336]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800079a:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 800079c:	187b      	adds	r3, r7, r1
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007a8:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007b2:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007c0:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 80007c2:	183b      	adds	r3, r7, r0
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b48      	ldr	r3, [pc, #288]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007ca:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 80007cc:	211e      	movs	r1, #30
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b44      	ldr	r3, [pc, #272]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007da:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b42      	ldr	r3, [pc, #264]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007e4:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007f2:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80007fc:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 80007fe:	201a      	movs	r0, #26
 8000800:	183b      	adds	r3, r7, r0
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800080c:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 800080e:	183b      	adds	r3, r7, r0
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000816:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000818:	2018      	movs	r0, #24
 800081a:	183b      	adds	r3, r7, r0
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000826:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000828:	183b      	adds	r3, r7, r0
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000830:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000832:	211c      	movs	r1, #28
 8000834:	187b      	adds	r3, r7, r1
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000840:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000842:	187b      	adds	r3, r7, r1
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800084a:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 800084c:	2114      	movs	r1, #20
 800084e:	187b      	adds	r3, r7, r1
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800085a:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 800085c:	187b      	adds	r3, r7, r1
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000864:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000866:	2016      	movs	r0, #22
 8000868:	183b      	adds	r3, r7, r0
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b29b      	uxth	r3, r3
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000874:	2220      	movs	r2, #32
 8000876:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000878:	183b      	adds	r3, r7, r0
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000884:	197b      	adds	r3, r7, r5
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2d9      	uxtb	r1, r3
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 8000890:	2222      	movs	r2, #34	; 0x22
 8000892:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000894:	197b      	adds	r3, r7, r5
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 800089c:	2223      	movs	r2, #35	; 0x23
 800089e:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 80008a0:	19bb      	adds	r3, r7, r6
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2d9      	uxtb	r1, r3
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80008ac:	2224      	movs	r2, #36	; 0x24
 80008ae:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 80008b0:	19bb      	adds	r3, r7, r6
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2d9      	uxtb	r1, r3
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6cc>)
 80008b8:	2225      	movs	r2, #37	; 0x25
 80008ba:	5499      	strb	r1, [r3, r2]

          if (HK_ON)
          {
//            HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
          }
          hk_counter = 1;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
          hk_seq++;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6d0>)
 80008cc:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 80008ce:	e073      	b.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x798>
          hk_counter++;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6d4>)
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	e06d      	b.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x798>
 80008dc:	200000e4 	.word	0x200000e4
 80008e0:	08006c8c 	.word	0x08006c8c
 80008e4:	20000314 	.word	0x20000314
 80008e8:	2000004c 	.word	0x2000004c
 80008ec:	20000358 	.word	0x20000358
 80008f0:	2000037e 	.word	0x2000037e
 80008f4:	20000380 	.word	0x20000380
  else if (htim == &htim1)
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <HAL_TIM_OC_DelayElapsedCallback+0x7a0>)
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d15b      	bne.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x798>
      if (PMT_ON)
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <HAL_TIM_OC_DelayElapsedCallback+0x7a4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d057      	beq.n	80009b8 <HAL_TIM_OC_DelayElapsedCallback+0x798>
    	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	005a      	lsls	r2, r3, #1
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f002 fa63 	bl	8002de0 <HAL_GPIO_ReadPin>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d1f5      	bne.n	800090a <HAL_TIM_OC_DelayElapsedCallback+0x6ea>
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 800091e:	492a      	ldr	r1, [pc, #168]	; (80009c8 <HAL_TIM_OC_DelayElapsedCallback+0x7a8>)
 8000920:	482a      	ldr	r0, [pc, #168]	; (80009cc <HAL_TIM_OC_DelayElapsedCallback+0x7ac>)
 8000922:	2301      	movs	r3, #1
 8000924:	2201      	movs	r2, #1
 8000926:	f003 fdcd 	bl	80044c4 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000930:	4928      	ldr	r1, [pc, #160]	; (80009d4 <HAL_TIM_OC_DelayElapsedCallback+0x7b4>)
 8000932:	400a      	ands	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0fb      	beq.n	8000938 <HAL_TIM_OC_DelayElapsedCallback+0x718>
		pmt_raw = SPI1->DR;
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	001a      	movs	r2, r3
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000948:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
    	  pmt_buf[0] = pmt_sync;
 8000950:	22bb      	movs	r2, #187	; 0xbb
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000954:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000956:	22bb      	movs	r2, #187	; 0xbb
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 800095a:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000968:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000972:	70da      	strb	r2, [r3, #3]
		  if (pmt_raw == 0) {
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d106      	bne.n	800098a <HAL_TIM_OC_DelayElapsedCallback+0x76a>
			  pmt_buf[4] = 0;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 800097e:	2200      	movs	r2, #0
 8000980:	711a      	strb	r2, [r3, #4]
			  pmt_buf[5] = 0;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000984:	2200      	movs	r2, #0
 8000986:	715a      	strb	r2, [r3, #5]
 8000988:	e00a      	b.n	80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x780>
			  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	121b      	asrs	r3, r3, #8
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 8000994:	711a      	strb	r2, [r3, #4]
			  pmt_buf[5] = (pmt_raw & 0xFF);
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_TIM_OC_DelayElapsedCallback+0x7b8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 800099e:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_TIM_OC_DelayElapsedCallback+0x7c0>)
 80009aa:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80009ac:	490b      	ldr	r1, [pc, #44]	; (80009dc <HAL_TIM_OC_DelayElapsedCallback+0x7bc>)
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x7c4>)
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	2206      	movs	r2, #6
 80009b4:	f005 f926 	bl	8005c04 <HAL_UART_Transmit>
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b011      	add	sp, #68	; 0x44
 80009be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c0:	200001f8 	.word	0x200001f8
 80009c4:	20000020 	.word	0x20000020
 80009c8:	08006cb8 	.word	0x08006cb8
 80009cc:	20000130 	.word	0x20000130
 80009d0:	40013000 	.word	0x40013000
 80009d4:	fffffbff 	.word	0xfffffbff
 80009d8:	20000338 	.word	0x20000338
 80009dc:	20000350 	.word	0x20000350
 80009e0:	20000356 	.word	0x20000356
 80009e4:	20000288 	.word	0x20000288

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f001 f8a5 	bl	8001b3c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f865 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 fc7f 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009fa:	f000 fc5f 	bl	80012bc <MX_DMA_Init>
  MX_SPI2_Init();
 80009fe:	f000 faa7 	bl	8000f50 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a02:	f000 fae5 	bl	8000fd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a06:	f000 fb99 	bl	800113c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000a0a:	f000 fa61 	bl	8000ed0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 fc15 	bl	800123c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000a12:	f000 f9eb 	bl	8000dec <MX_DAC1_Init>
  MX_ADC_Init();
 8000a16:	f000 f8bd 	bl	8000b94 <MX_ADC_Init>
  MX_I2C1_Init();
 8000a1a:	f000 fa19 	bl	8000e50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <main+0xc4>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fe1d 	bl	8002662 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <main+0xc8>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f004 f867 	bl	8004b00 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <main+0xcc>)
 8000a34:	210c      	movs	r1, #12
 8000a36:	0018      	movs	r0, r3
 8000a38:	f004 f862 	bl	8004b00 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <main+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	025b      	lsls	r3, r3, #9
 8000a48:	401a      	ands	r2, r3
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d0f5      	beq.n	8000a3e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <main+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	03db      	lsls	r3, r3, #15
 8000a5e:	401a      	ands	r2, r3
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	03db      	lsls	r3, r3, #15
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d1f5      	bne.n	8000a54 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <main+0xd4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <main+0xd4>)
 8000a70:	2210      	movs	r2, #16
 8000a72:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <main+0xd4>)
 8000a76:	2223      	movs	r2, #35	; 0x23
 8000a78:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <main+0xd4>)
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <main+0xd0>)
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	f006 f809 	bl	8006a98 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <main+0xa6>
      Error_Handler();
 8000a8a:	f000 fccf 	bl	800142c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <main+0xd0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <main+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	03c9      	lsls	r1, r1, #15
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <main+0xd0>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f006 f85e 	bl	8006b64 <HAL_UARTEx_EnableStopMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0xc0>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	200000d0 	.word	0x200000d0
 8000ab0:	200001f8 	.word	0x200001f8
 8000ab4:	20000240 	.word	0x20000240
 8000ab8:	20000288 	.word	0x20000288
 8000abc:	2000030c 	.word	0x2000030c

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b097      	sub	sp, #92	; 0x5c
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	2428      	movs	r4, #40	; 0x28
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	0018      	movs	r0, r3
 8000acc:	2330      	movs	r3, #48	; 0x30
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f006 f8c1 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	2318      	movs	r3, #24
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	0018      	movs	r0, r3
 8000adc:	2310      	movs	r3, #16
 8000ade:	001a      	movs	r2, r3
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f006 f8b9 	bl	8006c58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f006 f8b2 	bl	8006c58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2212      	movs	r2, #18
 8000afa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2201      	movs	r2, #1
 8000b06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2210      	movs	r2, #16
 8000b12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	22a0      	movs	r2, #160	; 0xa0
 8000b24:	0392      	lsls	r2, r2, #14
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 fec5 	bl	80038c0 <HAL_RCC_OscConfig>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b3a:	f000 fc77 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3e:	2118      	movs	r1, #24
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2207      	movs	r2, #7
 8000b44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f003 f9c9 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b66:	f000 fc61 	bl	800142c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2221      	movs	r2, #33	; 0x21
 8000b6e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2203      	movs	r2, #3
 8000b74:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f003 fb0a 	bl	8004198 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b88:	f000 fc50 	bl	800142c <Error_Handler>
  }
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b017      	add	sp, #92	; 0x5c
 8000b92:	bd90      	pop	{r4, r7, pc}

08000b94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f006 f858 	bl	8006c58 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ba8:	4b8e      	ldr	r3, [pc, #568]	; (8000de4 <MX_ADC_Init+0x250>)
 8000baa:	4a8f      	ldr	r2, [pc, #572]	; (8000de8 <MX_ADC_Init+0x254>)
 8000bac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bae:	4b8d      	ldr	r3, [pc, #564]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb4:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	4b8a      	ldr	r3, [pc, #552]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bc0:	4b88      	ldr	r3, [pc, #544]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc6:	4b87      	ldr	r3, [pc, #540]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bcc:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bd2:	4b84      	ldr	r3, [pc, #528]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bd8:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bde:	4b81      	ldr	r3, [pc, #516]	; (8000de4 <MX_ADC_Init+0x250>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be4:	4b7f      	ldr	r3, [pc, #508]	; (8000de4 <MX_ADC_Init+0x250>)
 8000be6:	22c2      	movs	r2, #194	; 0xc2
 8000be8:	32ff      	adds	r2, #255	; 0xff
 8000bea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bec:	4b7d      	ldr	r3, [pc, #500]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bf2:	4b7c      	ldr	r3, [pc, #496]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bf4:	2224      	movs	r2, #36	; 0x24
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfa:	4b7a      	ldr	r3, [pc, #488]	; (8000de4 <MX_ADC_Init+0x250>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c00:	4b78      	ldr	r3, [pc, #480]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fffe 	bl	8001c04 <HAL_ADC_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fc0e 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0152      	lsls	r2, r2, #5
 8000c1c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0552      	lsls	r2, r2, #21
 8000c24:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	4b6e      	ldr	r3, [pc, #440]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 f9c3 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000c36:	f000 fbf9 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 f9b6 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000c50:	f000 fbec 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2202      	movs	r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5a:	1d3a      	adds	r2, r7, #4
 8000c5c:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f9a9 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000c6a:	f000 fbdf 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2203      	movs	r2, #3
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c74:	1d3a      	adds	r2, r7, #4
 8000c76:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 f99c 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000c84:	f000 fbd2 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c8e:	1d3a      	adds	r2, r7, #4
 8000c90:	4b54      	ldr	r3, [pc, #336]	; (8000de4 <MX_ADC_Init+0x250>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 f98f 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000c9e:	f000 fbc5 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2206      	movs	r2, #6
 8000ca6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ca8:	1d3a      	adds	r2, r7, #4
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <MX_ADC_Init+0x250>)
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 f982 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000cb8:	f000 fbb8 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cc2:	1d3a      	adds	r2, r7, #4
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <MX_ADC_Init+0x250>)
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 f975 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000cd2:	f000 fbab 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2208      	movs	r2, #8
 8000cda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cdc:	1d3a      	adds	r2, r7, #4
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <MX_ADC_Init+0x250>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 f968 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000cec:	f000 fb9e 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2209      	movs	r2, #9
 8000cf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf6:	1d3a      	adds	r2, r7, #4
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <MX_ADC_Init+0x250>)
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f001 f95b 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000d06:	f000 fb91 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	220a      	movs	r2, #10
 8000d0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d10:	1d3a      	adds	r2, r7, #4
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 f94e 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000d20:	f000 fb84 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	220b      	movs	r2, #11
 8000d28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d2a:	1d3a      	adds	r2, r7, #4
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d2e:	0011      	movs	r1, r2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f001 f941 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000d3a:	f000 fb77 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	220c      	movs	r2, #12
 8000d42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d44:	1d3a      	adds	r2, r7, #4
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 f934 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000d54:	f000 fb6a 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d5e:	1d3a      	adds	r2, r7, #4
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 f927 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000d6e:	f000 fb5d 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	220e      	movs	r2, #14
 8000d76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d78:	1d3a      	adds	r2, r7, #4
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d7c:	0011      	movs	r1, r2
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f001 f91a 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000d88:	f000 fb50 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	220f      	movs	r2, #15
 8000d90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d92:	1d3a      	adds	r2, r7, #4
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_ADC_Init+0x250>)
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f001 f90d 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000da2:	f000 fb43 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2210      	movs	r2, #16
 8000daa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_ADC_Init+0x250>)
 8000db0:	0011      	movs	r1, r2
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 f900 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000dbc:	f000 fb36 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2211      	movs	r2, #17
 8000dc4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dc6:	1d3a      	adds	r2, r7, #4
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_ADC_Init+0x250>)
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 f8f3 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8000dd6:	f000 fb29 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	2000004c 	.word	0x2000004c
 8000de8:	40012400 	.word	0x40012400

08000dec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_DAC1_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df8:	003b      	movs	r3, r7
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f005 ff29 	bl	8006c58 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_DAC1_Init+0x5c>)
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <MX_DAC1_Init+0x60>)
 8000e0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_DAC1_Init+0x5c>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fbc6 	bl	80025a0 <HAL_DAC_Init>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8000e18:	f000 fb08 	bl	800142c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e1c:	003b      	movs	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e22:	003b      	movs	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e28:	0039      	movs	r1, r7
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_DAC1_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 fbd9 	bl	80025e6 <HAL_DAC_ConfigChannel>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000e38:	f000 faf8 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000336 	.word	0x20000336
 8000e48:	200000d0 	.word	0x200000d0
 8000e4c:	40007400 	.word	0x40007400

08000e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <MX_I2C1_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <MX_I2C1_Init+0x7c>)
 8000e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 ffe1 	bl	8002e54 <HAL_I2C_Init>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e96:	f000 fac9 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 fc76 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f000 fac0 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <MX_I2C1_Init+0x74>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f002 fcb9 	bl	8003828 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 fab7 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000e4 	.word	0x200000e4
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	2000090e 	.word	0x2000090e

08000ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <MX_SPI1_Init+0x7c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000edc:	2282      	movs	r2, #130	; 0x82
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	00d2      	lsls	r2, r2, #3
 8000ee8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000eec:	22f0      	movs	r2, #240	; 0xf0
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f08:	2230      	movs	r2, #48	; 0x30
 8000f0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <MX_SPI1_Init+0x78>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f003 fa0e 	bl	8004354 <HAL_SPI_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fa76 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000130 	.word	0x20000130
 8000f4c:	40013000 	.word	0x40013000

08000f50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f56:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <MX_SPI2_Init+0x7c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f5c:	2282      	movs	r2, #130	; 0x82
 8000f5e:	0052      	lsls	r2, r2, #1
 8000f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	00d2      	lsls	r2, r2, #3
 8000f68:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f6c:	22f0      	movs	r2, #240	; 0xf0
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f88:	2230      	movs	r2, #48	; 0x30
 8000f8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MX_SPI2_Init+0x78>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f003 f9ce 	bl	8004354 <HAL_SPI_Init>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 fa36 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000194 	.word	0x20000194
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	2348      	movs	r3, #72	; 0x48
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2310      	movs	r3, #16
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f005 fe39 	bl	8006c58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	2308      	movs	r3, #8
 8000fee:	001a      	movs	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f005 fe31 	bl	8006c58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	2324      	movs	r3, #36	; 0x24
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	231c      	movs	r3, #28
 8000ffe:	001a      	movs	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f005 fe29 	bl	8006c58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	0018      	movs	r0, r3
 800100a:	2320      	movs	r3, #32
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f005 fe22 	bl	8006c58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b46      	ldr	r3, [pc, #280]	; (8001130 <MX_TIM1_Init+0x160>)
 8001016:	4a47      	ldr	r2, [pc, #284]	; (8001134 <MX_TIM1_Init+0x164>)
 8001018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <MX_TIM1_Init+0x160>)
 800101c:	2263      	movs	r2, #99	; 0x63
 800101e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b43      	ldr	r3, [pc, #268]	; (8001130 <MX_TIM1_Init+0x160>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001026:	4b42      	ldr	r3, [pc, #264]	; (8001130 <MX_TIM1_Init+0x160>)
 8001028:	4a43      	ldr	r2, [pc, #268]	; (8001138 <MX_TIM1_Init+0x168>)
 800102a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <MX_TIM1_Init+0x160>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_TIM1_Init+0x160>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <MX_TIM1_Init+0x160>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_TIM1_Init+0x160>)
 8001040:	0018      	movs	r0, r3
 8001042:	f003 fd0d 	bl	8004a60 <HAL_TIM_Base_Init>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800104a:	f000 f9ef 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	2148      	movs	r1, #72	; 0x48
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	0152      	lsls	r2, r2, #5
 8001056:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001058:	187a      	adds	r2, r7, r1
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <MX_TIM1_Init+0x160>)
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f004 f882 	bl	8005168 <HAL_TIM_ConfigClockSource>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001068:	f000 f9e0 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_TIM1_Init+0x160>)
 800106e:	0018      	movs	r0, r3
 8001070:	f003 fe46 	bl	8004d00 <HAL_TIM_PWM_Init>
 8001074:	1e03      	subs	r3, r0, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001078:	f000 f9d8 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108a:	187a      	adds	r2, r7, r1
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_TIM1_Init+0x160>)
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f004 fc97 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800109a:	f000 f9c7 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2124      	movs	r1, #36	; 0x24
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2260      	movs	r2, #96	; 0x60
 80010a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	22e0      	movs	r2, #224	; 0xe0
 80010aa:	32ff      	adds	r2, #255	; 0xff
 80010ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010cc:	1879      	adds	r1, r7, r1
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_TIM1_Init+0x160>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f003 ff82 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010dc:	f000 f9a6 	bl	800142c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	0192      	lsls	r2, r2, #6
 8001104:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_TIM1_Init+0x160>)
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f004 fcb4 	bl	8005a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800111c:	f000 f986 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <MX_TIM1_Init+0x160>)
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fbc2 	bl	80018ac <HAL_TIM_MspPostInit>

}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b016      	add	sp, #88	; 0x58
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f8 	.word	0x200001f8
 8001134:	40012c00 	.word	0x40012c00
 8001138:	0000bb7f 	.word	0x0000bb7f

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	2328      	movs	r3, #40	; 0x28
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	0018      	movs	r0, r3
 8001148:	2310      	movs	r3, #16
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f005 fd83 	bl	8006c58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	2320      	movs	r3, #32
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	0018      	movs	r0, r3
 8001158:	2308      	movs	r3, #8
 800115a:	001a      	movs	r2, r3
 800115c:	2100      	movs	r1, #0
 800115e:	f005 fd7b 	bl	8006c58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	0018      	movs	r0, r3
 8001166:	231c      	movs	r3, #28
 8001168:	001a      	movs	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	f005 fd74 	bl	8006c58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	05d2      	lsls	r2, r2, #23
 8001176:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_TIM2_Init+0xf8>)
 800117a:	2263      	movs	r2, #99	; 0x63
 800117c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_TIM2_Init+0xfc>)
 8001188:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_TIM2_Init+0xf8>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001198:	0018      	movs	r0, r3
 800119a:	f003 fc61 	bl	8004a60 <HAL_TIM_Base_Init>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011a2:	f000 f943 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	2128      	movs	r1, #40	; 0x28
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0152      	lsls	r2, r2, #5
 80011ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b0:	187a      	adds	r2, r7, r1
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_TIM2_Init+0xf8>)
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 ffd6 	bl	8005168 <HAL_TIM_ConfigClockSource>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80011c0:	f000 f934 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_TIM2_Init+0xf8>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f003 fd9a 	bl	8004d00 <HAL_TIM_PWM_Init>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80011d0:	f000 f92c 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2120      	movs	r1, #32
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e2:	187a      	adds	r2, r7, r1
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_TIM2_Init+0xf8>)
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f004 fbeb 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80011f2:	f000 f91b 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2260      	movs	r2, #96	; 0x60
 80011fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 - 1;
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	22e0      	movs	r2, #224	; 0xe0
 8001200:	32ff      	adds	r2, #255	; 0xff
 8001202:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001210:	1d39      	adds	r1, r7, #4
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001214:	220c      	movs	r2, #12
 8001216:	0018      	movs	r0, r3
 8001218:	f003 fee0 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001220:	f000 f904 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <MX_TIM2_Init+0xf8>)
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fb40 	bl	80018ac <HAL_TIM_MspPostInit>

}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b00e      	add	sp, #56	; 0x38
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000240 	.word	0x20000240
 8001238:	0000ea5f 	.word	0x0000ea5f

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_USART1_UART_Init+0x6c>)
 8001242:	2200      	movs	r2, #0
 8001244:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_USART1_UART_Init+0x70>)
 8001248:	2200      	movs	r2, #0
 800124a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_USART1_UART_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <MX_USART1_UART_Init+0x7c>)
 8001256:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 800125a:	22e1      	movs	r2, #225	; 0xe1
 800125c:	0212      	lsls	r2, r2, #8
 800125e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001274:	220c      	movs	r2, #12
 8001276:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART1_UART_Init+0x78>)
 8001292:	0018      	movs	r0, r3
 8001294:	f004 fc62 	bl	8005b5c <HAL_UART_Init>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 800129c:	f000 f8c6 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	2000034e 	.word	0x2000034e
 80012ac:	20000356 	.word	0x20000356
 80012b0:	2000037e 	.word	0x2000037e
 80012b4:	20000288 	.word	0x20000288
 80012b8:	40013800 	.word	0x40013800

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x38>)
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_DMA_Init+0x38>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	615a      	str	r2, [r3, #20]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x38>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2009      	movs	r0, #9
 80012e0:	f001 f92c 	bl	800253c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012e4:	2009      	movs	r0, #9
 80012e6:	f001 f93e 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2414      	movs	r4, #20
 8001300:	193b      	adds	r3, r7, r4
 8001302:	0018      	movs	r0, r3
 8001304:	2314      	movs	r3, #20
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f005 fca5 	bl	8006c58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <MX_GPIO_Init+0x124>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	4b42      	ldr	r3, [pc, #264]	; (800141c <MX_GPIO_Init+0x124>)
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0309      	lsls	r1, r1, #12
 8001318:	430a      	orrs	r2, r1
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <MX_GPIO_Init+0x124>)
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	031b      	lsls	r3, r3, #12
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MX_GPIO_Init+0x124>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <MX_GPIO_Init+0x124>)
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	03c9      	lsls	r1, r1, #15
 8001334:	430a      	orrs	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	4b38      	ldr	r3, [pc, #224]	; (800141c <MX_GPIO_Init+0x124>)
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	03db      	lsls	r3, r3, #15
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <MX_GPIO_Init+0x124>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_GPIO_Init+0x124>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0289      	lsls	r1, r1, #10
 8001350:	430a      	orrs	r2, r1
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_GPIO_Init+0x124>)
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	029b      	lsls	r3, r3, #10
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_GPIO_Init+0x124>)
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0x124>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	02c9      	lsls	r1, r1, #11
 800136c:	430a      	orrs	r2, r1
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_GPIO_Init+0x124>)
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	02db      	lsls	r3, r3, #11
 8001378:	4013      	ands	r3, r2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800137e:	239f      	movs	r3, #159	; 0x9f
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_GPIO_Init+0x128>)
 8001384:	2200      	movs	r2, #0
 8001386:	0019      	movs	r1, r3
 8001388:	f001 fd47 	bl	8002e1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_GPIO_Init+0x12c>)
 800138e:	2200      	movs	r2, #0
 8001390:	21c0      	movs	r1, #192	; 0xc0
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fd41 	bl	8002e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_GPIO_Init+0x130>)
 800139a:	2200      	movs	r2, #0
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 fd3b 	bl	8002e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	229f      	movs	r2, #159	; 0x9f
 80013a8:	0192      	lsls	r2, r2, #6
 80013aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2201      	movs	r2, #1
 80013b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <MX_GPIO_Init+0x128>)
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f001 fb9b 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	22c0      	movs	r2, #192	; 0xc0
 80013ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	2201      	movs	r2, #1
 80013d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <MX_GPIO_Init+0x12c>)
 80013e6:	0019      	movs	r1, r3
 80013e8:	0010      	movs	r0, r2
 80013ea:	f001 fb89 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ee:	0021      	movs	r1, r4
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2201      	movs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	187b      	adds	r3, r7, r1
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <MX_GPIO_Init+0x130>)
 800140c:	0019      	movs	r1, r3
 800140e:	0010      	movs	r0, r2
 8001410:	f001 fb76 	bl	8002b00 <HAL_GPIO_Init>

}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b00b      	add	sp, #44	; 0x2c
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	48000800 	.word	0x48000800
 8001424:	48001400 	.word	0x48001400
 8001428:	48000400 	.word	0x48000400

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x44>)
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_MspInit+0x44>)
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x44>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2201      	movs	r2, #1
 8001450:	4013      	ands	r3, r2
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x44>)
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_MspInit+0x44>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	430a      	orrs	r2, r1
 8001462:	61da      	str	r2, [r3, #28]
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_MspInit+0x44>)
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	4013      	ands	r3, r2
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08d      	sub	sp, #52	; 0x34
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	241c      	movs	r4, #28
 800148a:	193b      	adds	r3, r7, r4
 800148c:	0018      	movs	r0, r3
 800148e:	2314      	movs	r3, #20
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f005 fbe0 	bl	8006c58 <memset>
  if(hadc->Instance==ADC1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <HAL_ADC_MspInit+0x148>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d000      	beq.n	80014a4 <HAL_ADC_MspInit+0x24>
 80014a2:	e08d      	b.n	80015c0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	0089      	lsls	r1, r1, #2
 80014ae:	430a      	orrs	r2, r1
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	0309      	lsls	r1, r1, #12
 80014ca:	430a      	orrs	r2, r1
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	4013      	ands	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	0289      	lsls	r1, r1, #10
 80014e6:	430a      	orrs	r2, r1
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	029b      	lsls	r3, r3, #10
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	02c9      	lsls	r1, r1, #11
 8001502:	430a      	orrs	r2, r1
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	02db      	lsls	r3, r3, #11
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001514:	193b      	adds	r3, r7, r4
 8001516:	223f      	movs	r2, #63	; 0x3f
 8001518:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2203      	movs	r2, #3
 800151e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	193b      	adds	r3, r7, r4
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	193b      	adds	r3, r7, r4
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_ADC_MspInit+0x150>)
 800152a:	0019      	movs	r1, r3
 800152c:	0010      	movs	r0, r2
 800152e:	f001 fae7 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001532:	193b      	adds	r3, r7, r4
 8001534:	22ef      	movs	r2, #239	; 0xef
 8001536:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001538:	193b      	adds	r3, r7, r4
 800153a:	2203      	movs	r2, #3
 800153c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	193b      	adds	r3, r7, r4
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	193a      	adds	r2, r7, r4
 8001546:	2390      	movs	r3, #144	; 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f001 fad7 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2203      	movs	r2, #3
 8001556:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2203      	movs	r2, #3
 800155c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	193b      	adds	r3, r7, r4
 8001566:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 8001568:	0019      	movs	r1, r3
 800156a:	0010      	movs	r0, r2
 800156c:	f001 fac8 	bl	8002b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 8001572:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_ADC_MspInit+0x15c>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	00d2      	lsls	r2, r2, #3
 8001596:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 f894 	bl	80026d4 <HAL_DMA_Init>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80015b0:	f7ff ff3c 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b00d      	add	sp, #52	; 0x34
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	40012400 	.word	0x40012400
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000400 	.word	0x48000400
 80015d8:	2000008c 	.word	0x2000008c
 80015dc:	40020008 	.word	0x40020008

080015e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b08b      	sub	sp, #44	; 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	2414      	movs	r4, #20
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0018      	movs	r0, r3
 80015ee:	2314      	movs	r3, #20
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f005 fb30 	bl	8006c58 <memset>
  if(hdac->Instance==DAC)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_DAC_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_DAC_MspInit+0x88>)
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_DAC_MspInit+0x88>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0589      	lsls	r1, r1, #22
 800160c:	430a      	orrs	r2, r1
 800160e:	61da      	str	r2, [r3, #28]
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_DAC_MspInit+0x88>)
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	059b      	lsls	r3, r3, #22
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_DAC_MspInit+0x88>)
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_DAC_MspInit+0x88>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0289      	lsls	r1, r1, #10
 8001628:	430a      	orrs	r2, r1
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_DAC_MspInit+0x88>)
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2210      	movs	r2, #16
 800163e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001640:	193b      	adds	r3, r7, r4
 8001642:	2203      	movs	r2, #3
 8001644:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	193b      	adds	r3, r7, r4
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	193a      	adds	r2, r7, r4
 800164e:	2390      	movs	r3, #144	; 0x90
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f001 fa53 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b00b      	add	sp, #44	; 0x2c
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40007400 	.word	0x40007400
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	2414      	movs	r4, #20
 8001676:	193b      	adds	r3, r7, r4
 8001678:	0018      	movs	r0, r3
 800167a:	2314      	movs	r3, #20
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f005 faea 	bl	8006c58 <memset>
  if(hi2c->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_I2C_MspInit+0x90>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d132      	bne.n	80016f4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_I2C_MspInit+0x94>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_I2C_MspInit+0x94>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	02c9      	lsls	r1, r1, #11
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_I2C_MspInit+0x94>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	02db      	lsls	r3, r3, #11
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	22c0      	movs	r2, #192	; 0xc0
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	0021      	movs	r1, r4
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2212      	movs	r2, #18
 80016b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2203      	movs	r2, #3
 80016c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2201      	movs	r2, #1
 80016ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_I2C_MspInit+0x98>)
 80016d0:	0019      	movs	r1, r3
 80016d2:	0010      	movs	r0, r2
 80016d4:	f001 fa14 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_I2C_MspInit+0x94>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0x94>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0389      	lsls	r1, r1, #14
 80016e2:	430a      	orrs	r2, r1
 80016e4:	61da      	str	r2, [r3, #28]
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_I2C_MspInit+0x94>)
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b00b      	add	sp, #44	; 0x2c
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	40005400 	.word	0x40005400
 8001700:	40021000 	.word	0x40021000
 8001704:	48000400 	.word	0x48000400

08001708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08d      	sub	sp, #52	; 0x34
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	241c      	movs	r4, #28
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	2314      	movs	r3, #20
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f005 fa9c 	bl	8006c58 <memset>
  if(hspi->Instance==SPI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_SPI_MspInit+0x100>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d132      	bne.n	8001790 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_SPI_MspInit+0x104>)
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_SPI_MspInit+0x104>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0149      	lsls	r1, r1, #5
 8001734:	430a      	orrs	r2, r1
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_SPI_MspInit+0x104>)
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_SPI_MspInit+0x104>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_SPI_MspInit+0x104>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	02c9      	lsls	r1, r1, #11
 8001750:	430a      	orrs	r2, r1
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_SPI_MspInit+0x104>)
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	02db      	lsls	r3, r3, #11
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001762:	0021      	movs	r1, r4
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2218      	movs	r2, #24
 8001768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2202      	movs	r2, #2
 800176e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2203      	movs	r2, #3
 800177a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	187b      	adds	r3, r7, r1
 8001784:	4a22      	ldr	r2, [pc, #136]	; (8001810 <HAL_SPI_MspInit+0x108>)
 8001786:	0019      	movs	r1, r3
 8001788:	0010      	movs	r0, r2
 800178a:	f001 f9b9 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800178e:	e037      	b.n	8001800 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_SPI_MspInit+0x10c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d132      	bne.n	8001800 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_SPI_MspInit+0x104>)
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_SPI_MspInit+0x104>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	01c9      	lsls	r1, r1, #7
 80017a4:	430a      	orrs	r2, r1
 80017a6:	61da      	str	r2, [r3, #28]
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_SPI_MspInit+0x104>)
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_SPI_MspInit+0x104>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_SPI_MspInit+0x104>)
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	02c9      	lsls	r1, r1, #11
 80017c0:	430a      	orrs	r2, r1
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_SPI_MspInit+0x104>)
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	02db      	lsls	r3, r3, #11
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80017d2:	211c      	movs	r1, #28
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	22c0      	movs	r2, #192	; 0xc0
 80017d8:	01d2      	lsls	r2, r2, #7
 80017da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2202      	movs	r2, #2
 80017e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2203      	movs	r2, #3
 80017ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_SPI_MspInit+0x108>)
 80017f8:	0019      	movs	r1, r3
 80017fa:	0010      	movs	r0, r2
 80017fc:	f001 f980 	bl	8002b00 <HAL_GPIO_Init>
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b00d      	add	sp, #52	; 0x34
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	40013000 	.word	0x40013000
 800180c:	40021000 	.word	0x40021000
 8001810:	48000400 	.word	0x48000400
 8001814:	40003800 	.word	0x40003800

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d11e      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0109      	lsls	r1, r1, #4
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	200d      	movs	r0, #13
 800184c:	f000 fe76 	bl	800253c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001850:	200d      	movs	r0, #13
 8001852:	f000 fe88 	bl	8002566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2101      	movs	r1, #1
 800185a:	200e      	movs	r0, #14
 800185c:	f000 fe6e 	bl	800253c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001860:	200e      	movs	r0, #14
 8001862:	f000 fe80 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001866:	e019      	b.n	800189c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	429a      	cmp	r2, r3
 8001872:	d113      	bne.n	800189c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_TIM_Base_MspInit+0x90>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2101      	movs	r1, #1
 8001890:	200f      	movs	r0, #15
 8001892:	f000 fe53 	bl	800253c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001896:	200f      	movs	r0, #15
 8001898:	f000 fe65 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08b      	sub	sp, #44	; 0x2c
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	2414      	movs	r4, #20
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	0018      	movs	r0, r3
 80018ba:	2314      	movs	r3, #20
 80018bc:	001a      	movs	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f005 f9ca 	bl	8006c58 <memset>
  if(htim->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2c      	ldr	r2, [pc, #176]	; (800197c <HAL_TIM_MspPostInit+0xd0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d126      	bne.n	800191c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0289      	lsls	r1, r1, #10
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	0052      	lsls	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	0021      	movs	r1, r4
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2202      	movs	r2, #2
 80018f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2202      	movs	r2, #2
 800190a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	187a      	adds	r2, r7, r1
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f001 f8f3 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800191a:	e02a      	b.n	8001972 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	05db      	lsls	r3, r3, #23
 8001924:	429a      	cmp	r2, r3
 8001926:	d124      	bne.n	8001972 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	02c9      	lsls	r1, r1, #11
 8001932:	430a      	orrs	r2, r1
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_TIM_MspPostInit+0xd4>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	02db      	lsls	r3, r3, #11
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001944:	2114      	movs	r1, #20
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2202      	movs	r2, #2
 8001952:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	187b      	adds	r3, r7, r1
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2202      	movs	r2, #2
 8001964:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	187b      	adds	r3, r7, r1
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_TIM_MspPostInit+0xd8>)
 800196a:	0019      	movs	r1, r3
 800196c:	0010      	movs	r0, r2
 800196e:	f001 f8c7 	bl	8002b00 <HAL_GPIO_Init>
}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b00b      	add	sp, #44	; 0x2c
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40012c00 	.word	0x40012c00
 8001980:	40021000 	.word	0x40021000
 8001984:	48000400 	.word	0x48000400

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b08b      	sub	sp, #44	; 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	2414      	movs	r4, #20
 8001992:	193b      	adds	r3, r7, r4
 8001994:	0018      	movs	r0, r3
 8001996:	2314      	movs	r3, #20
 8001998:	001a      	movs	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f005 f95c 	bl	8006c58 <memset>
  if(huart->Instance==USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_UART_MspInit+0xa4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13b      	bne.n	8001a22 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	01c9      	lsls	r1, r1, #7
 80019b4:	430a      	orrs	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0289      	lsls	r1, r1, #10
 80019d0:	430a      	orrs	r2, r1
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_UART_MspInit+0xa8>)
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	22c0      	movs	r2, #192	; 0xc0
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	0021      	movs	r1, r4
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2202      	movs	r2, #2
 80019f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2203      	movs	r2, #3
 80019fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2201      	movs	r2, #1
 8001a02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	187a      	adds	r2, r7, r1
 8001a06:	2390      	movs	r3, #144	; 0x90
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 f877 	bl	8002b00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	201b      	movs	r0, #27
 8001a18:	f000 fd90 	bl	800253c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a1c:	201b      	movs	r0, #27
 8001a1e:	f000 fda2 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00b      	add	sp, #44	; 0x2c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f8b8 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <DMA1_Channel1_IRQHandler+0x14>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f000 ff5d 	bl	800292a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	2000008c 	.word	0x2000008c

08001a7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f003 f994 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	200001f8 	.word	0x200001f8

08001a94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <TIM1_CC_IRQHandler+0x14>)
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f003 f988 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	200001f8 	.word	0x200001f8

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <TIM2_IRQHandler+0x14>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f003 f97c 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	20000240 	.word	0x20000240

08001ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <USART1_IRQHandler+0x14>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f004 f944 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	20000288 	.word	0x20000288

08001adc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopForever+0xe>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopForever+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b12:	f7ff ffe3 	bl	8001adc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b16:	f005 f87b 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1a:	f7fe ff65 	bl	80009e8 <main>

08001b1e <LoopForever>:

LoopForever:
    b LoopForever
 8001b1e:	e7fe      	b.n	8001b1e <LoopForever>
  ldr   r0, =_estack
 8001b20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001b2c:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8001b30:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b34:	20000388 	.word	0x20000388

08001b38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC1_COMP_IRQHandler>
	...

08001b3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_Init+0x24>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_Init+0x24>)
 8001b46:	2110      	movs	r1, #16
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f809 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b52:	f7ff fc71 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001b6e:	681c      	ldr	r4, [r3, #0]
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	0019      	movs	r1, r3
 8001b76:	23fa      	movs	r3, #250	; 0xfa
 8001b78:	0098      	lsls	r0, r3, #2
 8001b7a:	f7fe fac5 	bl	8000108 <__udivsi3>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	0019      	movs	r1, r3
 8001b82:	0020      	movs	r0, r4
 8001b84:	f7fe fac0 	bl	8000108 <__udivsi3>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fcfb 	bl	8002586 <HAL_SYSTICK_Config>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00f      	b.n	8001bb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d80b      	bhi.n	8001bb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 fcc8 	bl	800253c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_InitTick+0x64>)
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b003      	add	sp, #12
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	20000024 	.word	0x20000024
 8001bc4:	2000002c 	.word	0x2000002c
 8001bc8:	20000028 	.word	0x20000028

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	18d2      	adds	r2, r2, r3
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_IncTick+0x20>)
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	2000002c 	.word	0x2000002c
 8001bec:	20000384 	.word	0x20000384

08001bf0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GetTick+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000384 	.word	0x20000384

08001c04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e125      	b.n	8001e6e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2234      	movs	r2, #52	; 0x34
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff fc20 	bl	8001480 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	2210      	movs	r2, #16
 8001c46:	4013      	ands	r3, r2
 8001c48:	d000      	beq.n	8001c4c <HAL_ADC_Init+0x48>
 8001c4a:	e103      	b.n	8001e54 <HAL_ADC_Init+0x250>
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <HAL_ADC_Init+0x54>
 8001c56:	e0fd      	b.n	8001e54 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c62:	d000      	beq.n	8001c66 <HAL_ADC_Init+0x62>
 8001c64:	e0f6      	b.n	8001e54 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	4a83      	ldr	r2, [pc, #524]	; (8001e78 <HAL_ADC_Init+0x274>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2202      	movs	r2, #2
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d112      	bne.n	8001caa <HAL_ADC_Init+0xa6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d009      	beq.n	8001ca6 <HAL_ADC_Init+0xa2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0xa6>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0xa8>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d116      	bne.n	8001cde <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2218      	movs	r2, #24
 8001cb8:	4393      	bics	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	0899      	lsrs	r1, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4964      	ldr	r1, [pc, #400]	; (8001e7c <HAL_ADC_Init+0x278>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7e1b      	ldrb	r3, [r3, #24]
 8001cf2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e5b      	ldrb	r3, [r3, #25]
 8001cf8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e9b      	ldrb	r3, [r3, #26]
 8001d00:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d02:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Init+0x10e>
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	015b      	lsls	r3, r3, #5
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_Init+0x110>
 8001d12:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d14:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d1a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_Init+0x124>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e000      	b.n	8001d2a <HAL_ADC_Init+0x126>
 8001d28:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2124      	movs	r1, #36	; 0x24
 8001d30:	5c5b      	ldrb	r3, [r3, r1]
 8001d32:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d34:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7edb      	ldrb	r3, [r3, #27]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d115      	bne.n	8001d70 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e9b      	ldrb	r3, [r3, #26]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0252      	lsls	r2, r2, #9
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	e00b      	b.n	8001d70 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	2201      	movs	r2, #1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	23c2      	movs	r3, #194	; 0xc2
 8001d76:	33ff      	adds	r3, #255	; 0xff
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d007      	beq.n	8001d8c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d84:	4313      	orrs	r3, r2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68d9      	ldr	r1, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d01b      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d017      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d013      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d00f      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00b      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d007      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d003      	beq.n	8001de0 <HAL_ADC_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d112      	bne.n	8001e06 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2107      	movs	r1, #7
 8001dec:	438a      	bics	r2, r1
 8001dee:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6959      	ldr	r1, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_ADC_Init+0x27c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d10b      	bne.n	8001e2e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	2203      	movs	r2, #3
 8001e22:	4393      	bics	r3, r2
 8001e24:	2201      	movs	r2, #1
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e2c:	e01c      	b.n	8001e68 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	2212      	movs	r2, #18
 8001e34:	4393      	bics	r3, r2
 8001e36:	2210      	movs	r2, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	2201      	movs	r2, #1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e52:	e009      	b.n	8001e68 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	2210      	movs	r2, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b004      	add	sp, #16
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	fffffefd 	.word	0xfffffefd
 8001e7c:	fffe0219 	.word	0xfffe0219
 8001e80:	833fffe7 	.word	0x833fffe7

08001e84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2317      	movs	r3, #23
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d15e      	bne.n	8001f62 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2234      	movs	r2, #52	; 0x34
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Start_DMA+0x2e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e05e      	b.n	8001f70 <HAL_ADC_Start_DMA+0xec>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2234      	movs	r2, #52	; 0x34
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	7e5b      	ldrb	r3, [r3, #25]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d007      	beq.n	8001ed2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ec2:	2317      	movs	r3, #23
 8001ec4:	18fc      	adds	r4, r7, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 f983 	bl	80021d4 <ADC_Enable>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed2:	2317      	movs	r3, #23
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d146      	bne.n	8001f6a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_ADC_Start_DMA+0xf4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2234      	movs	r2, #52	; 0x34
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_ADC_Start_DMA+0xf8>)
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_ADC_Start_DMA+0xfc>)
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_ADC_Start_DMA+0x100>)
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	221c      	movs	r2, #28
 8001f1a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2110      	movs	r1, #16
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3340      	adds	r3, #64	; 0x40
 8001f46:	0019      	movs	r1, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f000 fc0a 	bl	8002764 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f62:	2317      	movs	r3, #23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f6a:	2317      	movs	r3, #23
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b007      	add	sp, #28
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	fffff0fe 	.word	0xfffff0fe
 8001f7c:	080022dd 	.word	0x080022dd
 8001f80:	08002391 	.word	0x08002391
 8001f84:	080023af 	.word	0x080023af

08001f88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	055b      	lsls	r3, r3, #21
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d011      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00d      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d009      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d005      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d001      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2234      	movs	r2, #52	; 0x34
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x54>
 8002008:	2302      	movs	r3, #2
 800200a:	e0d0      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1f6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2234      	movs	r2, #52	; 0x34
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2204      	movs	r2, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d000      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x6a>
 8002020:	e0b4      	b.n	800218c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a64      	ldr	r2, [pc, #400]	; (80021b8 <HAL_ADC_ConfigChannel+0x200>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_ADC_ConfigChannel+0x76>
 800202c:	e082      	b.n	8002134 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	055b      	lsls	r3, r3, #21
 800204c:	429a      	cmp	r2, r3
 800204e:	d037      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d033      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b02      	cmp	r3, #2
 800205e:	d02f      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b03      	cmp	r3, #3
 8002066:	d02b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b04      	cmp	r3, #4
 800206e:	d027      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b05      	cmp	r3, #5
 8002076:	d023      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2b06      	cmp	r3, #6
 800207e:	d01f      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	2b07      	cmp	r3, #7
 8002086:	d01b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2107      	movs	r1, #7
 8002094:	400b      	ands	r3, r1
 8002096:	429a      	cmp	r2, r3
 8002098:	d012      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2107      	movs	r1, #7
 80020a6:	438a      	bics	r2, r1
 80020a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6959      	ldr	r1, [r3, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2207      	movs	r2, #7
 80020b6:	401a      	ands	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d007      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x120>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b11      	cmp	r3, #17
 80020ce:	d003      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x120>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d163      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <HAL_ADC_ConfigChannel+0x204>)
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d009      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x140>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b11      	cmp	r3, #17
 80020ea:	d102      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x13a>
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	03db      	lsls	r3, r3, #15
 80020f0:	e004      	b.n	80020fc <HAL_ADC_ConfigChannel+0x144>
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	045b      	lsls	r3, r3, #17
 80020f6:	e001      	b.n	80020fc <HAL_ADC_ConfigChannel+0x144>
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <HAL_ADC_ConfigChannel+0x204>)
 80020fe:	430b      	orrs	r3, r1
 8002100:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d14a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_ADC_ConfigChannel+0x208>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	492d      	ldr	r1, [pc, #180]	; (80021c4 <HAL_ADC_ConfigChannel+0x20c>)
 8002110:	0018      	movs	r0, r3
 8002112:	f7fd fff9 	bl	8000108 <__udivsi3>
 8002116:	0003      	movs	r3, r0
 8002118:	001a      	movs	r2, r3
 800211a:	0013      	movs	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	189b      	adds	r3, r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002124:	e002      	b.n	800212c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3b01      	subs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x16e>
 8002132:	e035      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	4099      	lsls	r1, r3
 8002142:	000b      	movs	r3, r1
 8002144:	43d9      	mvns	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d007      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x1ae>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b11      	cmp	r3, #17
 800215c:	d003      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x1ae>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b12      	cmp	r3, #18
 8002164:	d11c      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_ADC_ConfigChannel+0x204>)
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d007      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x1ca>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b11      	cmp	r3, #17
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x1c6>
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_ADC_ConfigChannel+0x210>)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_ADC_ConfigChannel+0x214>)
 8002180:	e000      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_ADC_ConfigChannel+0x218>)
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_ADC_ConfigChannel+0x204>)
 8002186:	400b      	ands	r3, r1
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e009      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	2220      	movs	r2, #32
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2234      	movs	r2, #52	; 0x34
 80021a4:	2100      	movs	r1, #0
 80021a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80021a8:	230f      	movs	r3, #15
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	00001001 	.word	0x00001001
 80021bc:	40012708 	.word	0x40012708
 80021c0:	20000024 	.word	0x20000024
 80021c4:	000f4240 	.word	0x000f4240
 80021c8:	ffbfffff 	.word	0xffbfffff
 80021cc:	feffffff 	.word	0xfeffffff
 80021d0:	ff7fffff 	.word	0xff7fffff

080021d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2203      	movs	r2, #3
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d112      	bne.n	8002218 <ADC_Enable+0x44>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d009      	beq.n	8002214 <ADC_Enable+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	401a      	ands	r2, r3
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	429a      	cmp	r2, r3
 8002212:	d101      	bne.n	8002218 <ADC_Enable+0x44>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <ADC_Enable+0x46>
 8002218:	2300      	movs	r3, #0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d152      	bne.n	80022c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <ADC_Enable+0xfc>)
 8002226:	4013      	ands	r3, r2
 8002228:	d00d      	beq.n	8002246 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	2210      	movs	r2, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2201      	movs	r2, #1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e03f      	b.n	80022c6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <ADC_Enable+0x100>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	491f      	ldr	r1, [pc, #124]	; (80022d8 <ADC_Enable+0x104>)
 800225c:	0018      	movs	r0, r3
 800225e:	f7fd ff53 	bl	8000108 <__udivsi3>
 8002262:	0003      	movs	r3, r0
 8002264:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002266:	e002      	b.n	800226e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3b01      	subs	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002274:	f7ff fcbc 	bl	8001bf0 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800227c:	e01b      	b.n	80022b6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227e:	f7ff fcb7 	bl	8001bf0 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d914      	bls.n	80022b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00d      	beq.n	80022b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	2210      	movs	r2, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	2201      	movs	r2, #1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e007      	b.n	80022c6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d1dc      	bne.n	800227e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	80000017 	.word	0x80000017
 80022d4:	20000024 	.word	0x20000024
 80022d8:	000f4240 	.word	0x000f4240

080022dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	2250      	movs	r2, #80	; 0x50
 80022f0:	4013      	ands	r3, r2
 80022f2:	d140      	bne.n	8002376 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d12d      	bne.n	800236c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002314:	2b00      	cmp	r3, #0
 8002316:	d129      	bne.n	800236c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2208      	movs	r2, #8
 8002320:	4013      	ands	r3, r2
 8002322:	2b08      	cmp	r3, #8
 8002324:	d122      	bne.n	800236c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2204      	movs	r2, #4
 800232e:	4013      	ands	r3, r2
 8002330:	d110      	bne.n	8002354 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	210c      	movs	r1, #12
 800233e:	438a      	bics	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <ADC_DMAConvCplt+0xb0>)
 8002348:	4013      	ands	r3, r2
 800234a:	2201      	movs	r2, #1
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
 8002352:	e00b      	b.n	800236c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	2220      	movs	r2, #32
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	2201      	movs	r2, #1
 8002366:	431a      	orrs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fe0a 	bl	8001f88 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002374:	e005      	b.n	8002382 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	0010      	movs	r0, r2
 8002380:	4798      	blx	r3
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b004      	add	sp, #16
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	fffffefe 	.word	0xfffffefe

08002390 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fdf9 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bd80      	pop	{r7, pc}

080023ae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2204      	movs	r2, #4
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fde6 	bl	8001fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	0002      	movs	r2, r0
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b7f      	cmp	r3, #127	; 0x7f
 80023f6:	d809      	bhi.n	800240c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	001a      	movs	r2, r3
 80023fe:	231f      	movs	r3, #31
 8002400:	401a      	ands	r2, r3
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_EnableIRQ+0x30>)
 8002404:	2101      	movs	r1, #1
 8002406:	4091      	lsls	r1, r2
 8002408:	000a      	movs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
  }
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	0002      	movs	r2, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b7f      	cmp	r3, #127	; 0x7f
 800242c:	d828      	bhi.n	8002480 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <__NVIC_SetPriority+0xd4>)
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b25b      	sxtb	r3, r3
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	33c0      	adds	r3, #192	; 0xc0
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	589b      	ldr	r3, [r3, r2]
 800243e:	1dfa      	adds	r2, r7, #7
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	0011      	movs	r1, r2
 8002444:	2203      	movs	r2, #3
 8002446:	400a      	ands	r2, r1
 8002448:	00d2      	lsls	r2, r2, #3
 800244a:	21ff      	movs	r1, #255	; 0xff
 800244c:	4091      	lsls	r1, r2
 800244e:	000a      	movs	r2, r1
 8002450:	43d2      	mvns	r2, r2
 8002452:	401a      	ands	r2, r3
 8002454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	401a      	ands	r2, r3
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	2303      	movs	r3, #3
 8002466:	4003      	ands	r3, r0
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246c:	481f      	ldr	r0, [pc, #124]	; (80024ec <__NVIC_SetPriority+0xd4>)
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b25b      	sxtb	r3, r3
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	430a      	orrs	r2, r1
 8002478:	33c0      	adds	r3, #192	; 0xc0
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800247e:	e031      	b.n	80024e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <__NVIC_SetPriority+0xd8>)
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	0019      	movs	r1, r3
 8002488:	230f      	movs	r3, #15
 800248a:	400b      	ands	r3, r1
 800248c:	3b08      	subs	r3, #8
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3306      	adds	r3, #6
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	18d3      	adds	r3, r2, r3
 8002496:	3304      	adds	r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1dfa      	adds	r2, r7, #7
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	0011      	movs	r1, r2
 80024a0:	2203      	movs	r2, #3
 80024a2:	400a      	ands	r2, r1
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	21ff      	movs	r1, #255	; 0xff
 80024a8:	4091      	lsls	r1, r2
 80024aa:	000a      	movs	r2, r1
 80024ac:	43d2      	mvns	r2, r2
 80024ae:	401a      	ands	r2, r3
 80024b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	22ff      	movs	r2, #255	; 0xff
 80024b8:	401a      	ands	r2, r3
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	0018      	movs	r0, r3
 80024c0:	2303      	movs	r3, #3
 80024c2:	4003      	ands	r3, r0
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <__NVIC_SetPriority+0xd8>)
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	001c      	movs	r4, r3
 80024d0:	230f      	movs	r3, #15
 80024d2:	4023      	ands	r3, r4
 80024d4:	3b08      	subs	r3, #8
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	430a      	orrs	r2, r1
 80024da:	3306      	adds	r3, #6
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	18c3      	adds	r3, r0, r3
 80024e0:	3304      	adds	r3, #4
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b003      	add	sp, #12
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	1e5a      	subs	r2, r3, #1
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	045b      	lsls	r3, r3, #17
 8002504:	429a      	cmp	r2, r3
 8002506:	d301      	bcc.n	800250c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002508:	2301      	movs	r3, #1
 800250a:	e010      	b.n	800252e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <SysTick_Config+0x44>)
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	3a01      	subs	r2, #1
 8002512:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002514:	2301      	movs	r3, #1
 8002516:	425b      	negs	r3, r3
 8002518:	2103      	movs	r1, #3
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff ff7c 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x44>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x44>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	210f      	movs	r1, #15
 8002548:	187b      	adds	r3, r7, r1
 800254a:	1c02      	adds	r2, r0, #0
 800254c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	187b      	adds	r3, r7, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b25b      	sxtb	r3, r3
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	0002      	movs	r2, r0
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff33 	bl	80023e4 <__NVIC_EnableIRQ>
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f7ff ffaf 	bl	80024f4 <SysTick_Config>
 8002596:	0003      	movs	r3, r0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e015      	b.n	80025de <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff f80b 	bl	80015e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	795b      	ldrb	r3, [r3, #5]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DAC_ConfigChannel+0x20>
 8002602:	2302      	movs	r3, #2
 8002604:	e029      	b.n	800265a <HAL_DAC_ConfigChannel+0x74>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2202      	movs	r2, #2
 8002610:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800261a:	223e      	movs	r2, #62	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4013      	ands	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b006      	add	sp, #24
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	795b      	ldrb	r3, [r3, #5]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_DAC_Start+0x16>
 8002674:	2302      	movs	r3, #2
 8002676:	e028      	b.n	80026ca <HAL_DAC_Start+0x68>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	409a      	lsls	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	223c      	movs	r2, #60	; 0x3c
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b3c      	cmp	r3, #60	; 0x3c
 80026aa:	d107      	bne.n	80026bc <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e036      	b.n	8002758 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2221      	movs	r2, #33	; 0x21
 80026ee:	2102      	movs	r1, #2
 80026f0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_DMA_Init+0x8c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f9c4 	bl	8002ac8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2221      	movs	r2, #33	; 0x21
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	2100      	movs	r1, #0
 8002754:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}  
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}
 8002760:	ffffc00f 	.word	0xffffc00f

08002764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002772:	2317      	movs	r3, #23
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Start_IT+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e04f      	b.n	8002828 <HAL_DMA_Start_IT+0xc4>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	2101      	movs	r1, #1
 800278e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	5c9b      	ldrb	r3, [r3, r2]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d13a      	bne.n	8002812 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	2102      	movs	r1, #2
 80027a2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	438a      	bics	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f954 	bl	8002a6e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	210e      	movs	r1, #14
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00f      	b.n	8002800 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	210a      	movs	r1, #10
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2104      	movs	r1, #4
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e007      	b.n	8002822 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	2100      	movs	r1, #0
 8002818:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800281a:	2317      	movs	r3, #23
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002822:	2317      	movs	r3, #23
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
} 
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b006      	add	sp, #24
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2221      	movs	r2, #33	; 0x21
 800283c:	5c9b      	ldrb	r3, [r3, r2]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e020      	b.n	8002898 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	210e      	movs	r1, #14
 8002862:	438a      	bics	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	2101      	movs	r1, #1
 8002880:	4091      	lsls	r1, r2
 8002882:	000a      	movs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2221      	movs	r2, #33	; 0x21
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a8:	210f      	movs	r1, #15
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2221      	movs	r2, #33	; 0x21
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d006      	beq.n	80028ca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e028      	b.n	800291c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	210e      	movs	r1, #14
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	438a      	bics	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2101      	movs	r1, #1
 80028f4:	4091      	lsls	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	2100      	movs	r1, #0
 8002908:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	0010      	movs	r0, r2
 800291a:	4798      	blx	r3
    } 
  }
  return status;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	781b      	ldrb	r3, [r3, #0]
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2204      	movs	r2, #4
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	d024      	beq.n	800299c <HAL_DMA_IRQHandler+0x72>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2204      	movs	r2, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d020      	beq.n	800299c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	4013      	ands	r3, r2
 8002964:	d107      	bne.n	8002976 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2104      	movs	r1, #4
 8002972:	438a      	bics	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2104      	movs	r1, #4
 8002980:	4091      	lsls	r1, r2
 8002982:	000a      	movs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d100      	bne.n	8002990 <HAL_DMA_IRQHandler+0x66>
 800298e:	e06a      	b.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	0010      	movs	r0, r2
 8002998:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800299a:	e064      	b.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2202      	movs	r2, #2
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	d02b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xda>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d027      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	d10b      	bne.n	80029d8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	210a      	movs	r1, #10
 80029cc:	438a      	bics	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2221      	movs	r2, #33	; 0x21
 80029d4:	2101      	movs	r1, #1
 80029d6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2102      	movs	r1, #2
 80029e2:	4091      	lsls	r1, r2
 80029e4:	000a      	movs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d036      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	0010      	movs	r0, r2
 8002a00:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a02:	e030      	b.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2208      	movs	r2, #8
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	d028      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2208      	movs	r2, #8
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d024      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	210e      	movs	r1, #14
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	2101      	movs	r1, #1
 8002a36:	4091      	lsls	r1, r2
 8002a38:	000a      	movs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2221      	movs	r2, #33	; 0x21
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	0010      	movs	r0, r2
 8002a62:	4798      	blx	r3
    }
   }
}  
 8002a64:	e7ff      	b.n	8002a66 <HAL_DMA_IRQHandler+0x13c>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	2101      	movs	r1, #1
 8002a86:	4091      	lsls	r1, r2
 8002a88:	000a      	movs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d108      	bne.n	8002aae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aac:	e007      	b.n	8002abe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <DMA_CalcBaseAndBitshift+0x30>)
 8002ad6:	4694      	mov	ip, r2
 8002ad8:	4463      	add	r3, ip
 8002ada:	2114      	movs	r1, #20
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fb13 	bl	8000108 <__udivsi3>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <DMA_CalcBaseAndBitshift+0x34>)
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	bffdfff8 	.word	0xbffdfff8
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	e14f      	b.n	8002db0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4091      	lsls	r1, r2
 8002b1a:	000a      	movs	r2, r1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d100      	bne.n	8002b28 <HAL_GPIO_Init+0x28>
 8002b26:	e140      	b.n	8002daa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	0013      	movs	r3, r2
 8002b50:	43da      	mvns	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	409a      	lsls	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d017      	beq.n	8002bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	58d3      	ldr	r3, [r2, r3]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	43da      	mvns	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2107      	movs	r1, #7
 8002c16:	400b      	ands	r3, r1
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	43da      	mvns	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	401a      	ands	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d100      	bne.n	8002c74 <HAL_GPIO_Init+0x174>
 8002c72:	e09a      	b.n	8002daa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	619a      	str	r2, [r3, #24]
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_GPIO_Init+0x2c8>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	2390      	movs	r3, #144	; 0x90
 8002cb4:	05db      	lsls	r3, r3, #23
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x1e2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a44      	ldr	r2, [pc, #272]	; (8002dd0 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x1de>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_GPIO_Init+0x2d4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x1da>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a42      	ldr	r2, [pc, #264]	; (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x1d6>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	400a      	ands	r2, r1
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x2cc>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	4013      	ands	r3, r2
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	2380      	movs	r3, #128	; 0x80
 8002d6c:	035b      	lsls	r3, r3, #13
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	039b      	lsls	r3, r3, #14
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	40da      	lsrs	r2, r3
 8002db8:	1e13      	subs	r3, r2, #0
 8002dba:	d000      	beq.n	8002dbe <HAL_GPIO_Init+0x2be>
 8002dbc:	e6a8      	b.n	8002b10 <HAL_GPIO_Init+0x10>
  } 
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b006      	add	sp, #24
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	000a      	movs	r2, r1
 8002dea:	1cbb      	adds	r3, r7, #2
 8002dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	1cba      	adds	r2, r7, #2
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	4013      	ands	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002dfa:	230f      	movs	r3, #15
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e003      	b.n	8002e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e04:	230f      	movs	r3, #15
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
  }
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	0008      	movs	r0, r1
 8002e24:	0011      	movs	r1, r2
 8002e26:	1cbb      	adds	r3, r7, #2
 8002e28:	1c02      	adds	r2, r0, #0
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	1c7b      	adds	r3, r7, #1
 8002e2e:	1c0a      	adds	r2, r1, #0
 8002e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e32:	1c7b      	adds	r3, r7, #1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e3a:	1cbb      	adds	r3, r7, #2
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e082      	b.n	8002f6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2241      	movs	r2, #65	; 0x41
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d107      	bne.n	8002e82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fe fbf5 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2241      	movs	r2, #65	; 0x41
 8002e86:	2124      	movs	r1, #36	; 0x24
 8002e88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4934      	ldr	r1, [pc, #208]	; (8002f74 <HAL_I2C_Init+0x120>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4931      	ldr	r1, [pc, #196]	; (8002f78 <HAL_I2C_Init+0x124>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0209      	lsls	r1, r1, #8
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	e007      	b.n	8002ee2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2184      	movs	r1, #132	; 0x84
 8002edc:	0209      	lsls	r1, r1, #8
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d104      	bne.n	8002ef4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	491f      	ldr	r1, [pc, #124]	; (8002f7c <HAL_I2C_Init+0x128>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	491a      	ldr	r1, [pc, #104]	; (8002f78 <HAL_I2C_Init+0x124>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69d9      	ldr	r1, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2241      	movs	r2, #65	; 0x41
 8002f58:	2120      	movs	r1, #32
 8002f5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2242      	movs	r2, #66	; 0x42
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	f0ffffff 	.word	0xf0ffffff
 8002f78:	ffff7fff 	.word	0xffff7fff
 8002f7c:	02008000 	.word	0x02008000

08002f80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	0008      	movs	r0, r1
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	230a      	movs	r3, #10
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	1c02      	adds	r2, r0, #0
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	2308      	movs	r3, #8
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	1c0a      	adds	r2, r1, #0
 8002f9c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2241      	movs	r2, #65	; 0x41
 8002fa2:	5c9b      	ldrb	r3, [r3, r2]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d000      	beq.n	8002fac <HAL_I2C_Master_Transmit+0x2c>
 8002faa:	e0e7      	b.n	800317c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	; 0x40
 8002fb0:	5c9b      	ldrb	r3, [r3, r2]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Master_Transmit+0x3a>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0e1      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fe15 	bl	8001bf0 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	0219      	lsls	r1, r3, #8
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f000 fa04 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0cc      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2241      	movs	r2, #65	; 0x41
 8002fe8:	2121      	movs	r1, #33	; 0x21
 8002fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2242      	movs	r2, #66	; 0x42
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2208      	movs	r2, #8
 8003004:	18ba      	adds	r2, r7, r2
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d911      	bls.n	800303e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	b2da      	uxtb	r2, r3
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	045c      	lsls	r4, r3, #17
 800302a:	230a      	movs	r3, #10
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	8819      	ldrh	r1, [r3, #0]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	4b55      	ldr	r3, [pc, #340]	; (8003188 <HAL_I2C_Master_Transmit+0x208>)
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	0023      	movs	r3, r4
 8003038:	f000 fb74 	bl	8003724 <I2C_TransferConfig>
 800303c:	e075      	b.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	b2da      	uxtb	r2, r3
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	049c      	lsls	r4, r3, #18
 8003052:	230a      	movs	r3, #10
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	8819      	ldrh	r1, [r3, #0]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_I2C_Master_Transmit+0x208>)
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	0023      	movs	r3, r4
 8003060:	f000 fb60 	bl	8003724 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003064:	e061      	b.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f9f8 	bl	8003462 <I2C_WaitOnTXISFlagUntilTimeout>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e081      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03a      	beq.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d136      	bne.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	0013      	movs	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	f000 f98b 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e053      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2bff      	cmp	r3, #255	; 0xff
 80030de:	d911      	bls.n	8003104 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	045c      	lsls	r4, r3, #17
 80030f0:	230a      	movs	r3, #10
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	8819      	ldrh	r1, [r3, #0]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	0023      	movs	r3, r4
 80030fe:	f000 fb11 	bl	8003724 <I2C_TransferConfig>
 8003102:	e012      	b.n	800312a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	b2da      	uxtb	r2, r3
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	049c      	lsls	r4, r3, #18
 8003118:	230a      	movs	r3, #10
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	8819      	ldrh	r1, [r3, #0]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	0023      	movs	r3, r4
 8003126:	f000 fafd 	bl	8003724 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d198      	bne.n	8003066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f9d0 	bl	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01a      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2220      	movs	r2, #32
 800314e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	490c      	ldr	r1, [pc, #48]	; (800318c <HAL_I2C_Master_Transmit+0x20c>)
 800315c:	400a      	ands	r2, r1
 800315e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2241      	movs	r2, #65	; 0x41
 8003164:	2120      	movs	r1, #32
 8003166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2242      	movs	r2, #66	; 0x42
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b007      	add	sp, #28
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	80002000 	.word	0x80002000
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	0008      	movs	r0, r1
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	0019      	movs	r1, r3
 800319e:	230a      	movs	r3, #10
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	1c02      	adds	r2, r0, #0
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	2308      	movs	r3, #8
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	1c0a      	adds	r2, r1, #0
 80031ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2241      	movs	r2, #65	; 0x41
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d000      	beq.n	80031bc <HAL_I2C_Master_Receive+0x2c>
 80031ba:	e0e8      	b.n	800338e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2240      	movs	r2, #64	; 0x40
 80031c0:	5c9b      	ldrb	r3, [r3, r2]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Master_Receive+0x3a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0e2      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d2:	f7fe fd0d 	bl	8001bf0 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	0219      	lsls	r1, r3, #8
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2319      	movs	r3, #25
 80031e6:	2201      	movs	r2, #1
 80031e8:	f000 f8fc 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cd      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2241      	movs	r2, #65	; 0x41
 80031f8:	2122      	movs	r1, #34	; 0x22
 80031fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2242      	movs	r2, #66	; 0x42
 8003200:	2110      	movs	r1, #16
 8003202:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2208      	movs	r2, #8
 8003214:	18ba      	adds	r2, r7, r2
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2bff      	cmp	r3, #255	; 0xff
 8003228:	d911      	bls.n	800324e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	045c      	lsls	r4, r3, #17
 800323a:	230a      	movs	r3, #10
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	8819      	ldrh	r1, [r3, #0]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_I2C_Master_Receive+0x208>)
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	0023      	movs	r3, r4
 8003248:	f000 fa6c 	bl	8003724 <I2C_TransferConfig>
 800324c:	e076      	b.n	800333c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	b2da      	uxtb	r2, r3
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	049c      	lsls	r4, r3, #18
 8003262:	230a      	movs	r3, #10
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	8819      	ldrh	r1, [r3, #0]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_I2C_Master_Receive+0x208>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	0023      	movs	r3, r4
 8003270:	f000 fa58 	bl	8003724 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003274:	e062      	b.n	800333c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f96b 	bl	8003558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e082      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03a      	beq.n	800333c <HAL_I2C_Master_Receive+0x1ac>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d136      	bne.n	800333c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	0013      	movs	r3, r2
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	f000 f882 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e053      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	; 0xff
 80032f0:	d911      	bls.n	8003316 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	; 0xff
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	045c      	lsls	r4, r3, #17
 8003302:	230a      	movs	r3, #10
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	8819      	ldrh	r1, [r3, #0]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	0023      	movs	r3, r4
 8003310:	f000 fa08 	bl	8003724 <I2C_TransferConfig>
 8003314:	e012      	b.n	800333c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	b2da      	uxtb	r2, r3
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	049c      	lsls	r4, r3, #18
 800332a:	230a      	movs	r3, #10
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	8819      	ldrh	r1, [r3, #0]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	0023      	movs	r3, r4
 8003338:	f000 f9f4 	bl	8003724 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d197      	bne.n	8003276 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f8c7 	bl	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e01a      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2220      	movs	r2, #32
 8003360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	490b      	ldr	r1, [pc, #44]	; (800339c <HAL_I2C_Master_Receive+0x20c>)
 800336e:	400a      	ands	r2, r1
 8003370:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2241      	movs	r2, #65	; 0x41
 8003376:	2120      	movs	r1, #32
 8003378:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2242      	movs	r2, #66	; 0x42
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2240      	movs	r2, #64	; 0x40
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b007      	add	sp, #28
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	80002400 	.word	0x80002400
 800339c:	fe00e800 	.word	0xfe00e800

080033a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d103      	bne.n	80033be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2201      	movs	r2, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d007      	beq.n	80033dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	430a      	orrs	r2, r1
 80033da:	619a      	str	r2, [r3, #24]
  }
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f4:	e021      	b.n	800343a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	d01e      	beq.n	800343a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe fbf8 	bl	8001bf0 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	2220      	movs	r2, #32
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2241      	movs	r2, #65	; 0x41
 8003422:	2120      	movs	r1, #32
 8003424:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2242      	movs	r2, #66	; 0x42
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2240      	movs	r2, #64	; 0x40
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00f      	b.n	800345a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	425a      	negs	r2, r3
 800344a:	4153      	adcs	r3, r2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	001a      	movs	r2, r3
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d0ce      	beq.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}

08003462 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800346e:	e02b      	b.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f8da 	bl	8003630 <I2C_IsAcknowledgeFailed>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d001      	beq.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e029      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3301      	adds	r3, #1
 8003488:	d01e      	beq.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fbb1 	bl	8001bf0 <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	2220      	movs	r2, #32
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2241      	movs	r2, #65	; 0x41
 80034b0:	2120      	movs	r1, #32
 80034b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2242      	movs	r2, #66	; 0x42
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1cc      	bne.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	e028      	b.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f89b 	bl	8003630 <I2C_IsAcknowledgeFailed>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e026      	b.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe fb75 	bl	8001bf0 <HAL_GetTick>
 8003506:	0002      	movs	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	2220      	movs	r2, #32
 800351e:	431a      	orrs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2241      	movs	r2, #65	; 0x41
 8003528:	2120      	movs	r1, #32
 800352a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2242      	movs	r2, #66	; 0x42
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e007      	b.n	8003550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2220      	movs	r2, #32
 8003548:	4013      	ands	r3, r2
 800354a:	2b20      	cmp	r3, #32
 800354c:	d1cf      	bne.n	80034ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003564:	e055      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 f85f 	bl	8003630 <I2C_IsAcknowledgeFailed>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e053      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2220      	movs	r2, #32
 8003582:	4013      	ands	r3, r2
 8003584:	2b20      	cmp	r3, #32
 8003586:	d129      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2204      	movs	r2, #4
 8003590:	4013      	ands	r3, r2
 8003592:	2b04      	cmp	r3, #4
 8003594:	d105      	bne.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e03f      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	491d      	ldr	r1, [pc, #116]	; (800362c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2241      	movs	r2, #65	; 0x41
 80035c4:	2120      	movs	r1, #32
 80035c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2242      	movs	r2, #66	; 0x42
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e022      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fe fb08 	bl	8001bf0 <HAL_GetTick>
 80035e0:	0002      	movs	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	2220      	movs	r2, #32
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2241      	movs	r2, #65	; 0x41
 8003602:	2120      	movs	r1, #32
 8003604:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2204      	movs	r2, #4
 800361a:	4013      	ands	r3, r2
 800361c:	2b04      	cmp	r3, #4
 800361e:	d1a2      	bne.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b004      	add	sp, #16
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	fe00e800 	.word	0xfe00e800

08003630 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2210      	movs	r2, #16
 8003644:	4013      	ands	r3, r2
 8003646:	2b10      	cmp	r3, #16
 8003648:	d164      	bne.n	8003714 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	049b      	lsls	r3, r3, #18
 8003654:	401a      	ands	r2, r3
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	049b      	lsls	r3, r3, #18
 800365a:	429a      	cmp	r2, r3
 800365c:	d02b      	beq.n	80036b6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	01c9      	lsls	r1, r1, #7
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	e021      	b.n	80036b6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3301      	adds	r3, #1
 8003676:	d01e      	beq.n	80036b6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe faba 	bl	8001bf0 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <I2C_IsAcknowledgeFailed+0x5e>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	2220      	movs	r2, #32
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	2120      	movs	r1, #32
 80036a0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2242      	movs	r2, #66	; 0x42
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2240      	movs	r2, #64	; 0x40
 80036ae:	2100      	movs	r1, #0
 80036b0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e02f      	b.n	8003716 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2220      	movs	r2, #32
 80036be:	4013      	ands	r3, r2
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d1d6      	bne.n	8003672 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2220      	movs	r2, #32
 80036d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff fe62 	bl	80033a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	490e      	ldr	r1, [pc, #56]	; (8003720 <I2C_IsAcknowledgeFailed+0xf0>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	2204      	movs	r2, #4
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2241      	movs	r2, #65	; 0x41
 80036fc:	2120      	movs	r1, #32
 80036fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2242      	movs	r2, #66	; 0x42
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	fe00e800 	.word	0xfe00e800

08003724 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	0008      	movs	r0, r1
 800372e:	0011      	movs	r1, r2
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	240a      	movs	r4, #10
 8003734:	193b      	adds	r3, r7, r4
 8003736:	1c02      	adds	r2, r0, #0
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	2009      	movs	r0, #9
 800373c:	183b      	adds	r3, r7, r0
 800373e:	1c0a      	adds	r2, r1, #0
 8003740:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	0d51      	lsrs	r1, r2, #21
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	00d2      	lsls	r2, r2, #3
 8003750:	400a      	ands	r2, r1
 8003752:	490e      	ldr	r1, [pc, #56]	; (800378c <I2C_TransferConfig+0x68>)
 8003754:	430a      	orrs	r2, r1
 8003756:	43d2      	mvns	r2, r2
 8003758:	401a      	ands	r2, r3
 800375a:	0011      	movs	r1, r2
 800375c:	193b      	adds	r3, r7, r4
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	059b      	lsls	r3, r3, #22
 8003762:	0d9a      	lsrs	r2, r3, #22
 8003764:	183b      	adds	r3, r7, r0
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	0418      	lsls	r0, r3, #16
 800376a:	23ff      	movs	r3, #255	; 0xff
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	4003      	ands	r3, r0
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b005      	add	sp, #20
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	03ff63ff 	.word	0x03ff63ff

08003790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2241      	movs	r2, #65	; 0x41
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d138      	bne.n	8003818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	5c9b      	ldrb	r3, [r3, r2]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e032      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	2101      	movs	r1, #1
 80037ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2241      	movs	r2, #65	; 0x41
 80037c0:	2124      	movs	r1, #36	; 0x24
 80037c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4911      	ldr	r1, [pc, #68]	; (8003824 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2101      	movs	r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2241      	movs	r2, #65	; 0x41
 8003808:	2120      	movs	r1, #32
 800380a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	ffffefff 	.word	0xffffefff

08003828 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2241      	movs	r2, #65	; 0x41
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d139      	bne.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003848:	2302      	movs	r3, #2
 800384a:	e033      	b.n	80038b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2241      	movs	r2, #65	; 0x41
 8003858:	2124      	movs	r1, #36	; 0x24
 800385a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	438a      	bics	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2241      	movs	r2, #65	; 0x41
 80038a2:	2120      	movs	r1, #32
 80038a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2240      	movs	r2, #64	; 0x40
 80038aa:	2100      	movs	r1, #0
 80038ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	fffff0ff 	.word	0xfffff0ff

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e301      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	d100      	bne.n	80038de <HAL_RCC_OscConfig+0x1e>
 80038dc:	e08d      	b.n	80039fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038de:	4bc3      	ldr	r3, [pc, #780]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	220c      	movs	r2, #12
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d00e      	beq.n	8003908 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038ea:	4bc0      	ldr	r3, [pc, #768]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	220c      	movs	r2, #12
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d116      	bne.n	8003924 <HAL_RCC_OscConfig+0x64>
 80038f6:	4bbd      	ldr	r3, [pc, #756]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	025b      	lsls	r3, r3, #9
 80038fe:	401a      	ands	r2, r3
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	429a      	cmp	r2, r3
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4bb8      	ldr	r3, [pc, #736]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	4013      	ands	r3, r2
 8003912:	d100      	bne.n	8003916 <HAL_RCC_OscConfig+0x56>
 8003914:	e070      	b.n	80039f8 <HAL_RCC_OscConfig+0x138>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d000      	beq.n	8003920 <HAL_RCC_OscConfig+0x60>
 800391e:	e06b      	b.n	80039f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e2d8      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x7c>
 800392c:	4baf      	ldr	r3, [pc, #700]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4bae      	ldr	r3, [pc, #696]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0249      	lsls	r1, r1, #9
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e02f      	b.n	800399c <HAL_RCC_OscConfig+0xdc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10c      	bne.n	800395e <HAL_RCC_OscConfig+0x9e>
 8003944:	4ba9      	ldr	r3, [pc, #676]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4ba8      	ldr	r3, [pc, #672]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800394a:	49a9      	ldr	r1, [pc, #676]	; (8003bf0 <HAL_RCC_OscConfig+0x330>)
 800394c:	400a      	ands	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	4ba6      	ldr	r3, [pc, #664]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4ba5      	ldr	r3, [pc, #660]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003956:	49a7      	ldr	r1, [pc, #668]	; (8003bf4 <HAL_RCC_OscConfig+0x334>)
 8003958:	400a      	ands	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e01e      	b.n	800399c <HAL_RCC_OscConfig+0xdc>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10e      	bne.n	8003984 <HAL_RCC_OscConfig+0xc4>
 8003966:	4ba1      	ldr	r3, [pc, #644]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4ba0      	ldr	r3, [pc, #640]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	02c9      	lsls	r1, r1, #11
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	4b9d      	ldr	r3, [pc, #628]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b9c      	ldr	r3, [pc, #624]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	0249      	lsls	r1, r1, #9
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xdc>
 8003984:	4b99      	ldr	r3, [pc, #612]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b98      	ldr	r3, [pc, #608]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 800398a:	4999      	ldr	r1, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x330>)
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	4b96      	ldr	r3, [pc, #600]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b95      	ldr	r3, [pc, #596]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003996:	4997      	ldr	r1, [pc, #604]	; (8003bf4 <HAL_RCC_OscConfig+0x334>)
 8003998:	400a      	ands	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d014      	beq.n	80039ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe f924 	bl	8001bf0 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ae:	f7fe f91f 	bl	8001bf0 <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	; 0x64
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e28a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	029b      	lsls	r3, r3, #10
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0xee>
 80039cc:	e015      	b.n	80039fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe f90f 	bl	8001bf0 <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fe f90a 	bl	8001bf0 <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e275      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b80      	ldr	r3, [pc, #512]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	029b      	lsls	r3, r3, #10
 80039f2:	4013      	ands	r3, r2
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x118>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2202      	movs	r2, #2
 8003a00:	4013      	ands	r3, r2
 8003a02:	d100      	bne.n	8003a06 <HAL_RCC_OscConfig+0x146>
 8003a04:	e069      	b.n	8003ada <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a06:	4b79      	ldr	r3, [pc, #484]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a10:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	220c      	movs	r2, #12
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d11c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x196>
 8003a1c:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	025b      	lsls	r3, r3, #9
 8003a24:	4013      	ands	r3, r2
 8003a26:	d116      	bne.n	8003a56 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a28:	4b70      	ldr	r3, [pc, #448]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x17e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e24b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b6b      	ldr	r3, [pc, #428]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	22f8      	movs	r2, #248	; 0xf8
 8003a44:	4393      	bics	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00da      	lsls	r2, r3, #3
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a54:	e041      	b.n	8003ada <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d024      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f8c1 	bl	8001bf0 <HAL_GetTick>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe f8bc 	bl	8001bf0 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e227      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d0f1      	beq.n	8003a74 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	22f8      	movs	r2, #248	; 0xf8
 8003a96:	4393      	bics	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e018      	b.n	8003ada <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003aae:	2101      	movs	r1, #1
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f89c 	bl	8001bf0 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fe f897 	bl	8001bf0 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e202      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d1f1      	bne.n	8003abe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003af0:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	430a      	orrs	r2, r1
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7fe f87a 	bl	8001bf0 <HAL_GetTick>
 8003afc:	0003      	movs	r3, r0
 8003afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b02:	f7fe f875 	bl	8001bf0 <HAL_GetTick>
 8003b06:	0002      	movs	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1e0      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d0f1      	beq.n	8003b02 <HAL_RCC_OscConfig+0x242>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b32      	ldr	r3, [pc, #200]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	438a      	bics	r2, r1
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2c:	f7fe f860 	bl	8001bf0 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe f85b 	bl	8001bf0 <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1c6      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d1f1      	bne.n	8003b36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <HAL_RCC_OscConfig+0x29e>
 8003b5c:	e0b4      	b.n	8003cc8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	201f      	movs	r0, #31
 8003b60:	183b      	adds	r3, r7, r0
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	055b      	lsls	r3, r3, #21
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d110      	bne.n	8003b94 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0549      	lsls	r1, r1, #21
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	055b      	lsls	r3, r3, #21
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_RCC_OscConfig+0x338>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d11a      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_RCC_OscConfig+0x338>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_RCC_OscConfig+0x338>)
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	0049      	lsls	r1, r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe f81f 	bl	8001bf0 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fe f81a 	bl	8001bf0 <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e185      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x338>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d10e      	bne.n	8003bfc <HAL_RCC_OscConfig+0x33c>
 8003bde:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	4b02      	ldr	r3, [pc, #8]	; (8003bec <HAL_RCC_OscConfig+0x32c>)
 8003be4:	2101      	movs	r1, #1
 8003be6:	430a      	orrs	r2, r1
 8003be8:	621a      	str	r2, [r3, #32]
 8003bea:	e035      	b.n	8003c58 <HAL_RCC_OscConfig+0x398>
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	fffeffff 	.word	0xfffeffff
 8003bf4:	fffbffff 	.word	0xfffbffff
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x35e>
 8003c04:	4bb6      	ldr	r3, [pc, #728]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	4bb5      	ldr	r3, [pc, #724]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	621a      	str	r2, [r3, #32]
 8003c10:	4bb3      	ldr	r3, [pc, #716]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	4bb2      	ldr	r3, [pc, #712]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c16:	2104      	movs	r1, #4
 8003c18:	438a      	bics	r2, r1
 8003c1a:	621a      	str	r2, [r3, #32]
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCC_OscConfig+0x398>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x380>
 8003c26:	4bae      	ldr	r3, [pc, #696]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	4bad      	ldr	r3, [pc, #692]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	621a      	str	r2, [r3, #32]
 8003c32:	4bab      	ldr	r3, [pc, #684]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	4baa      	ldr	r3, [pc, #680]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c38:	2101      	movs	r1, #1
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	621a      	str	r2, [r3, #32]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0x398>
 8003c40:	4ba7      	ldr	r3, [pc, #668]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	4ba6      	ldr	r3, [pc, #664]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c46:	2101      	movs	r1, #1
 8003c48:	438a      	bics	r2, r1
 8003c4a:	621a      	str	r2, [r3, #32]
 8003c4c:	4ba4      	ldr	r3, [pc, #656]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	4ba3      	ldr	r3, [pc, #652]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c52:	2104      	movs	r1, #4
 8003c54:	438a      	bics	r2, r1
 8003c56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d014      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c60:	f7fd ffc6 	bl	8001bf0 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	e009      	b.n	8003c7e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fd ffc1 	bl	8001bf0 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	4a9b      	ldr	r2, [pc, #620]	; (8003ee4 <HAL_RCC_OscConfig+0x624>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e12b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	4b98      	ldr	r3, [pc, #608]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	2202      	movs	r2, #2
 8003c84:	4013      	ands	r3, r2
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3aa>
 8003c88:	e013      	b.n	8003cb2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fd ffb1 	bl	8001bf0 <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd ffac 	bl	8001bf0 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	4a91      	ldr	r2, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x624>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e116      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2202      	movs	r2, #2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	4b87      	ldr	r3, [pc, #540]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	4989      	ldr	r1, [pc, #548]	; (8003ee8 <HAL_RCC_OscConfig+0x628>)
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d12a      	bne.n	8003d30 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cde:	4b80      	ldr	r3, [pc, #512]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd ff7d 	bl	8001bf0 <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cfc:	f7fd ff78 	bl	8001bf0 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0e3      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d0e:	4b74      	ldr	r3, [pc, #464]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f1      	beq.n	8003cfc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d18:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	22f8      	movs	r2, #248	; 0xf8
 8003d1e:	4393      	bics	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	00da      	lsls	r2, r3, #3
 8003d28:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d2e:	e034      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	3305      	adds	r3, #5
 8003d36:	d111      	bne.n	8003d5c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d38:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3c:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d3e:	2104      	movs	r1, #4
 8003d40:	438a      	bics	r2, r1
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d44:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	22f8      	movs	r2, #248	; 0xf8
 8003d4a:	4393      	bics	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	00da      	lsls	r2, r3, #3
 8003d54:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
 8003d5a:	e01e      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d5c:	4b60      	ldr	r3, [pc, #384]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d62:	2104      	movs	r1, #4
 8003d64:	430a      	orrs	r2, r1
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6c:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	438a      	bics	r2, r1
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fd ff3c 	bl	8001bf0 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d7e:	f7fd ff37 	bl	8001bf0 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0a2      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	d1f1      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d100      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4e4>
 8003da2:	e097      	b.n	8003ed4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	220c      	movs	r2, #12
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d100      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4f2>
 8003db0:	e06b      	b.n	8003e8a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d14c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b48      	ldr	r3, [pc, #288]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003dc0:	494a      	ldr	r1, [pc, #296]	; (8003eec <HAL_RCC_OscConfig+0x62c>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd ff13 	bl	8001bf0 <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd ff0e 	bl	8001bf0 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e079      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	049b      	lsls	r3, r3, #18
 8003dea:	4013      	ands	r3, r2
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	220f      	movs	r2, #15
 8003df4:	4393      	bics	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a3a      	ldr	r2, [pc, #232]	; (8003ef0 <HAL_RCC_OscConfig+0x630>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	431a      	orrs	r2, r3
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	0449      	lsls	r1, r1, #17
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fd fee1 	bl	8001bf0 <HAL_GetTick>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fd fedc 	bl	8001bf0 <HAL_GetTick>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e047      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	049b      	lsls	r3, r3, #18
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x574>
 8003e52:	e03f      	b.n	8003ed4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	4924      	ldr	r1, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x62c>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fd fec6 	bl	8001bf0 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fec1 	bl	8001bf0 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e02c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	049b      	lsls	r3, r3, #18
 8003e84:	4013      	ands	r3, r2
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5aa>
 8003e88:	e024      	b.n	8003ed4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e01f      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	23f0      	movs	r3, #240	; 0xf0
 8003ec4:	039b      	lsls	r3, r3, #14
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b008      	add	sp, #32
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	00001388 	.word	0x00001388
 8003ee8:	efffffff 	.word	0xefffffff
 8003eec:	feffffff 	.word	0xfeffffff
 8003ef0:	ffc2ffff 	.word	0xffc2ffff

08003ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0b3      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	4013      	ands	r3, r2
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d911      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	4b55      	ldr	r3, [pc, #340]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e09a      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d015      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d006      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f54:	21e0      	movs	r1, #224	; 0xe0
 8003f56:	00c9      	lsls	r1, r1, #3
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	22f0      	movs	r2, #240	; 0xf0
 8003f62:	4393      	bics	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
 8003f78:	d040      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b3e      	ldr	r3, [pc, #248]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d114      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06e      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	049b      	lsls	r3, r3, #18
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e062      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003faa:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e05b      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fe10 	bl	8001bf0 <HAL_GetTick>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e009      	b.n	8003fea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fd fe0b 	bl	8001bf0 <HAL_GetTick>
 8003fda:	0002      	movs	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	4a27      	ldr	r2, [pc, #156]	; (8004080 <HAL_RCC_ClockConfig+0x18c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e042      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	220c      	movs	r2, #12
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1ec      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d211      	bcs.n	800402e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	4393      	bics	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x184>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	4013      	ands	r3, r2
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e020      	b.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2204      	movs	r2, #4
 8004034:	4013      	ands	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_RCC_ClockConfig+0x190>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800404c:	f000 f820 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 8004050:	0001      	movs	r1, r0
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x188>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	220f      	movs	r2, #15
 800405a:	4013      	ands	r3, r2
 800405c:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <HAL_RCC_ClockConfig+0x194>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	000a      	movs	r2, r1
 8004062:	40da      	lsrs	r2, r3
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x198>)
 8004066:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004068:	2003      	movs	r0, #3
 800406a:	f7fd fd7b 	bl	8001b64 <HAL_InitTick>
  
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	00001388 	.word	0x00001388
 8004084:	fffff8ff 	.word	0xfffff8ff
 8004088:	08006cbc 	.word	0x08006cbc
 800408c:	20000024 	.word	0x20000024

08004090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b08f      	sub	sp, #60	; 0x3c
 8004094:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004096:	2314      	movs	r3, #20
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800409e:	c313      	stmia	r3!, {r0, r1, r4}
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	4a29      	ldr	r2, [pc, #164]	; (800414c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80040aa:	c313      	stmia	r3!, {r0, r1, r4}
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b8:	2300      	movs	r3, #0
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80040c4:	4b22      	ldr	r3, [pc, #136]	; (8004150 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	220c      	movs	r2, #12
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d002      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x4a>
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d003      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x50>
 80040d8:	e02d      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040de:	e02d      	b.n	800413c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	0c9b      	lsrs	r3, r3, #18
 80040e4:	220f      	movs	r2, #15
 80040e6:	4013      	ands	r3, r2
 80040e8:	2214      	movs	r2, #20
 80040ea:	18ba      	adds	r2, r7, r2
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	220f      	movs	r2, #15
 80040f6:	4013      	ands	r3, r2
 80040f8:	1d3a      	adds	r2, r7, #4
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80040fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	4013      	ands	r3, r2
 8004106:	d009      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410a:	4812      	ldr	r0, [pc, #72]	; (8004154 <HAL_RCC_GetSysClockFreq+0xc4>)
 800410c:	f7fb fffc 	bl	8000108 <__udivsi3>
 8004110:	0003      	movs	r3, r0
 8004112:	001a      	movs	r2, r3
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	4353      	muls	r3, r2
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
 800411a:	e009      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800411c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411e:	000a      	movs	r2, r1
 8004120:	0152      	lsls	r2, r2, #5
 8004122:	1a52      	subs	r2, r2, r1
 8004124:	0193      	lsls	r3, r2, #6
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	185b      	adds	r3, r3, r1
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004134:	e002      	b.n	800413c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800413a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b00f      	add	sp, #60	; 0x3c
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	08006c98 	.word	0x08006c98
 800414c:	08006ca8 	.word	0x08006ca8
 8004150:	40021000 	.word	0x40021000
 8004154:	007a1200 	.word	0x007a1200

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <HAL_RCC_GetHCLKFreq+0x10>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000024 	.word	0x20000024

0800416c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004170:	f7ff fff2 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004174:	0001      	movs	r1, r0
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	2207      	movs	r2, #7
 800417e:	4013      	ands	r3, r2
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	40d9      	lsrs	r1, r3
 8004186:	000b      	movs	r3, r1
}    
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	40021000 	.word	0x40021000
 8004194:	08006ccc 	.word	0x08006ccc

08004198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	025b      	lsls	r3, r3, #9
 80041b0:	4013      	ands	r3, r2
 80041b2:	d100      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80041b4:	e08e      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2017      	movs	r0, #23
 80041b8:	183b      	adds	r3, r7, r0
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b5f      	ldr	r3, [pc, #380]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	055b      	lsls	r3, r3, #21
 80041c6:	4013      	ands	r3, r2
 80041c8:	d110      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b5c      	ldr	r3, [pc, #368]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	4b5b      	ldr	r3, [pc, #364]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	0549      	lsls	r1, r1, #21
 80041d4:	430a      	orrs	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
 80041d8:	4b58      	ldr	r3, [pc, #352]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	055b      	lsls	r3, r3, #21
 80041e0:	4013      	ands	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	183b      	adds	r3, r7, r0
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	4b54      	ldr	r3, [pc, #336]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4013      	ands	r3, r2
 80041f6:	d11a      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f8:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b50      	ldr	r3, [pc, #320]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	0049      	lsls	r1, r1, #1
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004206:	f7fd fcf3 	bl	8001bf0 <HAL_GetTick>
 800420a:	0003      	movs	r3, r0
 800420c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	e008      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004210:	f7fd fcee 	bl	8001bf0 <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d0f0      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4013      	ands	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d034      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	23c0      	movs	r3, #192	; 0xc0
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4013      	ands	r3, r2
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	429a      	cmp	r2, r3
 800424e:	d02c      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004250:	4b3a      	ldr	r3, [pc, #232]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a3b      	ldr	r2, [pc, #236]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004256:	4013      	ands	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	0249      	lsls	r1, r1, #9
 8004264:	430a      	orrs	r2, r1
 8004266:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004268:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	4b33      	ldr	r3, [pc, #204]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800426e:	4936      	ldr	r1, [pc, #216]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004270:	400a      	ands	r2, r1
 8004272:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004282:	f7fd fcb5 	bl	8001bf0 <HAL_GetTick>
 8004286:	0003      	movs	r3, r0
 8004288:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	e009      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fd fcb0 	bl	8001bf0 <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	4a2d      	ldr	r2, [pc, #180]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e048      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	d0f0      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a25      	ldr	r2, [pc, #148]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ba:	430a      	orrs	r2, r1
 80042bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042be:	2317      	movs	r3, #23
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ce:	4920      	ldr	r1, [pc, #128]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042de:	4b17      	ldr	r3, [pc, #92]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	2203      	movs	r2, #3
 80042e4:	4393      	bics	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2220      	movs	r2, #32
 80042f8:	4013      	ands	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	2210      	movs	r2, #16
 8004302:	4393      	bics	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430c:	430a      	orrs	r2, r1
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4013      	ands	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	2240      	movs	r2, #64	; 0x40
 8004322:	4393      	bics	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432c:	430a      	orrs	r2, r1
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	b006      	add	sp, #24
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	fffffcff 	.word	0xfffffcff
 8004348:	fffeffff 	.word	0xfffeffff
 800434c:	00001388 	.word	0x00001388
 8004350:	efffffff 	.word	0xefffffff

08004354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0a8      	b.n	80044b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2382      	movs	r3, #130	; 0x82
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	429a      	cmp	r2, r3
 8004378:	d009      	beq.n	800438e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
 8004380:	e005      	b.n	800438e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	225d      	movs	r2, #93	; 0x5d
 8004398:	5c9b      	ldrb	r3, [r3, r2]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	225c      	movs	r2, #92	; 0x5c
 80043a4:	2100      	movs	r1, #0
 80043a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7fd f9ac 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	225d      	movs	r2, #93	; 0x5d
 80043b4:	2102      	movs	r1, #2
 80043b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2140      	movs	r1, #64	; 0x40
 80043c4:	438a      	bics	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	23e0      	movs	r3, #224	; 0xe0
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d902      	bls.n	80043da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e002      	b.n	80043e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	23f0      	movs	r3, #240	; 0xf0
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d008      	beq.n	80043fe <HAL_SPI_Init+0xaa>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	23e0      	movs	r3, #224	; 0xe0
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2382      	movs	r3, #130	; 0x82
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	2384      	movs	r3, #132	; 0x84
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	400b      	ands	r3, r1
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2102      	movs	r1, #2
 800441a:	400b      	ands	r3, r1
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2101      	movs	r1, #1
 8004424:	400b      	ands	r3, r1
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6999      	ldr	r1, [r3, #24]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	400b      	ands	r3, r1
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2138      	movs	r1, #56	; 0x38
 800443a:	400b      	ands	r3, r1
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	400b      	ands	r3, r1
 8004446:	431a      	orrs	r2, r3
 8004448:	0011      	movs	r1, r2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	401a      	ands	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	2204      	movs	r2, #4
 8004464:	401a      	ands	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2110      	movs	r1, #16
 800446c:	400b      	ands	r3, r1
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	2108      	movs	r1, #8
 8004476:	400b      	ands	r3, r1
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68d9      	ldr	r1, [r3, #12]
 800447e:	23f0      	movs	r3, #240	; 0xf0
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	400b      	ands	r3, r1
 8004484:	431a      	orrs	r2, r3
 8004486:	0011      	movs	r1, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	015b      	lsls	r3, r3, #5
 800448e:	401a      	ands	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4907      	ldr	r1, [pc, #28]	; (80044c0 <HAL_SPI_Init+0x16c>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	225d      	movs	r2, #93	; 0x5d
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fffff7ff 	.word	0xfffff7ff

080044c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	1dbb      	adds	r3, r7, #6
 80044d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044d4:	231f      	movs	r3, #31
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	225c      	movs	r2, #92	; 0x5c
 80044e0:	5c9b      	ldrb	r3, [r3, r2]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_SPI_Transmit+0x26>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e140      	b.n	800476c <HAL_SPI_Transmit+0x2a8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	225c      	movs	r2, #92	; 0x5c
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f2:	f7fd fb7d 	bl	8001bf0 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044fa:	2316      	movs	r3, #22
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	1dba      	adds	r2, r7, #6
 8004500:	8812      	ldrh	r2, [r2, #0]
 8004502:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	225d      	movs	r2, #93	; 0x5d
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d004      	beq.n	800451a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004510:	231f      	movs	r3, #31
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2202      	movs	r2, #2
 8004516:	701a      	strb	r2, [r3, #0]
    goto error;
 8004518:	e11d      	b.n	8004756 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_SPI_Transmit+0x64>
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004528:	231f      	movs	r3, #31
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004530:	e111      	b.n	8004756 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	225d      	movs	r2, #93	; 0x5d
 8004536:	2103      	movs	r1, #3
 8004538:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1dba      	adds	r2, r7, #6
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1dba      	adds	r2, r7, #6
 8004552:	8812      	ldrh	r2, [r2, #0]
 8004554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2244      	movs	r2, #68	; 0x44
 8004560:	2100      	movs	r1, #0
 8004562:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2246      	movs	r2, #70	; 0x46
 8004568:	2100      	movs	r1, #0
 800456a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	429a      	cmp	r2, r3
 8004582:	d110      	bne.n	80045a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2140      	movs	r1, #64	; 0x40
 8004590:	438a      	bics	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	01c9      	lsls	r1, r1, #7
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2240      	movs	r2, #64	; 0x40
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d007      	beq.n	80045c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	23e0      	movs	r3, #224	; 0xe0
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d94e      	bls.n	800466e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_SPI_Transmit+0x11e>
 80045d8:	2316      	movs	r3, #22
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d13f      	bne.n	8004662 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004606:	e02c      	b.n	8004662 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d112      	bne.n	800463c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800463a:	e012      	b.n	8004662 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463c:	f7fd fad8 	bl	8001bf0 <HAL_GetTick>
 8004640:	0002      	movs	r2, r0
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d802      	bhi.n	8004652 <HAL_SPI_Transmit+0x18e>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Transmit+0x194>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004658:	231f      	movs	r3, #31
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2203      	movs	r2, #3
 800465e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004660:	e079      	b.n	8004756 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1cd      	bne.n	8004608 <HAL_SPI_Transmit+0x144>
 800466c:	e04f      	b.n	800470e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <HAL_SPI_Transmit+0x1bc>
 8004676:	2316      	movs	r3, #22
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d141      	bne.n	8004704 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80046a6:	e02d      	b.n	8004704 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2202      	movs	r2, #2
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d113      	bne.n	80046de <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046dc:	e012      	b.n	8004704 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046de:	f7fd fa87 	bl	8001bf0 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d802      	bhi.n	80046f4 <HAL_SPI_Transmit+0x230>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x236>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80046fa:	231f      	movs	r3, #31
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	2203      	movs	r2, #3
 8004700:	701a      	strb	r2, [r3, #0]
          goto error;
 8004702:	e028      	b.n	8004756 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cc      	bne.n	80046a8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f95d 	bl	80049d4 <SPI_EndRxTxTransaction>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d002      	beq.n	8004724 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800474a:	231f      	movs	r3, #31
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e000      	b.n	8004756 <HAL_SPI_Transmit+0x292>
  }

error:
 8004754:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	225d      	movs	r2, #93	; 0x5d
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	225c      	movs	r2, #92	; 0x5c
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004766:	231f      	movs	r3, #31
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b008      	add	sp, #32
 8004772:	bd80      	pop	{r7, pc}

08004774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	1dfb      	adds	r3, r7, #7
 8004782:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004784:	f7fd fa34 	bl	8001bf0 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	18d3      	adds	r3, r2, r3
 8004792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004794:	f7fd fa2c 	bl	8001bf0 <HAL_GetTick>
 8004798:	0003      	movs	r3, r0
 800479a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	0d1b      	lsrs	r3, r3, #20
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	4353      	muls	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	e058      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	d055      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b2:	f7fd fa1d 	bl	8001bf0 <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d902      	bls.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d142      	bne.n	800484e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	21e0      	movs	r1, #224	; 0xe0
 80047d4:	438a      	bics	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	2382      	movs	r3, #130	; 0x82
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d113      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x98>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d005      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d107      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	438a      	bics	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	019b      	lsls	r3, r3, #6
 8004814:	429a      	cmp	r2, r3
 8004816:	d110      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	491a      	ldr	r1, [pc, #104]	; (800488c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	0189      	lsls	r1, r1, #6
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	225d      	movs	r2, #93	; 0x5d
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	225c      	movs	r2, #92	; 0x5c
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e017      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3b01      	subs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	425a      	negs	r2, r3
 800486e:	4153      	adcs	r3, r2
 8004870:	b2db      	uxtb	r3, r3
 8004872:	001a      	movs	r2, r3
 8004874:	1dfb      	adds	r3, r7, #7
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d197      	bne.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b008      	add	sp, #32
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000024 	.word	0x20000024
 800488c:	ffffdfff 	.word	0xffffdfff

08004890 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800489e:	2317      	movs	r3, #23
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048a6:	f7fd f9a3 	bl	8001bf0 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	18d3      	adds	r3, r2, r3
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048b6:	f7fd f99b 	bl	8001bf0 <HAL_GetTick>
 80048ba:	0003      	movs	r3, r0
 80048bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	0013      	movs	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	00da      	lsls	r2, r3, #3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	0d1b      	lsrs	r3, r3, #20
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	4353      	muls	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048dc:	e068      	b.n	80049b0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	23c0      	movs	r3, #192	; 0xc0
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d10a      	bne.n	80048fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	2117      	movs	r1, #23
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	d055      	beq.n	80049b0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004904:	f7fd f974 	bl	8001bf0 <HAL_GetTick>
 8004908:	0002      	movs	r2, r0
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	429a      	cmp	r2, r3
 8004912:	d902      	bls.n	800491a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d142      	bne.n	80049a0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	21e0      	movs	r1, #224	; 0xe0
 8004926:	438a      	bics	r2, r1
 8004928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	2382      	movs	r3, #130	; 0x82
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	429a      	cmp	r2, r3
 8004934:	d113      	bne.n	800495e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	429a      	cmp	r2, r3
 8004940:	d005      	beq.n	800494e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	429a      	cmp	r2, r3
 800494c:	d107      	bne.n	800495e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	438a      	bics	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	429a      	cmp	r2, r3
 8004968:	d110      	bne.n	800498c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4916      	ldr	r1, [pc, #88]	; (80049d0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004976:	400a      	ands	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	0189      	lsls	r1, r1, #6
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	225d      	movs	r2, #93	; 0x5d
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	225c      	movs	r2, #92	; 0x5c
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e010      	b.n	80049c2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d18e      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b00a      	add	sp, #40	; 0x28
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20000024 	.word	0x20000024
 80049d0:	ffffdfff 	.word	0xffffdfff

080049d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	23c0      	movs	r3, #192	; 0xc0
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	0013      	movs	r3, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	f7ff ff4e 	bl	8004890 <SPI_WaitFifoStateUntilTimeout>
 80049f4:	1e03      	subs	r3, r0, #0
 80049f6:	d007      	beq.n	8004a08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fc:	2220      	movs	r2, #32
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e027      	b.n	8004a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	0013      	movs	r3, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	f7ff fead 	bl	8004774 <SPI_WaitFlagStateUntilTimeout>
 8004a1a:	1e03      	subs	r3, r0, #0
 8004a1c:	d007      	beq.n	8004a2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a22:	2220      	movs	r2, #32
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e014      	b.n	8004a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	00d9      	lsls	r1, r3, #3
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	0013      	movs	r3, r2
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f7ff ff27 	bl	8004890 <SPI_WaitFifoStateUntilTimeout>
 8004a42:	1e03      	subs	r3, r0, #0
 8004a44:	d007      	beq.n	8004a56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e000      	b.n	8004a58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e042      	b.n	8004af8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	223d      	movs	r2, #61	; 0x3d
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223c      	movs	r2, #60	; 0x3c
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fc fec5 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	223d      	movs	r2, #61	; 0x3d
 8004a92:	2102      	movs	r1, #2
 8004a94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	0010      	movs	r0, r2
 8004aa2:	f000 fc55 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2246      	movs	r2, #70	; 0x46
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	223e      	movs	r2, #62	; 0x3e
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	223f      	movs	r2, #63	; 0x3f
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2240      	movs	r2, #64	; 0x40
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2241      	movs	r2, #65	; 0x41
 8004aca:	2101      	movs	r1, #1
 8004acc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2242      	movs	r2, #66	; 0x42
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	5499      	strb	r1, [r3, r2]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2243      	movs	r2, #67	; 0x43
 8004ada:	2101      	movs	r1, #1
 8004adc:	5499      	strb	r1, [r3, r2]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2244      	movs	r2, #68	; 0x44
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	5499      	strb	r1, [r3, r2]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2245      	movs	r2, #69	; 0x45
 8004aea:	2101      	movs	r1, #1
 8004aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	223d      	movs	r2, #61	; 0x3d
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	230f      	movs	r3, #15
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <HAL_TIM_OC_Start_IT+0x2a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	223e      	movs	r2, #62	; 0x3e
 8004b1c:	5c9b      	ldrb	r3, [r3, r2]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	4193      	sbcs	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e01f      	b.n	8004b6a <HAL_TIM_OC_Start_IT+0x6a>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIM_OC_Start_IT+0x42>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	223f      	movs	r2, #63	; 0x3f
 8004b34:	5c9b      	ldrb	r3, [r3, r2]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	4193      	sbcs	r3, r2
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e013      	b.n	8004b6a <HAL_TIM_OC_Start_IT+0x6a>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d108      	bne.n	8004b5a <HAL_TIM_OC_Start_IT+0x5a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	4193      	sbcs	r3, r2
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e007      	b.n	8004b6a <HAL_TIM_OC_Start_IT+0x6a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2241      	movs	r2, #65	; 0x41
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	4193      	sbcs	r3, r2
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0b7      	b.n	8004ce2 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_OC_Start_IT+0x82>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	223e      	movs	r2, #62	; 0x3e
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	5499      	strb	r1, [r3, r2]
 8004b80:	e013      	b.n	8004baa <HAL_TIM_OC_Start_IT+0xaa>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_OC_Start_IT+0x92>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	5499      	strb	r1, [r3, r2]
 8004b90:	e00b      	b.n	8004baa <HAL_TIM_OC_Start_IT+0xaa>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_OC_Start_IT+0xa2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	5499      	strb	r1, [r3, r2]
 8004ba0:	e003      	b.n	8004baa <HAL_TIM_OC_Start_IT+0xaa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2241      	movs	r2, #65	; 0x41
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d02a      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x106>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d830      	bhi.n	8004c18 <HAL_TIM_OC_Start_IT+0x118>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d01b      	beq.n	8004bf4 <HAL_TIM_OC_Start_IT+0xf4>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d82a      	bhi.n	8004c18 <HAL_TIM_OC_Start_IT+0x118>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_TIM_OC_Start_IT+0xd0>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIM_OC_Start_IT+0xe2>
 8004bce:	e023      	b.n	8004c18 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2102      	movs	r1, #2
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	60da      	str	r2, [r3, #12]
      break;
 8004be0:	e01f      	b.n	8004c22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2104      	movs	r1, #4
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	60da      	str	r2, [r3, #12]
      break;
 8004bf2:	e016      	b.n	8004c22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2108      	movs	r1, #8
 8004c00:	430a      	orrs	r2, r1
 8004c02:	60da      	str	r2, [r3, #12]
      break;
 8004c04:	e00d      	b.n	8004c22 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2110      	movs	r1, #16
 8004c12:	430a      	orrs	r2, r1
 8004c14:	60da      	str	r2, [r3, #12]
      break;
 8004c16:	e004      	b.n	8004c22 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
      break;
 8004c20:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004c22:	230f      	movs	r3, #15
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d157      	bne.n	8004cdc <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	2201      	movs	r2, #1
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 fea1 	bl	800597c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <HAL_TIM_OC_Start_IT+0x1ec>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_OC_Start_IT+0x162>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_OC_Start_IT+0x162>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_OC_Start_IT+0x162>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_OC_Start_IT+0x166>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_TIM_OC_Start_IT+0x168>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	0209      	lsls	r1, r1, #8
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <HAL_TIM_OC_Start_IT+0x1ec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	05db      	lsls	r3, r3, #23
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_TIM_OC_Start_IT+0x1fc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_OC_Start_IT+0x1a8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2207      	movs	r2, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cdc:	230f      	movs	r3, #15
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	781b      	ldrb	r3, [r3, #0]
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b004      	add	sp, #16
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40000400 	.word	0x40000400

08004d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e042      	b.n	8004d98 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	223d      	movs	r2, #61	; 0x3d
 8004d16:	5c9b      	ldrb	r3, [r3, r2]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d107      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	223c      	movs	r2, #60	; 0x3c
 8004d22:	2100      	movs	r1, #0
 8004d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f839 	bl	8004da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	223d      	movs	r2, #61	; 0x3d
 8004d32:	2102      	movs	r1, #2
 8004d34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	0019      	movs	r1, r3
 8004d40:	0010      	movs	r0, r2
 8004d42:	f000 fb05 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2246      	movs	r2, #70	; 0x46
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	223e      	movs	r2, #62	; 0x3e
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223f      	movs	r2, #63	; 0x3f
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2241      	movs	r2, #65	; 0x41
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2242      	movs	r2, #66	; 0x42
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2243      	movs	r2, #67	; 0x43
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2244      	movs	r2, #68	; 0x44
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2245      	movs	r2, #69	; 0x45
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223d      	movs	r2, #61	; 0x3d
 8004d92:	2101      	movs	r1, #1
 8004d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d124      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11d      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4252      	negs	r2, r2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2203      	movs	r2, #3
 8004dec:	4013      	ands	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 fa94 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e007      	b.n	8004e0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fb fa0f 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f000 fa93 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2204      	movs	r2, #4
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d125      	bne.n	8004e6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2204      	movs	r2, #4
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11e      	bne.n	8004e6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2205      	movs	r2, #5
 8004e32:	4252      	negs	r2, r2
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	23c0      	movs	r3, #192	; 0xc0
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 fa67 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004e52:	e007      	b.n	8004e64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fb f9e2 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f000 fa66 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2208      	movs	r2, #8
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d124      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d11d      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2209      	movs	r2, #9
 8004e8c:	4252      	negs	r2, r2
 8004e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2204      	movs	r2, #4
 8004e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 fa3b 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004eaa:	e007      	b.n	8004ebc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fb f9b6 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f000 fa3a 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d125      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d11e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2211      	movs	r2, #17
 8004ee4:	4252      	negs	r2, r2
 8004ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2208      	movs	r2, #8
 8004eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	23c0      	movs	r3, #192	; 0xc0
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 fa0e 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e007      	b.n	8004f16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fb f989 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 fa0d 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2201      	movs	r2, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10f      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4252      	negs	r2, r2
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f9e3 	bl	8005310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d10f      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d108      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2281      	movs	r2, #129	; 0x81
 8004f6c:	4252      	negs	r2, r2
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 fdea 	bl	8005b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d10f      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d108      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2241      	movs	r2, #65	; 0x41
 8004f9a:	4252      	negs	r2, r2
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 f9cd 	bl	8005340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2220      	movs	r2, #32
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d108      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2221      	movs	r2, #33	; 0x21
 8004fc8:	4252      	negs	r2, r2
 8004fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fdb4 	bl	8005b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2317      	movs	r3, #23
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	223c      	movs	r2, #60	; 0x3c
 8004ff4:	5c9b      	ldrb	r3, [r3, r2]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x22>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0ad      	b.n	800515a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	223c      	movs	r2, #60	; 0x3c
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d100      	bne.n	800500e <HAL_TIM_PWM_ConfigChannel+0x32>
 800500c:	e076      	b.n	80050fc <HAL_TIM_PWM_ConfigChannel+0x120>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d900      	bls.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005014:	e095      	b.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d04e      	beq.n	80050ba <HAL_TIM_PWM_ConfigChannel+0xde>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b08      	cmp	r3, #8
 8005020:	d900      	bls.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005022:	e08e      	b.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x56>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d021      	beq.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005030:	e087      	b.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	0011      	movs	r1, r2
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fa08 	bl	8005450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2108      	movs	r1, #8
 800504c:	430a      	orrs	r2, r1
 800504e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2104      	movs	r1, #4
 800505c:	438a      	bics	r2, r1
 800505e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	619a      	str	r2, [r3, #24]
      break;
 8005072:	e06b      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f000 fa6f 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	0109      	lsls	r1, r1, #4
 8005090:	430a      	orrs	r2, r1
 8005092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4931      	ldr	r1, [pc, #196]	; (8005164 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	619a      	str	r2, [r3, #24]
      break;
 80050b8:	e048      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	0011      	movs	r1, r2
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 fad0 	bl	8005668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2108      	movs	r1, #8
 80050d4:	430a      	orrs	r2, r1
 80050d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2104      	movs	r1, #4
 80050e4:	438a      	bics	r2, r1
 80050e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69d9      	ldr	r1, [r3, #28]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	61da      	str	r2, [r3, #28]
      break;
 80050fa:	e027      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	0011      	movs	r1, r2
 8005104:	0018      	movs	r0, r3
 8005106:	f000 fb35 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	0109      	lsls	r1, r1, #4
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	490f      	ldr	r1, [pc, #60]	; (8005164 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005128:	400a      	ands	r2, r1
 800512a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69d9      	ldr	r1, [r3, #28]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	61da      	str	r2, [r3, #28]
      break;
 8005140:	e004      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005142:	2317      	movs	r3, #23
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	223c      	movs	r2, #60	; 0x3c
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

  return status;
 8005154:	2317      	movs	r3, #23
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	781b      	ldrb	r3, [r3, #0]
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b006      	add	sp, #24
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	fffffbff 	.word	0xfffffbff

08005168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005172:	230f      	movs	r3, #15
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	223c      	movs	r2, #60	; 0x3c
 800517e:	5c9b      	ldrb	r3, [r3, r2]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIM_ConfigClockSource+0x20>
 8005184:	2302      	movs	r3, #2
 8005186:	e0bc      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x19a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	223c      	movs	r2, #60	; 0x3c
 800518c:	2101      	movs	r1, #1
 800518e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	223d      	movs	r2, #61	; 0x3d
 8005194:	2102      	movs	r1, #2
 8005196:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2277      	movs	r2, #119	; 0x77
 80051a4:	4393      	bics	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4a58      	ldr	r2, [pc, #352]	; (800530c <HAL_TIM_ConfigClockSource+0x1a4>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	0192      	lsls	r2, r2, #6
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d040      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0xde>
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	0192      	lsls	r2, r2, #6
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d900      	bls.n	80051ce <HAL_TIM_ConfigClockSource+0x66>
 80051cc:	e088      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	0152      	lsls	r2, r2, #5
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d100      	bne.n	80051d8 <HAL_TIM_ConfigClockSource+0x70>
 80051d6:	e088      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x182>
 80051d8:	2280      	movs	r2, #128	; 0x80
 80051da:	0152      	lsls	r2, r2, #5
 80051dc:	4293      	cmp	r3, r2
 80051de:	d900      	bls.n	80051e2 <HAL_TIM_ConfigClockSource+0x7a>
 80051e0:	e07e      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 80051e2:	2b70      	cmp	r3, #112	; 0x70
 80051e4:	d018      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0xb0>
 80051e6:	d900      	bls.n	80051ea <HAL_TIM_ConfigClockSource+0x82>
 80051e8:	e07a      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 80051ea:	2b60      	cmp	r3, #96	; 0x60
 80051ec:	d04f      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x126>
 80051ee:	d900      	bls.n	80051f2 <HAL_TIM_ConfigClockSource+0x8a>
 80051f0:	e076      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 80051f2:	2b50      	cmp	r3, #80	; 0x50
 80051f4:	d03b      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x106>
 80051f6:	d900      	bls.n	80051fa <HAL_TIM_ConfigClockSource+0x92>
 80051f8:	e072      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d057      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0x146>
 80051fe:	d900      	bls.n	8005202 <HAL_TIM_ConfigClockSource+0x9a>
 8005200:	e06e      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 8005202:	2b30      	cmp	r3, #48	; 0x30
 8005204:	d063      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 8005206:	d86b      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d060      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 800520c:	d868      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d05d      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 8005212:	2b10      	cmp	r3, #16
 8005214:	d05b      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x166>
 8005216:	e063      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6899      	ldr	r1, [r3, #8]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f000 fb88 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2277      	movs	r2, #119	; 0x77
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	609a      	str	r2, [r3, #8]
      break;
 8005244:	e052      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f000 fb71 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2180      	movs	r1, #128	; 0x80
 8005266:	01c9      	lsls	r1, r1, #7
 8005268:	430a      	orrs	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
      break;
 800526c:	e03e      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	001a      	movs	r2, r3
 800527c:	f000 fae4 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2150      	movs	r1, #80	; 0x50
 8005286:	0018      	movs	r0, r3
 8005288:	f000 fb3e 	bl	8005908 <TIM_ITRx_SetConfig>
      break;
 800528c:	e02e      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	001a      	movs	r2, r3
 800529c:	f000 fb02 	bl	80058a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2160      	movs	r1, #96	; 0x60
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 fb2e 	bl	8005908 <TIM_ITRx_SetConfig>
      break;
 80052ac:	e01e      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	001a      	movs	r2, r3
 80052bc:	f000 fac4 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 fb1e 	bl	8005908 <TIM_ITRx_SetConfig>
      break;
 80052cc:	e00e      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	0019      	movs	r1, r3
 80052d8:	0010      	movs	r0, r2
 80052da:	f000 fb15 	bl	8005908 <TIM_ITRx_SetConfig>
      break;
 80052de:	e005      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80052e0:	230f      	movs	r3, #15
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
      break;
 80052e8:	e000      	b.n	80052ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80052ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	223d      	movs	r2, #61	; 0x3d
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	223c      	movs	r2, #60	; 0x3c
 80052f8:	2100      	movs	r1, #0
 80052fa:	5499      	strb	r1, [r3, r2]

  return status;
 80052fc:	230f      	movs	r3, #15
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	781b      	ldrb	r3, [r3, #0]
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	ffff00ff 	.word	0xffff00ff

08005310 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a34      	ldr	r2, [pc, #208]	; (8005434 <TIM_Base_SetConfig+0xe4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d008      	beq.n	800537a <TIM_Base_SetConfig+0x2a>
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	05db      	lsls	r3, r3, #23
 800536e:	429a      	cmp	r2, r3
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x2a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a30      	ldr	r2, [pc, #192]	; (8005438 <TIM_Base_SetConfig+0xe8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2270      	movs	r2, #112	; 0x70
 800537e:	4393      	bics	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a29      	ldr	r2, [pc, #164]	; (8005434 <TIM_Base_SetConfig+0xe4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	05db      	lsls	r3, r3, #23
 800539a:	429a      	cmp	r2, r3
 800539c:	d013      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a25      	ldr	r2, [pc, #148]	; (8005438 <TIM_Base_SetConfig+0xe8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a24      	ldr	r2, [pc, #144]	; (800543c <TIM_Base_SetConfig+0xec>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a23      	ldr	r2, [pc, #140]	; (8005440 <TIM_Base_SetConfig+0xf0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <TIM_Base_SetConfig+0xf4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_Base_SetConfig+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <TIM_Base_SetConfig+0xf8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a20      	ldr	r2, [pc, #128]	; (800544c <TIM_Base_SetConfig+0xfc>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	4393      	bics	r3, r2
 80053de:	001a      	movs	r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <TIM_Base_SetConfig+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xce>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <TIM_Base_SetConfig+0xf0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xce>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <TIM_Base_SetConfig+0xf4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xce>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <TIM_Base_SetConfig+0xf8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d103      	bne.n	8005426 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	615a      	str	r2, [r3, #20]
}
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40002000 	.word	0x40002000
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800
 800544c:	fffffcff 	.word	0xfffffcff

08005450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	2201      	movs	r2, #1
 8005460:	4393      	bics	r3, r2
 8005462:	001a      	movs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2270      	movs	r2, #112	; 0x70
 800547e:	4393      	bics	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2203      	movs	r2, #3
 8005486:	4393      	bics	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2202      	movs	r2, #2
 8005498:	4393      	bics	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_OC1_SetConfig+0xf8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_OC1_SetConfig+0x76>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_OC1_SetConfig+0xfc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_OC1_SetConfig+0x76>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_OC1_SetConfig+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_OC1_SetConfig+0x76>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <TIM_OC1_SetConfig+0x104>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2208      	movs	r2, #8
 80054ca:	4393      	bics	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2204      	movs	r2, #4
 80054dc:	4393      	bics	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a19      	ldr	r2, [pc, #100]	; (8005548 <TIM_OC1_SetConfig+0xf8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC1_SetConfig+0xb0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a18      	ldr	r2, [pc, #96]	; (800554c <TIM_OC1_SetConfig+0xfc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0xb0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <TIM_OC1_SetConfig+0x100>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0xb0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <TIM_OC1_SetConfig+0x104>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d111      	bne.n	8005524 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <TIM_OC1_SetConfig+0x108>)
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4a14      	ldr	r2, [pc, #80]	; (800555c <TIM_OC1_SetConfig+0x10c>)
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b006      	add	sp, #24
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	fffffeff 	.word	0xfffffeff
 800555c:	fffffdff 	.word	0xfffffdff

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	2210      	movs	r2, #16
 8005570:	4393      	bics	r3, r2
 8005572:	001a      	movs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a2e      	ldr	r2, [pc, #184]	; (8005648 <TIM_OC2_SetConfig+0xe8>)
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <TIM_OC2_SetConfig+0xec>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4393      	bics	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <TIM_OC2_SetConfig+0xf0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	4393      	bics	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	4393      	bics	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <TIM_OC2_SetConfig+0xf0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_OC2_SetConfig+0x9e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <TIM_OC2_SetConfig+0xf4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC2_SetConfig+0x9e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <TIM_OC2_SetConfig+0xf8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC2_SetConfig+0x9e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <TIM_OC2_SetConfig+0xfc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d113      	bne.n	8005626 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <TIM_OC2_SetConfig+0x100>)
 8005602:	4013      	ands	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4a16      	ldr	r2, [pc, #88]	; (8005664 <TIM_OC2_SetConfig+0x104>)
 800560a:	4013      	ands	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b006      	add	sp, #24
 8005646:	bd80      	pop	{r7, pc}
 8005648:	ffff8fff 	.word	0xffff8fff
 800564c:	fffffcff 	.word	0xfffffcff
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800
 8005660:	fffffbff 	.word	0xfffffbff
 8005664:	fffff7ff 	.word	0xfffff7ff

08005668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4a35      	ldr	r2, [pc, #212]	; (800574c <TIM_OC3_SetConfig+0xe4>)
 8005678:	401a      	ands	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2270      	movs	r2, #112	; 0x70
 8005694:	4393      	bics	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2203      	movs	r2, #3
 800569c:	4393      	bics	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4a28      	ldr	r2, [pc, #160]	; (8005750 <TIM_OC3_SetConfig+0xe8>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a24      	ldr	r2, [pc, #144]	; (8005754 <TIM_OC3_SetConfig+0xec>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d10d      	bne.n	80056e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4a23      	ldr	r2, [pc, #140]	; (8005758 <TIM_OC3_SetConfig+0xf0>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <TIM_OC3_SetConfig+0xf4>)
 80056de:	4013      	ands	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <TIM_OC3_SetConfig+0xec>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_OC3_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <TIM_OC3_SetConfig+0xf8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_OC3_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <TIM_OC3_SetConfig+0xfc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_OC3_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <TIM_OC3_SetConfig+0x100>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d113      	bne.n	800572a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <TIM_OC3_SetConfig+0x104>)
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4a18      	ldr	r2, [pc, #96]	; (8005770 <TIM_OC3_SetConfig+0x108>)
 800570e:	4013      	ands	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	b006      	add	sp, #24
 800574a:	bd80      	pop	{r7, pc}
 800574c:	fffffeff 	.word	0xfffffeff
 8005750:	fffffdff 	.word	0xfffffdff
 8005754:	40012c00 	.word	0x40012c00
 8005758:	fffff7ff 	.word	0xfffff7ff
 800575c:	fffffbff 	.word	0xfffffbff
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	ffffefff 	.word	0xffffefff
 8005770:	ffffdfff 	.word	0xffffdfff

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	4a28      	ldr	r2, [pc, #160]	; (8005824 <TIM_OC4_SetConfig+0xb0>)
 8005784:	401a      	ands	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a22      	ldr	r2, [pc, #136]	; (8005828 <TIM_OC4_SetConfig+0xb4>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a21      	ldr	r2, [pc, #132]	; (800582c <TIM_OC4_SetConfig+0xb8>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <TIM_OC4_SetConfig+0xbc>)
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a19      	ldr	r2, [pc, #100]	; (8005834 <TIM_OC4_SetConfig+0xc0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_OC4_SetConfig+0x78>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <TIM_OC4_SetConfig+0xc4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_OC4_SetConfig+0x78>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <TIM_OC4_SetConfig+0xc8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC4_SetConfig+0x78>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <TIM_OC4_SetConfig+0xcc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d109      	bne.n	8005800 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <TIM_OC4_SetConfig+0xd0>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	019b      	lsls	r3, r3, #6
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	46bd      	mov	sp, r7
 800581e:	b006      	add	sp, #24
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	ffffefff 	.word	0xffffefff
 8005828:	ffff8fff 	.word	0xffff8fff
 800582c:	fffffcff 	.word	0xfffffcff
 8005830:	ffffdfff 	.word	0xffffdfff
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800
 8005844:	ffffbfff 	.word	0xffffbfff

08005848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	2201      	movs	r2, #1
 8005860:	4393      	bics	r3, r2
 8005862:	001a      	movs	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	22f0      	movs	r2, #240	; 0xf0
 8005872:	4393      	bics	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	220a      	movs	r2, #10
 8005884:	4393      	bics	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	46bd      	mov	sp, r7
 80058a0:	b006      	add	sp, #24
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	2210      	movs	r2, #16
 80058b6:	4393      	bics	r3, r2
 80058b8:	001a      	movs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <TIM_TI2_ConfigInputStage+0x60>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	031b      	lsls	r3, r3, #12
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	22a0      	movs	r2, #160	; 0xa0
 80058e0:	4393      	bics	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b006      	add	sp, #24
 8005900:	bd80      	pop	{r7, pc}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	ffff0fff 	.word	0xffff0fff

08005908 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2270      	movs	r2, #112	; 0x70
 800591c:	4393      	bics	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	2207      	movs	r2, #7
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	609a      	str	r2, [r3, #8]
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	46bd      	mov	sp, r7
 8005936:	b004      	add	sp, #16
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <TIM_ETR_SetConfig+0x3c>)
 8005954:	4013      	ands	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	431a      	orrs	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b006      	add	sp, #24
 8005976:	bd80      	pop	{r7, pc}
 8005978:	ffff00ff 	.word	0xffff00ff

0800597c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	221f      	movs	r2, #31
 800598c:	4013      	ands	r3, r2
 800598e:	2201      	movs	r2, #1
 8005990:	409a      	lsls	r2, r3
 8005992:	0013      	movs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	43d2      	mvns	r2, r2
 800599e:	401a      	ands	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	211f      	movs	r1, #31
 80059ac:	400b      	ands	r3, r1
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4099      	lsls	r1, r3
 80059b2:	000b      	movs	r3, r1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	b006      	add	sp, #24
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	223c      	movs	r2, #60	; 0x3c
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e047      	b.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	223c      	movs	r2, #60	; 0x3c
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223d      	movs	r2, #61	; 0x3d
 80059e8:	2102      	movs	r1, #2
 80059ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2270      	movs	r2, #112	; 0x70
 8005a00:	4393      	bics	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00f      	beq.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	05db      	lsls	r3, r3, #23
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d009      	beq.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	4393      	bics	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	223d      	movs	r2, #61	; 0x3d
 8005a5e:	2101      	movs	r1, #1
 8005a60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	223c      	movs	r2, #60	; 0x3c
 8005a66:	2100      	movs	r1, #0
 8005a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b004      	add	sp, #16
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40014000 	.word	0x40014000

08005a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	223c      	movs	r2, #60	; 0x3c
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e03e      	b.n	8005b1a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	223c      	movs	r2, #60	; 0x3c
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	4393      	bics	r3, r2
 8005aaa:	001a      	movs	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005ab8:	401a      	ands	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005af0:	401a      	ands	r2, r3
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005afe:	401a      	ands	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	223c      	movs	r2, #60	; 0x3c
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b004      	add	sp, #16
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	fffffcff 	.word	0xfffffcff
 8005b28:	fffffbff 	.word	0xfffffbff
 8005b2c:	fffff7ff 	.word	0xfffff7ff
 8005b30:	ffffefff 	.word	0xffffefff
 8005b34:	ffffdfff 	.word	0xffffdfff
 8005b38:	ffffbfff 	.word	0xffffbfff

08005b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b44:	46c0      	nop			; (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b54:	46c0      	nop			; (mov r8, r8)
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b002      	add	sp, #8
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e044      	b.n	8005bf8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2274      	movs	r2, #116	; 0x74
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fb ff01 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2224      	movs	r2, #36	; 0x24
 8005b8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2101      	movs	r1, #1
 8005b98:	438a      	bics	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 fbce 	bl	8006340 <UART_SetConfig>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e024      	b.n	8005bf8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 fd01 	bl	80065c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	490d      	ldr	r1, [pc, #52]	; (8005c00 <HAL_UART_Init+0xa4>)
 8005bca:	400a      	ands	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	212a      	movs	r1, #42	; 0x2a
 8005bda:	438a      	bics	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2101      	movs	r1, #1
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 fd99 	bl	8006728 <UART_CheckIdleState>
 8005bf6:	0003      	movs	r3, r0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	ffffb7ff 	.word	0xffffb7ff

08005c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d000      	beq.n	8005c1e <HAL_UART_Transmit+0x1a>
 8005c1c:	e096      	b.n	8005d4c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_UART_Transmit+0x28>
 8005c24:	1dbb      	adds	r3, r7, #6
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e08e      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	015b      	lsls	r3, r3, #5
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d109      	bne.n	8005c50 <HAL_UART_Transmit+0x4c>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2201      	movs	r2, #1
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d001      	beq.n	8005c50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e07e      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2274      	movs	r2, #116	; 0x74
 8005c54:	5c9b      	ldrb	r3, [r3, r2]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Transmit+0x5a>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e077      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2274      	movs	r2, #116	; 0x74
 8005c62:	2101      	movs	r1, #1
 8005c64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2221      	movs	r2, #33	; 0x21
 8005c72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c74:	f7fb ffbc 	bl	8001bf0 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1dba      	adds	r2, r7, #6
 8005c80:	2150      	movs	r1, #80	; 0x50
 8005c82:	8812      	ldrh	r2, [r2, #0]
 8005c84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1dba      	adds	r2, r7, #6
 8005c8a:	2152      	movs	r1, #82	; 0x52
 8005c8c:	8812      	ldrh	r2, [r2, #0]
 8005c8e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	015b      	lsls	r3, r3, #5
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d108      	bne.n	8005cae <HAL_UART_Transmit+0xaa>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	e003      	b.n	8005cb6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2274      	movs	r2, #116	; 0x74
 8005cba:	2100      	movs	r1, #0
 8005cbc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005cbe:	e02d      	b.n	8005d1c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	0013      	movs	r3, r2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	f000 fd73 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	1e03      	subs	r3, r0, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e039      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	05d2      	lsls	r2, r2, #23
 8005cea:	0dd2      	lsrs	r2, r2, #23
 8005cec:	b292      	uxth	r2, r2
 8005cee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e008      	b.n	8005d0a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	781a      	ldrb	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2252      	movs	r2, #82	; 0x52
 8005d0e:	5a9b      	ldrh	r3, [r3, r2]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b299      	uxth	r1, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2252      	movs	r2, #82	; 0x52
 8005d1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2252      	movs	r2, #82	; 0x52
 8005d20:	5a9b      	ldrh	r3, [r3, r2]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1cb      	bne.n	8005cc0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	0013      	movs	r3, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	2140      	movs	r1, #64	; 0x40
 8005d36:	f000 fd3f 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8005d3a:	1e03      	subs	r3, r0, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e005      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
  }
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b008      	add	sp, #32
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b0ab      	sub	sp, #172	; 0xac
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	22a4      	movs	r2, #164	; 0xa4
 8005d68:	18b9      	adds	r1, r7, r2
 8005d6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	20a0      	movs	r0, #160	; 0xa0
 8005d74:	1839      	adds	r1, r7, r0
 8005d76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	219c      	movs	r1, #156	; 0x9c
 8005d80:	1879      	adds	r1, r7, r1
 8005d82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d84:	0011      	movs	r1, r2
 8005d86:	18bb      	adds	r3, r7, r2
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a99      	ldr	r2, [pc, #612]	; (8005ff0 <HAL_UART_IRQHandler+0x298>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2298      	movs	r2, #152	; 0x98
 8005d90:	18bc      	adds	r4, r7, r2
 8005d92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005d94:	18bb      	adds	r3, r7, r2
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d114      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2220      	movs	r2, #32
 8005da2:	4013      	ands	r3, r2
 8005da4:	d00f      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005da6:	183b      	adds	r3, r7, r0
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2220      	movs	r2, #32
 8005dac:	4013      	ands	r3, r2
 8005dae:	d00a      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d100      	bne.n	8005dba <HAL_UART_IRQHandler+0x62>
 8005db8:	e296      	b.n	80062e8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	4798      	blx	r3
      }
      return;
 8005dc4:	e290      	b.n	80062e8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dc6:	2398      	movs	r3, #152	; 0x98
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d100      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x7a>
 8005dd0:	e114      	b.n	8005ffc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005dd2:	239c      	movs	r3, #156	; 0x9c
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d106      	bne.n	8005dec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dde:	23a0      	movs	r3, #160	; 0xa0
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a83      	ldr	r2, [pc, #524]	; (8005ff4 <HAL_UART_IRQHandler+0x29c>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	d100      	bne.n	8005dec <HAL_UART_IRQHandler+0x94>
 8005dea:	e107      	b.n	8005ffc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dec:	23a4      	movs	r3, #164	; 0xa4
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4013      	ands	r3, r2
 8005df6:	d012      	beq.n	8005e1e <HAL_UART_IRQHandler+0xc6>
 8005df8:	23a0      	movs	r3, #160	; 0xa0
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4013      	ands	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2280      	movs	r2, #128	; 0x80
 8005e12:	589b      	ldr	r3, [r3, r2]
 8005e14:	2201      	movs	r2, #1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2180      	movs	r1, #128	; 0x80
 8005e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e1e:	23a4      	movs	r3, #164	; 0xa4
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2202      	movs	r2, #2
 8005e26:	4013      	ands	r3, r2
 8005e28:	d011      	beq.n	8005e4e <HAL_UART_IRQHandler+0xf6>
 8005e2a:	239c      	movs	r3, #156	; 0x9c
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2201      	movs	r2, #1
 8005e32:	4013      	ands	r3, r2
 8005e34:	d00b      	beq.n	8005e4e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	589b      	ldr	r3, [r3, r2]
 8005e44:	2204      	movs	r2, #4
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e4e:	23a4      	movs	r3, #164	; 0xa4
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2204      	movs	r2, #4
 8005e56:	4013      	ands	r3, r2
 8005e58:	d011      	beq.n	8005e7e <HAL_UART_IRQHandler+0x126>
 8005e5a:	239c      	movs	r3, #156	; 0x9c
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2280      	movs	r2, #128	; 0x80
 8005e72:	589b      	ldr	r3, [r3, r2]
 8005e74:	2202      	movs	r2, #2
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e7e:	23a4      	movs	r3, #164	; 0xa4
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	4013      	ands	r3, r2
 8005e88:	d017      	beq.n	8005eba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e8a:	23a0      	movs	r3, #160	; 0xa0
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2220      	movs	r2, #32
 8005e92:	4013      	ands	r3, r2
 8005e94:	d105      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e96:	239c      	movs	r3, #156	; 0x9c
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	589b      	ldr	r3, [r3, r2]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005eba:	23a4      	movs	r3, #164	; 0xa4
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x198>
 8005ec8:	23a0      	movs	r3, #160	; 0xa0
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	2380      	movs	r3, #128	; 0x80
 8005ed0:	04db      	lsls	r3, r3, #19
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2280      	movs	r2, #128	; 0x80
 8005edc:	0112      	lsls	r2, r2, #4
 8005ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	589b      	ldr	r3, [r3, r2]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2180      	movs	r1, #128	; 0x80
 8005eee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2280      	movs	r2, #128	; 0x80
 8005ef4:	589b      	ldr	r3, [r3, r2]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d100      	bne.n	8005efc <HAL_UART_IRQHandler+0x1a4>
 8005efa:	e1f7      	b.n	80062ec <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005efc:	23a4      	movs	r3, #164	; 0xa4
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2220      	movs	r2, #32
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f08:	23a0      	movs	r3, #160	; 0xa0
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	4013      	ands	r3, r2
 8005f12:	d008      	beq.n	8005f26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	0010      	movs	r0, r2
 8005f24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	589b      	ldr	r3, [r3, r2]
 8005f2c:	2194      	movs	r1, #148	; 0x94
 8005f2e:	187a      	adds	r2, r7, r1
 8005f30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2240      	movs	r2, #64	; 0x40
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d004      	beq.n	8005f4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2228      	movs	r2, #40	; 0x28
 8005f46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f48:	d047      	beq.n	8005fda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 fcf7 	bl	8006940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2240      	movs	r2, #64	; 0x40
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d137      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f60:	f3ef 8310 	mrs	r3, PRIMASK
 8005f64:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f68:	2090      	movs	r0, #144	; 0x90
 8005f6a:	183a      	adds	r2, r7, r0
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			; (mov r8, r8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2140      	movs	r1, #64	; 0x40
 8005f86:	438a      	bics	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	183b      	adds	r3, r7, r0
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f92:	f383 8810 	msr	PRIMASK, r3
}
 8005f96:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d012      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <HAL_UART_IRQHandler+0x2a0>)
 8005fa6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	0018      	movs	r0, r3
 8005fae:	f7fc fc77 	bl	80028a0 <HAL_DMA_Abort_IT>
 8005fb2:	1e03      	subs	r3, r0, #0
 8005fb4:	d01a      	beq.n	8005fec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e012      	b.n	8005fec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 f9a5 	bl	8006318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	e00d      	b.n	8005fec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 f9a0 	bl	8006318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	e008      	b.n	8005fec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f000 f99b 	bl	8006318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005fea:	e17f      	b.n	80062ec <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	46c0      	nop			; (mov r8, r8)
    return;
 8005fee:	e17d      	b.n	80062ec <HAL_UART_IRQHandler+0x594>
 8005ff0:	0000080f 	.word	0x0000080f
 8005ff4:	04000120 	.word	0x04000120
 8005ff8:	08006a05 	.word	0x08006a05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2b01      	cmp	r3, #1
 8006002:	d000      	beq.n	8006006 <HAL_UART_IRQHandler+0x2ae>
 8006004:	e131      	b.n	800626a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006006:	23a4      	movs	r3, #164	; 0xa4
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2210      	movs	r2, #16
 800600e:	4013      	ands	r3, r2
 8006010:	d100      	bne.n	8006014 <HAL_UART_IRQHandler+0x2bc>
 8006012:	e12a      	b.n	800626a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006014:	23a0      	movs	r3, #160	; 0xa0
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2210      	movs	r2, #16
 800601c:	4013      	ands	r3, r2
 800601e:	d100      	bne.n	8006022 <HAL_UART_IRQHandler+0x2ca>
 8006020:	e123      	b.n	800626a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2210      	movs	r2, #16
 8006028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	4013      	ands	r3, r2
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d000      	beq.n	800603a <HAL_UART_IRQHandler+0x2e2>
 8006038:	e09b      	b.n	8006172 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	217e      	movs	r1, #126	; 0x7e
 8006044:	187b      	adds	r3, r7, r1
 8006046:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006048:	187b      	adds	r3, r7, r1
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d100      	bne.n	8006052 <HAL_UART_IRQHandler+0x2fa>
 8006050:	e14e      	b.n	80062f0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2258      	movs	r2, #88	; 0x58
 8006056:	5a9b      	ldrh	r3, [r3, r2]
 8006058:	187a      	adds	r2, r7, r1
 800605a:	8812      	ldrh	r2, [r2, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d300      	bcc.n	8006062 <HAL_UART_IRQHandler+0x30a>
 8006060:	e146      	b.n	80062f0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	187a      	adds	r2, r7, r1
 8006066:	215a      	movs	r1, #90	; 0x5a
 8006068:	8812      	ldrh	r2, [r2, #0]
 800606a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	2b20      	cmp	r3, #32
 8006074:	d06e      	beq.n	8006154 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006080:	2301      	movs	r3, #1
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	f383 8810 	msr	PRIMASK, r3
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	499a      	ldr	r1, [pc, #616]	; (8006300 <HAL_UART_IRQHandler+0x5a8>)
 8006098:	400a      	ands	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80060ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	677b      	str	r3, [r7, #116]	; 0x74
 80060b2:	2301      	movs	r3, #1
 80060b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	438a      	bics	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
 80060ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060da:	f3ef 8310 	mrs	r3, PRIMASK
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	673b      	str	r3, [r7, #112]	; 0x70
 80060e4:	2301      	movs	r3, #1
 80060e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2140      	movs	r1, #64	; 0x40
 80060fc:	438a      	bics	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006102:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006106:	f383 8810 	msr	PRIMASK, r3
}
 800610a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006118:	f3ef 8310 	mrs	r3, PRIMASK
 800611c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800611e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006122:	2301      	movs	r3, #1
 8006124:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006128:	f383 8810 	msr	PRIMASK, r3
}
 800612c:	46c0      	nop			; (mov r8, r8)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2110      	movs	r1, #16
 800613a:	438a      	bics	r2, r1
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006140:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006144:	f383 8810 	msr	PRIMASK, r3
}
 8006148:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	0018      	movs	r0, r3
 8006150:	f7fc fb6e 	bl	8002830 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2258      	movs	r2, #88	; 0x58
 8006158:	5a9a      	ldrh	r2, [r3, r2]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	215a      	movs	r1, #90	; 0x5a
 800615e:	5a5b      	ldrh	r3, [r3, r1]
 8006160:	b29b      	uxth	r3, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	b29a      	uxth	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f000 f8dc 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006170:	e0be      	b.n	80062f0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2258      	movs	r2, #88	; 0x58
 8006176:	5a99      	ldrh	r1, [r3, r2]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	225a      	movs	r2, #90	; 0x5a
 800617c:	5a9b      	ldrh	r3, [r3, r2]
 800617e:	b29a      	uxth	r2, r3
 8006180:	208e      	movs	r0, #142	; 0x8e
 8006182:	183b      	adds	r3, r7, r0
 8006184:	1a8a      	subs	r2, r1, r2
 8006186:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	225a      	movs	r2, #90	; 0x5a
 800618c:	5a9b      	ldrh	r3, [r3, r2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d100      	bne.n	8006196 <HAL_UART_IRQHandler+0x43e>
 8006194:	e0ae      	b.n	80062f4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006196:	183b      	adds	r3, r7, r0
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d100      	bne.n	80061a0 <HAL_UART_IRQHandler+0x448>
 800619e:	e0a9      	b.n	80062f4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a0:	f3ef 8310 	mrs	r3, PRIMASK
 80061a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a8:	2488      	movs	r4, #136	; 0x88
 80061aa:	193a      	adds	r2, r7, r4
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	2301      	movs	r3, #1
 80061b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f383 8810 	msr	PRIMASK, r3
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	494f      	ldr	r1, [pc, #316]	; (8006304 <HAL_UART_IRQHandler+0x5ac>)
 80061c6:	400a      	ands	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	193b      	adds	r3, r7, r4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f383 8810 	msr	PRIMASK, r3
}
 80061d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d8:	f3ef 8310 	mrs	r3, PRIMASK
 80061dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80061de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e0:	2484      	movs	r4, #132	; 0x84
 80061e2:	193a      	adds	r2, r7, r4
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2101      	movs	r1, #1
 80061fe:	438a      	bics	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	193b      	adds	r3, r7, r4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	f383 8810 	msr	PRIMASK, r3
}
 800620e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006222:	f3ef 8310 	mrs	r3, PRIMASK
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622a:	2480      	movs	r4, #128	; 0x80
 800622c:	193a      	adds	r2, r7, r4
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	2301      	movs	r3, #1
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	f383 8810 	msr	PRIMASK, r3
}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2110      	movs	r1, #16
 8006248:	438a      	bics	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	193b      	adds	r3, r7, r4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	f383 8810 	msr	PRIMASK, r3
}
 8006258:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800625a:	183b      	adds	r3, r7, r0
 800625c:	881a      	ldrh	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0011      	movs	r1, r2
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f860 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006268:	e044      	b.n	80062f4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800626a:	23a4      	movs	r3, #164	; 0xa4
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	035b      	lsls	r3, r3, #13
 8006274:	4013      	ands	r3, r2
 8006276:	d010      	beq.n	800629a <HAL_UART_IRQHandler+0x542>
 8006278:	239c      	movs	r3, #156	; 0x9c
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	03db      	lsls	r3, r3, #15
 8006282:	4013      	ands	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	0352      	lsls	r2, r2, #13
 800628e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 fbf8 	bl	8006a88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006298:	e02f      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800629a:	23a4      	movs	r3, #164	; 0xa4
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2280      	movs	r2, #128	; 0x80
 80062a2:	4013      	ands	r3, r2
 80062a4:	d00f      	beq.n	80062c6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062a6:	23a0      	movs	r3, #160	; 0xa0
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2280      	movs	r2, #128	; 0x80
 80062ae:	4013      	ands	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01e      	beq.n	80062f8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	0010      	movs	r0, r2
 80062c2:	4798      	blx	r3
    }
    return;
 80062c4:	e018      	b.n	80062f8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062c6:	23a4      	movs	r3, #164	; 0xa4
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	4013      	ands	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_UART_IRQHandler+0x5a2>
 80062d2:	23a0      	movs	r3, #160	; 0xa0
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	4013      	ands	r3, r2
 80062dc:	d00d      	beq.n	80062fa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	0018      	movs	r0, r3
 80062e2:	f000 fba6 	bl	8006a32 <UART_EndTransmit_IT>
    return;
 80062e6:	e008      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80062e8:	46c0      	nop			; (mov r8, r8)
 80062ea:	e006      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80062ec:	46c0      	nop			; (mov r8, r8)
 80062ee:	e004      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	e002      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	e000      	b.n	80062fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80062f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b02b      	add	sp, #172	; 0xac
 80062fe:	bd90      	pop	{r4, r7, pc}
 8006300:	fffffeff 	.word	0xfffffeff
 8006304:	fffffedf 	.word	0xfffffedf

08006308 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b002      	add	sp, #8
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006320:	46c0      	nop			; (mov r8, r8)
 8006322:	46bd      	mov	sp, r7
 8006324:	b002      	add	sp, #8
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	000a      	movs	r2, r1
 8006332:	1cbb      	adds	r3, r7, #2
 8006334:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b002      	add	sp, #8
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006348:	231e      	movs	r3, #30
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a8d      	ldr	r2, [pc, #564]	; (80065a4 <UART_SetConfig+0x264>)
 8006370:	4013      	ands	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4a88      	ldr	r2, [pc, #544]	; (80065a8 <UART_SetConfig+0x268>)
 8006386:	4013      	ands	r3, r2
 8006388:	0019      	movs	r1, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a7f      	ldr	r2, [pc, #508]	; (80065ac <UART_SetConfig+0x26c>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	0019      	movs	r1, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7b      	ldr	r2, [pc, #492]	; (80065b0 <UART_SetConfig+0x270>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d127      	bne.n	8006416 <UART_SetConfig+0xd6>
 80063c6:	4b7b      	ldr	r3, [pc, #492]	; (80065b4 <UART_SetConfig+0x274>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	2203      	movs	r2, #3
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d00d      	beq.n	80063ee <UART_SetConfig+0xae>
 80063d2:	d81b      	bhi.n	800640c <UART_SetConfig+0xcc>
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d014      	beq.n	8006402 <UART_SetConfig+0xc2>
 80063d8:	d818      	bhi.n	800640c <UART_SetConfig+0xcc>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <UART_SetConfig+0xa4>
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d00a      	beq.n	80063f8 <UART_SetConfig+0xb8>
 80063e2:	e013      	b.n	800640c <UART_SetConfig+0xcc>
 80063e4:	231f      	movs	r3, #31
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e021      	b.n	8006432 <UART_SetConfig+0xf2>
 80063ee:	231f      	movs	r3, #31
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e01c      	b.n	8006432 <UART_SetConfig+0xf2>
 80063f8:	231f      	movs	r3, #31
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	2204      	movs	r2, #4
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e017      	b.n	8006432 <UART_SetConfig+0xf2>
 8006402:	231f      	movs	r3, #31
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	2208      	movs	r2, #8
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e012      	b.n	8006432 <UART_SetConfig+0xf2>
 800640c:	231f      	movs	r3, #31
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2210      	movs	r2, #16
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	e00d      	b.n	8006432 <UART_SetConfig+0xf2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a67      	ldr	r2, [pc, #412]	; (80065b8 <UART_SetConfig+0x278>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d104      	bne.n	800642a <UART_SetConfig+0xea>
 8006420:	231f      	movs	r3, #31
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e003      	b.n	8006432 <UART_SetConfig+0xf2>
 800642a:	231f      	movs	r3, #31
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2210      	movs	r2, #16
 8006430:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	429a      	cmp	r2, r3
 800643c:	d15d      	bne.n	80064fa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800643e:	231f      	movs	r3, #31
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b08      	cmp	r3, #8
 8006446:	d015      	beq.n	8006474 <UART_SetConfig+0x134>
 8006448:	dc18      	bgt.n	800647c <UART_SetConfig+0x13c>
 800644a:	2b04      	cmp	r3, #4
 800644c:	d00d      	beq.n	800646a <UART_SetConfig+0x12a>
 800644e:	dc15      	bgt.n	800647c <UART_SetConfig+0x13c>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <UART_SetConfig+0x11a>
 8006454:	2b02      	cmp	r3, #2
 8006456:	d005      	beq.n	8006464 <UART_SetConfig+0x124>
 8006458:	e010      	b.n	800647c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645a:	f7fd fe87 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 800645e:	0003      	movs	r3, r0
 8006460:	61bb      	str	r3, [r7, #24]
        break;
 8006462:	e012      	b.n	800648a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006464:	4b55      	ldr	r3, [pc, #340]	; (80065bc <UART_SetConfig+0x27c>)
 8006466:	61bb      	str	r3, [r7, #24]
        break;
 8006468:	e00f      	b.n	800648a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646a:	f7fd fe11 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800646e:	0003      	movs	r3, r0
 8006470:	61bb      	str	r3, [r7, #24]
        break;
 8006472:	e00a      	b.n	800648a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	61bb      	str	r3, [r7, #24]
        break;
 800647a:	e006      	b.n	800648a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006480:	231e      	movs	r3, #30
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	2201      	movs	r2, #1
 8006486:	701a      	strb	r2, [r3, #0]
        break;
 8006488:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d100      	bne.n	8006492 <UART_SetConfig+0x152>
 8006490:	e07b      	b.n	800658a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	005a      	lsls	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	18d2      	adds	r2, r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	0019      	movs	r1, r3
 80064a4:	0010      	movs	r0, r2
 80064a6:	f7f9 fe2f 	bl	8000108 <__udivsi3>
 80064aa:	0003      	movs	r3, r0
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d91c      	bls.n	80064f0 <UART_SetConfig+0x1b0>
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	025b      	lsls	r3, r3, #9
 80064bc:	429a      	cmp	r2, r3
 80064be:	d217      	bcs.n	80064f0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	200e      	movs	r0, #14
 80064c6:	183b      	adds	r3, r7, r0
 80064c8:	210f      	movs	r1, #15
 80064ca:	438a      	bics	r2, r1
 80064cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2207      	movs	r2, #7
 80064d6:	4013      	ands	r3, r2
 80064d8:	b299      	uxth	r1, r3
 80064da:	183b      	adds	r3, r7, r0
 80064dc:	183a      	adds	r2, r7, r0
 80064de:	8812      	ldrh	r2, [r2, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	183a      	adds	r2, r7, r0
 80064ea:	8812      	ldrh	r2, [r2, #0]
 80064ec:	60da      	str	r2, [r3, #12]
 80064ee:	e04c      	b.n	800658a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80064f0:	231e      	movs	r3, #30
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e047      	b.n	800658a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fa:	231f      	movs	r3, #31
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d015      	beq.n	8006530 <UART_SetConfig+0x1f0>
 8006504:	dc18      	bgt.n	8006538 <UART_SetConfig+0x1f8>
 8006506:	2b04      	cmp	r3, #4
 8006508:	d00d      	beq.n	8006526 <UART_SetConfig+0x1e6>
 800650a:	dc15      	bgt.n	8006538 <UART_SetConfig+0x1f8>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <UART_SetConfig+0x1d6>
 8006510:	2b02      	cmp	r3, #2
 8006512:	d005      	beq.n	8006520 <UART_SetConfig+0x1e0>
 8006514:	e010      	b.n	8006538 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006516:	f7fd fe29 	bl	800416c <HAL_RCC_GetPCLK1Freq>
 800651a:	0003      	movs	r3, r0
 800651c:	61bb      	str	r3, [r7, #24]
        break;
 800651e:	e012      	b.n	8006546 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006520:	4b26      	ldr	r3, [pc, #152]	; (80065bc <UART_SetConfig+0x27c>)
 8006522:	61bb      	str	r3, [r7, #24]
        break;
 8006524:	e00f      	b.n	8006546 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006526:	f7fd fdb3 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800652a:	0003      	movs	r3, r0
 800652c:	61bb      	str	r3, [r7, #24]
        break;
 800652e:	e00a      	b.n	8006546 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	61bb      	str	r3, [r7, #24]
        break;
 8006536:	e006      	b.n	8006546 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800653c:	231e      	movs	r3, #30
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
        break;
 8006544:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	085a      	lsrs	r2, r3, #1
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	18d2      	adds	r2, r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	0019      	movs	r1, r3
 800655c:	0010      	movs	r0, r2
 800655e:	f7f9 fdd3 	bl	8000108 <__udivsi3>
 8006562:	0003      	movs	r3, r0
 8006564:	b29b      	uxth	r3, r3
 8006566:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b0f      	cmp	r3, #15
 800656c:	d909      	bls.n	8006582 <UART_SetConfig+0x242>
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	025b      	lsls	r3, r3, #9
 8006574:	429a      	cmp	r2, r3
 8006576:	d204      	bcs.n	8006582 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e003      	b.n	800658a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006582:	231e      	movs	r3, #30
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006596:	231e      	movs	r3, #30
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	781b      	ldrb	r3, [r3, #0]
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b008      	add	sp, #32
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	ffff69f3 	.word	0xffff69f3
 80065a8:	ffffcfff 	.word	0xffffcfff
 80065ac:	fffff4ff 	.word	0xfffff4ff
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	007a1200 	.word	0x007a1200

080065c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2201      	movs	r2, #1
 80065ce:	4013      	ands	r3, r2
 80065d0:	d00b      	beq.n	80065ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <UART_AdvFeatureConfig+0x144>)
 80065da:	4013      	ands	r3, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2202      	movs	r2, #2
 80065f0:	4013      	ands	r3, r2
 80065f2:	d00b      	beq.n	800660c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4a43      	ldr	r2, [pc, #268]	; (8006708 <UART_AdvFeatureConfig+0x148>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	0019      	movs	r1, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2204      	movs	r2, #4
 8006612:	4013      	ands	r3, r2
 8006614:	d00b      	beq.n	800662e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a3b      	ldr	r2, [pc, #236]	; (800670c <UART_AdvFeatureConfig+0x14c>)
 800661e:	4013      	ands	r3, r2
 8006620:	0019      	movs	r1, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	2208      	movs	r2, #8
 8006634:	4013      	ands	r3, r2
 8006636:	d00b      	beq.n	8006650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	4a34      	ldr	r2, [pc, #208]	; (8006710 <UART_AdvFeatureConfig+0x150>)
 8006640:	4013      	ands	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2210      	movs	r2, #16
 8006656:	4013      	ands	r3, r2
 8006658:	d00b      	beq.n	8006672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <UART_AdvFeatureConfig+0x154>)
 8006662:	4013      	ands	r3, r2
 8006664:	0019      	movs	r1, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2220      	movs	r2, #32
 8006678:	4013      	ands	r3, r2
 800667a:	d00b      	beq.n	8006694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <UART_AdvFeatureConfig+0x158>)
 8006684:	4013      	ands	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	2240      	movs	r2, #64	; 0x40
 800669a:	4013      	ands	r3, r2
 800669c:	d01d      	beq.n	80066da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <UART_AdvFeatureConfig+0x15c>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	0019      	movs	r1, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	035b      	lsls	r3, r3, #13
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10b      	bne.n	80066da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <UART_AdvFeatureConfig+0x160>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	0019      	movs	r1, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	4013      	ands	r3, r2
 80066e2:	d00b      	beq.n	80066fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4a0e      	ldr	r2, [pc, #56]	; (8006724 <UART_AdvFeatureConfig+0x164>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	0019      	movs	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }
}
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	46bd      	mov	sp, r7
 8006700:	b002      	add	sp, #8
 8006702:	bd80      	pop	{r7, pc}
 8006704:	fffdffff 	.word	0xfffdffff
 8006708:	fffeffff 	.word	0xfffeffff
 800670c:	fffbffff 	.word	0xfffbffff
 8006710:	ffff7fff 	.word	0xffff7fff
 8006714:	ffffefff 	.word	0xffffefff
 8006718:	ffffdfff 	.word	0xffffdfff
 800671c:	ffefffff 	.word	0xffefffff
 8006720:	ff9fffff 	.word	0xff9fffff
 8006724:	fff7ffff 	.word	0xfff7ffff

08006728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	2100      	movs	r1, #0
 8006736:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006738:	f7fb fa5a 	bl	8001bf0 <HAL_GetTick>
 800673c:	0003      	movs	r3, r0
 800673e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2208      	movs	r2, #8
 8006748:	4013      	ands	r3, r2
 800674a:	2b08      	cmp	r3, #8
 800674c:	d10c      	bne.n	8006768 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	0391      	lsls	r1, r2, #14
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <UART_CheckIdleState+0x8c>)
 8006758:	9200      	str	r2, [sp, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	f000 f82c 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8006760:	1e03      	subs	r3, r0, #0
 8006762:	d001      	beq.n	8006768 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e021      	b.n	80067ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2204      	movs	r2, #4
 8006770:	4013      	ands	r3, r2
 8006772:	2b04      	cmp	r3, #4
 8006774:	d10c      	bne.n	8006790 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	03d1      	lsls	r1, r2, #15
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <UART_CheckIdleState+0x8c>)
 8006780:	9200      	str	r2, [sp, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	f000 f818 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8006788:	1e03      	subs	r3, r0, #0
 800678a:	d001      	beq.n	8006790 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e00d      	b.n	80067ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2274      	movs	r2, #116	; 0x74
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	0018      	movs	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b004      	add	sp, #16
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	01ffffff 	.word	0x01ffffff

080067b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b094      	sub	sp, #80	; 0x50
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	1dfb      	adds	r3, r7, #7
 80067c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c8:	e0a3      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067cc:	3301      	adds	r3, #1
 80067ce:	d100      	bne.n	80067d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80067d0:	e09f      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fb fa0d 	bl	8001bf0 <HAL_GetTick>
 80067d6:	0002      	movs	r2, r0
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d13d      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e8:	f3ef 8310 	mrs	r3, PRIMASK
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
 80067f2:	2301      	movs	r3, #1
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	f383 8810 	msr	PRIMASK, r3
}
 80067fc:	46c0      	nop			; (mov r8, r8)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	494c      	ldr	r1, [pc, #304]	; (800693c <UART_WaitOnFlagUntilTimeout+0x184>)
 800680a:	400a      	ands	r2, r1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f383 8810 	msr	PRIMASK, r3
}
 8006818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800681a:	f3ef 8310 	mrs	r3, PRIMASK
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
 8006824:	2301      	movs	r3, #1
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	f383 8810 	msr	PRIMASK, r3
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2101      	movs	r1, #1
 800683c:	438a      	bics	r2, r1
 800683e:	609a      	str	r2, [r3, #8]
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	f383 8810 	msr	PRIMASK, r3
}
 800684a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2274      	movs	r2, #116	; 0x74
 800685c:	2100      	movs	r1, #0
 800685e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e067      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2204      	movs	r2, #4
 800686c:	4013      	ands	r3, r2
 800686e:	d050      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	2380      	movs	r3, #128	; 0x80
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	401a      	ands	r2, r3
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	429a      	cmp	r2, r3
 8006882:	d146      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2280      	movs	r2, #128	; 0x80
 800688a:	0112      	lsls	r2, r2, #4
 800688c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800688e:	f3ef 8310 	mrs	r3, PRIMASK
 8006892:	613b      	str	r3, [r7, #16]
  return(result);
 8006894:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f383 8810 	msr	PRIMASK, r3
}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4923      	ldr	r1, [pc, #140]	; (800693c <UART_WaitOnFlagUntilTimeout+0x184>)
 80068b0:	400a      	ands	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f383 8810 	msr	PRIMASK, r3
}
 80068be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c0:	f3ef 8310 	mrs	r3, PRIMASK
 80068c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80068c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ca:	2301      	movs	r3, #1
 80068cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f383 8810 	msr	PRIMASK, r3
}
 80068d4:	46c0      	nop			; (mov r8, r8)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2101      	movs	r1, #1
 80068e2:	438a      	bics	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	f383 8810 	msr	PRIMASK, r3
}
 80068f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	2120      	movs	r1, #32
 8006904:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2274      	movs	r2, #116	; 0x74
 800690a:	2100      	movs	r1, #0
 800690c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e010      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	425a      	negs	r2, r3
 8006922:	4153      	adcs	r3, r2
 8006924:	b2db      	uxtb	r3, r3
 8006926:	001a      	movs	r2, r3
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d100      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006930:	e74b      	b.n	80067ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b014      	add	sp, #80	; 0x50
 800693a:	bd80      	pop	{r7, pc}
 800693c:	fffffe5f 	.word	0xfffffe5f

08006940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006948:	f3ef 8310 	mrs	r3, PRIMASK
 800694c:	617b      	str	r3, [r7, #20]
  return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
 8006952:	2301      	movs	r3, #1
 8006954:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f383 8810 	msr	PRIMASK, r3
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4925      	ldr	r1, [pc, #148]	; (8006a00 <UART_EndRxTransfer+0xc0>)
 800696a:	400a      	ands	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f383 8810 	msr	PRIMASK, r3
}
 8006978:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697a:	f3ef 8310 	mrs	r3, PRIMASK
 800697e:	623b      	str	r3, [r7, #32]
  return(result);
 8006980:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	633b      	str	r3, [r7, #48]	; 0x30
 8006984:	2301      	movs	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f383 8810 	msr	PRIMASK, r3
}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2101      	movs	r1, #1
 800699c:	438a      	bics	r2, r1
 800699e:	609a      	str	r2, [r3, #8]
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	f383 8810 	msr	PRIMASK, r3
}
 80069aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d118      	bne.n	80069e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b4:	f3ef 8310 	mrs	r3, PRIMASK
 80069b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	2301      	movs	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f383 8810 	msr	PRIMASK, r3
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2110      	movs	r1, #16
 80069d6:	438a      	bics	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f383 8810 	msr	PRIMASK, r3
}
 80069e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b00e      	add	sp, #56	; 0x38
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	fffffedf 	.word	0xfffffedf

08006a04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	225a      	movs	r2, #90	; 0x5a
 8006a16:	2100      	movs	r1, #0
 8006a18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2252      	movs	r2, #82	; 0x52
 8006a1e:	2100      	movs	r1, #0
 8006a20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7ff fc77 	bl	8006318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b004      	add	sp, #16
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	2301      	movs	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f383 8810 	msr	PRIMASK, r3
}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2140      	movs	r1, #64	; 0x40
 8006a5c:	438a      	bics	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7ff fc44 	bl	8006308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b006      	add	sp, #24
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	6019      	str	r1, [r3, #0]
 8006aa4:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2317      	movs	r3, #23
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2274      	movs	r2, #116	; 0x74
 8006ab2:	5c9b      	ldrb	r3, [r3, r2]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e04a      	b.n	8006b52 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2274      	movs	r2, #116	; 0x74
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2224      	movs	r2, #36	; 0x24
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	438a      	bics	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	f000 f860 	bl	8006bc6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	430a      	orrs	r2, r1
 8006b14:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b16:	f7fb f86b 	bl	8001bf0 <HAL_GetTick>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2280      	movs	r2, #128	; 0x80
 8006b22:	03d1      	lsls	r1, r2, #15
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	4a0e      	ldr	r2, [pc, #56]	; (8006b60 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8006b28:	9200      	str	r2, [sp, #0]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f7ff fe44 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8006b30:	1e03      	subs	r3, r0, #0
 8006b32:	d004      	beq.n	8006b3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8006b34:	2317      	movs	r3, #23
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	2203      	movs	r2, #3
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e002      	b.n	8006b44 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2274      	movs	r2, #116	; 0x74
 8006b48:	2100      	movs	r1, #0
 8006b4a:	5499      	strb	r1, [r3, r2]

  return status;
 8006b4c:	2317      	movs	r3, #23
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	781b      	ldrb	r3, [r3, #0]
}
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b006      	add	sp, #24
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	ffcfffff 	.word	0xffcfffff
 8006b60:	01ffffff 	.word	0x01ffffff

08006b64 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2274      	movs	r2, #116	; 0x74
 8006b70:	5c9b      	ldrb	r3, [r3, r2]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_UARTEx_EnableStopMode+0x16>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e021      	b.n	8006bbe <HAL_UARTEx_EnableStopMode+0x5a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2274      	movs	r2, #116	; 0x74
 8006b7e:	2101      	movs	r1, #1
 8006b80:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b82:	f3ef 8310 	mrs	r3, PRIMASK
 8006b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b88:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f383 8810 	msr	PRIMASK, r3
}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2274      	movs	r2, #116	; 0x74
 8006bb8:	2100      	movs	r1, #0
 8006bba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b006      	add	sp, #24
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	6019      	str	r1, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2210      	movs	r2, #16
 8006bdc:	4393      	bics	r3, r2
 8006bde:	001a      	movs	r2, r3
 8006be0:	1d3b      	adds	r3, r7, #4
 8006be2:	889b      	ldrh	r3, [r3, #4]
 8006be4:	0019      	movs	r1, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	0a19      	lsrs	r1, r3, #8
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	799b      	ldrb	r3, [r3, #6]
 8006bfc:	061a      	lsls	r2, r3, #24
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	2600      	movs	r6, #0
 8006c14:	4d0c      	ldr	r5, [pc, #48]	; (8006c48 <__libc_init_array+0x38>)
 8006c16:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c18:	1b64      	subs	r4, r4, r5
 8006c1a:	10a4      	asrs	r4, r4, #2
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	2600      	movs	r6, #0
 8006c22:	f000 f821 	bl	8006c68 <_init>
 8006c26:	4d0a      	ldr	r5, [pc, #40]	; (8006c50 <__libc_init_array+0x40>)
 8006c28:	4c0a      	ldr	r4, [pc, #40]	; (8006c54 <__libc_init_array+0x44>)
 8006c2a:	1b64      	subs	r4, r4, r5
 8006c2c:	10a4      	asrs	r4, r4, #2
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	00b3      	lsls	r3, r6, #2
 8006c36:	58eb      	ldr	r3, [r5, r3]
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	00b3      	lsls	r3, r6, #2
 8006c40:	58eb      	ldr	r3, [r5, r3]
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08006cd4 	.word	0x08006cd4
 8006c4c:	08006cd4 	.word	0x08006cd4
 8006c50:	08006cd4 	.word	0x08006cd4
 8006c54:	08006cd8 	.word	0x08006cd8

08006c58 <memset>:
 8006c58:	0003      	movs	r3, r0
 8006c5a:	1882      	adds	r2, r0, r2
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	7019      	strb	r1, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
