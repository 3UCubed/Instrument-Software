
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b20  08007b20  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08007b20  08007b20  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b20  08007b20  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08007b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000098  08007bc0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08007bc0  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001665c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6e  00000000  00000000  0003671c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141a2  00000000  00000000  0003bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e6d  00000000  00000000  0004fdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000783cd  00000000  00000000  00068c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0ff4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c74  00000000  00000000  000e1044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a1c 	.word	0x08007a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08007a1c 	.word	0x08007a1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000250:	2200      	movs	r2, #0
 8000252:	2508      	movs	r5, #8
 8000254:	197b      	adds	r3, r7, r5
 8000256:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b299      	uxth	r1, r3
 800025e:	260d      	movs	r6, #13
 8000260:	19bc      	adds	r4, r7, r6
 8000262:	197a      	adds	r2, r7, r5
 8000264:	4825      	ldr	r0, [pc, #148]	; (80002fc <poll_i2c_sensor+0xb8>)
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2301      	movs	r3, #1
 800026e:	f003 f8db 	bl	8003428 <HAL_I2C_Master_Transmit>
 8000272:	0003      	movs	r3, r0
 8000274:	7023      	strb	r3, [r4, #0]
                                1000);
  if (ret != HAL_OK)
 8000276:	19bb      	adds	r3, r7, r6
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d008      	beq.n	8000290 <poll_i2c_sensor+0x4c>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 800027e:	197b      	adds	r3, r7, r5
 8000280:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <poll_i2c_sensor+0xbc>)
 8000282:	ca03      	ldmia	r2!, {r0, r1}
 8000284:	c303      	stmia	r3!, {r0, r1}
 8000286:	8811      	ldrh	r1, [r2, #0]
 8000288:	8019      	strh	r1, [r3, #0]
 800028a:	7892      	ldrb	r2, [r2, #2]
 800028c:	709a      	strb	r2, [r3, #2]
 800028e:	e02c      	b.n	80002ea <poll_i2c_sensor+0xa6>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b299      	uxth	r1, r3
 8000296:	250d      	movs	r5, #13
 8000298:	197c      	adds	r4, r7, r5
 800029a:	2608      	movs	r6, #8
 800029c:	19ba      	adds	r2, r7, r6
 800029e:	4817      	ldr	r0, [pc, #92]	; (80002fc <poll_i2c_sensor+0xb8>)
 80002a0:	23fa      	movs	r3, #250	; 0xfa
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2302      	movs	r3, #2
 80002a8:	f003 f9c6 	bl	8003638 <HAL_I2C_Master_Receive>
 80002ac:	0003      	movs	r3, r0
 80002ae:	7023      	strb	r3, [r4, #0]
                                 1000);
    if (ret != HAL_OK)
 80002b0:	197b      	adds	r3, r7, r5
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <poll_i2c_sensor+0x86>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 80002b8:	19bb      	adds	r3, r7, r6
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <poll_i2c_sensor+0xc0>)
 80002bc:	ca03      	ldmia	r2!, {r0, r1}
 80002be:	c303      	stmia	r3!, {r0, r1}
 80002c0:	8811      	ldrh	r1, [r2, #0]
 80002c2:	8019      	strh	r1, [r3, #0]
 80002c4:	7892      	ldrb	r2, [r2, #2]
 80002c6:	709a      	strb	r2, [r3, #2]
 80002c8:	e00f      	b.n	80002ea <poll_i2c_sensor+0xa6>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 80002ca:	2008      	movs	r0, #8
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	021a      	lsls	r2, r3, #8
 80002d2:	210e      	movs	r1, #14
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	801a      	strh	r2, [r3, #0]
      output = (output | buf[1]) >> 3;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	5e9b      	ldrsh	r3, [r3, r2]
 80002de:	183a      	adds	r2, r7, r0
 80002e0:	7852      	ldrb	r2, [r2, #1]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	10da      	asrs	r2, r3, #3
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	801a      	strh	r2, [r3, #0]
    }
  }
  return output;
 80002ea:	230e      	movs	r3, #14
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	2200      	movs	r2, #0
 80002f0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b005      	add	sp, #20
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	2000014c 	.word	0x2000014c
 8000300:	08007a34 	.word	0x08007a34
 8000304:	08007a40 	.word	0x08007a40

08000308 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	250e      	movs	r5, #14
 8000312:	197c      	adds	r4, r7, r5
 8000314:	0018      	movs	r0, r3
 8000316:	f7ff ff95 	bl	8000244 <poll_i2c_sensor>
 800031a:	0003      	movs	r3, r0
 800031c:	8023      	strh	r3, [r4, #0]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800031e:	2394      	movs	r3, #148	; 0x94
 8000320:	260c      	movs	r6, #12
 8000322:	19bc      	adds	r4, r7, r6
 8000324:	0018      	movs	r0, r3
 8000326:	f7ff ff8d 	bl	8000244 <poll_i2c_sensor>
 800032a:	0003      	movs	r3, r0
 800032c:	8023      	strh	r3, [r4, #0]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800032e:	2392      	movs	r3, #146	; 0x92
 8000330:	220a      	movs	r2, #10
 8000332:	18bc      	adds	r4, r7, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f7ff ff85 	bl	8000244 <poll_i2c_sensor>
 800033a:	0003      	movs	r3, r0
 800033c:	8023      	strh	r3, [r4, #0]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800033e:	2396      	movs	r3, #150	; 0x96
 8000340:	2108      	movs	r1, #8
 8000342:	187c      	adds	r4, r7, r1
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff7d 	bl	8000244 <poll_i2c_sensor>
 800034a:	0003      	movs	r3, r0
 800034c:	8023      	strh	r3, [r4, #0]

  int16_t *results = malloc(4 * sizeof(int16_t));
 800034e:	2008      	movs	r0, #8
 8000350:	f007 fa38 	bl	80077c4 <malloc>
 8000354:	0003      	movs	r3, r0
 8000356:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	197a      	adds	r2, r7, r5
 800035c:	8812      	ldrh	r2, [r2, #0]
 800035e:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3302      	adds	r3, #2
 8000364:	19ba      	adds	r2, r7, r6
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3304      	adds	r3, #4
 800036e:	220a      	movs	r2, #10
 8000370:	18ba      	adds	r2, r7, r2
 8000372:	8812      	ldrh	r2, [r2, #0]
 8000374:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3306      	adds	r3, #6
 800037a:	2108      	movs	r1, #8
 800037c:	187a      	adds	r2, r7, r1
 800037e:	8812      	ldrh	r2, [r2, #0]
 8000380:	801a      	strh	r2, [r3, #0]
  return results;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	0018      	movs	r0, r3
 8000386:	46bd      	mov	sp, r7
 8000388:	b005      	add	sp, #20
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800038c <hk_adc>:
 *
 * @param adc which adc to call (currently not being used)
 * @return uint16_t* results of hk adcs
 */
uint16_t *hk_adc(ADC_HandleTypeDef *adc)
{
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	b08b      	sub	sp, #44	; 0x2c
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000394:	2311      	movs	r3, #17
 8000396:	001a      	movs	r2, r3
 8000398:	494c      	ldr	r1, [pc, #304]	; (80004cc <hk_adc+0x140>)
 800039a:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <hk_adc+0x144>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 ffc5 	bl	800232c <HAL_ADC_Start_DMA>
                    adcChannelCount);

  uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80003a2:	2426      	movs	r4, #38	; 0x26
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	4a49      	ldr	r2, [pc, #292]	; (80004cc <hk_adc+0x140>)
 80003a8:	8852      	ldrh	r2, [r2, #2]
 80003aa:	801a      	strh	r2, [r3, #0]
  uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80003ac:	2524      	movs	r5, #36	; 0x24
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	4a46      	ldr	r2, [pc, #280]	; (80004cc <hk_adc+0x140>)
 80003b2:	8892      	ldrh	r2, [r2, #4]
 80003b4:	801a      	strh	r2, [r3, #0]
  uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80003b6:	2622      	movs	r6, #34	; 0x22
 80003b8:	19bb      	adds	r3, r7, r6
 80003ba:	4a44      	ldr	r2, [pc, #272]	; (80004cc <hk_adc+0x140>)
 80003bc:	88d2      	ldrh	r2, [r2, #6]
 80003be:	801a      	strh	r2, [r3, #0]
  uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80003c0:	2320      	movs	r3, #32
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	4a41      	ldr	r2, [pc, #260]	; (80004cc <hk_adc+0x140>)
 80003c6:	8912      	ldrh	r2, [r2, #8]
 80003c8:	801a      	strh	r2, [r3, #0]
  uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80003ca:	211e      	movs	r1, #30
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <hk_adc+0x140>)
 80003d0:	8952      	ldrh	r2, [r2, #10]
 80003d2:	801a      	strh	r2, [r3, #0]
  uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80003d4:	201c      	movs	r0, #28
 80003d6:	183b      	adds	r3, r7, r0
 80003d8:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <hk_adc+0x140>)
 80003da:	8a52      	ldrh	r2, [r2, #18]
 80003dc:	801a      	strh	r2, [r3, #0]
  uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80003de:	231a      	movs	r3, #26
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	4a3a      	ldr	r2, [pc, #232]	; (80004cc <hk_adc+0x140>)
 80003e4:	8a92      	ldrh	r2, [r2, #20]
 80003e6:	801a      	strh	r2, [r3, #0]
  uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80003e8:	2218      	movs	r2, #24
 80003ea:	18bb      	adds	r3, r7, r2
 80003ec:	4a37      	ldr	r2, [pc, #220]	; (80004cc <hk_adc+0x140>)
 80003ee:	8ad2      	ldrh	r2, [r2, #22]
 80003f0:	801a      	strh	r2, [r3, #0]
  uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80003f2:	2316      	movs	r3, #22
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <hk_adc+0x140>)
 80003f8:	8b12      	ldrh	r2, [r2, #24]
 80003fa:	801a      	strh	r2, [r3, #0]
  uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80003fc:	2214      	movs	r2, #20
 80003fe:	18bb      	adds	r3, r7, r2
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <hk_adc+0x140>)
 8000402:	8b52      	ldrh	r2, [r2, #26]
 8000404:	801a      	strh	r2, [r3, #0]
  uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000406:	2112      	movs	r1, #18
 8000408:	187b      	adds	r3, r7, r1
 800040a:	4a30      	ldr	r2, [pc, #192]	; (80004cc <hk_adc+0x140>)
 800040c:	8b92      	ldrh	r2, [r2, #28]
 800040e:	801a      	strh	r2, [r3, #0]
  uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000410:	2310      	movs	r3, #16
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <hk_adc+0x140>)
 8000416:	8bd2      	ldrh	r2, [r2, #30]
 8000418:	801a      	strh	r2, [r3, #0]
  uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800041a:	210e      	movs	r1, #14
 800041c:	187b      	adds	r3, r7, r1
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <hk_adc+0x140>)
 8000420:	8c12      	ldrh	r2, [r2, #32]
 8000422:	801a      	strh	r2, [r3, #0]

  uint16_t *results = malloc(13 * sizeof(uint16_t));
 8000424:	201a      	movs	r0, #26
 8000426:	f007 f9cd 	bl	80077c4 <malloc>
 800042a:	0003      	movs	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]
  results[0] = MCU_TEMP;
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2210      	movs	r2, #16
 8000432:	18ba      	adds	r2, r7, r2
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	801a      	strh	r2, [r3, #0]
  results[1] = MCU_VREF;
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3302      	adds	r3, #2
 800043c:	210e      	movs	r1, #14
 800043e:	187a      	adds	r2, r7, r1
 8000440:	8812      	ldrh	r2, [r2, #0]
 8000442:	801a      	strh	r2, [r3, #0]
  results[2] = PA1;
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	3304      	adds	r3, #4
 8000448:	193a      	adds	r2, r7, r4
 800044a:	8812      	ldrh	r2, [r2, #0]
 800044c:	801a      	strh	r2, [r3, #0]
  results[3] = PA2;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3306      	adds	r3, #6
 8000452:	197a      	adds	r2, r7, r5
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	801a      	strh	r2, [r3, #0]
  results[4] = PC0;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	3308      	adds	r3, #8
 800045c:	201c      	movs	r0, #28
 800045e:	183a      	adds	r2, r7, r0
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	801a      	strh	r2, [r3, #0]
  results[5] = PA3;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	330a      	adds	r3, #10
 8000468:	19ba      	adds	r2, r7, r6
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	801a      	strh	r2, [r3, #0]
  results[6] = PC2;
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	330c      	adds	r3, #12
 8000472:	2418      	movs	r4, #24
 8000474:	193a      	adds	r2, r7, r4
 8000476:	8812      	ldrh	r2, [r2, #0]
 8000478:	801a      	strh	r2, [r3, #0]
  results[7] = PC3;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	330e      	adds	r3, #14
 800047e:	2416      	movs	r4, #22
 8000480:	193a      	adds	r2, r7, r4
 8000482:	8812      	ldrh	r2, [r2, #0]
 8000484:	801a      	strh	r2, [r3, #0]
  results[8] = PC1;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	3310      	adds	r3, #16
 800048a:	201a      	movs	r0, #26
 800048c:	183a      	adds	r2, r7, r0
 800048e:	8812      	ldrh	r2, [r2, #0]
 8000490:	801a      	strh	r2, [r3, #0]
  results[9] = PC5;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3312      	adds	r3, #18
 8000496:	2412      	movs	r4, #18
 8000498:	193a      	adds	r2, r7, r4
 800049a:	8812      	ldrh	r2, [r2, #0]
 800049c:	801a      	strh	r2, [r3, #0]
  results[10] = PC4;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	3314      	adds	r3, #20
 80004a2:	2014      	movs	r0, #20
 80004a4:	183a      	adds	r2, r7, r0
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	801a      	strh	r2, [r3, #0]
  results[11] = PA5;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3316      	adds	r3, #22
 80004ae:	2220      	movs	r2, #32
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	8812      	ldrh	r2, [r2, #0]
 80004b4:	801a      	strh	r2, [r3, #0]
  results[12] = PA6;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	3318      	adds	r3, #24
 80004ba:	211e      	movs	r1, #30
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	8812      	ldrh	r2, [r2, #0]
 80004c0:	801a      	strh	r2, [r3, #0]

  return results;
 80004c2:	68bb      	ldr	r3, [r7, #8]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b00b      	add	sp, #44	; 0x2c
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	200003e0 	.word	0x200003e0
 80004d0:	200000b4 	.word	0x200000b4

080004d4 <erpa_adc>:
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t *erpa_adc()
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80004da:	2311      	movs	r3, #17
 80004dc:	001a      	movs	r2, r3
 80004de:	491b      	ldr	r1, [pc, #108]	; (800054c <erpa_adc+0x78>)
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <erpa_adc+0x7c>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 ff22 	bl	800232c <HAL_ADC_Start_DMA>
                    adcChannelCount);
  uint16_t PA0 = adcResultsDMA[0]; // ADC_IN0, END_mon: entrance/collimator monitor
 80004e8:	240e      	movs	r4, #14
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <erpa_adc+0x78>)
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	801a      	strh	r2, [r3, #0]
  uint16_t PA7 = adcResultsDMA[6]; // ADC_IN7, SWP_mon: Sweep voltage monitor
 80004f2:	250c      	movs	r5, #12
 80004f4:	197b      	adds	r3, r7, r5
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <erpa_adc+0x78>)
 80004f8:	8992      	ldrh	r2, [r2, #12]
 80004fa:	801a      	strh	r2, [r3, #0]
  uint16_t PB0 = adcResultsDMA[7]; // ADC_IN8, TMP 1: Sweep temperature
 80004fc:	260a      	movs	r6, #10
 80004fe:	19bb      	adds	r3, r7, r6
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <erpa_adc+0x78>)
 8000502:	89d2      	ldrh	r2, [r2, #14]
 8000504:	801a      	strh	r2, [r3, #0]
  uint16_t PB1 = adcResultsDMA[8]; // ADC_IN9, TMP 2: feedbacks
 8000506:	2308      	movs	r3, #8
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <erpa_adc+0x78>)
 800050c:	8a12      	ldrh	r2, [r2, #16]
 800050e:	801a      	strh	r2, [r3, #0]

  uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000510:	2008      	movs	r0, #8
 8000512:	f007 f957 	bl	80077c4 <malloc>
 8000516:	0003      	movs	r3, r0
 8000518:	607b      	str	r3, [r7, #4]

  results[0] = PA0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	193a      	adds	r2, r7, r4
 800051e:	8812      	ldrh	r2, [r2, #0]
 8000520:	801a      	strh	r2, [r3, #0]
  results[1] = PA7;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3302      	adds	r3, #2
 8000526:	197a      	adds	r2, r7, r5
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	801a      	strh	r2, [r3, #0]
  results[2] = PB0;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	19ba      	adds	r2, r7, r6
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	801a      	strh	r2, [r3, #0]
  results[3] = PB1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3306      	adds	r3, #6
 800053a:	2208      	movs	r2, #8
 800053c:	18ba      	adds	r2, r7, r2
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	801a      	strh	r2, [r3, #0]

  return results;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b005      	add	sp, #20
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054c:	200003e0 	.word	0x200003e0
 8000550:	200000b4 	.word	0x200000b4

08000554 <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  DAC->DHR12R1 = DAC_OUT[step];
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <set_erpa_sweep+0x1c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	0019      	movs	r1, r3
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <set_erpa_sweep+0x20>)
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <set_erpa_sweep+0x24>)
 8000562:	0089      	lsls	r1, r1, #2
 8000564:	588a      	ldr	r2, [r1, r2]
 8000566:	609a      	str	r2, [r3, #8]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000402 	.word	0x20000402
 8000574:	40007400 	.word	0x40007400
 8000578:	20000000 	.word	0x20000000

0800057c <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  if (step == 7)
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <do_auto_sweep+0x5c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d103      	bne.n	8000590 <do_auto_sweep+0x14>
  {
    is_increasing = 0;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <do_auto_sweep+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e006      	b.n	800059e <do_auto_sweep+0x22>
  }
  else if (step == 0)
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <do_auto_sweep+0x5c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <do_auto_sweep+0x22>
  {
    is_increasing = 1;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <do_auto_sweep+0x60>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
  }

  if (is_increasing)
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <do_auto_sweep+0x60>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <do_auto_sweep+0x38>
  {
    step++;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <do_auto_sweep+0x5c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <do_auto_sweep+0x5c>)
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e005      	b.n	80005c0 <do_auto_sweep+0x44>
  }
  else
  {
    step--;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <do_auto_sweep+0x5c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <do_auto_sweep+0x5c>)
 80005be:	701a      	strb	r2, [r3, #0]
  }

  DAC->DHR12R1 = DAC_OUT[step];
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <do_auto_sweep+0x5c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	0019      	movs	r1, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <do_auto_sweep+0x64>)
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <do_auto_sweep+0x68>)
 80005ca:	0089      	lsls	r1, r1, #2
 80005cc:	588a      	ldr	r2, [r1, r2]
 80005ce:	609a      	str	r2, [r3, #8]
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000402 	.word	0x20000402
 80005dc:	20000020 	.word	0x20000020
 80005e0:	40007400 	.word	0x40007400
 80005e4:	20000000 	.word	0x20000000

080005e8 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint16_t spi(SPI_HandleTypeDef spi)
{
 80005e8:	b084      	sub	sp, #16
 80005ea:	b5b0      	push	{r4, r5, r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2518      	movs	r5, #24
 80005f2:	197c      	adds	r4, r7, r5
 80005f4:	6020      	str	r0, [r4, #0]
 80005f6:	6061      	str	r1, [r4, #4]
 80005f8:	60a2      	str	r2, [r4, #8]
 80005fa:	60e3      	str	r3, [r4, #12]
  /* Write to SPI (begin transfer?) */
  HAL_SPI_Transmit(&spi, (uint8_t *)&WRITE, 1, 1);
 80005fc:	4911      	ldr	r1, [pc, #68]	; (8000644 <spi+0x5c>)
 80005fe:	1978      	adds	r0, r7, r5
 8000600:	2301      	movs	r3, #1
 8000602:	2201      	movs	r2, #1
 8000604:	f004 f9e6 	bl	80049d4 <HAL_SPI_Transmit>
  spi.Instance->CR1 &= ~(1 << 10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000608:	0029      	movs	r1, r5
 800060a:	197b      	adds	r3, r7, r5
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	187b      	adds	r3, r7, r1
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <spi+0x60>)
 8000616:	400a      	ands	r2, r1
 8000618:	601a      	str	r2, [r3, #0]
  while (!(spi.Instance->SR))
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	2218      	movs	r2, #24
 800061e:	18bb      	adds	r3, r7, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <spi+0x34>
    ;
  uint16_t raw = spi.Instance->DR;
 8000628:	18bb      	adds	r3, r7, r2
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68da      	ldr	r2, [r3, #12]
 800062e:	1dbb      	adds	r3, r7, #6
 8000630:	801a      	strh	r2, [r3, #0]
  return raw;
 8000632:	1dbb      	adds	r3, r7, #6
 8000634:	881b      	ldrh	r3, [r3, #0]
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bcb0      	pop	{r4, r5, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	b004      	add	sp, #16
 8000642:	4718      	bx	r3
 8000644:	08007a6c 	.word	0x08007a6c
 8000648:	fffffbff 	.word	0xfffffbff

0800064c <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(int erpa_spi, uint16_t *erpa_adc_results)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

  uint8_t erpa_buf[14];
  erpa_buf[0] = erpa_sync;                              // ERPA SYNC 0xAA MSB
 8000656:	22aa      	movs	r2, #170	; 0xaa
 8000658:	2108      	movs	r1, #8
 800065a:	187b      	adds	r3, r7, r1
 800065c:	701a      	strb	r2, [r3, #0]
  erpa_buf[1] = erpa_sync;                              // ERPA SYNC 0xAA LSB
 800065e:	22aa      	movs	r2, #170	; 0xaa
 8000660:	187b      	adds	r3, r7, r1
 8000662:	705a      	strb	r2, [r3, #1]
  erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8);             // ERPA SEQ # MSB
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <send_erpa_packet+0xd0>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	187b      	adds	r3, r7, r1
 8000670:	709a      	strb	r2, [r3, #2]
  erpa_buf[3] = (erpa_seq & 0xFF);                      // ERPA SEQ # MSB
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <send_erpa_packet+0xd0>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	187b      	adds	r3, r7, r1
 800067a:	70da      	strb	r2, [r3, #3]
  erpa_buf[4] = ((erpa_adc_results[0]) >> 8);           // ENDmon MSB
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b29b      	uxth	r3, r3
 8000684:	b2da      	uxtb	r2, r3
 8000686:	187b      	adds	r3, r7, r1
 8000688:	711a      	strb	r2, [r3, #4]
  erpa_buf[5] = (erpa_adc_results[0] & 0xFF);           // ENDmon LSB
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	187b      	adds	r3, r7, r1
 8000692:	715a      	strb	r2, [r3, #5]
  erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);  // SWP Monitored MSB
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	3302      	adds	r3, #2
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	719a      	strb	r2, [r3, #6]
  erpa_buf[7] = (erpa_adc_results[1] & 0xFF);           // SWP Monitored LSB
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3302      	adds	r3, #2
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	71da      	strb	r2, [r3, #7]
  erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3304      	adds	r3, #4
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	721a      	strb	r2, [r3, #8]
  erpa_buf[9] = (erpa_adc_results[2] & 0xFF);           // TEMPURATURE 1 LSB
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	3304      	adds	r3, #4
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	725a      	strb	r2, [r3, #9]
  erpa_buf[10] = ((erpa_adc_results[3] & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3306      	adds	r3, #6
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	729a      	strb	r2, [r3, #10]
  erpa_buf[11] = (erpa_adc_results[3] & 0xFF);          // TEMPURATURE 2 LSB
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	3306      	adds	r3, #6
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	72da      	strb	r2, [r3, #11]
  erpa_buf[12] = ((erpa_spi & 0xFF00) >> 8);            // ERPA eADC MSB
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	121b      	asrs	r3, r3, #8
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	731a      	strb	r2, [r3, #12]
  erpa_buf[13] = (erpa_spi & 0xFF);                     // ERPA eADC LSB
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	735a      	strb	r2, [r3, #13]

  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80006fa:	1879      	adds	r1, r7, r1
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <send_erpa_packet+0xd4>)
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	220e      	movs	r2, #14
 8000702:	f005 fdcb 	bl	800629c <HAL_UART_Transmit>

  erpa_seq++;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <send_erpa_packet+0xd0>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <send_erpa_packet+0xd0>)
 8000710:	801a      	strh	r2, [r3, #0]
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b006      	add	sp, #24
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000414 	.word	0x20000414
 8000720:	200002f0 	.word	0x200002f0

08000724 <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc_results)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]

  uint8_t hk_buf[38];                              // buffer that is filled with HK packet info
  hk_buf[0] = hk_sync;                             // HK SYNC 0xCC MSB					0 SYNC
 800072e:	22cc      	movs	r2, #204	; 0xcc
 8000730:	2108      	movs	r1, #8
 8000732:	187b      	adds	r3, r7, r1
 8000734:	701a      	strb	r2, [r3, #0]
  hk_buf[1] = hk_sync;                             // HK SYNC 0xCC LSB
 8000736:	22cc      	movs	r2, #204	; 0xcc
 8000738:	187b      	adds	r3, r7, r1
 800073a:	705a      	strb	r2, [r3, #1]
  hk_buf[2] = ((hk_seq & 0xFF00) >> 8);            // HK SEQ # MSB		1 SEQUENCE
 800073c:	4b89      	ldr	r3, [pc, #548]	; (8000964 <send_hk_packet+0x240>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29b      	uxth	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	187b      	adds	r3, r7, r1
 8000748:	709a      	strb	r2, [r3, #2]
  hk_buf[3] = (hk_seq & 0xFF);                     // HK SEQ # LSB
 800074a:	4b86      	ldr	r3, [pc, #536]	; (8000964 <send_hk_packet+0x240>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	70da      	strb	r2, [r3, #3]
  hk_buf[4] = ((hk_adc_results[0] & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	187b      	adds	r3, r7, r1
 8000760:	711a      	strb	r2, [r3, #4]
  hk_buf[5] = (hk_adc_results[0] & 0xFF);          // VSENSE LSB
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	715a      	strb	r2, [r3, #5]
  hk_buf[6] = ((hk_adc_results[1] & 0xFF00) >> 8);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	3302      	adds	r3, #2
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	187b      	adds	r3, r7, r1
 800077a:	719a      	strb	r2, [r3, #6]
  hk_buf[7] = (hk_adc_results[1] & 0xFF);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	3302      	adds	r3, #2
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	187b      	adds	r3, r7, r1
 8000786:	71da      	strb	r2, [r3, #7]
  hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	5e9b      	ldrsh	r3, [r3, r2]
 800078e:	121b      	asrs	r3, r3, #8
 8000790:	b2da      	uxtb	r2, r3
 8000792:	187b      	adds	r3, r7, r1
 8000794:	721a      	strb	r2, [r3, #8]
  hk_buf[9] = (i2c_values[0] & 0xFF);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	5e9b      	ldrsh	r3, [r3, r2]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	0008      	movs	r0, r1
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	725a      	strb	r2, [r3, #9]
  hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3302      	adds	r3, #2
 80007a8:	2200      	movs	r2, #0
 80007aa:	5e9b      	ldrsh	r3, [r3, r2]
 80007ac:	121b      	asrs	r3, r3, #8
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	729a      	strb	r2, [r3, #10]
  hk_buf[11] = (i2c_values[1] & 0xFF);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3302      	adds	r3, #2
 80007b8:	2200      	movs	r2, #0
 80007ba:	5e9b      	ldrsh	r3, [r3, r2]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	72da      	strb	r2, [r3, #11]
  hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ca:	121b      	asrs	r3, r3, #8
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	183b      	adds	r3, r7, r0
 80007d0:	731a      	strb	r2, [r3, #12]
  hk_buf[13] = (i2c_values[2] & 0xFF);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	5e9b      	ldrsh	r3, [r3, r2]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	183b      	adds	r3, r7, r0
 80007de:	735a      	strb	r2, [r3, #13]
  hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3306      	adds	r3, #6
 80007e4:	2200      	movs	r2, #0
 80007e6:	5e9b      	ldrsh	r3, [r3, r2]
 80007e8:	121b      	asrs	r3, r3, #8
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	739a      	strb	r2, [r3, #14]
  hk_buf[15] = (i2c_values[3] & 0xFF);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3306      	adds	r3, #6
 80007f4:	2200      	movs	r2, #0
 80007f6:	5e9b      	ldrsh	r3, [r3, r2]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	183b      	adds	r3, r7, r0
 80007fc:	73da      	strb	r2, [r3, #15]
  hk_buf[16] = ((hk_adc_results[2] & 0xFF00) >> 8);  // BUS_Vmon MSB			2 BUS_VMON PA1
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3304      	adds	r3, #4
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	183b      	adds	r3, r7, r0
 800080c:	741a      	strb	r2, [r3, #16]
  hk_buf[17] = (hk_adc_results[2] & 0xFF);           // BUS_Vmon LSB
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3304      	adds	r3, #4
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	183b      	adds	r3, r7, r0
 8000818:	745a      	strb	r2, [r3, #17]
  hk_buf[18] = ((hk_adc_results[3] & 0xFF00) >> 8);  // BUS_Imon MSB			3 BUS_IMON PA2
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	3306      	adds	r3, #6
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	183b      	adds	r3, r7, r0
 8000828:	749a      	strb	r2, [r3, #18]
  hk_buf[19] = (hk_adc_results[3] & 0xFF);           // BUS_Imon LSB
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	3306      	adds	r3, #6
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	183b      	adds	r3, r7, r0
 8000834:	74da      	strb	r2, [r3, #19]
  hk_buf[20] = ((hk_adc_results[4] & 0xFF00) >> 8);  // 2v5_mon MSB			7 2V5_MON PC0
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	3308      	adds	r3, #8
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	183b      	adds	r3, r7, r0
 8000844:	751a      	strb	r2, [r3, #20]
  hk_buf[21] = (hk_adc_results[4] & 0xFF);           // 2v5_mon LSB
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3308      	adds	r3, #8
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	183b      	adds	r3, r7, r0
 8000850:	755a      	strb	r2, [r3, #21]
  hk_buf[22] = ((hk_adc_results[5] & 0xFF00) >> 8);  // 3v3_mon MSB			4 3v3_MON PA3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	330a      	adds	r3, #10
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	183b      	adds	r3, r7, r0
 8000860:	759a      	strb	r2, [r3, #22]
  hk_buf[23] = (hk_adc_results[5] & 0xFF);           // 3v3_mon LSB
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	330a      	adds	r3, #10
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	183b      	adds	r3, r7, r0
 800086c:	75da      	strb	r2, [r3, #23]
  hk_buf[24] = ((hk_adc_results[6]) >> 8);           // 5v_mon MSB			9 5V_MON PC2
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	330c      	adds	r3, #12
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b29b      	uxth	r3, r3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	183b      	adds	r3, r7, r0
 800087c:	761a      	strb	r2, [r3, #24]
  hk_buf[25] = (hk_adc_results[6] & 0xFF);           // 5v_mon LSB
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	330c      	adds	r3, #12
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	183b      	adds	r3, r7, r0
 8000888:	765a      	strb	r2, [r3, #25]
  hk_buf[26] = ((hk_adc_results[7] & 0xFF00) >> 8);  // n3v3_mon MSB			10 N3V3_MON PC3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	330e      	adds	r3, #14
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2da      	uxtb	r2, r3
 8000896:	183b      	adds	r3, r7, r0
 8000898:	769a      	strb	r2, [r3, #26]
  hk_buf[27] = (hk_adc_results[7] & 0xFF);           // n3v3_mon LSB
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	330e      	adds	r3, #14
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	183b      	adds	r3, r7, r0
 80008a4:	76da      	strb	r2, [r3, #27]
  hk_buf[28] = ((hk_adc_results[8] & 0xFF00) >> 8);  // n5v_mon MSB			8 N5V_MON PC1
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	3310      	adds	r3, #16
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	183b      	adds	r3, r7, r0
 80008b4:	771a      	strb	r2, [r3, #28]
  hk_buf[29] = (hk_adc_results[8] & 0xFF);           // n5v_mon LSB
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3310      	adds	r3, #16
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	183b      	adds	r3, r7, r0
 80008c0:	775a      	strb	r2, [r3, #29]
  hk_buf[30] = ((hk_adc_results[9] & 0xFF00) >> 8);  // 15v_mon MSB			12 15V_MON PC5
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	3312      	adds	r3, #18
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	183b      	adds	r3, r7, r0
 80008d0:	779a      	strb	r2, [r3, #30]
  hk_buf[31] = (hk_adc_results[9] & 0xFF);           // 15v_mon LSB
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3312      	adds	r3, #18
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	183b      	adds	r3, r7, r0
 80008dc:	77da      	strb	r2, [r3, #31]
  hk_buf[32] = ((hk_adc_results[10] & 0xFF00) >> 8); // 5vref_mon MSB		11 5VREF_MON PC4
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	3314      	adds	r3, #20
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2d9      	uxtb	r1, r3
 80008ea:	183b      	adds	r3, r7, r0
 80008ec:	2220      	movs	r2, #32
 80008ee:	5499      	strb	r1, [r3, r2]
  hk_buf[33] = (hk_adc_results[10] & 0xFF);          // 5vref_mon LSB
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	3314      	adds	r3, #20
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b2d9      	uxtb	r1, r3
 80008f8:	183b      	adds	r3, r7, r0
 80008fa:	2221      	movs	r2, #33	; 0x21
 80008fc:	5499      	strb	r1, [r3, r2]
  hk_buf[34] = ((hk_adc_results[11] & 0xFF00) >> 8); // n150v_mon MSB		5 N150V_MON PA5
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3316      	adds	r3, #22
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b29b      	uxth	r3, r3
 8000908:	b2d9      	uxtb	r1, r3
 800090a:	183b      	adds	r3, r7, r0
 800090c:	2222      	movs	r2, #34	; 0x22
 800090e:	5499      	strb	r1, [r3, r2]
  hk_buf[35] = (hk_adc_results[11] & 0xFF);          // n150v_mon LSB
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3316      	adds	r3, #22
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	b2d9      	uxtb	r1, r3
 8000918:	183b      	adds	r3, r7, r0
 800091a:	2223      	movs	r2, #35	; 0x23
 800091c:	5499      	strb	r1, [r3, r2]
  hk_buf[36] = ((hk_adc_results[12] & 0xFF00) >> 8); // n800v_mon MSB		6 N800V_MON PA6
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	3318      	adds	r3, #24
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	b29b      	uxth	r3, r3
 8000928:	b2d9      	uxtb	r1, r3
 800092a:	183b      	adds	r3, r7, r0
 800092c:	2224      	movs	r2, #36	; 0x24
 800092e:	5499      	strb	r1, [r3, r2]
  hk_buf[37] = (hk_adc_results[12] & 0xFF);          // n800v_mon LSB
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	3318      	adds	r3, #24
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	b2d9      	uxtb	r1, r3
 8000938:	183b      	adds	r3, r7, r0
 800093a:	2225      	movs	r2, #37	; 0x25
 800093c:	5499      	strb	r1, [r3, r2]

  HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 800093e:	1839      	adds	r1, r7, r0
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <send_hk_packet+0x244>)
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	2226      	movs	r2, #38	; 0x26
 8000946:	f005 fca9 	bl	800629c <HAL_UART_Transmit>
  hk_counter = 1;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <send_hk_packet+0x248>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
  hk_seq++;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <send_hk_packet+0x240>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <send_hk_packet+0x240>)
 800095a:	801a      	strh	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b00c      	add	sp, #48	; 0x30
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000418 	.word	0x20000418
 8000968:	200002f0 	.word	0x200002f0
 800096c:	2000041c 	.word	0x2000041c

08000970 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint16_t pmt_spi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dbb      	adds	r3, r7, #6
 800097a:	801a      	strh	r2, [r3, #0]

  uint8_t pmt_buf[6];
  pmt_buf[0] = pmt_sync;
 800097c:	22bb      	movs	r2, #187	; 0xbb
 800097e:	2108      	movs	r1, #8
 8000980:	187b      	adds	r3, r7, r1
 8000982:	701a      	strb	r2, [r3, #0]
  pmt_buf[1] = pmt_sync;
 8000984:	22bb      	movs	r2, #187	; 0xbb
 8000986:	187b      	adds	r3, r7, r1
 8000988:	705a      	strb	r2, [r3, #1]
  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <send_pmt_packet+0x68>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	187b      	adds	r3, r7, r1
 8000996:	709a      	strb	r2, [r3, #2]
  pmt_buf[3] = (pmt_seq & 0xFF);
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <send_pmt_packet+0x68>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	70da      	strb	r2, [r3, #3]
  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <send_pmt_packet+0x6c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	711a      	strb	r2, [r3, #4]
  pmt_buf[5] = (pmt_raw & 0xFF);
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <send_pmt_packet+0x6c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	715a      	strb	r2, [r3, #5]

  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <send_pmt_packet+0x70>)
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2206      	movs	r2, #6
 80009c0:	f005 fc6c 	bl	800629c <HAL_UART_Transmit>
  pmt_seq++;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <send_pmt_packet+0x68>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <send_pmt_packet+0x68>)
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000416 	.word	0x20000416
 80009dc:	20000408 	.word	0x20000408
 80009e0:	200002f0 	.word	0x200002f0

080009e4 <HAL_TIM_OC_DelayElapsedCallback>:
 * performs necessary routines for given timer
 *
 * @param htim
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b09f      	sub	sp, #124	; 0x7c
 80009e8:	af16      	add	r7, sp, #88	; 0x58
 80009ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d16e      	bne.n	8000ad2 <HAL_TIM_OC_DelayElapsedCallback+0xee>
  {
    FACTOR_COUNTER++;
 80009f4:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80009fc:	601a      	str	r2, [r3, #0]
    int fc = FACTOR_COUNTER;
 80009fe:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	61fb      	str	r3, [r7, #28]
    int sc = SAMPLING_FACTOR;
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	61bb      	str	r3, [r7, #24]

    if (FACTOR_COUNTER == SAMPLING_FACTOR)
 8000a0a:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d15d      	bne.n	8000ad2 <HAL_TIM_OC_DelayElapsedCallback+0xee>
    {
      FACTOR_COUNTER = 0;
 8000a16:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
      if (ERPA_ON)
 8000a1c:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d034      	beq.n	8000a8e <HAL_TIM_OC_DelayElapsedCallback+0xaa>
      {
        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0010      	movs	r0, r2
 8000a30:	f002 fc2a 	bl	8003288 <HAL_GPIO_ReadPin>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d1f6      	bne.n	8000a26 <HAL_TIM_OC_DelayElapsedCallback+0x42>
          ;

        erpa_raw = spi(hspi2);
 8000a38:	4c43      	ldr	r4, [pc, #268]	; (8000b48 <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	0023      	movs	r3, r4
 8000a40:	3310      	adds	r3, #16
 8000a42:	2254      	movs	r2, #84	; 0x54
 8000a44:	0019      	movs	r1, r3
 8000a46:	f006 fed1 	bl	80077ec <memcpy>
 8000a4a:	6820      	ldr	r0, [r4, #0]
 8000a4c:	6861      	ldr	r1, [r4, #4]
 8000a4e:	68a2      	ldr	r2, [r4, #8]
 8000a50:	68e3      	ldr	r3, [r4, #12]
 8000a52:	f7ff fdc9 	bl	80005e8 <spi>
 8000a56:	0003      	movs	r3, r0
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000a5c:	601a      	str	r2, [r3, #0]
        uint16_t *erpa_adc_results = erpa_adc();
 8000a5e:	f7ff fd39 	bl	80004d4 <erpa_adc>
 8000a62:	0003      	movs	r3, r0
 8000a64:	617b      	str	r3, [r7, #20]

        if (auto_sweep)
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x90>
        {
          do_auto_sweep();
 8000a6e:	f7ff fd85 	bl	800057c <do_auto_sweep>
 8000a72:	e001      	b.n	8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x94>
        } else {
          set_erpa_sweep();
 8000a74:	f7ff fd6e 	bl	8000554 <set_erpa_sweep>
        }

        send_erpa_packet(erpa_raw, erpa_adc_results);
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff fde3 	bl	800064c <send_erpa_packet>

        free(erpa_adc_results);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f006 fea5 	bl	80077d8 <free>
      }
      if (HK_ON)
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d018      	beq.n	8000ac8 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
      {
        int16_t *i2c_values = i2c();
 8000a96:	f7ff fc37 	bl	8000308 <i2c>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]
        uint16_t *hk_adc_results = hk_adc(&hadc);
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fc73 	bl	800038c <hk_adc>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	60fb      	str	r3, [r7, #12]

        send_hk_packet(i2c_values, hk_adc_results);
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fe37 	bl	8000724 <send_hk_packet>

        free(i2c_values);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f006 fe8d 	bl	80077d8 <free>
        free(hk_adc_results);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f006 fe89 	bl	80077d8 <free>
 8000ac6:	e004      	b.n	8000ad2 <HAL_TIM_OC_DelayElapsedCallback+0xee>
      }
      else
      {
        hk_counter++;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000ad0:	601a      	str	r2, [r3, #0]
      }
    }
  }
  if (htim == &htim1)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d127      	bne.n	8000b2a <HAL_TIM_OC_DelayElapsedCallback+0x146>
  {
    if (PMT_ON)
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d023      	beq.n	8000b2a <HAL_TIM_OC_DelayElapsedCallback+0x146>
    {
      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	005a      	lsls	r2, r3, #1
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fbca 	bl	8003288 <HAL_GPIO_ReadPin>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d1f5      	bne.n	8000ae4 <HAL_TIM_OC_DelayElapsedCallback+0x100>
        ;

      pmt_raw = spi(hspi1);
 8000af8:	4c1b      	ldr	r4, [pc, #108]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8000afa:	466b      	mov	r3, sp
 8000afc:	0018      	movs	r0, r3
 8000afe:	0023      	movs	r3, r4
 8000b00:	3310      	adds	r3, #16
 8000b02:	2254      	movs	r2, #84	; 0x54
 8000b04:	0019      	movs	r1, r3
 8000b06:	f006 fe71 	bl	80077ec <memcpy>
 8000b0a:	6820      	ldr	r0, [r4, #0]
 8000b0c:	6861      	ldr	r1, [r4, #4]
 8000b0e:	68a2      	ldr	r2, [r4, #8]
 8000b10:	68e3      	ldr	r3, [r4, #12]
 8000b12:	f7ff fd69 	bl	80005e8 <spi>
 8000b16:	0003      	movs	r3, r0
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8000b1c:	601a      	str	r2, [r3, #0]

      send_pmt_packet(pmt_raw);
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff23 	bl	8000970 <send_pmt_packet>
    }
  }
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b009      	add	sp, #36	; 0x24
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	200002a8 	.word	0x200002a8
 8000b38:	20000410 	.word	0x20000410
 8000b3c:	20000024 	.word	0x20000024
 8000b40:	20000421 	.word	0x20000421
 8000b44:	48000400 	.word	0x48000400
 8000b48:	200001fc 	.word	0x200001fc
 8000b4c:	2000040c 	.word	0x2000040c
 8000b50:	20000404 	.word	0x20000404
 8000b54:	20000422 	.word	0x20000422
 8000b58:	200000b4 	.word	0x200000b4
 8000b5c:	2000041c 	.word	0x2000041c
 8000b60:	20000260 	.word	0x20000260
 8000b64:	20000420 	.word	0x20000420
 8000b68:	20000198 	.word	0x20000198
 8000b6c:	20000408 	.word	0x20000408

08000b70 <HAL_UART_RxCpltCallback>:
 * @brief UART rx interrupt function
 *
 * @param huart UART peripheral to receive from
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000b78:	4998      	ldr	r1, [pc, #608]	; (8000ddc <HAL_UART_RxCpltCallback+0x26c>)
 8000b7a:	4b99      	ldr	r3, [pc, #612]	; (8000de0 <HAL_UART_RxCpltCallback+0x270>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f005 fc35 	bl	80063ee <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000b84:	210f      	movs	r1, #15
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	4a94      	ldr	r2, [pc, #592]	; (8000ddc <HAL_UART_RxCpltCallback+0x26c>)
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b25      	cmp	r3, #37	; 0x25
 8000b94:	d900      	bls.n	8000b98 <HAL_UART_RxCpltCallback+0x28>
 8000b96:	e11d      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b92      	ldr	r3, [pc, #584]	; (8000de4 <HAL_UART_RxCpltCallback+0x274>)
 8000b9c:	18d3      	adds	r3, r2, r3
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000ba2:	4b91      	ldr	r3, [pc, #580]	; (8000de8 <HAL_UART_RxCpltCallback+0x278>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fb8a 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000bae:	e111      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000bb0:	4b8d      	ldr	r3, [pc, #564]	; (8000de8 <HAL_UART_RxCpltCallback+0x278>)
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fb83 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000bbc:	e10a      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000bbe:	4b8a      	ldr	r3, [pc, #552]	; (8000de8 <HAL_UART_RxCpltCallback+0x278>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fb7c 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000bca:	e103      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000bcc:	4b86      	ldr	r3, [pc, #536]	; (8000de8 <HAL_UART_RxCpltCallback+0x278>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fb75 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000bd8:	e0fc      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x1B:
  {
    if (step < 7)
 8000bda:	4b84      	ldr	r3, [pc, #528]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d900      	bls.n	8000be4 <HAL_UART_RxCpltCallback+0x74>
 8000be2:	e0f0      	b.n	8000dc6 <HAL_UART_RxCpltCallback+0x256>
    {
      step++;
 8000be4:	4b81      	ldr	r3, [pc, #516]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000bee:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000bf0:	e0e9      	b.n	8000dc6 <HAL_UART_RxCpltCallback+0x256>
  }
  case 0x1C:
  {
    if (step > 0)
 8000bf2:	4b7e      	ldr	r3, [pc, #504]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <HAL_UART_RxCpltCallback+0x8c>
 8000bfa:	e0e6      	b.n	8000dca <HAL_UART_RxCpltCallback+0x25a>
    {
      step--;
 8000bfc:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b79      	ldr	r3, [pc, #484]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000c06:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000c08:	e0df      	b.n	8000dca <HAL_UART_RxCpltCallback+0x25a>
  }
  case 0x1D:
  {
    if (!auto_sweep)
 8000c0a:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <HAL_UART_RxCpltCallback+0x280>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_UART_RxCpltCallback+0xb0>
    {
      auto_sweep = 1;
 8000c12:	4b77      	ldr	r3, [pc, #476]	; (8000df0 <HAL_UART_RxCpltCallback+0x280>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
      step = 0;
 8000c18:	4b74      	ldr	r3, [pc, #464]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
    else
    {
      auto_sweep = 0;
      step = 0;
    }
    break;
 8000c1e:	e0d9      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
      auto_sweep = 0;
 8000c20:	4b73      	ldr	r3, [pc, #460]	; (8000df0 <HAL_UART_RxCpltCallback+0x280>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
      step = 0;
 8000c26:	4b71      	ldr	r3, [pc, #452]	; (8000dec <HAL_UART_RxCpltCallback+0x27c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    break;
 8000c2c:	e0d2      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x24:
  {
    if (SAMPLING_FACTOR < 16)
 8000c2e:	4b71      	ldr	r3, [pc, #452]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	dd00      	ble.n	8000c38 <HAL_UART_RxCpltCallback+0xc8>
 8000c36:	e0ca      	b.n	8000dce <HAL_UART_RxCpltCallback+0x25e>
    {
      SAMPLING_FACTOR *= 2;
 8000c38:	4b6e      	ldr	r3, [pc, #440]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	005a      	lsls	r2, r3, #1
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c40:	601a      	str	r2, [r3, #0]
      FACTOR_COUNTER = 0;
 8000c42:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <HAL_UART_RxCpltCallback+0x288>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
    }
    break;
 8000c48:	e0c1      	b.n	8000dce <HAL_UART_RxCpltCallback+0x25e>
  }
  case 0x25:
  {
    if (SAMPLING_FACTOR > 1)
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	dc00      	bgt.n	8000c54 <HAL_UART_RxCpltCallback+0xe4>
 8000c52:	e0be      	b.n	8000dd2 <HAL_UART_RxCpltCallback+0x262>
    {
      SAMPLING_FACTOR /= 2;
 8000c54:	4b67      	ldr	r3, [pc, #412]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <HAL_UART_RxCpltCallback+0xee>
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	105b      	asrs	r3, r3, #1
 8000c60:	001a      	movs	r2, r3
 8000c62:	4b64      	ldr	r3, [pc, #400]	; (8000df4 <HAL_UART_RxCpltCallback+0x284>)
 8000c64:	601a      	str	r2, [r3, #0]
      FACTOR_COUNTER = 0;
 8000c66:	4b64      	ldr	r3, [pc, #400]	; (8000df8 <HAL_UART_RxCpltCallback+0x288>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
    }
    break;
 8000c6c:	e0b1      	b.n	8000dd2 <HAL_UART_RxCpltCallback+0x262>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <HAL_UART_RxCpltCallback+0x28c>)
 8000c70:	2120      	movs	r1, #32
 8000c72:	2201      	movs	r2, #1
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 fb24 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000c7a:	e0ab      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000c7c:	4b5f      	ldr	r3, [pc, #380]	; (8000dfc <HAL_UART_RxCpltCallback+0x28c>)
 8000c7e:	2120      	movs	r1, #32
 8000c80:	2200      	movs	r2, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 fb1d 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000c88:	e0a4      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <HAL_UART_RxCpltCallback+0x28c>)
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	2201      	movs	r2, #1
 8000c90:	0018      	movs	r0, r3
 8000c92:	f002 fb16 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000c96:	e09d      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <HAL_UART_RxCpltCallback+0x28c>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 fb0f 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000ca4:	e096      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000ca6:	4856      	ldr	r0, [pc, #344]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	2201      	movs	r2, #1
 8000cae:	0019      	movs	r1, r3
 8000cb0:	f002 fb07 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000cb4:	e08e      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000cb6:	4852      	ldr	r0, [pc, #328]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	f002 faff 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000cc4:	e086      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000cc6:	484e      	ldr	r0, [pc, #312]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	019b      	lsls	r3, r3, #6
 8000ccc:	2201      	movs	r2, #1
 8000cce:	0019      	movs	r1, r3
 8000cd0:	f002 faf7 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000cd4:	e07e      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000cd6:	484a      	ldr	r0, [pc, #296]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	2200      	movs	r2, #0
 8000cde:	0019      	movs	r1, r3
 8000ce0:	f002 faef 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000ce4:	e076      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	2201      	movs	r2, #1
 8000cec:	0018      	movs	r0, r3
 8000cee:	f002 fae8 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000cf2:	e06f      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000cf4:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f002 fae1 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d00:	e068      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000d02:	483f      	ldr	r0, [pc, #252]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	f002 fad9 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d10:	e060      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000d12:	483b      	ldr	r0, [pc, #236]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	f002 fad1 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d20:	e058      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000d22:	4837      	ldr	r0, [pc, #220]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	f002 fac9 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d30:	e050      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000d32:	4833      	ldr	r0, [pc, #204]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	f002 fac1 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d40:	e048      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	2201      	movs	r2, #1
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 faba 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d4e:	e041      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_UART_RxCpltCallback+0x290>)
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 fab3 	bl	80032c2 <HAL_GPIO_WritePin>
    break;
 8000d5c:	e03a      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x0C:
  {
    HAL_SuspendTick();
 8000d5e:	f001 f997 	bl	8002090 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f002 ffff 	bl	8003d68 <HAL_PWR_EnterSTOPMode>
    NVIC_SystemReset();
 8000d6a:	f7ff fa59 	bl	8000220 <__NVIC_SystemReset>
    break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_UART_RxCpltCallback+0x294>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_UART_RxCpltCallback+0x298>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f004 f949 	bl	8005010 <HAL_TIM_OC_Start_IT>
    break;
 8000d7e:	e029      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_UART_RxCpltCallback+0x294>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_UART_RxCpltCallback+0x298>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f004 fa40 	bl	8005210 <HAL_TIM_OC_Stop_IT>
    break;
 8000d90:	e020      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_UART_RxCpltCallback+0x29c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d9a:	210c      	movs	r1, #12
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f004 f937 	bl	8005010 <HAL_TIM_OC_Start_IT>
    break;
 8000da2:	e017      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_UART_RxCpltCallback+0x29c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_UART_RxCpltCallback+0x2a0>)
 8000dac:	210c      	movs	r1, #12
 8000dae:	0018      	movs	r0, r3
 8000db0:	f004 fa2e 	bl	8005210 <HAL_TIM_OC_Stop_IT>
    break;
 8000db4:	e00e      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_RxCpltCallback+0x2a4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
    break;
 8000dbc:	e00a      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_RxCpltCallback+0x2a4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
    break;
 8000dc4:	e006      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
    break;
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	e004      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
    break;
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	e002      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
    break;
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	e000      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0x264>
    break;
 8000dd2:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000374 	.word	0x20000374
 8000de0:	200002f0 	.word	0x200002f0
 8000de4:	08007a70 	.word	0x08007a70
 8000de8:	48001400 	.word	0x48001400
 8000dec:	20000402 	.word	0x20000402
 8000df0:	20000404 	.word	0x20000404
 8000df4:	20000024 	.word	0x20000024
 8000df8:	20000410 	.word	0x20000410
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000800 	.word	0x48000800
 8000e04:	20000420 	.word	0x20000420
 8000e08:	20000260 	.word	0x20000260
 8000e0c:	20000421 	.word	0x20000421
 8000e10:	200002a8 	.word	0x200002a8
 8000e14:	20000422 	.word	0x20000422

08000e18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 f8d4 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */
  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f85e 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fc78 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f000 fc58 	bl	80016dc <MX_DMA_Init>
  MX_SPI2_Init();
 8000e2c:	f000 faa0 	bl	8001370 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e30:	f000 fade 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e34:	f000 fb92 	bl	800155c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000e38:	f000 fa5a 	bl	80012f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e3c:	f000 fc0e 	bl	800165c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000e40:	f000 f9e4 	bl	800120c <MX_DAC1_Init>
  MX_ADC_Init();
 8000e44:	f000 f8b6 	bl	8000fb4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000e48:	f000 fa12 	bl	8001270 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <main+0xb8>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fe5a 	bl	8002b0a <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <main+0xbc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	025b      	lsls	r3, r3, #9
 8000e62:	401a      	ands	r2, r3
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d0f5      	beq.n	8000e58 <main+0x40>
    ;
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <main+0xbc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69da      	ldr	r2, [r3, #28]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	03db      	lsls	r3, r3, #15
 8000e78:	401a      	ands	r2, r3
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	03db      	lsls	r3, r3, #15
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d1f5      	bne.n	8000e6e <main+0x56>
    ;

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <main+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0xc0>)
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <main+0xc0>)
 8000e90:	225b      	movs	r2, #91	; 0x5b
 8000e92:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK)
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <main+0xc0>)
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <main+0xbc>)
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	f006 fbac 	bl	80075f8 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <main+0x90>
  {
    Error_Handler();
 8000ea4:	f000 fcd2 	bl	800184c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <main+0xbc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <main+0xbc>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	03c9      	lsls	r1, r1, #15
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <main+0xbc>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f006 fc01 	bl	80076c4 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000ec2:	4906      	ldr	r1, [pc, #24]	; (8000edc <main+0xc4>)
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <main+0xbc>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f005 fa90 	bl	80063ee <HAL_UART_Receive_IT>
 8000ece:	e7f8      	b.n	8000ec2 <main+0xaa>
 8000ed0:	20000138 	.word	0x20000138
 8000ed4:	200002f0 	.word	0x200002f0
 8000ed8:	200003d8 	.word	0x200003d8
 8000edc:	20000374 	.word	0x20000374

08000ee0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b097      	sub	sp, #92	; 0x5c
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	2428      	movs	r4, #40	; 0x28
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	0018      	movs	r0, r3
 8000eec:	2330      	movs	r3, #48	; 0x30
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f006 fc84 	bl	80077fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	0018      	movs	r0, r3
 8000efc:	2310      	movs	r3, #16
 8000efe:	001a      	movs	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	f006 fc7c 	bl	80077fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f006 fc75 	bl	80077fe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000f14:	0021      	movs	r1, r4
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2212      	movs	r2, #18
 8000f1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2201      	movs	r2, #1
 8000f20:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2210      	movs	r2, #16
 8000f32:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2202      	movs	r2, #2
 8000f38:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	0392      	lsls	r2, r2, #14
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 ff3d 	bl	8003dd0 <HAL_RCC_OscConfig>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f5a:	f000 fc77 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000f5e:	2118      	movs	r1, #24
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2207      	movs	r2, #7
 8000f64:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2202      	movs	r2, #2
 8000f6a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f003 fa41 	bl	8004404 <HAL_RCC_ClockConfig>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f86:	f000 fc61 	bl	800184c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2221      	movs	r2, #33	; 0x21
 8000f8e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2203      	movs	r2, #3
 8000f94:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 fb82 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000fa8:	f000 fc50 	bl	800184c <Error_Handler>
  }
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b017      	add	sp, #92	; 0x5c
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f006 fc1b 	bl	80077fe <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8000fc8:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <MX_ADC_Init+0x250>)
 8000fca:	4a8f      	ldr	r2, [pc, #572]	; (8001208 <MX_ADC_Init+0x254>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fce:	4b8d      	ldr	r3, [pc, #564]	; (8001204 <MX_ADC_Init+0x250>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <MX_ADC_Init+0x250>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b8a      	ldr	r3, [pc, #552]	; (8001204 <MX_ADC_Init+0x250>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <MX_ADC_Init+0x250>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b87      	ldr	r3, [pc, #540]	; (8001204 <MX_ADC_Init+0x250>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000fec:	4b85      	ldr	r3, [pc, #532]	; (8001204 <MX_ADC_Init+0x250>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ff2:	4b84      	ldr	r3, [pc, #528]	; (8001204 <MX_ADC_Init+0x250>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <MX_ADC_Init+0x250>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b81      	ldr	r3, [pc, #516]	; (8001204 <MX_ADC_Init+0x250>)
 8001000:	2200      	movs	r2, #0
 8001002:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001004:	4b7f      	ldr	r3, [pc, #508]	; (8001204 <MX_ADC_Init+0x250>)
 8001006:	22c2      	movs	r2, #194	; 0xc2
 8001008:	32ff      	adds	r2, #255	; 0xff
 800100a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b7d      	ldr	r3, [pc, #500]	; (8001204 <MX_ADC_Init+0x250>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001012:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <MX_ADC_Init+0x250>)
 8001014:	2224      	movs	r2, #36	; 0x24
 8001016:	2100      	movs	r1, #0
 8001018:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101a:	4b7a      	ldr	r3, [pc, #488]	; (8001204 <MX_ADC_Init+0x250>)
 800101c:	2201      	movs	r2, #1
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001020:	4b78      	ldr	r3, [pc, #480]	; (8001204 <MX_ADC_Init+0x250>)
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f842 	bl	80020ac <HAL_ADC_Init>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 fc0e 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	0152      	lsls	r2, r2, #5
 800103c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0552      	lsls	r2, r2, #21
 8001044:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <MX_ADC_Init+0x250>)
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f001 fa07 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001056:	f000 fbf9 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001060:	1d3a      	adds	r2, r7, #4
 8001062:	4b68      	ldr	r3, [pc, #416]	; (8001204 <MX_ADC_Init+0x250>)
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f001 f9fa 	bl	8002460 <HAL_ADC_ConfigChannel>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001070:	f000 fbec 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2202      	movs	r2, #2
 8001078:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	4b61      	ldr	r3, [pc, #388]	; (8001204 <MX_ADC_Init+0x250>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f001 f9ed 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800108a:	f000 fbdf 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2203      	movs	r2, #3
 8001092:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001094:	1d3a      	adds	r2, r7, #4
 8001096:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <MX_ADC_Init+0x250>)
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f001 f9e0 	bl	8002460 <HAL_ADC_ConfigChannel>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80010a4:	f000 fbd2 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2205      	movs	r2, #5
 80010ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010ae:	1d3a      	adds	r2, r7, #4
 80010b0:	4b54      	ldr	r3, [pc, #336]	; (8001204 <MX_ADC_Init+0x250>)
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f001 f9d3 	bl	8002460 <HAL_ADC_ConfigChannel>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80010be:	f000 fbc5 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2206      	movs	r2, #6
 80010c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <MX_ADC_Init+0x250>)
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 f9c6 	bl	8002460 <HAL_ADC_ConfigChannel>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80010d8:	f000 fbb8 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2207      	movs	r2, #7
 80010e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	4b47      	ldr	r3, [pc, #284]	; (8001204 <MX_ADC_Init+0x250>)
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 f9b9 	bl	8002460 <HAL_ADC_ConfigChannel>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80010f2:	f000 fbab 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2208      	movs	r2, #8
 80010fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_ADC_Init+0x250>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f001 f9ac 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 800110c:	f000 fb9e 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2209      	movs	r2, #9
 8001114:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001116:	1d3a      	adds	r2, r7, #4
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_ADC_Init+0x250>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f001 f99f 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8001126:	f000 fb91 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_10;
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	220a      	movs	r2, #10
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001130:	1d3a      	adds	r2, r7, #4
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <MX_ADC_Init+0x250>)
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f001 f992 	bl	8002460 <HAL_ADC_ConfigChannel>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001140:	f000 fb84 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	220b      	movs	r2, #11
 8001148:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_ADC_Init+0x250>)
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f001 f985 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800115a:	f000 fb77 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	220c      	movs	r2, #12
 8001162:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001164:	1d3a      	adds	r2, r7, #4
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_ADC_Init+0x250>)
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f001 f978 	bl	8002460 <HAL_ADC_ConfigChannel>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8001174:	f000 fb6a 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_13;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	220d      	movs	r2, #13
 800117c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_ADC_Init+0x250>)
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f001 f96b 	bl	8002460 <HAL_ADC_ConfigChannel>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800118e:	f000 fb5d 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_14;
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	220e      	movs	r2, #14
 8001196:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001198:	1d3a      	adds	r2, r7, #4
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_ADC_Init+0x250>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 f95e 	bl	8002460 <HAL_ADC_ConfigChannel>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80011a8:	f000 fb50 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_15;
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	220f      	movs	r2, #15
 80011b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_ADC_Init+0x250>)
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f001 f951 	bl	8002460 <HAL_ADC_ConfigChannel>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 80011c2:	f000 fb43 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2210      	movs	r2, #16
 80011ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011cc:	1d3a      	adds	r2, r7, #4
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_ADC_Init+0x250>)
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 f944 	bl	8002460 <HAL_ADC_ConfigChannel>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 80011dc:	f000 fb36 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2211      	movs	r2, #17
 80011e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011e6:	1d3a      	adds	r2, r7, #4
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_ADC_Init+0x250>)
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f001 f937 	bl	8002460 <HAL_ADC_ConfigChannel>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80011f6:	f000 fb29 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	200000b4 	.word	0x200000b4
 8001208:	40012400 	.word	0x40012400

0800120c <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_DAC1_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001218:	003b      	movs	r3, r7
 800121a:	0018      	movs	r0, r3
 800121c:	2308      	movs	r3, #8
 800121e:	001a      	movs	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f006 faec 	bl	80077fe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
   */
  hdac1.Instance = DAC;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_DAC1_Init+0x5c>)
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <MX_DAC1_Init+0x60>)
 800122a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_DAC1_Init+0x5c>)
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fc0a 	bl	8002a48 <HAL_DAC_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001238:	f000 fb08 	bl	800184c <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001248:	0039      	movs	r1, r7
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_DAC1_Init+0x5c>)
 800124c:	2200      	movs	r2, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f001 fc1d 	bl	8002a8e <HAL_DAC_ConfigChannel>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001258:	f000 faf8 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000402 	.word	0x20000402
 8001268:	20000138 	.word	0x20000138
 800126c:	40007400 	.word	0x40007400

08001270 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	0018      	movs	r0, r3
 80012ae:	f002 f825 	bl	80032fc <HAL_I2C_Init>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 fac9 	bl	800184c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012bc:	2100      	movs	r1, #0
 80012be:	0018      	movs	r0, r3
 80012c0:	f002 fcba 	bl	8003c38 <HAL_I2CEx_ConfigAnalogFilter>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 fac0 	bl	800184c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	0018      	movs	r0, r3
 80012d2:	f002 fcfd 	bl	8003cd0 <HAL_I2CEx_ConfigDigitalFilter>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fab7 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000014c 	.word	0x2000014c
 80012e8:	40005400 	.word	0x40005400
 80012ec:	2000090e 	.word	0x2000090e

080012f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_SPI1_Init+0x78>)
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MX_SPI1_Init+0x7c>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_SPI1_Init+0x78>)
 80012fc:	2282      	movs	r2, #130	; 0x82
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_SPI1_Init+0x78>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	00d2      	lsls	r2, r2, #3
 8001308:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_SPI1_Init+0x78>)
 800130c:	22f0      	movs	r2, #240	; 0xf0
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_SPI1_Init+0x78>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_SPI1_Init+0x78>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0x78>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_SPI1_Init+0x78>)
 8001328:	2230      	movs	r2, #48	; 0x30
 800132a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0x78>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <MX_SPI1_Init+0x78>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_SPI1_Init+0x78>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_SPI1_Init+0x78>)
 8001340:	2207      	movs	r2, #7
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_SPI1_Init+0x78>)
 8001346:	2200      	movs	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_SPI1_Init+0x78>)
 800134c:	2208      	movs	r2, #8
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <MX_SPI1_Init+0x78>)
 8001352:	0018      	movs	r0, r3
 8001354:	f003 fa86 	bl	8004864 <HAL_SPI_Init>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 fa76 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000198 	.word	0x20000198
 800136c:	40013000 	.word	0x40013000

08001370 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_SPI2_Init+0x78>)
 8001376:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <MX_SPI2_Init+0x7c>)
 8001378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_SPI2_Init+0x78>)
 800137c:	2282      	movs	r2, #130	; 0x82
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_SPI2_Init+0x78>)
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	00d2      	lsls	r2, r2, #3
 8001388:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_SPI2_Init+0x78>)
 800138c:	22f0      	movs	r2, #240	; 0xf0
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_SPI2_Init+0x78>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_SPI2_Init+0x78>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013a8:	2230      	movs	r2, #48	; 0x30
 80013aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <MX_SPI2_Init+0x78>)
 80013d2:	0018      	movs	r0, r3
 80013d4:	f003 fa46 	bl	8004864 <HAL_SPI_Init>
 80013d8:	1e03      	subs	r3, r0, #0
 80013da:	d001      	beq.n	80013e0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80013dc:	f000 fa36 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	200001fc 	.word	0x200001fc
 80013ec:	40003800 	.word	0x40003800

080013f0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b096      	sub	sp, #88	; 0x58
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	2348      	movs	r3, #72	; 0x48
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	0018      	movs	r0, r3
 80013fc:	2310      	movs	r3, #16
 80013fe:	001a      	movs	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	f006 f9fc 	bl	80077fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	2340      	movs	r3, #64	; 0x40
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	0018      	movs	r0, r3
 800140c:	2308      	movs	r3, #8
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f006 f9f4 	bl	80077fe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	2324      	movs	r3, #36	; 0x24
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	0018      	movs	r0, r3
 800141c:	231c      	movs	r3, #28
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f006 f9ec 	bl	80077fe <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	0018      	movs	r0, r3
 800142a:	2320      	movs	r3, #32
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f006 f9e5 	bl	80077fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <MX_TIM1_Init+0x160>)
 8001436:	4a47      	ldr	r2, [pc, #284]	; (8001554 <MX_TIM1_Init+0x164>)
 8001438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800143a:	4b45      	ldr	r3, [pc, #276]	; (8001550 <MX_TIM1_Init+0x160>)
 800143c:	2263      	movs	r2, #99	; 0x63
 800143e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <MX_TIM1_Init+0x160>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <MX_TIM1_Init+0x160>)
 8001448:	4a43      	ldr	r2, [pc, #268]	; (8001558 <MX_TIM1_Init+0x168>)
 800144a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <MX_TIM1_Init+0x160>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MX_TIM1_Init+0x160>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <MX_TIM1_Init+0x160>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_TIM1_Init+0x160>)
 8001460:	0018      	movs	r0, r3
 8001462:	f003 fd85 	bl	8004f70 <HAL_TIM_Base_Init>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800146a:	f000 f9ef 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	2148      	movs	r1, #72	; 0x48
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0152      	lsls	r2, r2, #5
 8001476:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001478:	187a      	adds	r2, r7, r1
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <MX_TIM1_Init+0x160>)
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f004 f9be 	bl	8005800 <HAL_TIM_ConfigClockSource>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001488:	f000 f9e0 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_TIM1_Init+0x160>)
 800148e:	0018      	movs	r0, r3
 8001490:	f003 ff82 	bl	8005398 <HAL_TIM_PWM_Init>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001498:	f000 f9d8 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014aa:	187a      	adds	r2, r7, r1
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <MX_TIM1_Init+0x160>)
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f004 fdd3 	bl	800605c <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80014ba:	f000 f9c7 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014be:	2124      	movs	r1, #36	; 0x24
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2260      	movs	r2, #96	; 0x60
 80014c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 - 1;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	22e0      	movs	r2, #224	; 0xe0
 80014ca:	32ff      	adds	r2, #255	; 0xff
 80014cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ec:	1879      	adds	r1, r7, r1
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_TIM1_Init+0x160>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f004 f8be 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014fc:	f000 f9a6 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0192      	lsls	r2, r2, #6
 8001524:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800152c:	1d3a      	adds	r2, r7, #4
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_TIM1_Init+0x160>)
 8001530:	0011      	movs	r1, r2
 8001532:	0018      	movs	r0, r3
 8001534:	f004 fdf0 	bl	8006118 <HAL_TIMEx_ConfigBreakDeadTime>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800153c:	f000 f986 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <MX_TIM1_Init+0x160>)
 8001542:	0018      	movs	r0, r3
 8001544:	f000 fbc2 	bl	8001ccc <HAL_TIM_MspPostInit>
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b016      	add	sp, #88	; 0x58
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000260 	.word	0x20000260
 8001554:	40012c00 	.word	0x40012c00
 8001558:	0000bb7f 	.word	0x0000bb7f

0800155c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	0018      	movs	r0, r3
 8001568:	2310      	movs	r3, #16
 800156a:	001a      	movs	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	f006 f946 	bl	80077fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001572:	2320      	movs	r3, #32
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	0018      	movs	r0, r3
 8001578:	2308      	movs	r3, #8
 800157a:	001a      	movs	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	f006 f93e 	bl	80077fe <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	0018      	movs	r0, r3
 8001586:	231c      	movs	r3, #28
 8001588:	001a      	movs	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	f006 f937 	bl	80077fe <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <MX_TIM2_Init+0xf8>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	05d2      	lsls	r2, r2, #23
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MX_TIM2_Init+0xf8>)
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <MX_TIM2_Init+0xfc>)
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015a6:	222c      	movs	r2, #44	; 0x2c
 80015a8:	32ff      	adds	r2, #255	; 0xff
 80015aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f003 fcd8 	bl	8004f70 <HAL_TIM_Base_Init>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80015c4:	f000 f942 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	2128      	movs	r1, #40	; 0x28
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	0152      	lsls	r2, r2, #5
 80015d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f004 f911 	bl	8005800 <HAL_TIM_ConfigClockSource>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80015e2:	f000 f933 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM2_Init+0xf8>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f003 fed5 	bl	8005398 <HAL_TIM_PWM_Init>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015f2:	f000 f92b 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2120      	movs	r1, #32
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001604:	187a      	adds	r2, r7, r1
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_TIM2_Init+0xf8>)
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f004 fd26 	bl	800605c <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	1e03      	subs	r3, r0, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001614:	f000 f91a 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2260      	movs	r2, #96	; 0x60
 800161c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30 - 1;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	221d      	movs	r2, #29
 8001622:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001630:	1d39      	adds	r1, r7, #4
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_TIM2_Init+0xf8>)
 8001634:	220c      	movs	r2, #12
 8001636:	0018      	movs	r0, r3
 8001638:	f004 f81c 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001640:	f000 f904 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <MX_TIM2_Init+0xf8>)
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fb40 	bl	8001ccc <HAL_TIM_MspPostInit>
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b00e      	add	sp, #56	; 0x38
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200002a8 	.word	0x200002a8
 8001658:	000003e7 	.word	0x000003e7

0800165c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_USART1_UART_Init+0x6c>)
 8001662:	2200      	movs	r2, #0
 8001664:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_USART1_UART_Init+0x70>)
 8001668:	2200      	movs	r2, #0
 800166a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_USART1_UART_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <MX_USART1_UART_Init+0x7c>)
 8001676:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 800167a:	22e1      	movs	r2, #225	; 0xe1
 800167c:	0212      	lsls	r2, r2, #8
 800167e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 8001694:	220c      	movs	r2, #12
 8001696:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USART1_UART_Init+0x78>)
 80016b2:	0018      	movs	r0, r3
 80016b4:	f004 fd9e 	bl	80061f4 <HAL_UART_Init>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80016bc:	f000 f8c6 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	20000414 	.word	0x20000414
 80016cc:	20000416 	.word	0x20000416
 80016d0:	20000418 	.word	0x20000418
 80016d4:	200002f0 	.word	0x200002f0
 80016d8:	40013800 	.word	0x40013800

080016dc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_DMA_Init+0x38>)
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_DMA_Init+0x38>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_DMA_Init+0x38>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2009      	movs	r0, #9
 8001700:	f001 f970 	bl	80029e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001704:	2009      	movs	r0, #9
 8001706:	f001 f982 	bl	8002a0e <HAL_NVIC_EnableIRQ>
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40021000 	.word	0x40021000

08001718 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08b      	sub	sp, #44	; 0x2c
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	2414      	movs	r4, #20
 8001720:	193b      	adds	r3, r7, r4
 8001722:	0018      	movs	r0, r3
 8001724:	2314      	movs	r3, #20
 8001726:	001a      	movs	r2, r3
 8001728:	2100      	movs	r1, #0
 800172a:	f006 f868 	bl	80077fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <MX_GPIO_Init+0x124>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <MX_GPIO_Init+0x124>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0309      	lsls	r1, r1, #12
 8001738:	430a      	orrs	r2, r1
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <MX_GPIO_Init+0x124>)
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	031b      	lsls	r3, r3, #12
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174a:	4b3c      	ldr	r3, [pc, #240]	; (800183c <MX_GPIO_Init+0x124>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <MX_GPIO_Init+0x124>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	03c9      	lsls	r1, r1, #15
 8001754:	430a      	orrs	r2, r1
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <MX_GPIO_Init+0x124>)
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	03db      	lsls	r3, r3, #15
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b35      	ldr	r3, [pc, #212]	; (800183c <MX_GPIO_Init+0x124>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <MX_GPIO_Init+0x124>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0289      	lsls	r1, r1, #10
 8001770:	430a      	orrs	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <MX_GPIO_Init+0x124>)
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <MX_GPIO_Init+0x124>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_GPIO_Init+0x124>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	02c9      	lsls	r1, r1, #11
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <MX_GPIO_Init+0x124>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	02db      	lsls	r3, r3, #11
 8001798:	4013      	ands	r3, r2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 800179e:	239f      	movs	r3, #159	; 0x9f
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	4827      	ldr	r0, [pc, #156]	; (8001840 <MX_GPIO_Init+0x128>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	0019      	movs	r1, r3
 80017a8:	f001 fd8b 	bl	80032c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <MX_GPIO_Init+0x12c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	21c0      	movs	r1, #192	; 0xc0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 fd85 	bl	80032c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <MX_GPIO_Init+0x130>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	2160      	movs	r1, #96	; 0x60
 80017be:	0018      	movs	r0, r3
 80017c0:	f001 fd7f 	bl	80032c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	229f      	movs	r2, #159	; 0x9f
 80017c8:	0192      	lsls	r2, r2, #6
 80017ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	2201      	movs	r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_GPIO_Init+0x128>)
 80017e2:	0019      	movs	r1, r3
 80017e4:	0010      	movs	r0, r2
 80017e6:	f001 fbdf 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	22c0      	movs	r2, #192	; 0xc0
 80017ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001802:	193b      	adds	r3, r7, r4
 8001804:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <MX_GPIO_Init+0x12c>)
 8001806:	0019      	movs	r1, r3
 8001808:	0010      	movs	r0, r2
 800180a:	f001 fbcd 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800180e:	0021      	movs	r1, r4
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2260      	movs	r2, #96	; 0x60
 8001814:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2201      	movs	r2, #1
 800181a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	187b      	adds	r3, r7, r1
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	187b      	adds	r3, r7, r1
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <MX_GPIO_Init+0x130>)
 800182c:	0019      	movs	r1, r3
 800182e:	0010      	movs	r0, r2
 8001830:	f001 fbba 	bl	8002fa8 <HAL_GPIO_Init>
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b00b      	add	sp, #44	; 0x2c
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800
 8001844:	48001400 	.word	0x48001400
 8001848:	48000400 	.word	0x48000400

0800184c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_MspInit+0x44>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_ADC_MspInit>:
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b08d      	sub	sp, #52	; 0x34
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	241c      	movs	r4, #28
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f005 ffa3 	bl	80077fe <memset>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_ADC_MspInit+0x148>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d000      	beq.n	80018c4 <HAL_ADC_MspInit+0x24>
 80018c2:	e08d      	b.n	80019e0 <HAL_ADC_MspInit+0x140>
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0089      	lsls	r1, r1, #2
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0309      	lsls	r1, r1, #12
 80018ea:	430a      	orrs	r2, r1
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	4013      	ands	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	0289      	lsls	r1, r1, #10
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	4b38      	ldr	r3, [pc, #224]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	02c9      	lsls	r1, r1, #11
 8001922:	430a      	orrs	r2, r1
 8001924:	615a      	str	r2, [r3, #20]
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_ADC_MspInit+0x14c>)
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	02db      	lsls	r3, r3, #11
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	193b      	adds	r3, r7, r4
 8001936:	223f      	movs	r2, #63	; 0x3f
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2203      	movs	r2, #3
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	193b      	adds	r3, r7, r4
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_ADC_MspInit+0x150>)
 800194a:	0019      	movs	r1, r3
 800194c:	0010      	movs	r0, r2
 800194e:	f001 fb2b 	bl	8002fa8 <HAL_GPIO_Init>
 8001952:	193b      	adds	r3, r7, r4
 8001954:	228f      	movs	r2, #143	; 0x8f
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	193b      	adds	r3, r7, r4
 800195a:	2203      	movs	r2, #3
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	193b      	adds	r3, r7, r4
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	193a      	adds	r2, r7, r4
 8001966:	2390      	movs	r3, #144	; 0x90
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fb1b 	bl	8002fa8 <HAL_GPIO_Init>
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2203      	movs	r2, #3
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	193b      	adds	r3, r7, r4
 800197a:	2203      	movs	r2, #3
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	193b      	adds	r3, r7, r4
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	193b      	adds	r3, r7, r4
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_ADC_MspInit+0x154>)
 8001988:	0019      	movs	r1, r3
 800198a:	0010      	movs	r0, r2
 800198c:	f001 fb0c 	bl	8002fa8 <HAL_GPIO_Init>
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_ADC_MspInit+0x15c>)
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0052      	lsls	r2, r2, #1
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	00d2      	lsls	r2, r2, #3
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 f8d8 	bl	8002b7c <HAL_DMA_Init>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_ADC_MspInit+0x134>
 80019d0:	f7ff ff3c 	bl	800184c <Error_Handler>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_ADC_MspInit+0x158>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b00d      	add	sp, #52	; 0x34
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	40012400 	.word	0x40012400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000400 	.word	0x48000400
 80019f8:	200000f4 	.word	0x200000f4
 80019fc:	40020008 	.word	0x40020008

08001a00 <HAL_DAC_MspInit>:
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	2414      	movs	r4, #20
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2314      	movs	r3, #20
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f005 fef3 	bl	80077fe <memset>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_DAC_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12b      	bne.n	8001a7a <HAL_DAC_MspInit+0x7a>
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0589      	lsls	r1, r1, #22
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	61da      	str	r2, [r3, #28]
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	059b      	lsls	r3, r3, #22
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0289      	lsls	r1, r1, #10
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_DAC_MspInit+0x88>)
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	2203      	movs	r2, #3
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	193a      	adds	r2, r7, r4
 8001a6e:	2390      	movs	r3, #144	; 0x90
 8001a70:	05db      	lsls	r3, r3, #23
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f001 fa97 	bl	8002fa8 <HAL_GPIO_Init>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b00b      	add	sp, #44	; 0x2c
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40007400 	.word	0x40007400
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_I2C_MspInit>:
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b08b      	sub	sp, #44	; 0x2c
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	2414      	movs	r4, #20
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	0018      	movs	r0, r3
 8001a9a:	2314      	movs	r3, #20
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f005 fead 	bl	80077fe <memset>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_I2C_MspInit+0x90>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d132      	bne.n	8001b14 <HAL_I2C_MspInit+0x88>
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	02c9      	lsls	r1, r1, #11
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	02db      	lsls	r3, r3, #11
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	22c0      	movs	r2, #192	; 0xc0
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	0021      	movs	r1, r4
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2212      	movs	r2, #18
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	2201      	movs	r2, #1
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001af0:	0019      	movs	r1, r3
 8001af2:	0010      	movs	r0, r2
 8001af4:	f001 fa58 	bl	8002fa8 <HAL_GPIO_Init>
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0389      	lsls	r1, r1, #14
 8001b02:	430a      	orrs	r2, r1
 8001b04:	61da      	str	r2, [r3, #28]
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	039b      	lsls	r3, r3, #14
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b00b      	add	sp, #44	; 0x2c
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	48000400 	.word	0x48000400

08001b28 <HAL_SPI_MspInit>:
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b08d      	sub	sp, #52	; 0x34
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	241c      	movs	r4, #28
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	0018      	movs	r0, r3
 8001b36:	2314      	movs	r3, #20
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f005 fe5f 	bl	80077fe <memset>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <HAL_SPI_MspInit+0x100>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d132      	bne.n	8001bb0 <HAL_SPI_MspInit+0x88>
 8001b4a:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0149      	lsls	r1, r1, #5
 8001b54:	430a      	orrs	r2, r1
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	02c9      	lsls	r1, r1, #11
 8001b70:	430a      	orrs	r2, r1
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	0021      	movs	r1, r4
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2218      	movs	r2, #24
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_SPI_MspInit+0x108>)
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	0010      	movs	r0, r2
 8001baa:	f001 f9fd 	bl	8002fa8 <HAL_GPIO_Init>
 8001bae:	e037      	b.n	8001c20 <HAL_SPI_MspInit+0xf8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <HAL_SPI_MspInit+0x10c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d132      	bne.n	8001c20 <HAL_SPI_MspInit+0xf8>
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	01c9      	lsls	r1, r1, #7
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	61da      	str	r2, [r3, #28]
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	02c9      	lsls	r1, r1, #11
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_SPI_MspInit+0x104>)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	02db      	lsls	r3, r3, #11
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	211c      	movs	r1, #28
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	22c0      	movs	r2, #192	; 0xc0
 8001bf8:	01d2      	lsls	r2, r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2202      	movs	r2, #2
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_SPI_MspInit+0x108>)
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f001 f9c4 	bl	8002fa8 <HAL_GPIO_Init>
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b00d      	add	sp, #52	; 0x34
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	40013000 	.word	0x40013000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40003800 	.word	0x40003800

08001c38 <HAL_TIM_Base_MspInit>:
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_Base_MspInit+0x8c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11e      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x50>
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0109      	lsls	r1, r1, #4
 8001c54:	430a      	orrs	r2, r1
 8001c56:	619a      	str	r2, [r3, #24]
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	200d      	movs	r0, #13
 8001c6c:	f000 feba 	bl	80029e4 <HAL_NVIC_SetPriority>
 8001c70:	200d      	movs	r0, #13
 8001c72:	f000 fecc 	bl	8002a0e <HAL_NVIC_EnableIRQ>
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	200e      	movs	r0, #14
 8001c7c:	f000 feb2 	bl	80029e4 <HAL_NVIC_SetPriority>
 8001c80:	200e      	movs	r0, #14
 8001c82:	f000 fec4 	bl	8002a0e <HAL_NVIC_EnableIRQ>
 8001c86:	e019      	b.n	8001cbc <HAL_TIM_Base_MspInit+0x84>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	05db      	lsls	r3, r3, #23
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d113      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x84>
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2101      	movs	r1, #1
 8001cb0:	200f      	movs	r0, #15
 8001cb2:	f000 fe97 	bl	80029e4 <HAL_NVIC_SetPriority>
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f000 fea9 	bl	8002a0e <HAL_NVIC_EnableIRQ>
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIM_MspPostInit>:
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	2414      	movs	r4, #20
 8001cd6:	193b      	adds	r3, r7, r4
 8001cd8:	0018      	movs	r0, r3
 8001cda:	2314      	movs	r3, #20
 8001cdc:	001a      	movs	r2, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f005 fd8d 	bl	80077fe <memset>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_TIM_MspPostInit+0xd0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d126      	bne.n	8001d3c <HAL_TIM_MspPostInit+0x70>
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0289      	lsls	r1, r1, #10
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	029b      	lsls	r3, r3, #10
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	0021      	movs	r1, r4
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	2202      	movs	r2, #2
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	2202      	movs	r2, #2
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	187a      	adds	r2, r7, r1
 8001d2e:	2390      	movs	r3, #144	; 0x90
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f001 f937 	bl	8002fa8 <HAL_GPIO_Init>
 8001d3a:	e02a      	b.n	8001d92 <HAL_TIM_MspPostInit+0xc6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d124      	bne.n	8001d92 <HAL_TIM_MspPostInit+0xc6>
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	02c9      	lsls	r1, r1, #11
 8001d52:	430a      	orrs	r2, r1
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_TIM_MspPostInit+0xd4>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	02db      	lsls	r3, r3, #11
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2114      	movs	r1, #20
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2202      	movs	r2, #2
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2202      	movs	r2, #2
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_TIM_MspPostInit+0xd8>)
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	0010      	movs	r0, r2
 8001d8e:	f001 f90b 	bl	8002fa8 <HAL_GPIO_Init>
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b00b      	add	sp, #44	; 0x2c
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000400 	.word	0x48000400

08001da8 <HAL_UART_MspInit>:
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b08b      	sub	sp, #44	; 0x2c
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	2414      	movs	r4, #20
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	0018      	movs	r0, r3
 8001db6:	2314      	movs	r3, #20
 8001db8:	001a      	movs	r2, r3
 8001dba:	2100      	movs	r1, #0
 8001dbc:	f005 fd1f 	bl	80077fe <memset>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_UART_MspInit+0xa4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d13b      	bne.n	8001e42 <HAL_UART_MspInit+0x9a>
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	01c9      	lsls	r1, r1, #7
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	01db      	lsls	r3, r3, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	0289      	lsls	r1, r1, #10
 8001df0:	430a      	orrs	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_MspInit+0xa8>)
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	22c0      	movs	r2, #192	; 0xc0
 8001e06:	00d2      	lsls	r2, r2, #3
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	0021      	movs	r1, r4
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2202      	movs	r2, #2
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2201      	movs	r2, #1
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	187a      	adds	r2, r7, r1
 8001e26:	2390      	movs	r3, #144	; 0x90
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f001 f8bb 	bl	8002fa8 <HAL_GPIO_Init>
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201b      	movs	r0, #27
 8001e38:	f000 fdd4 	bl	80029e4 <HAL_NVIC_SetPriority>
 8001e3c:	201b      	movs	r0, #27
 8001e3e:	f000 fde6 	bl	8002a0e <HAL_NVIC_EnableIRQ>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b00b      	add	sp, #44	; 0x2c
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40021000 	.word	0x40021000

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f8ee 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <DMA1_Channel1_IRQHandler+0x14>)
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 ffa1 	bl	8002dd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	200000f4 	.word	0x200000f4

08001e9c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f003 fad0 	bl	8005448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	20000260 	.word	0x20000260

08001eb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <TIM1_CC_IRQHandler+0x14>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f003 fac4 	bl	8005448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	20000260 	.word	0x20000260

08001ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <TIM2_IRQHandler+0x14>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f003 fab8 	bl	8005448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	200002a8 	.word	0x200002a8

08001ee4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <USART1_IRQHandler+0x14>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f004 fae0 	bl	80064b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	200002f0 	.word	0x200002f0

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	18d3      	adds	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f005 fc20 	bl	8007770 <__errno>
 8001f30:	0003      	movs	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	425b      	negs	r3, r3
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	18d2      	adds	r2, r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b006      	add	sp, #24
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20002000 	.word	0x20002000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	20000424 	.word	0x20000424
 8001f64:	20000440 	.word	0x20000440

08001f68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <Reset_Handler>:
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <LoopForever+0x2>)
 8001f76:	4685      	mov	sp, r0
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopForever+0x6>)
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <LoopForever+0xa>)
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <LoopForever+0xe>)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:
 8001f82:	58d4      	ldr	r4, [r2, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:
 8001f88:	18c4      	adds	r4, r0, r3
 8001f8a:	428c      	cmp	r4, r1
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopForever+0x12>)
 8001f90:	4c0b      	ldr	r4, [pc, #44]	; (8001fc0 <LoopForever+0x16>)
 8001f92:	2300      	movs	r3, #0
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:
 8001f9a:	42a2      	cmp	r2, r4
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>
 8001f9e:	f7ff ffe3 	bl	8001f68 <SystemInit>
 8001fa2:	f005 fbeb 	bl	800777c <__libc_init_array>
 8001fa6:	f7fe ff37 	bl	8000e18 <main>

08001faa <LoopForever>:
 8001faa:	e7fe      	b.n	8001faa <LoopForever>
 8001fac:	20002000 	.word	0x20002000
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000098 	.word	0x20000098
 8001fb8:	08007b28 	.word	0x08007b28
 8001fbc:	20000098 	.word	0x20000098
 8001fc0:	2000043c 	.word	0x2000043c

08001fc4 <ADC1_COMP_IRQHandler>:
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_COMP_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_Init+0x24>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_Init+0x24>)
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 f809 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fde:	f7ff fc3b 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_InitTick+0x5c>)
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_InitTick+0x60>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	0019      	movs	r1, r3
 8002002:	23fa      	movs	r3, #250	; 0xfa
 8002004:	0098      	lsls	r0, r3, #2
 8002006:	f7fe f87f 	bl	8000108 <__udivsi3>
 800200a:	0003      	movs	r3, r0
 800200c:	0019      	movs	r1, r3
 800200e:	0020      	movs	r0, r4
 8002010:	f7fe f87a 	bl	8000108 <__udivsi3>
 8002014:	0003      	movs	r3, r0
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fd09 	bl	8002a2e <HAL_SYSTICK_Config>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00f      	b.n	8002044 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d80b      	bhi.n	8002042 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	2301      	movs	r3, #1
 800202e:	425b      	negs	r3, r3
 8002030:	2200      	movs	r2, #0
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fcd6 	bl	80029e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_InitTick+0x64>)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b003      	add	sp, #12
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	20000028 	.word	0x20000028
 8002050:	20000030 	.word	0x20000030
 8002054:	2000002c 	.word	0x2000002c

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x1c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	18d2      	adds	r2, r2, r3
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_IncTick+0x20>)
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	20000030 	.word	0x20000030
 8002078:	20000428 	.word	0x20000428

0800207c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <HAL_GetTick+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	20000428 	.word	0x20000428

08002090 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_SuspendTick+0x18>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_SuspendTick+0x18>)
 800209a:	2102      	movs	r1, #2
 800209c:	438a      	bics	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	230f      	movs	r3, #15
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e125      	b.n	8002316 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2234      	movs	r2, #52	; 0x34
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7ff fbdc 	bl	80018a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	2210      	movs	r2, #16
 80020ee:	4013      	ands	r3, r2
 80020f0:	d000      	beq.n	80020f4 <HAL_ADC_Init+0x48>
 80020f2:	e103      	b.n	80022fc <HAL_ADC_Init+0x250>
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d000      	beq.n	8002100 <HAL_ADC_Init+0x54>
 80020fe:	e0fd      	b.n	80022fc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800210a:	d000      	beq.n	800210e <HAL_ADC_Init+0x62>
 800210c:	e0f6      	b.n	80022fc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	4a83      	ldr	r2, [pc, #524]	; (8002320 <HAL_ADC_Init+0x274>)
 8002114:	4013      	ands	r3, r2
 8002116:	2202      	movs	r2, #2
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2203      	movs	r2, #3
 8002126:	4013      	ands	r3, r2
 8002128:	2b01      	cmp	r3, #1
 800212a:	d112      	bne.n	8002152 <HAL_ADC_Init+0xa6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	2b01      	cmp	r3, #1
 8002138:	d009      	beq.n	800214e <HAL_ADC_Init+0xa2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	401a      	ands	r2, r3
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	429a      	cmp	r2, r3
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Init+0xa6>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_ADC_Init+0xa8>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2218      	movs	r2, #24
 8002160:	4393      	bics	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	0899      	lsrs	r1, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4964      	ldr	r1, [pc, #400]	; (8002324 <HAL_ADC_Init+0x278>)
 8002192:	400a      	ands	r2, r1
 8002194:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7e1b      	ldrb	r3, [r3, #24]
 800219a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e5b      	ldrb	r3, [r3, #25]
 80021a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e9b      	ldrb	r3, [r3, #26]
 80021a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80021aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d002      	beq.n	80021ba <HAL_ADC_Init+0x10e>
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	e000      	b.n	80021bc <HAL_ADC_Init+0x110>
 80021ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_Init+0x124>
 80021cc:	2304      	movs	r3, #4
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_Init+0x126>
 80021d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80021d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2124      	movs	r1, #36	; 0x24
 80021d8:	5c5b      	ldrb	r3, [r3, r1]
 80021da:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021dc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7edb      	ldrb	r3, [r3, #27]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d115      	bne.n	8002218 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e9b      	ldrb	r3, [r3, #26]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0252      	lsls	r2, r2, #9
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	e00b      	b.n	8002218 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	2220      	movs	r2, #32
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2201      	movs	r2, #1
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	23c2      	movs	r3, #194	; 0xc2
 800221e:	33ff      	adds	r3, #255	; 0xff
 8002220:	429a      	cmp	r2, r3
 8002222:	d007      	beq.n	8002234 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800222c:	4313      	orrs	r3, r2
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4313      	orrs	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68d9      	ldr	r1, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	055b      	lsls	r3, r3, #21
 800224c:	429a      	cmp	r2, r3
 800224e:	d01b      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d017      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	2b02      	cmp	r3, #2
 800225e:	d013      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b03      	cmp	r3, #3
 8002266:	d00f      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00b      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2b05      	cmp	r3, #5
 8002276:	d007      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b06      	cmp	r3, #6
 800227e:	d003      	beq.n	8002288 <HAL_ADC_Init+0x1dc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	2b07      	cmp	r3, #7
 8002286:	d112      	bne.n	80022ae <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2107      	movs	r1, #7
 8002294:	438a      	bics	r2, r1
 8002296:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6959      	ldr	r1, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	2207      	movs	r2, #7
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_ADC_Init+0x27c>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d10b      	bne.n	80022d6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	2203      	movs	r2, #3
 80022ca:	4393      	bics	r3, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022d4:	e01c      	b.n	8002310 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	2212      	movs	r2, #18
 80022dc:	4393      	bics	r3, r2
 80022de:	2210      	movs	r2, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2201      	movs	r2, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80022f2:	230f      	movs	r3, #15
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022fa:	e009      	b.n	8002310 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	2210      	movs	r2, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002308:	230f      	movs	r3, #15
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002310:	230f      	movs	r3, #15
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	fffffefd 	.word	0xfffffefd
 8002324:	fffe0219 	.word	0xfffe0219
 8002328:	833fffe7 	.word	0x833fffe7

0800232c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2317      	movs	r3, #23
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
 800234a:	d15e      	bne.n	800240a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2234      	movs	r2, #52	; 0x34
 8002350:	5c9b      	ldrb	r3, [r3, r2]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADC_Start_DMA+0x2e>
 8002356:	2302      	movs	r3, #2
 8002358:	e05e      	b.n	8002418 <HAL_ADC_Start_DMA+0xec>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2234      	movs	r2, #52	; 0x34
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	7e5b      	ldrb	r3, [r3, #25]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d007      	beq.n	800237a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800236a:	2317      	movs	r3, #23
 800236c:	18fc      	adds	r4, r7, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f983 	bl	800267c <ADC_Enable>
 8002376:	0003      	movs	r3, r0
 8002378:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800237a:	2317      	movs	r3, #23
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d146      	bne.n	8002412 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <HAL_ADC_Start_DMA+0xf4>)
 800238a:	4013      	ands	r3, r2
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0052      	lsls	r2, r2, #1
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2234      	movs	r2, #52	; 0x34
 80023a0:	2100      	movs	r1, #0
 80023a2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_ADC_Start_DMA+0xf8>)
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_ADC_Start_DMA+0xfc>)
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <HAL_ADC_Start_DMA+0x100>)
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	221c      	movs	r2, #28
 80023c2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2110      	movs	r1, #16
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	0019      	movs	r1, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f000 fc0a 	bl	8002c0c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2104      	movs	r1, #4
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	e003      	b.n	8002412 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800240a:	2317      	movs	r3, #23
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002412:	2317      	movs	r3, #23
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b007      	add	sp, #28
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	fffff0fe 	.word	0xfffff0fe
 8002424:	08002785 	.word	0x08002785
 8002428:	08002839 	.word	0x08002839
 800242c:	08002857 	.word	0x08002857

08002430 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246a:	230f      	movs	r3, #15
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	429a      	cmp	r2, r3
 8002480:	d011      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x46>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d00d      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x46>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	2b02      	cmp	r3, #2
 8002490:	d009      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x46>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	2b03      	cmp	r3, #3
 8002498:	d005      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x46>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d001      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x46>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2234      	movs	r2, #52	; 0x34
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x54>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0d0      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1f6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2234      	movs	r2, #52	; 0x34
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2204      	movs	r2, #4
 80024c4:	4013      	ands	r3, r2
 80024c6:	d000      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x6a>
 80024c8:	e0b4      	b.n	8002634 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a64      	ldr	r2, [pc, #400]	; (8002660 <HAL_ADC_ConfigChannel+0x200>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x76>
 80024d4:	e082      	b.n	80025dc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	055b      	lsls	r3, r3, #21
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d037      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d033      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b02      	cmp	r3, #2
 8002506:	d02f      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2b03      	cmp	r3, #3
 800250e:	d02b      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b04      	cmp	r3, #4
 8002516:	d027      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b05      	cmp	r3, #5
 800251e:	d023      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2b06      	cmp	r3, #6
 8002526:	d01f      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b07      	cmp	r3, #7
 800252e:	d01b      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2107      	movs	r1, #7
 800253c:	400b      	ands	r3, r1
 800253e:	429a      	cmp	r2, r3
 8002540:	d012      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2107      	movs	r1, #7
 800254e:	438a      	bics	r2, r1
 8002550:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6959      	ldr	r1, [r3, #20]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2207      	movs	r2, #7
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d007      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x120>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	d003      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x120>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b12      	cmp	r3, #18
 800257e:	d163      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <HAL_ADC_ConfigChannel+0x204>)
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b10      	cmp	r3, #16
 800258a:	d009      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x140>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b11      	cmp	r3, #17
 8002592:	d102      	bne.n	800259a <HAL_ADC_ConfigChannel+0x13a>
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	03db      	lsls	r3, r3, #15
 8002598:	e004      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x144>
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	045b      	lsls	r3, r3, #17
 800259e:	e001      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x144>
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <HAL_ADC_ConfigChannel+0x204>)
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d14a      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_ADC_ConfigChannel+0x208>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	492d      	ldr	r1, [pc, #180]	; (800266c <HAL_ADC_ConfigChannel+0x20c>)
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7fd fda5 	bl	8000108 <__udivsi3>
 80025be:	0003      	movs	r3, r0
 80025c0:	001a      	movs	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x16e>
 80025da:	e035      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	4099      	lsls	r1, r3
 80025ea:	000b      	movs	r3, r1
 80025ec:	43d9      	mvns	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d007      	beq.n	800260e <HAL_ADC_ConfigChannel+0x1ae>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b11      	cmp	r3, #17
 8002604:	d003      	beq.n	800260e <HAL_ADC_ConfigChannel+0x1ae>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b12      	cmp	r3, #18
 800260c:	d11c      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_ADC_ConfigChannel+0x204>)
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b10      	cmp	r3, #16
 8002618:	d007      	beq.n	800262a <HAL_ADC_ConfigChannel+0x1ca>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b11      	cmp	r3, #17
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x1c6>
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_ADC_ConfigChannel+0x210>)
 8002624:	e002      	b.n	800262c <HAL_ADC_ConfigChannel+0x1cc>
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_ADC_ConfigChannel+0x214>)
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x1cc>
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_ADC_ConfigChannel+0x218>)
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <HAL_ADC_ConfigChannel+0x204>)
 800262e:	400b      	ands	r3, r1
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e009      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	2220      	movs	r2, #32
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002640:	230f      	movs	r3, #15
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2234      	movs	r2, #52	; 0x34
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	00001001 	.word	0x00001001
 8002664:	40012708 	.word	0x40012708
 8002668:	20000028 	.word	0x20000028
 800266c:	000f4240 	.word	0x000f4240
 8002670:	ffbfffff 	.word	0xffbfffff
 8002674:	feffffff 	.word	0xfeffffff
 8002678:	ff7fffff 	.word	0xff7fffff

0800267c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	2b01      	cmp	r3, #1
 8002698:	d112      	bne.n	80026c0 <ADC_Enable+0x44>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d009      	beq.n	80026bc <ADC_Enable+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	401a      	ands	r2, r3
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d101      	bne.n	80026c0 <ADC_Enable+0x44>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <ADC_Enable+0x46>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d152      	bne.n	800276c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <ADC_Enable+0xfc>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	d00d      	beq.n	80026ee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	2210      	movs	r2, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	2201      	movs	r2, #1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e03f      	b.n	800276e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <ADC_Enable+0x100>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	491f      	ldr	r1, [pc, #124]	; (8002780 <ADC_Enable+0x104>)
 8002704:	0018      	movs	r0, r3
 8002706:	f7fd fcff 	bl	8000108 <__udivsi3>
 800270a:	0003      	movs	r3, r0
 800270c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800270e:	e002      	b.n	8002716 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3b01      	subs	r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f9      	bne.n	8002710 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800271c:	f7ff fcae 	bl	800207c <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002724:	e01b      	b.n	800275e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002726:	f7ff fca9 	bl	800207c <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d914      	bls.n	800275e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	2b01      	cmp	r3, #1
 8002740:	d00d      	beq.n	800275e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	2210      	movs	r2, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	2201      	movs	r2, #1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e007      	b.n	800276e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	2b01      	cmp	r3, #1
 800276a:	d1dc      	bne.n	8002726 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	80000017 	.word	0x80000017
 800277c:	20000028 	.word	0x20000028
 8002780:	000f4240 	.word	0x000f4240

08002784 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	2250      	movs	r2, #80	; 0x50
 8002798:	4013      	ands	r3, r2
 800279a:	d140      	bne.n	800281e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	23c0      	movs	r3, #192	; 0xc0
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4013      	ands	r3, r2
 80027b6:	d12d      	bne.n	8002814 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d129      	bne.n	8002814 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2208      	movs	r2, #8
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2204      	movs	r2, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	d110      	bne.n	80027fc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	210c      	movs	r1, #12
 80027e6:	438a      	bics	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	4a11      	ldr	r2, [pc, #68]	; (8002834 <ADC_DMAConvCplt+0xb0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	2201      	movs	r2, #1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
 80027fa:	e00b      	b.n	8002814 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	2220      	movs	r2, #32
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2201      	movs	r2, #1
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff fe0a 	bl	8002430 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800281c:	e005      	b.n	800282a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	0010      	movs	r0, r2
 8002828:	4798      	blx	r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	fffffefe 	.word	0xfffffefe

08002838 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff fdf9 	bl	8002440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}

08002856 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	431a      	orrs	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2204      	movs	r2, #4
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff fde6 	bl	8002450 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}

0800288c <__NVIC_EnableIRQ>:
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	0002      	movs	r2, r0
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b7f      	cmp	r3, #127	; 0x7f
 800289e:	d809      	bhi.n	80028b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	001a      	movs	r2, r3
 80028a6:	231f      	movs	r3, #31
 80028a8:	401a      	ands	r2, r3
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_EnableIRQ+0x30>)
 80028ac:	2101      	movs	r1, #1
 80028ae:	4091      	lsls	r1, r2
 80028b0:	000a      	movs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	0002      	movs	r2, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b7f      	cmp	r3, #127	; 0x7f
 80028d4:	d828      	bhi.n	8002928 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d6:	4a2f      	ldr	r2, [pc, #188]	; (8002994 <__NVIC_SetPriority+0xd4>)
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	33c0      	adds	r3, #192	; 0xc0
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	589b      	ldr	r3, [r3, r2]
 80028e6:	1dfa      	adds	r2, r7, #7
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	0011      	movs	r1, r2
 80028ec:	2203      	movs	r2, #3
 80028ee:	400a      	ands	r2, r1
 80028f0:	00d2      	lsls	r2, r2, #3
 80028f2:	21ff      	movs	r1, #255	; 0xff
 80028f4:	4091      	lsls	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	43d2      	mvns	r2, r2
 80028fa:	401a      	ands	r2, r3
 80028fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	401a      	ands	r2, r3
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	2303      	movs	r3, #3
 800290e:	4003      	ands	r3, r0
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002914:	481f      	ldr	r0, [pc, #124]	; (8002994 <__NVIC_SetPriority+0xd4>)
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b25b      	sxtb	r3, r3
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	430a      	orrs	r2, r1
 8002920:	33c0      	adds	r3, #192	; 0xc0
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	501a      	str	r2, [r3, r0]
}
 8002926:	e031      	b.n	800298c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <__NVIC_SetPriority+0xd8>)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	0019      	movs	r1, r3
 8002930:	230f      	movs	r3, #15
 8002932:	400b      	ands	r3, r1
 8002934:	3b08      	subs	r3, #8
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3306      	adds	r3, #6
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	18d3      	adds	r3, r2, r3
 800293e:	3304      	adds	r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1dfa      	adds	r2, r7, #7
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	0011      	movs	r1, r2
 8002948:	2203      	movs	r2, #3
 800294a:	400a      	ands	r2, r1
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	21ff      	movs	r1, #255	; 0xff
 8002950:	4091      	lsls	r1, r2
 8002952:	000a      	movs	r2, r1
 8002954:	43d2      	mvns	r2, r2
 8002956:	401a      	ands	r2, r3
 8002958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	22ff      	movs	r2, #255	; 0xff
 8002960:	401a      	ands	r2, r3
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	2303      	movs	r3, #3
 800296a:	4003      	ands	r3, r0
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002970:	4809      	ldr	r0, [pc, #36]	; (8002998 <__NVIC_SetPriority+0xd8>)
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	001c      	movs	r4, r3
 8002978:	230f      	movs	r3, #15
 800297a:	4023      	ands	r3, r4
 800297c:	3b08      	subs	r3, #8
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	430a      	orrs	r2, r1
 8002982:	3306      	adds	r3, #6
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	18c3      	adds	r3, r0, r3
 8002988:	3304      	adds	r3, #4
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b003      	add	sp, #12
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	045b      	lsls	r3, r3, #17
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d301      	bcc.n	80029b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b0:	2301      	movs	r3, #1
 80029b2:	e010      	b.n	80029d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <SysTick_Config+0x44>)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	3a01      	subs	r2, #1
 80029ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029bc:	2301      	movs	r3, #1
 80029be:	425b      	negs	r3, r3
 80029c0:	2103      	movs	r1, #3
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff ff7c 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x44>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x44>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b002      	add	sp, #8
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	210f      	movs	r1, #15
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	1c02      	adds	r2, r0, #0
 80029f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b004      	add	sp, #16
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	0002      	movs	r2, r0
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b25b      	sxtb	r3, r3
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff ff33 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ffaf 	bl	800299c <SysTick_Config>
 8002a3e:	0003      	movs	r3, r0
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e015      	b.n	8002a86 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d106      	bne.n	8002a72 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7fe ffc7 	bl	8001a00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	795b      	ldrb	r3, [r3, #5]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_DAC_ConfigChannel+0x20>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e029      	b.n	8002b02 <HAL_DAC_ConfigChannel+0x74>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002ac2:	223e      	movs	r2, #62	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	43da      	mvns	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b006      	add	sp, #24
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	795b      	ldrb	r3, [r3, #5]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DAC_Start+0x16>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e028      	b.n	8002b72 <HAL_DAC_Start+0x68>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	409a      	lsls	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10e      	bne.n	8002b64 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	223c      	movs	r2, #60	; 0x3c
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b3c      	cmp	r3, #60	; 0x3c
 8002b52:	d107      	bne.n	8002b64 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e036      	b.n	8002c00 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2221      	movs	r2, #33	; 0x21
 8002b96:	2102      	movs	r1, #2
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_DMA_Init+0x8c>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f9c4 	bl	8002f70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2221      	movs	r2, #33	; 0x21
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}  
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	ffffc00f 	.word	0xffffc00f

08002c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2317      	movs	r3, #23
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Start_IT+0x24>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e04f      	b.n	8002cd0 <HAL_DMA_Start_IT+0xc4>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	5c9b      	ldrb	r3, [r3, r2]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13a      	bne.n	8002cba <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	2102      	movs	r1, #2
 8002c4a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	438a      	bics	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f954 	bl	8002f16 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	210e      	movs	r1, #14
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00f      	b.n	8002ca8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	210a      	movs	r1, #10
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002cc2:	2317      	movs	r3, #23
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002cca:	2317      	movs	r3, #23
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	781b      	ldrb	r3, [r3, #0]
} 
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b006      	add	sp, #24
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2221      	movs	r2, #33	; 0x21
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d008      	beq.n	8002cfe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e020      	b.n	8002d40 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	210e      	movs	r1, #14
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	2101      	movs	r1, #1
 8002d28:	4091      	lsls	r1, r2
 8002d2a:	000a      	movs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	210f      	movs	r1, #15
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2221      	movs	r2, #33	; 0x21
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d006      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e028      	b.n	8002dc4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	210e      	movs	r1, #14
 8002d7e:	438a      	bics	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4091      	lsls	r1, r2
 8002d9e:	000a      	movs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2221      	movs	r2, #33	; 0x21
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	0010      	movs	r0, r2
 8002dc2:	4798      	blx	r3
    } 
  }
  return status;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2204      	movs	r2, #4
 8002df0:	409a      	lsls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	d024      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x72>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d020      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d107      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2104      	movs	r1, #4
 8002e1a:	438a      	bics	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2104      	movs	r1, #4
 8002e28:	4091      	lsls	r1, r2
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d100      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x66>
 8002e36:	e06a      	b.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	0010      	movs	r0, r2
 8002e40:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e42:	e064      	b.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2202      	movs	r2, #2
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	d02b      	beq.n	8002eac <HAL_DMA_IRQHandler+0xda>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d027      	beq.n	8002eac <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d10b      	bne.n	8002e80 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	210a      	movs	r1, #10
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2221      	movs	r2, #33	; 0x21
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4091      	lsls	r1, r2
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	2100      	movs	r1, #0
 8002e96:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002eaa:	e030      	b.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d028      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d024      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	210e      	movs	r1, #14
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	2101      	movs	r1, #1
 8002ede:	4091      	lsls	r1, r2
 8002ee0:	000a      	movs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2221      	movs	r2, #33	; 0x21
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	0010      	movs	r0, r2
 8002f0a:	4798      	blx	r3
    }
   }
}  
 8002f0c:	e7ff      	b.n	8002f0e <HAL_DMA_IRQHandler+0x13c>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4091      	lsls	r1, r2
 8002f30:	000a      	movs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d108      	bne.n	8002f56 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f54:	e007      	b.n	8002f66 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <DMA_CalcBaseAndBitshift+0x30>)
 8002f7e:	4694      	mov	ip, r2
 8002f80:	4463      	add	r3, ip
 8002f82:	2114      	movs	r1, #20
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd f8bf 	bl	8000108 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	009a      	lsls	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <DMA_CalcBaseAndBitshift+0x34>)
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	bffdfff8 	.word	0xbffdfff8
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e14f      	b.n	8003258 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4091      	lsls	r1, r2
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <HAL_GPIO_Init+0x28>
 8002fce:	e140      	b.n	8003252 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	43da      	mvns	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	2201      	movs	r2, #1
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	2b03      	cmp	r3, #3
 8003054:	d017      	beq.n	8003086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	43da      	mvns	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	4013      	ands	r3, r2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d123      	bne.n	80030da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	58d3      	ldr	r3, [r2, r3]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2207      	movs	r2, #7
 80030a4:	4013      	ands	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	43da      	mvns	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2107      	movs	r1, #7
 80030be:	400b      	ands	r3, r1
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4013      	ands	r3, r2
 8003118:	d100      	bne.n	800311c <HAL_GPIO_Init+0x174>
 800311a:	e09a      	b.n	8003252 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311c:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_GPIO_Init+0x2c8>)
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_GPIO_Init+0x2c8>)
 8003122:	2101      	movs	r1, #1
 8003124:	430a      	orrs	r2, r1
 8003126:	619a      	str	r2, [r3, #24]
 8003128:	4b51      	ldr	r3, [pc, #324]	; (8003270 <HAL_GPIO_Init+0x2c8>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003134:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <HAL_GPIO_Init+0x2cc>)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2203      	movs	r2, #3
 8003146:	4013      	ands	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	409a      	lsls	r2, r3
 800314e:	0013      	movs	r3, r2
 8003150:	43da      	mvns	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	2390      	movs	r3, #144	; 0x90
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x1e2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a44      	ldr	r2, [pc, #272]	; (8003278 <HAL_GPIO_Init+0x2d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x1de>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a43      	ldr	r2, [pc, #268]	; (800327c <HAL_GPIO_Init+0x2d4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x1da>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a42      	ldr	r2, [pc, #264]	; (8003280 <HAL_GPIO_Init+0x2d8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x1d6>
 800317a:	2303      	movs	r3, #3
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x1e4>
 800317e:	2305      	movs	r3, #5
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x1e4>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x1e4>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x1e4>
 800318a:	2300      	movs	r3, #0
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	2103      	movs	r1, #3
 8003190:	400a      	ands	r2, r1
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x2cc>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	025b      	lsls	r3, r3, #9
 80031c2:	4013      	ands	r3, r2
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43da      	mvns	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	4013      	ands	r3, r2
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43da      	mvns	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	035b      	lsls	r3, r3, #13
 8003216:	4013      	ands	r3, r2
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43da      	mvns	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	039b      	lsls	r3, r3, #14
 8003240:	4013      	ands	r3, r2
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_GPIO_Init+0x2dc>)
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	40da      	lsrs	r2, r3
 8003260:	1e13      	subs	r3, r2, #0
 8003262:	d000      	beq.n	8003266 <HAL_GPIO_Init+0x2be>
 8003264:	e6a8      	b.n	8002fb8 <HAL_GPIO_Init+0x10>
  } 
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b006      	add	sp, #24
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	40010000 	.word	0x40010000
 8003278:	48000400 	.word	0x48000400
 800327c:	48000800 	.word	0x48000800
 8003280:	48000c00 	.word	0x48000c00
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	000a      	movs	r2, r1
 8003292:	1cbb      	adds	r3, r7, #2
 8003294:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	1cba      	adds	r2, r7, #2
 800329c:	8812      	ldrh	r2, [r2, #0]
 800329e:	4013      	ands	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80032a2:	230f      	movs	r3, #15
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ac:	230f      	movs	r3, #15
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032b4:	230f      	movs	r3, #15
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	781b      	ldrb	r3, [r3, #0]
  }
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	0008      	movs	r0, r1
 80032cc:	0011      	movs	r1, r2
 80032ce:	1cbb      	adds	r3, r7, #2
 80032d0:	1c02      	adds	r2, r0, #0
 80032d2:	801a      	strh	r2, [r3, #0]
 80032d4:	1c7b      	adds	r3, r7, #1
 80032d6:	1c0a      	adds	r2, r1, #0
 80032d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032da:	1c7b      	adds	r3, r7, #1
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032e2:	1cbb      	adds	r3, r7, #2
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ea:	e003      	b.n	80032f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ec:	1cbb      	adds	r3, r7, #2
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e082      	b.n	8003414 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2241      	movs	r2, #65	; 0x41
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	2100      	movs	r1, #0
 8003320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f7fe fbb1 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2241      	movs	r2, #65	; 0x41
 800332e:	2124      	movs	r1, #36	; 0x24
 8003330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_I2C_Init+0x120>)
 800334c:	400a      	ands	r2, r1
 800334e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4931      	ldr	r1, [pc, #196]	; (8003420 <HAL_I2C_Init+0x124>)
 800335c:	400a      	ands	r2, r1
 800335e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d108      	bne.n	800337a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	0209      	lsls	r1, r1, #8
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	e007      	b.n	800338a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2184      	movs	r1, #132	; 0x84
 8003384:	0209      	lsls	r1, r1, #8
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d104      	bne.n	800339c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	491f      	ldr	r1, [pc, #124]	; (8003424 <HAL_I2C_Init+0x128>)
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	491a      	ldr	r1, [pc, #104]	; (8003420 <HAL_I2C_Init+0x124>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69d9      	ldr	r1, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	2120      	movs	r1, #32
 8003402:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2242      	movs	r2, #66	; 0x42
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}
 800341c:	f0ffffff 	.word	0xf0ffffff
 8003420:	ffff7fff 	.word	0xffff7fff
 8003424:	02008000 	.word	0x02008000

08003428 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	0008      	movs	r0, r1
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	0019      	movs	r1, r3
 8003436:	230a      	movs	r3, #10
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	1c02      	adds	r2, r0, #0
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	2308      	movs	r3, #8
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	1c0a      	adds	r2, r1, #0
 8003444:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2241      	movs	r2, #65	; 0x41
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	d000      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x2c>
 8003452:	e0e7      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Master_Transmit+0x3a>
 800345e:	2302      	movs	r3, #2
 8003460:	e0e1      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2240      	movs	r2, #64	; 0x40
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800346a:	f7fe fe07 	bl	800207c <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	0219      	lsls	r1, r3, #8
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2319      	movs	r3, #25
 800347e:	2201      	movs	r2, #1
 8003480:	f000 fa04 	bl	800388c <I2C_WaitOnFlagUntilTimeout>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0cc      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2241      	movs	r2, #65	; 0x41
 8003490:	2121      	movs	r1, #33	; 0x21
 8003492:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2242      	movs	r2, #66	; 0x42
 8003498:	2110      	movs	r1, #16
 800349a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2208      	movs	r2, #8
 80034ac:	18ba      	adds	r2, r7, r2
 80034ae:	8812      	ldrh	r2, [r2, #0]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2bff      	cmp	r3, #255	; 0xff
 80034c0:	d911      	bls.n	80034e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	045c      	lsls	r4, r3, #17
 80034d2:	230a      	movs	r3, #10
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	8819      	ldrh	r1, [r3, #0]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	4b55      	ldr	r3, [pc, #340]	; (8003630 <HAL_I2C_Master_Transmit+0x208>)
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	0023      	movs	r3, r4
 80034e0:	f000 fb74 	bl	8003bcc <I2C_TransferConfig>
 80034e4:	e075      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	049c      	lsls	r4, r3, #18
 80034fa:	230a      	movs	r3, #10
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	8819      	ldrh	r1, [r3, #0]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <HAL_I2C_Master_Transmit+0x208>)
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	0023      	movs	r3, r4
 8003508:	f000 fb60 	bl	8003bcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800350c:	e061      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f9f8 	bl	800390a <I2C_WaitOnTXISFlagUntilTimeout>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e081      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d03a      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x1aa>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d136      	bne.n	80035d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	0013      	movs	r3, r2
 800356e:	2200      	movs	r2, #0
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	f000 f98b 	bl	800388c <I2C_WaitOnFlagUntilTimeout>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e053      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2bff      	cmp	r3, #255	; 0xff
 8003586:	d911      	bls.n	80035ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	; 0xff
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	b2da      	uxtb	r2, r3
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	045c      	lsls	r4, r3, #17
 8003598:	230a      	movs	r3, #10
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	8819      	ldrh	r1, [r3, #0]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	2300      	movs	r3, #0
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	0023      	movs	r3, r4
 80035a6:	f000 fb11 	bl	8003bcc <I2C_TransferConfig>
 80035aa:	e012      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	049c      	lsls	r4, r3, #18
 80035c0:	230a      	movs	r3, #10
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	8819      	ldrh	r1, [r3, #0]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	0023      	movs	r3, r4
 80035ce:	f000 fafd 	bl	8003bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d198      	bne.n	800350e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 f9d0 	bl	8003988 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e01a      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2220      	movs	r2, #32
 80035f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	490c      	ldr	r1, [pc, #48]	; (8003634 <HAL_I2C_Master_Transmit+0x20c>)
 8003604:	400a      	ands	r2, r1
 8003606:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2241      	movs	r2, #65	; 0x41
 800360c:	2120      	movs	r1, #32
 800360e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2242      	movs	r2, #66	; 0x42
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2240      	movs	r2, #64	; 0x40
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b007      	add	sp, #28
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	80002000 	.word	0x80002000
 8003634:	fe00e800 	.word	0xfe00e800

08003638 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	0008      	movs	r0, r1
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	0019      	movs	r1, r3
 8003646:	230a      	movs	r3, #10
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	1c02      	adds	r2, r0, #0
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	2308      	movs	r3, #8
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	1c0a      	adds	r2, r1, #0
 8003654:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2241      	movs	r2, #65	; 0x41
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	d000      	beq.n	8003664 <HAL_I2C_Master_Receive+0x2c>
 8003662:	e0e8      	b.n	8003836 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	5c9b      	ldrb	r3, [r3, r2]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Master_Receive+0x3a>
 800366e:	2302      	movs	r3, #2
 8003670:	e0e2      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800367a:	f7fe fcff 	bl	800207c <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	0219      	lsls	r1, r3, #8
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	f000 f8fc 	bl	800388c <I2C_WaitOnFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0cd      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2241      	movs	r2, #65	; 0x41
 80036a0:	2122      	movs	r1, #34	; 0x22
 80036a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2242      	movs	r2, #66	; 0x42
 80036a8:	2110      	movs	r1, #16
 80036aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2208      	movs	r2, #8
 80036bc:	18ba      	adds	r2, r7, r2
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	d911      	bls.n	80036f6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	045c      	lsls	r4, r3, #17
 80036e2:	230a      	movs	r3, #10
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	8819      	ldrh	r1, [r3, #0]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	4b55      	ldr	r3, [pc, #340]	; (8003840 <HAL_I2C_Master_Receive+0x208>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	0023      	movs	r3, r4
 80036f0:	f000 fa6c 	bl	8003bcc <I2C_TransferConfig>
 80036f4:	e076      	b.n	80037e4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	b2da      	uxtb	r2, r3
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	049c      	lsls	r4, r3, #18
 800370a:	230a      	movs	r3, #10
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	8819      	ldrh	r1, [r3, #0]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <HAL_I2C_Master_Receive+0x208>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	0023      	movs	r3, r4
 8003718:	f000 fa58 	bl	8003bcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800371c:	e062      	b.n	80037e4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f96b 	bl	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e082      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_I2C_Master_Receive+0x1ac>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d136      	bne.n	80037e4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	0013      	movs	r3, r2
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	f000 f882 	bl	800388c <I2C_WaitOnFlagUntilTimeout>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e053      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2bff      	cmp	r3, #255	; 0xff
 8003798:	d911      	bls.n	80037be <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	045c      	lsls	r4, r3, #17
 80037aa:	230a      	movs	r3, #10
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	8819      	ldrh	r1, [r3, #0]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	0023      	movs	r3, r4
 80037b8:	f000 fa08 	bl	8003bcc <I2C_TransferConfig>
 80037bc:	e012      	b.n	80037e4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	049c      	lsls	r4, r3, #18
 80037d2:	230a      	movs	r3, #10
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	8819      	ldrh	r1, [r3, #0]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	0023      	movs	r3, r4
 80037e0:	f000 f9f4 	bl	8003bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d197      	bne.n	800371e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f8c7 	bl	8003988 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e01a      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	490b      	ldr	r1, [pc, #44]	; (8003844 <HAL_I2C_Master_Receive+0x20c>)
 8003816:	400a      	ands	r2, r1
 8003818:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2241      	movs	r2, #65	; 0x41
 800381e:	2120      	movs	r1, #32
 8003820:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2242      	movs	r2, #66	; 0x42
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2240      	movs	r2, #64	; 0x40
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b007      	add	sp, #28
 800383e:	bd90      	pop	{r4, r7, pc}
 8003840:	80002400 	.word	0x80002400
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2202      	movs	r2, #2
 8003858:	4013      	ands	r3, r2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d103      	bne.n	8003866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2201      	movs	r2, #1
 800386e:	4013      	ands	r3, r2
 8003870:	2b01      	cmp	r3, #1
 8003872:	d007      	beq.n	8003884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]
  }
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800389c:	e021      	b.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	d01e      	beq.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a4:	f7fe fbea 	bl	800207c <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d302      	bcc.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d113      	bne.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	2220      	movs	r2, #32
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2241      	movs	r2, #65	; 0x41
 80038ca:	2120      	movs	r1, #32
 80038cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2242      	movs	r2, #66	; 0x42
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2240      	movs	r2, #64	; 0x40
 80038da:	2100      	movs	r1, #0
 80038dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	425a      	negs	r2, r3
 80038f2:	4153      	adcs	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	001a      	movs	r2, r3
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0ce      	beq.n	800389e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003916:	e02b      	b.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	0018      	movs	r0, r3
 8003920:	f000 f8da 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d001      	beq.n	800392c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e029      	b.n	8003980 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3301      	adds	r3, #1
 8003930:	d01e      	beq.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe fba3 	bl	800207c <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d113      	bne.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	2220      	movs	r2, #32
 800394e:	431a      	orrs	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2241      	movs	r2, #65	; 0x41
 8003958:	2120      	movs	r1, #32
 800395a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2242      	movs	r2, #66	; 0x42
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e007      	b.n	8003980 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2202      	movs	r2, #2
 8003978:	4013      	ands	r3, r2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d1cc      	bne.n	8003918 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b004      	add	sp, #16
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003994:	e028      	b.n	80039e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 f89b 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d001      	beq.n	80039aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e026      	b.n	80039f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe fb67 	bl	800207c <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2220      	movs	r2, #32
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2241      	movs	r2, #65	; 0x41
 80039d0:	2120      	movs	r1, #32
 80039d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2242      	movs	r2, #66	; 0x42
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	2100      	movs	r1, #0
 80039e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e007      	b.n	80039f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2220      	movs	r2, #32
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d1cf      	bne.n	8003996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a0c:	e055      	b.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 f85f 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 8003a1a:	1e03      	subs	r3, r0, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e053      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d129      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2204      	movs	r2, #4
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d105      	bne.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e03f      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	491d      	ldr	r1, [pc, #116]	; (8003ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a5e:	400a      	ands	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2241      	movs	r2, #65	; 0x41
 8003a6c:	2120      	movs	r1, #32
 8003a6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2242      	movs	r2, #66	; 0x42
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e022      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe fafa 	bl	800207c <HAL_GetTick>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2241      	movs	r2, #65	; 0x41
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e007      	b.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d1a2      	bne.n	8003a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	fe00e800 	.word	0xfe00e800

08003ad8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2210      	movs	r2, #16
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d164      	bne.n	8003bbc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	049b      	lsls	r3, r3, #18
 8003afc:	401a      	ands	r2, r3
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	049b      	lsls	r3, r3, #18
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d02b      	beq.n	8003b5e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	01c9      	lsls	r1, r1, #7
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b18:	e021      	b.n	8003b5e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	d01e      	beq.n	8003b5e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b20:	f7fe faac 	bl	800207c <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d302      	bcc.n	8003b36 <I2C_IsAcknowledgeFailed+0x5e>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2241      	movs	r2, #65	; 0x41
 8003b46:	2120      	movs	r1, #32
 8003b48:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2242      	movs	r2, #66	; 0x42
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2100      	movs	r1, #0
 8003b58:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02f      	b.n	8003bbe <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d1d6      	bne.n	8003b1a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff fe62 	bl	8003848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <I2C_IsAcknowledgeFailed+0xf0>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	2204      	movs	r2, #4
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2241      	movs	r2, #65	; 0x41
 8003ba4:	2120      	movs	r1, #32
 8003ba6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2242      	movs	r2, #66	; 0x42
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	240a      	movs	r4, #10
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	1c02      	adds	r2, r0, #0
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	2009      	movs	r0, #9
 8003be4:	183b      	adds	r3, r7, r0
 8003be6:	1c0a      	adds	r2, r1, #0
 8003be8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	0d51      	lsrs	r1, r2, #21
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	00d2      	lsls	r2, r2, #3
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	490e      	ldr	r1, [pc, #56]	; (8003c34 <I2C_TransferConfig+0x68>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	43d2      	mvns	r2, r2
 8003c00:	401a      	ands	r2, r3
 8003c02:	0011      	movs	r1, r2
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	059b      	lsls	r3, r3, #22
 8003c0a:	0d9a      	lsrs	r2, r3, #22
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	0418      	lsls	r0, r3, #16
 8003c12:	23ff      	movs	r3, #255	; 0xff
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	4003      	ands	r3, r0
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b005      	add	sp, #20
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	03ff63ff 	.word	0x03ff63ff

08003c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2241      	movs	r2, #65	; 0x41
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d138      	bne.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2240      	movs	r2, #64	; 0x40
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e032      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	2101      	movs	r1, #1
 8003c62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2241      	movs	r2, #65	; 0x41
 8003c68:	2124      	movs	r1, #36	; 0x24
 8003c6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2101      	movs	r1, #1
 8003c78:	438a      	bics	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4911      	ldr	r1, [pc, #68]	; (8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c88:	400a      	ands	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	ffffefff 	.word	0xffffefff

08003cd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2241      	movs	r2, #65	; 0x41
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d139      	bne.n	8003d5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2240      	movs	r2, #64	; 0x40
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e033      	b.n	8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2241      	movs	r2, #65	; 0x41
 8003d00:	2124      	movs	r1, #36	; 0x24
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	438a      	bics	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2241      	movs	r2, #65	; 0x41
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2240      	movs	r2, #64	; 0x40
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	fffff0ff 	.word	0xfffff0ff

08003d68 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	000a      	movs	r2, r1
 8003d72:	1cfb      	adds	r3, r7, #3
 8003d74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x60>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2203      	movs	r2, #3
 8003d84:	4393      	bics	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_PWR_EnterSTOPMode+0x60>)
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_PWR_EnterSTOPMode+0x64>)
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_PWR_EnterSTOPMode+0x64>)
 8003d9c:	2104      	movs	r1, #4
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003da2:	1cfb      	adds	r3, r7, #3
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003daa:	bf30      	wfi
 8003dac:	e002      	b.n	8003db4 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dae:	bf40      	sev
    __WFE();
 8003db0:	bf20      	wfe
    __WFE();
 8003db2:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_PWR_EnterSTOPMode+0x64>)
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_PWR_EnterSTOPMode+0x64>)
 8003dba:	2104      	movs	r1, #4
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	611a      	str	r2, [r3, #16]
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e301      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	d100      	bne.n	8003dee <HAL_RCC_OscConfig+0x1e>
 8003dec:	e08d      	b.n	8003f0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003dee:	4bc3      	ldr	r3, [pc, #780]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	220c      	movs	r2, #12
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00e      	beq.n	8003e18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dfa:	4bc0      	ldr	r3, [pc, #768]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	220c      	movs	r2, #12
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d116      	bne.n	8003e34 <HAL_RCC_OscConfig+0x64>
 8003e06:	4bbd      	ldr	r3, [pc, #756]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	025b      	lsls	r3, r3, #9
 8003e0e:	401a      	ands	r2, r3
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	025b      	lsls	r3, r3, #9
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4bb8      	ldr	r3, [pc, #736]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	029b      	lsls	r3, r3, #10
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x56>
 8003e24:	e070      	b.n	8003f08 <HAL_RCC_OscConfig+0x138>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d000      	beq.n	8003e30 <HAL_RCC_OscConfig+0x60>
 8003e2e:	e06b      	b.n	8003f08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e2d8      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_OscConfig+0x7c>
 8003e3c:	4baf      	ldr	r3, [pc, #700]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4bae      	ldr	r3, [pc, #696]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	0249      	lsls	r1, r1, #9
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e02f      	b.n	8003eac <HAL_RCC_OscConfig+0xdc>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x9e>
 8003e54:	4ba9      	ldr	r3, [pc, #676]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4ba8      	ldr	r3, [pc, #672]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	49a9      	ldr	r1, [pc, #676]	; (8004100 <HAL_RCC_OscConfig+0x330>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	4ba6      	ldr	r3, [pc, #664]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4ba5      	ldr	r3, [pc, #660]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e66:	49a7      	ldr	r1, [pc, #668]	; (8004104 <HAL_RCC_OscConfig+0x334>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e01e      	b.n	8003eac <HAL_RCC_OscConfig+0xdc>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d10e      	bne.n	8003e94 <HAL_RCC_OscConfig+0xc4>
 8003e76:	4ba1      	ldr	r3, [pc, #644]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	02c9      	lsls	r1, r1, #11
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b9c      	ldr	r3, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	0249      	lsls	r1, r1, #9
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xdc>
 8003e94:	4b99      	ldr	r3, [pc, #612]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b98      	ldr	r3, [pc, #608]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	4999      	ldr	r1, [pc, #612]	; (8004100 <HAL_RCC_OscConfig+0x330>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	4b96      	ldr	r3, [pc, #600]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b95      	ldr	r3, [pc, #596]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	4997      	ldr	r1, [pc, #604]	; (8004104 <HAL_RCC_OscConfig+0x334>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d014      	beq.n	8003ede <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f8e2 	bl	800207c <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f8dd 	bl	800207c <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e28a      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed0:	4b8a      	ldr	r3, [pc, #552]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0xee>
 8003edc:	e015      	b.n	8003f0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe f8cd 	bl	800207c <HAL_GetTick>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe f8c8 	bl	800207c <HAL_GetTick>
 8003eec:	0002      	movs	r2, r0
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e275      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	4013      	ands	r3, r2
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x118>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d100      	bne.n	8003f16 <HAL_RCC_OscConfig+0x146>
 8003f14:	e069      	b.n	8003fea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	220c      	movs	r2, #12
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d11c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x196>
 8003f2c:	4b73      	ldr	r3, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	4013      	ands	r3, r2
 8003f36:	d116      	bne.n	8003f66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f38:	4b70      	ldr	r3, [pc, #448]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e24b      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b6b      	ldr	r3, [pc, #428]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	22f8      	movs	r2, #248	; 0xf8
 8003f54:	4393      	bics	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00da      	lsls	r2, r3, #3
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f64:	e041      	b.n	8003fea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d024      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6e:	4b63      	ldr	r3, [pc, #396]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fe f87f 	bl	800207c <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fe f87a 	bl	800207c <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e227      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b59      	ldr	r3, [pc, #356]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0f1      	beq.n	8003f84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b56      	ldr	r3, [pc, #344]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	22f8      	movs	r2, #248	; 0xf8
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00da      	lsls	r2, r3, #3
 8003fb0:	4b52      	ldr	r3, [pc, #328]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e018      	b.n	8003fea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb8:	4b50      	ldr	r3, [pc, #320]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b4f      	ldr	r3, [pc, #316]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe f85a 	bl	800207c <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fe f855 	bl	800207c <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e202      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f1      	bne.n	8003fce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004002:	2101      	movs	r1, #1
 8004004:	430a      	orrs	r2, r1
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7fe f838 	bl	800207c <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fe f833 	bl	800207c <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e1e0      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004024:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d0f1      	beq.n	8004012 <HAL_RCC_OscConfig+0x242>
 800402e:	e018      	b.n	8004062 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004036:	2101      	movs	r1, #1
 8004038:	438a      	bics	r2, r1
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403c:	f7fe f81e 	bl	800207c <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004046:	f7fe f819 	bl	800207c <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1c6      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2202      	movs	r2, #2
 800405e:	4013      	ands	r3, r2
 8004060:	d1f1      	bne.n	8004046 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2204      	movs	r2, #4
 8004068:	4013      	ands	r3, r2
 800406a:	d100      	bne.n	800406e <HAL_RCC_OscConfig+0x29e>
 800406c:	e0b4      	b.n	80041d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	201f      	movs	r0, #31
 8004070:	183b      	adds	r3, r7, r0
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	055b      	lsls	r3, r3, #21
 800407e:	4013      	ands	r3, r2
 8004080:	d110      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	0549      	lsls	r1, r1, #21
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	055b      	lsls	r3, r3, #21
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_RCC_OscConfig+0x338>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	d11a      	bne.n	80040e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_RCC_OscConfig+0x338>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCC_OscConfig+0x338>)
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	0049      	lsls	r1, r1, #1
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040be:	f7fd ffdd 	bl	800207c <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fd ffd8 	bl	800207c <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e185      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x338>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4013      	ands	r3, r2
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d10e      	bne.n	800410c <HAL_RCC_OscConfig+0x33c>
 80040ee:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 80040f0:	6a1a      	ldr	r2, [r3, #32]
 80040f2:	4b02      	ldr	r3, [pc, #8]	; (80040fc <HAL_RCC_OscConfig+0x32c>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	430a      	orrs	r2, r1
 80040f8:	621a      	str	r2, [r3, #32]
 80040fa:	e035      	b.n	8004168 <HAL_RCC_OscConfig+0x398>
 80040fc:	40021000 	.word	0x40021000
 8004100:	fffeffff 	.word	0xfffeffff
 8004104:	fffbffff 	.word	0xfffbffff
 8004108:	40007000 	.word	0x40007000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10c      	bne.n	800412e <HAL_RCC_OscConfig+0x35e>
 8004114:	4bb6      	ldr	r3, [pc, #728]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	4bb5      	ldr	r3, [pc, #724]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800411a:	2101      	movs	r1, #1
 800411c:	438a      	bics	r2, r1
 800411e:	621a      	str	r2, [r3, #32]
 8004120:	4bb3      	ldr	r3, [pc, #716]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004122:	6a1a      	ldr	r2, [r3, #32]
 8004124:	4bb2      	ldr	r3, [pc, #712]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004126:	2104      	movs	r1, #4
 8004128:	438a      	bics	r2, r1
 800412a:	621a      	str	r2, [r3, #32]
 800412c:	e01c      	b.n	8004168 <HAL_RCC_OscConfig+0x398>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x380>
 8004136:	4bae      	ldr	r3, [pc, #696]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	4bad      	ldr	r3, [pc, #692]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800413c:	2104      	movs	r1, #4
 800413e:	430a      	orrs	r2, r1
 8004140:	621a      	str	r2, [r3, #32]
 8004142:	4bab      	ldr	r3, [pc, #684]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	4baa      	ldr	r3, [pc, #680]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004148:	2101      	movs	r1, #1
 800414a:	430a      	orrs	r2, r1
 800414c:	621a      	str	r2, [r3, #32]
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0x398>
 8004150:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	4ba6      	ldr	r3, [pc, #664]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004156:	2101      	movs	r1, #1
 8004158:	438a      	bics	r2, r1
 800415a:	621a      	str	r2, [r3, #32]
 800415c:	4ba4      	ldr	r3, [pc, #656]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	4ba3      	ldr	r3, [pc, #652]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004162:	2104      	movs	r1, #4
 8004164:	438a      	bics	r2, r1
 8004166:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fd ff84 	bl	800207c <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	e009      	b.n	800418e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fd ff7f 	bl	800207c <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	4a9b      	ldr	r2, [pc, #620]	; (80043f4 <HAL_RCC_OscConfig+0x624>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e12b      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	4b98      	ldr	r3, [pc, #608]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x3aa>
 8004198:	e013      	b.n	80041c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419a:	f7fd ff6f 	bl	800207c <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	e009      	b.n	80041b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fd ff6a 	bl	800207c <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a91      	ldr	r2, [pc, #580]	; (80043f4 <HAL_RCC_OscConfig+0x624>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e116      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b8:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041c2:	231f      	movs	r3, #31
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	4b87      	ldr	r3, [pc, #540]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041d2:	4989      	ldr	r1, [pc, #548]	; (80043f8 <HAL_RCC_OscConfig+0x628>)
 80041d4:	400a      	ands	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2210      	movs	r2, #16
 80041de:	4013      	ands	r3, r2
 80041e0:	d063      	beq.n	80042aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d12a      	bne.n	8004240 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041f0:	2104      	movs	r1, #4
 80041f2:	430a      	orrs	r2, r1
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80041f6:	4b7e      	ldr	r3, [pc, #504]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80041fc:	2101      	movs	r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fd ff3b 	bl	800207c <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800420c:	f7fd ff36 	bl	800207c <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0e3      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800421e:	4b74      	ldr	r3, [pc, #464]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	2202      	movs	r2, #2
 8004224:	4013      	ands	r3, r2
 8004226:	d0f1      	beq.n	800420c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004228:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	22f8      	movs	r2, #248	; 0xf8
 800422e:	4393      	bics	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	00da      	lsls	r2, r3, #3
 8004238:	4b6d      	ldr	r3, [pc, #436]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800423a:	430a      	orrs	r2, r1
 800423c:	635a      	str	r2, [r3, #52]	; 0x34
 800423e:	e034      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	3305      	adds	r3, #5
 8004246:	d111      	bne.n	800426c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004248:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800424a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800424e:	2104      	movs	r1, #4
 8004250:	438a      	bics	r2, r1
 8004252:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004254:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	22f8      	movs	r2, #248	; 0xf8
 800425a:	4393      	bics	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	4b62      	ldr	r3, [pc, #392]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004266:	430a      	orrs	r2, r1
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
 800426a:	e01e      	b.n	80042aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800426c:	4b60      	ldr	r3, [pc, #384]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800426e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004270:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004272:	2104      	movs	r1, #4
 8004274:	430a      	orrs	r2, r1
 8004276:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004278:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800427a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427c:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800427e:	2101      	movs	r1, #1
 8004280:	438a      	bics	r2, r1
 8004282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004284:	f7fd fefa 	bl	800207c <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800428e:	f7fd fef5 	bl	800207c <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0a2      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	d1f1      	bne.n	800428e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d100      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4e4>
 80042b2:	e097      	b.n	80043e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b4:	4b4e      	ldr	r3, [pc, #312]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	220c      	movs	r2, #12
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d100      	bne.n	80042c2 <HAL_RCC_OscConfig+0x4f2>
 80042c0:	e06b      	b.n	800439a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d14c      	bne.n	8004364 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80042d0:	494a      	ldr	r1, [pc, #296]	; (80043fc <HAL_RCC_OscConfig+0x62c>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fd fed1 	bl	800207c <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fd fecc 	bl	800207c <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e079      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	049b      	lsls	r3, r3, #18
 80042fa:	4013      	ands	r3, r2
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fe:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	220f      	movs	r2, #15
 8004304:	4393      	bics	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800430e:	430a      	orrs	r2, r1
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a3a      	ldr	r2, [pc, #232]	; (8004400 <HAL_RCC_OscConfig+0x630>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	431a      	orrs	r2, r3
 8004326:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	0449      	lsls	r1, r1, #17
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd fe9f 	bl	800207c <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fe9a 	bl	800207c <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e047      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	049b      	lsls	r3, r3, #18
 800435e:	4013      	ands	r3, r2
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x574>
 8004362:	e03f      	b.n	80043e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800436a:	4924      	ldr	r1, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x62c>)
 800436c:	400a      	ands	r2, r1
 800436e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd fe84 	bl	800207c <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fd fe7f 	bl	800207c <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e02c      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	049b      	lsls	r3, r3, #18
 8004394:	4013      	ands	r3, r2
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x5aa>
 8004398:	e024      	b.n	80043e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01f      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_OscConfig+0x620>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	025b      	lsls	r3, r3, #9
 80043b8:	401a      	ands	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d10e      	bne.n	80043e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	220f      	movs	r2, #15
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	23f0      	movs	r3, #240	; 0xf0
 80043d4:	039b      	lsls	r3, r3, #14
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b008      	add	sp, #32
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40021000 	.word	0x40021000
 80043f4:	00001388 	.word	0x00001388
 80043f8:	efffffff 	.word	0xefffffff
 80043fc:	feffffff 	.word	0xfeffffff
 8004400:	ffc2ffff 	.word	0xffc2ffff

08004404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b3      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2201      	movs	r2, #1
 800441e:	4013      	ands	r3, r2
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d911      	bls.n	800444a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2201      	movs	r2, #1
 800442c:	4393      	bics	r3, r2
 800442e:	0019      	movs	r1, r3
 8004430:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2201      	movs	r2, #1
 800443e:	4013      	ands	r3, r2
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e09a      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	d015      	beq.n	8004480 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2204      	movs	r2, #4
 800445a:	4013      	ands	r3, r2
 800445c:	d006      	beq.n	800446c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800445e:	4b4b      	ldr	r3, [pc, #300]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 8004464:	21e0      	movs	r1, #224	; 0xe0
 8004466:	00c9      	lsls	r1, r1, #3
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	22f0      	movs	r2, #240	; 0xf0
 8004472:	4393      	bics	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	4013      	ands	r3, r2
 8004488:	d040      	beq.n	800450c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	029b      	lsls	r3, r3, #10
 800449a:	4013      	ands	r3, r2
 800449c:	d114      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06e      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	049b      	lsls	r3, r3, #18
 80044b2:	4013      	ands	r3, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e062      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2202      	movs	r2, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e05b      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2203      	movs	r2, #3
 80044ce:	4393      	bics	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fdce 	bl	800207c <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	e009      	b.n	80044fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7fd fdc9 	bl	800207c <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_RCC_ClockConfig+0x18c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e042      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	220c      	movs	r2, #12
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ec      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d211      	bcs.n	800453e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4393      	bics	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCC_ClockConfig+0x184>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e020      	b.n	8004580 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2204      	movs	r2, #4
 8004544:	4013      	ands	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a11      	ldr	r2, [pc, #68]	; (8004594 <HAL_RCC_ClockConfig+0x190>)
 800454e:	4013      	ands	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800455c:	f000 f820 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004560:	0001      	movs	r1, r0
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x188>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	220f      	movs	r2, #15
 800456a:	4013      	ands	r3, r2
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x194>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	000a      	movs	r2, r1
 8004572:	40da      	lsrs	r2, r3
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x198>)
 8004576:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004578:	2003      	movs	r0, #3
 800457a:	f7fd fd39 	bl	8001ff0 <HAL_InitTick>
  
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b004      	add	sp, #16
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	00001388 	.word	0x00001388
 8004594:	fffff8ff 	.word	0xfffff8ff
 8004598:	08007b08 	.word	0x08007b08
 800459c:	20000028 	.word	0x20000028

080045a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08f      	sub	sp, #60	; 0x3c
 80045a4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045a6:	2314      	movs	r3, #20
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045ae:	c313      	stmia	r3!, {r0, r1, r4}
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045ba:	c313      	stmia	r3!, {r0, r1, r4}
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c4:	2300      	movs	r3, #0
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c8:	2300      	movs	r3, #0
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	220c      	movs	r2, #12
 80045de:	4013      	ands	r3, r2
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d002      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x4a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d003      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x50>
 80045e8:	e02d      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045ea:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045ee:	e02d      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	0c9b      	lsrs	r3, r3, #18
 80045f4:	220f      	movs	r2, #15
 80045f6:	4013      	ands	r3, r2
 80045f8:	2214      	movs	r2, #20
 80045fa:	18ba      	adds	r2, r7, r2
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004600:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	220f      	movs	r2, #15
 8004606:	4013      	ands	r3, r2
 8004608:	1d3a      	adds	r2, r7, #4
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800460e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	4013      	ands	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461a:	4812      	ldr	r0, [pc, #72]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 800461c:	f7fb fd74 	bl	8000108 <__udivsi3>
 8004620:	0003      	movs	r3, r0
 8004622:	001a      	movs	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	4353      	muls	r3, r2
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	e009      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462e:	000a      	movs	r2, r1
 8004630:	0152      	lsls	r2, r2, #5
 8004632:	1a52      	subs	r2, r2, r1
 8004634:	0193      	lsls	r3, r2, #6
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	185b      	adds	r3, r3, r1
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004644:	e002      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800464a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800464e:	0018      	movs	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	b00f      	add	sp, #60	; 0x3c
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	08007a4c 	.word	0x08007a4c
 800465c:	08007a5c 	.word	0x08007a5c
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b02      	ldr	r3, [pc, #8]	; (8004678 <HAL_RCC_GetHCLKFreq+0x10>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	20000028 	.word	0x20000028

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004680:	f7ff fff2 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004684:	0001      	movs	r1, r0
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	2207      	movs	r2, #7
 800468e:	4013      	ands	r3, r2
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	40d9      	lsrs	r1, r3
 8004696:	000b      	movs	r3, r1
}    
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08007b18 	.word	0x08007b18

080046a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	025b      	lsls	r3, r3, #9
 80046c0:	4013      	ands	r3, r2
 80046c2:	d100      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046c4:	e08e      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2017      	movs	r0, #23
 80046c8:	183b      	adds	r3, r7, r0
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b5f      	ldr	r3, [pc, #380]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	055b      	lsls	r3, r3, #21
 80046d6:	4013      	ands	r3, r2
 80046d8:	d110      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	0549      	lsls	r1, r1, #21
 80046e4:	430a      	orrs	r2, r1
 80046e6:	61da      	str	r2, [r3, #28]
 80046e8:	4b58      	ldr	r3, [pc, #352]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	055b      	lsls	r3, r3, #21
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fc:	4b54      	ldr	r3, [pc, #336]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4013      	ands	r3, r2
 8004706:	d11a      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800470e:	2180      	movs	r1, #128	; 0x80
 8004710:	0049      	lsls	r1, r1, #1
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fd fcb1 	bl	800207c <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fd fcac 	bl	800207c <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4013      	ands	r3, r2
 800473c:	d0f0      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	23c0      	movs	r3, #192	; 0xc0
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d034      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	23c0      	movs	r3, #192	; 0xc0
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4013      	ands	r3, r2
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d02c      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004760:	4b3a      	ldr	r3, [pc, #232]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004766:	4013      	ands	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	0249      	lsls	r1, r1, #9
 8004774:	430a      	orrs	r2, r1
 8004776:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004778:	4b34      	ldr	r3, [pc, #208]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	4b33      	ldr	r3, [pc, #204]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800477e:	4936      	ldr	r1, [pc, #216]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004780:	400a      	ands	r2, r1
 8004782:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004784:	4b31      	ldr	r3, [pc, #196]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd fc73 	bl	800207c <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	e009      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd fc6e 	bl	800207c <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	4a2d      	ldr	r2, [pc, #180]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e048      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b0:	4b26      	ldr	r3, [pc, #152]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a25      	ldr	r2, [pc, #148]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047ca:	430a      	orrs	r2, r1
 80047cc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ce:	2317      	movs	r3, #23
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047de:	4920      	ldr	r1, [pc, #128]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	2203      	movs	r2, #3
 80047f4:	4393      	bics	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047fe:	430a      	orrs	r2, r1
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2220      	movs	r2, #32
 8004808:	4013      	ands	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	2210      	movs	r2, #16
 8004812:	4393      	bics	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800481c:	430a      	orrs	r2, r1
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4013      	ands	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	4393      	bics	r3, r2
 8004834:	0019      	movs	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800483c:	430a      	orrs	r2, r1
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b006      	add	sp, #24
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
 8004854:	fffffcff 	.word	0xfffffcff
 8004858:	fffeffff 	.word	0xfffeffff
 800485c:	00001388 	.word	0x00001388
 8004860:	efffffff 	.word	0xefffffff

08004864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0a8      	b.n	80049c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	2382      	movs	r3, #130	; 0x82
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	429a      	cmp	r2, r3
 8004888:	d009      	beq.n	800489e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	61da      	str	r2, [r3, #28]
 8004890:	e005      	b.n	800489e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	225d      	movs	r2, #93	; 0x5d
 80048a8:	5c9b      	ldrb	r3, [r3, r2]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d107      	bne.n	80048c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	225c      	movs	r2, #92	; 0x5c
 80048b4:	2100      	movs	r1, #0
 80048b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7fd f934 	bl	8001b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	225d      	movs	r2, #93	; 0x5d
 80048c4:	2102      	movs	r1, #2
 80048c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	438a      	bics	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	23e0      	movs	r3, #224	; 0xe0
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d902      	bls.n	80048ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e002      	b.n	80048f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	015b      	lsls	r3, r3, #5
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	23f0      	movs	r3, #240	; 0xf0
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d008      	beq.n	800490e <HAL_SPI_Init+0xaa>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	23e0      	movs	r3, #224	; 0xe0
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	429a      	cmp	r2, r3
 8004906:	d002      	beq.n	800490e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	2382      	movs	r3, #130	; 0x82
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	401a      	ands	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	2384      	movs	r3, #132	; 0x84
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	400b      	ands	r3, r1
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2102      	movs	r1, #2
 800492a:	400b      	ands	r3, r1
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2101      	movs	r1, #1
 8004934:	400b      	ands	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6999      	ldr	r1, [r3, #24]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	400b      	ands	r3, r1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2138      	movs	r1, #56	; 0x38
 800494a:	400b      	ands	r3, r1
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	400b      	ands	r3, r1
 8004956:	431a      	orrs	r2, r3
 8004958:	0011      	movs	r1, r2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	401a      	ands	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	2204      	movs	r2, #4
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2110      	movs	r1, #16
 800497c:	400b      	ands	r3, r1
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	2108      	movs	r1, #8
 8004986:	400b      	ands	r3, r1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68d9      	ldr	r1, [r3, #12]
 800498e:	23f0      	movs	r3, #240	; 0xf0
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	400b      	ands	r3, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	0011      	movs	r1, r2
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	015b      	lsls	r3, r3, #5
 800499e:	401a      	ands	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4907      	ldr	r1, [pc, #28]	; (80049d0 <HAL_SPI_Init+0x16c>)
 80049b4:	400a      	ands	r2, r1
 80049b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	225d      	movs	r2, #93	; 0x5d
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b004      	add	sp, #16
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffff7ff 	.word	0xfffff7ff

080049d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	1dbb      	adds	r3, r7, #6
 80049e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e4:	231f      	movs	r3, #31
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	225c      	movs	r2, #92	; 0x5c
 80049f0:	5c9b      	ldrb	r3, [r3, r2]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_SPI_Transmit+0x26>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e140      	b.n	8004c7c <HAL_SPI_Transmit+0x2a8>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	225c      	movs	r2, #92	; 0x5c
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a02:	f7fd fb3b 	bl	800207c <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a0a:	2316      	movs	r3, #22
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	1dba      	adds	r2, r7, #6
 8004a10:	8812      	ldrh	r2, [r2, #0]
 8004a12:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	225d      	movs	r2, #93	; 0x5d
 8004a18:	5c9b      	ldrb	r3, [r3, r2]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d004      	beq.n	8004a2a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004a20:	231f      	movs	r3, #31
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2202      	movs	r2, #2
 8004a26:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a28:	e11d      	b.n	8004c66 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_SPI_Transmit+0x64>
 8004a30:	1dbb      	adds	r3, r7, #6
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004a38:	231f      	movs	r3, #31
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a40:	e111      	b.n	8004c66 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	225d      	movs	r2, #93	; 0x5d
 8004a46:	2103      	movs	r1, #3
 8004a48:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1dba      	adds	r2, r7, #6
 8004a5a:	8812      	ldrh	r2, [r2, #0]
 8004a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1dba      	adds	r2, r7, #6
 8004a62:	8812      	ldrh	r2, [r2, #0]
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2244      	movs	r2, #68	; 0x44
 8004a70:	2100      	movs	r1, #0
 8004a72:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2246      	movs	r2, #70	; 0x46
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d110      	bne.n	8004ab6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	01c9      	lsls	r1, r1, #7
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d007      	beq.n	8004ad4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2140      	movs	r1, #64	; 0x40
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	23e0      	movs	r3, #224	; 0xe0
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d94e      	bls.n	8004b7e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <HAL_SPI_Transmit+0x11e>
 8004ae8:	2316      	movs	r3, #22
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d13f      	bne.n	8004b72 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	1c9a      	adds	r2, r3, #2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b16:	e02c      	b.n	8004b72 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d112      	bne.n	8004b4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b4a:	e012      	b.n	8004b72 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4c:	f7fd fa96 	bl	800207c <HAL_GetTick>
 8004b50:	0002      	movs	r2, r0
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d802      	bhi.n	8004b62 <HAL_SPI_Transmit+0x18e>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	d102      	bne.n	8004b68 <HAL_SPI_Transmit+0x194>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004b68:	231f      	movs	r3, #31
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b70:	e079      	b.n	8004c66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1cd      	bne.n	8004b18 <HAL_SPI_Transmit+0x144>
 8004b7c:	e04f      	b.n	8004c1e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <HAL_SPI_Transmit+0x1bc>
 8004b86:	2316      	movs	r3, #22
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d141      	bne.n	8004c14 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004bb6:	e02d      	b.n	8004c14 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d113      	bne.n	8004bee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bec:	e012      	b.n	8004c14 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bee:	f7fd fa45 	bl	800207c <HAL_GetTick>
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d802      	bhi.n	8004c04 <HAL_SPI_Transmit+0x230>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d102      	bne.n	8004c0a <HAL_SPI_Transmit+0x236>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004c0a:	231f      	movs	r3, #31
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2203      	movs	r2, #3
 8004c10:	701a      	strb	r2, [r3, #0]
          goto error;
 8004c12:	e028      	b.n	8004c66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1cc      	bne.n	8004bb8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f95d 	bl	8004ee4 <SPI_EndRxTxTransaction>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004c5a:	231f      	movs	r3, #31
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e000      	b.n	8004c66 <HAL_SPI_Transmit+0x292>
  }

error:
 8004c64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	225d      	movs	r2, #93	; 0x5d
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	225c      	movs	r2, #92	; 0x5c
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004c76:	231f      	movs	r3, #31
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	781b      	ldrb	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b008      	add	sp, #32
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c94:	f7fd f9f2 	bl	800207c <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	18d3      	adds	r3, r2, r3
 8004ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca4:	f7fd f9ea 	bl	800207c <HAL_GetTick>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cac:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	015b      	lsls	r3, r3, #5
 8004cb2:	0d1b      	lsrs	r3, r3, #20
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	4353      	muls	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cba:	e058      	b.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	d055      	beq.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc2:	f7fd f9db 	bl	800207c <HAL_GetTick>
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d902      	bls.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d142      	bne.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	21e0      	movs	r1, #224	; 0xe0
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	2382      	movs	r3, #130	; 0x82
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d113      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d005      	beq.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d107      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	438a      	bics	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d110      	bne.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	491a      	ldr	r1, [pc, #104]	; (8004d9c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004d34:	400a      	ands	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	0189      	lsls	r1, r1, #6
 8004d46:	430a      	orrs	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	225d      	movs	r2, #93	; 0x5d
 8004d4e:	2101      	movs	r1, #1
 8004d50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	225c      	movs	r2, #92	; 0x5c
 8004d56:	2100      	movs	r1, #0
 8004d58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e017      	b.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	425a      	negs	r2, r3
 8004d7e:	4153      	adcs	r3, r2
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	001a      	movs	r2, r3
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d197      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b008      	add	sp, #32
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	20000028 	.word	0x20000028
 8004d9c:	ffffdfff 	.word	0xffffdfff

08004da0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	; 0x28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dae:	2317      	movs	r3, #23
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004db6:	f7fd f961 	bl	800207c <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	18d3      	adds	r3, r2, r3
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004dc6:	f7fd f959 	bl	800207c <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	0013      	movs	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	00da      	lsls	r2, r3, #3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	4353      	muls	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004dec:	e068      	b.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	23c0      	movs	r3, #192	; 0xc0
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d10a      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	2117      	movs	r1, #23
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	d055      	beq.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e14:	f7fd f932 	bl	800207c <HAL_GetTick>
 8004e18:	0002      	movs	r2, r0
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d142      	bne.n	8004eb0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	21e0      	movs	r1, #224	; 0xe0
 8004e36:	438a      	bics	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	2382      	movs	r3, #130	; 0x82
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d113      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d005      	beq.n	8004e5e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d107      	bne.n	8004e6e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2140      	movs	r1, #64	; 0x40
 8004e6a:	438a      	bics	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d110      	bne.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4916      	ldr	r1, [pc, #88]	; (8004ee0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	0189      	lsls	r1, r1, #6
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	225d      	movs	r2, #93	; 0x5d
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	225c      	movs	r2, #92	; 0x5c
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e010      	b.n	8004ed2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d18e      	bne.n	8004dee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b00a      	add	sp, #40	; 0x28
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	20000028 	.word	0x20000028
 8004ee0:	ffffdfff 	.word	0xffffdfff

08004ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	23c0      	movs	r3, #192	; 0xc0
 8004ef4:	0159      	lsls	r1, r3, #5
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	0013      	movs	r3, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	f7ff ff4e 	bl	8004da0 <SPI_WaitFifoStateUntilTimeout>
 8004f04:	1e03      	subs	r3, r0, #0
 8004f06:	d007      	beq.n	8004f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e027      	b.n	8004f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	0013      	movs	r3, r2
 8004f22:	2200      	movs	r2, #0
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	f7ff fead 	bl	8004c84 <SPI_WaitFlagStateUntilTimeout>
 8004f2a:	1e03      	subs	r3, r0, #0
 8004f2c:	d007      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	2220      	movs	r2, #32
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e014      	b.n	8004f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	23c0      	movs	r3, #192	; 0xc0
 8004f42:	00d9      	lsls	r1, r3, #3
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f7ff ff27 	bl	8004da0 <SPI_WaitFifoStateUntilTimeout>
 8004f52:	1e03      	subs	r3, r0, #0
 8004f54:	d007      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e000      	b.n	8004f68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b004      	add	sp, #16
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e042      	b.n	8005008 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	223d      	movs	r2, #61	; 0x3d
 8004f86:	5c9b      	ldrb	r3, [r3, r2]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	223c      	movs	r2, #60	; 0x3c
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7fc fe4d 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	223d      	movs	r2, #61	; 0x3d
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	0019      	movs	r1, r3
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	f000 fd19 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2246      	movs	r2, #70	; 0x46
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223e      	movs	r2, #62	; 0x3e
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	223f      	movs	r2, #63	; 0x3f
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2241      	movs	r2, #65	; 0x41
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2242      	movs	r2, #66	; 0x42
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2243      	movs	r2, #67	; 0x43
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2244      	movs	r2, #68	; 0x44
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	5499      	strb	r1, [r3, r2]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2245      	movs	r2, #69	; 0x45
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	223d      	movs	r2, #61	; 0x3d
 8005002:	2101      	movs	r1, #1
 8005004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	230f      	movs	r3, #15
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <HAL_TIM_OC_Start_IT+0x2a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	223e      	movs	r2, #62	; 0x3e
 800502c:	5c9b      	ldrb	r3, [r3, r2]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	4193      	sbcs	r3, r2
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e01f      	b.n	800507a <HAL_TIM_OC_Start_IT+0x6a>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d108      	bne.n	8005052 <HAL_TIM_OC_Start_IT+0x42>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	223f      	movs	r2, #63	; 0x3f
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	1e5a      	subs	r2, r3, #1
 800504c:	4193      	sbcs	r3, r2
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e013      	b.n	800507a <HAL_TIM_OC_Start_IT+0x6a>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d108      	bne.n	800506a <HAL_TIM_OC_Start_IT+0x5a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	5c9b      	ldrb	r3, [r3, r2]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	4193      	sbcs	r3, r2
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e007      	b.n	800507a <HAL_TIM_OC_Start_IT+0x6a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2241      	movs	r2, #65	; 0x41
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	4193      	sbcs	r3, r2
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0b7      	b.n	80051f2 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_TIM_OC_Start_IT+0x82>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	223e      	movs	r2, #62	; 0x3e
 800508c:	2102      	movs	r1, #2
 800508e:	5499      	strb	r1, [r3, r2]
 8005090:	e013      	b.n	80050ba <HAL_TIM_OC_Start_IT+0xaa>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_OC_Start_IT+0x92>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	223f      	movs	r2, #63	; 0x3f
 800509c:	2102      	movs	r1, #2
 800509e:	5499      	strb	r1, [r3, r2]
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_OC_Start_IT+0xaa>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_OC_Start_IT+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2240      	movs	r2, #64	; 0x40
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]
 80050b0:	e003      	b.n	80050ba <HAL_TIM_OC_Start_IT+0xaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2241      	movs	r2, #65	; 0x41
 80050b6:	2102      	movs	r1, #2
 80050b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d02a      	beq.n	8005116 <HAL_TIM_OC_Start_IT+0x106>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	d830      	bhi.n	8005128 <HAL_TIM_OC_Start_IT+0x118>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d01b      	beq.n	8005104 <HAL_TIM_OC_Start_IT+0xf4>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d82a      	bhi.n	8005128 <HAL_TIM_OC_Start_IT+0x118>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_OC_Start_IT+0xd0>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d009      	beq.n	80050f2 <HAL_TIM_OC_Start_IT+0xe2>
 80050de:	e023      	b.n	8005128 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2102      	movs	r1, #2
 80050ec:	430a      	orrs	r2, r1
 80050ee:	60da      	str	r2, [r3, #12]
      break;
 80050f0:	e01f      	b.n	8005132 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2104      	movs	r1, #4
 80050fe:	430a      	orrs	r2, r1
 8005100:	60da      	str	r2, [r3, #12]
      break;
 8005102:	e016      	b.n	8005132 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2108      	movs	r1, #8
 8005110:	430a      	orrs	r2, r1
 8005112:	60da      	str	r2, [r3, #12]
      break;
 8005114:	e00d      	b.n	8005132 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2110      	movs	r1, #16
 8005122:	430a      	orrs	r2, r1
 8005124:	60da      	str	r2, [r3, #12]
      break;
 8005126:	e004      	b.n	8005132 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005128:	230f      	movs	r3, #15
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
      break;
 8005130:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005132:	230f      	movs	r3, #15
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d157      	bne.n	80051ec <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	2201      	movs	r2, #1
 8005144:	0018      	movs	r0, r3
 8005146:	f000 ff65 	bl	8006014 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <HAL_TIM_OC_Start_IT+0x1ec>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIM_OC_Start_IT+0x162>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a29      	ldr	r2, [pc, #164]	; (8005200 <HAL_TIM_OC_Start_IT+0x1f0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIM_OC_Start_IT+0x162>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a28      	ldr	r2, [pc, #160]	; (8005204 <HAL_TIM_OC_Start_IT+0x1f4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIM_OC_Start_IT+0x162>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a26      	ldr	r2, [pc, #152]	; (8005208 <HAL_TIM_OC_Start_IT+0x1f8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_TIM_OC_Start_IT+0x166>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_TIM_OC_Start_IT+0x168>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	0209      	lsls	r1, r1, #8
 800518a:	430a      	orrs	r2, r1
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_TIM_OC_Start_IT+0x1ec>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00f      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x1a8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	05db      	lsls	r3, r3, #23
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x1a8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_TIM_OC_Start_IT+0x1fc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x1a8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_TIM_OC_Start_IT+0x1f0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2207      	movs	r2, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2101      	movs	r1, #1
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2101      	movs	r1, #1
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b004      	add	sp, #16
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	40000400 	.word	0x40000400

08005210 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	230f      	movs	r3, #15
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d02a      	beq.n	800527e <HAL_TIM_OC_Stop_IT+0x6e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d830      	bhi.n	8005290 <HAL_TIM_OC_Stop_IT+0x80>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d01b      	beq.n	800526c <HAL_TIM_OC_Stop_IT+0x5c>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d82a      	bhi.n	8005290 <HAL_TIM_OC_Stop_IT+0x80>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_TIM_OC_Stop_IT+0x38>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d009      	beq.n	800525a <HAL_TIM_OC_Stop_IT+0x4a>
 8005246:	e023      	b.n	8005290 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2102      	movs	r1, #2
 8005254:	438a      	bics	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
      break;
 8005258:	e01f      	b.n	800529a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2104      	movs	r1, #4
 8005266:	438a      	bics	r2, r1
 8005268:	60da      	str	r2, [r3, #12]
      break;
 800526a:	e016      	b.n	800529a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2108      	movs	r1, #8
 8005278:	438a      	bics	r2, r1
 800527a:	60da      	str	r2, [r3, #12]
      break;
 800527c:	e00d      	b.n	800529a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2110      	movs	r1, #16
 800528a:	438a      	bics	r2, r1
 800528c:	60da      	str	r2, [r3, #12]
      break;
 800528e:	e004      	b.n	800529a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005290:	230f      	movs	r3, #15
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
      break;
 8005298:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800529a:	230f      	movs	r3, #15
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d000      	beq.n	80052a6 <HAL_TIM_OC_Stop_IT+0x96>
 80052a4:	e063      	b.n	800536e <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	2200      	movs	r2, #0
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 feb0 	bl	8006014 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a30      	ldr	r2, [pc, #192]	; (800537c <HAL_TIM_OC_Stop_IT+0x16c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_OC_Stop_IT+0xcc>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <HAL_TIM_OC_Stop_IT+0x170>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_OC_Stop_IT+0xcc>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <HAL_TIM_OC_Stop_IT+0x174>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_OC_Stop_IT+0xcc>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <HAL_TIM_OC_Stop_IT+0x178>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_TIM_OC_Stop_IT+0xd0>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_TIM_OC_Stop_IT+0xd2>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d013      	beq.n	800530e <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4a27      	ldr	r2, [pc, #156]	; (800538c <HAL_TIM_OC_Stop_IT+0x17c>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	d10d      	bne.n	800530e <HAL_TIM_OC_Stop_IT+0xfe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4a25      	ldr	r2, [pc, #148]	; (8005390 <HAL_TIM_OC_Stop_IT+0x180>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	d107      	bne.n	800530e <HAL_TIM_OC_Stop_IT+0xfe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4922      	ldr	r1, [pc, #136]	; (8005394 <HAL_TIM_OC_Stop_IT+0x184>)
 800530a:	400a      	ands	r2, r1
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <HAL_TIM_OC_Stop_IT+0x17c>)
 8005316:	4013      	ands	r3, r2
 8005318:	d10d      	bne.n	8005336 <HAL_TIM_OC_Stop_IT+0x126>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_TIM_OC_Stop_IT+0x180>)
 8005322:	4013      	ands	r3, r2
 8005324:	d107      	bne.n	8005336 <HAL_TIM_OC_Stop_IT+0x126>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	438a      	bics	r2, r1
 8005334:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_TIM_OC_Stop_IT+0x136>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	223e      	movs	r2, #62	; 0x3e
 8005340:	2101      	movs	r1, #1
 8005342:	5499      	strb	r1, [r3, r2]
 8005344:	e013      	b.n	800536e <HAL_TIM_OC_Stop_IT+0x15e>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d104      	bne.n	8005356 <HAL_TIM_OC_Stop_IT+0x146>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	223f      	movs	r2, #63	; 0x3f
 8005350:	2101      	movs	r1, #1
 8005352:	5499      	strb	r1, [r3, r2]
 8005354:	e00b      	b.n	800536e <HAL_TIM_OC_Stop_IT+0x15e>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d104      	bne.n	8005366 <HAL_TIM_OC_Stop_IT+0x156>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	2101      	movs	r1, #1
 8005362:	5499      	strb	r1, [r3, r2]
 8005364:	e003      	b.n	800536e <HAL_TIM_OC_Stop_IT+0x15e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2241      	movs	r2, #65	; 0x41
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800536e:	230f      	movs	r3, #15
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	781b      	ldrb	r3, [r3, #0]
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b004      	add	sp, #16
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	00001111 	.word	0x00001111
 8005390:	00000444 	.word	0x00000444
 8005394:	ffff7fff 	.word	0xffff7fff

08005398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e042      	b.n	8005430 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	223d      	movs	r2, #61	; 0x3d
 80053ae:	5c9b      	ldrb	r3, [r3, r2]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	223c      	movs	r2, #60	; 0x3c
 80053ba:	2100      	movs	r1, #0
 80053bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 f839 	bl	8005438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	223d      	movs	r2, #61	; 0x3d
 80053ca:	2102      	movs	r1, #2
 80053cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	0019      	movs	r1, r3
 80053d8:	0010      	movs	r0, r2
 80053da:	f000 fb05 	bl	80059e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2246      	movs	r2, #70	; 0x46
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223e      	movs	r2, #62	; 0x3e
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	223f      	movs	r2, #63	; 0x3f
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2240      	movs	r2, #64	; 0x40
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2241      	movs	r2, #65	; 0x41
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2242      	movs	r2, #66	; 0x42
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2243      	movs	r2, #67	; 0x43
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2244      	movs	r2, #68	; 0x44
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2245      	movs	r2, #69	; 0x45
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223d      	movs	r2, #61	; 0x3d
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b002      	add	sp, #8
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2202      	movs	r2, #2
 8005458:	4013      	ands	r3, r2
 800545a:	2b02      	cmp	r3, #2
 800545c:	d124      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2202      	movs	r2, #2
 8005466:	4013      	ands	r3, r2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d11d      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2203      	movs	r2, #3
 8005472:	4252      	negs	r2, r2
 8005474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2203      	movs	r2, #3
 8005484:	4013      	ands	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	0018      	movs	r0, r3
 800548c:	f000 fa94 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 8005490:	e007      	b.n	80054a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0018      	movs	r0, r3
 8005496:	f7fb faa5 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 fa93 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2204      	movs	r2, #4
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d125      	bne.n	8005502 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2204      	movs	r2, #4
 80054be:	4013      	ands	r3, r2
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d11e      	bne.n	8005502 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2205      	movs	r2, #5
 80054ca:	4252      	negs	r2, r2
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	23c0      	movs	r3, #192	; 0xc0
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4013      	ands	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 fa67 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 80054ea:	e007      	b.n	80054fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7fb fa78 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 fa66 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2208      	movs	r2, #8
 800550a:	4013      	ands	r3, r2
 800550c:	2b08      	cmp	r3, #8
 800550e:	d124      	bne.n	800555a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2208      	movs	r2, #8
 8005518:	4013      	ands	r3, r2
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11d      	bne.n	800555a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2209      	movs	r2, #9
 8005524:	4252      	negs	r2, r2
 8005526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2204      	movs	r2, #4
 800552c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2203      	movs	r2, #3
 8005536:	4013      	ands	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fa3b 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 8005542:	e007      	b.n	8005554 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f7fb fa4c 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fa3a 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2210      	movs	r2, #16
 8005562:	4013      	ands	r3, r2
 8005564:	2b10      	cmp	r3, #16
 8005566:	d125      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2210      	movs	r2, #16
 8005570:	4013      	ands	r3, r2
 8005572:	2b10      	cmp	r3, #16
 8005574:	d11e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2211      	movs	r2, #17
 800557c:	4252      	negs	r2, r2
 800557e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2208      	movs	r2, #8
 8005584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	23c0      	movs	r3, #192	; 0xc0
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 fa0e 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 800559c:	e007      	b.n	80055ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fb fa1f 	bl	80009e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 fa0d 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2201      	movs	r2, #1
 80055bc:	4013      	ands	r3, r2
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d10f      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d108      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2202      	movs	r2, #2
 80055d6:	4252      	negs	r2, r2
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	0018      	movs	r0, r3
 80055de:	f000 f9e3 	bl	80059a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d10f      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2280      	movs	r2, #128	; 0x80
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d108      	bne.n	8005610 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2281      	movs	r2, #129	; 0x81
 8005604:	4252      	negs	r2, r2
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fdea 	bl	80061e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	4013      	ands	r3, r2
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d10f      	bne.n	800563e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2240      	movs	r2, #64	; 0x40
 8005626:	4013      	ands	r3, r2
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d108      	bne.n	800563e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2241      	movs	r2, #65	; 0x41
 8005632:	4252      	negs	r2, r2
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 f9cd 	bl	80059d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2220      	movs	r2, #32
 8005646:	4013      	ands	r3, r2
 8005648:	2b20      	cmp	r3, #32
 800564a:	d10f      	bne.n	800566c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	4013      	ands	r3, r2
 8005656:	2b20      	cmp	r3, #32
 8005658:	d108      	bne.n	800566c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2221      	movs	r2, #33	; 0x21
 8005660:	4252      	negs	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 fdb4 	bl	80061d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2317      	movs	r3, #23
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	223c      	movs	r2, #60	; 0x3c
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005692:	2302      	movs	r3, #2
 8005694:	e0ad      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	223c      	movs	r2, #60	; 0x3c
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d100      	bne.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80056a4:	e076      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x120>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d900      	bls.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 80056ac:	e095      	b.n	80057da <HAL_TIM_PWM_ConfigChannel+0x166>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d04e      	beq.n	8005752 <HAL_TIM_PWM_ConfigChannel+0xde>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d900      	bls.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x48>
 80056ba:	e08e      	b.n	80057da <HAL_TIM_PWM_ConfigChannel+0x166>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x56>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d021      	beq.n	800570c <HAL_TIM_PWM_ConfigChannel+0x98>
 80056c8:	e087      	b.n	80057da <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 fa08 	bl	8005ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2108      	movs	r1, #8
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2104      	movs	r1, #4
 80056f4:	438a      	bics	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	619a      	str	r2, [r3, #24]
      break;
 800570a:	e06b      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fa6f 	bl	8005bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0109      	lsls	r1, r1, #4
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4931      	ldr	r1, [pc, #196]	; (80057fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005738:	400a      	ands	r2, r1
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      break;
 8005750:	e048      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f000 fad0 	bl	8005d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2108      	movs	r1, #8
 800576c:	430a      	orrs	r2, r1
 800576e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2104      	movs	r1, #4
 800577c:	438a      	bics	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69d9      	ldr	r1, [r3, #28]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	61da      	str	r2, [r3, #28]
      break;
 8005792:	e027      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0011      	movs	r1, r2
 800579c:	0018      	movs	r0, r3
 800579e:	f000 fb35 	bl	8005e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2180      	movs	r1, #128	; 0x80
 80057ae:	0109      	lsls	r1, r1, #4
 80057b0:	430a      	orrs	r2, r1
 80057b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	490f      	ldr	r1, [pc, #60]	; (80057fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80057c0:	400a      	ands	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69d9      	ldr	r1, [r3, #28]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
      break;
 80057d8:	e004      	b.n	80057e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80057da:	2317      	movs	r3, #23
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
      break;
 80057e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	223c      	movs	r2, #60	; 0x3c
 80057e8:	2100      	movs	r1, #0
 80057ea:	5499      	strb	r1, [r3, r2]

  return status;
 80057ec:	2317      	movs	r3, #23
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	781b      	ldrb	r3, [r3, #0]
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b006      	add	sp, #24
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	fffffbff 	.word	0xfffffbff

08005800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	230f      	movs	r3, #15
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	223c      	movs	r2, #60	; 0x3c
 8005816:	5c9b      	ldrb	r3, [r3, r2]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIM_ConfigClockSource+0x20>
 800581c:	2302      	movs	r3, #2
 800581e:	e0bc      	b.n	800599a <HAL_TIM_ConfigClockSource+0x19a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	223c      	movs	r2, #60	; 0x3c
 8005824:	2101      	movs	r1, #1
 8005826:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	223d      	movs	r2, #61	; 0x3d
 800582c:	2102      	movs	r1, #2
 800582e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2277      	movs	r2, #119	; 0x77
 800583c:	4393      	bics	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a58      	ldr	r2, [pc, #352]	; (80059a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005844:	4013      	ands	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	0192      	lsls	r2, r2, #6
 8005858:	4293      	cmp	r3, r2
 800585a:	d040      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xde>
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	0192      	lsls	r2, r2, #6
 8005860:	4293      	cmp	r3, r2
 8005862:	d900      	bls.n	8005866 <HAL_TIM_ConfigClockSource+0x66>
 8005864:	e088      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	0152      	lsls	r2, r2, #5
 800586a:	4293      	cmp	r3, r2
 800586c:	d100      	bne.n	8005870 <HAL_TIM_ConfigClockSource+0x70>
 800586e:	e088      	b.n	8005982 <HAL_TIM_ConfigClockSource+0x182>
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	0152      	lsls	r2, r2, #5
 8005874:	4293      	cmp	r3, r2
 8005876:	d900      	bls.n	800587a <HAL_TIM_ConfigClockSource+0x7a>
 8005878:	e07e      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 800587a:	2b70      	cmp	r3, #112	; 0x70
 800587c:	d018      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0xb0>
 800587e:	d900      	bls.n	8005882 <HAL_TIM_ConfigClockSource+0x82>
 8005880:	e07a      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 8005882:	2b60      	cmp	r3, #96	; 0x60
 8005884:	d04f      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x126>
 8005886:	d900      	bls.n	800588a <HAL_TIM_ConfigClockSource+0x8a>
 8005888:	e076      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 800588a:	2b50      	cmp	r3, #80	; 0x50
 800588c:	d03b      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x106>
 800588e:	d900      	bls.n	8005892 <HAL_TIM_ConfigClockSource+0x92>
 8005890:	e072      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d057      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x146>
 8005896:	d900      	bls.n	800589a <HAL_TIM_ConfigClockSource+0x9a>
 8005898:	e06e      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 800589a:	2b30      	cmp	r3, #48	; 0x30
 800589c:	d063      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x166>
 800589e:	d86b      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d060      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x166>
 80058a4:	d868      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d05d      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x166>
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d05b      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x166>
 80058ae:	e063      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6899      	ldr	r1, [r3, #8]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f000 fb88 	bl	8005fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2277      	movs	r2, #119	; 0x77
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	609a      	str	r2, [r3, #8]
      break;
 80058dc:	e052      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6899      	ldr	r1, [r3, #8]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f000 fb71 	bl	8005fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	01c9      	lsls	r1, r1, #7
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
      break;
 8005904:	e03e      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	001a      	movs	r2, r3
 8005914:	f000 fae4 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2150      	movs	r1, #80	; 0x50
 800591e:	0018      	movs	r0, r3
 8005920:	f000 fb3e 	bl	8005fa0 <TIM_ITRx_SetConfig>
      break;
 8005924:	e02e      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	001a      	movs	r2, r3
 8005934:	f000 fb02 	bl	8005f3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2160      	movs	r1, #96	; 0x60
 800593e:	0018      	movs	r0, r3
 8005940:	f000 fb2e 	bl	8005fa0 <TIM_ITRx_SetConfig>
      break;
 8005944:	e01e      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	001a      	movs	r2, r3
 8005954:	f000 fac4 	bl	8005ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2140      	movs	r1, #64	; 0x40
 800595e:	0018      	movs	r0, r3
 8005960:	f000 fb1e 	bl	8005fa0 <TIM_ITRx_SetConfig>
      break;
 8005964:	e00e      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	0019      	movs	r1, r3
 8005970:	0010      	movs	r0, r2
 8005972:	f000 fb15 	bl	8005fa0 <TIM_ITRx_SetConfig>
      break;
 8005976:	e005      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005978:	230f      	movs	r3, #15
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2201      	movs	r2, #1
 800597e:	701a      	strb	r2, [r3, #0]
      break;
 8005980:	e000      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005982:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	223d      	movs	r2, #61	; 0x3d
 8005988:	2101      	movs	r1, #1
 800598a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	223c      	movs	r2, #60	; 0x3c
 8005990:	2100      	movs	r1, #0
 8005992:	5499      	strb	r1, [r3, r2]

  return status;
 8005994:	230f      	movs	r3, #15
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	781b      	ldrb	r3, [r3, #0]
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b004      	add	sp, #16
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	ffff00ff 	.word	0xffff00ff

080059a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b002      	add	sp, #8
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d0:	46c0      	nop			; (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b002      	add	sp, #8
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a34      	ldr	r2, [pc, #208]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d008      	beq.n	8005a12 <TIM_Base_SetConfig+0x2a>
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	05db      	lsls	r3, r3, #23
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0x2a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <TIM_Base_SetConfig+0xe8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2270      	movs	r2, #112	; 0x70
 8005a16:	4393      	bics	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a29      	ldr	r2, [pc, #164]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	05db      	lsls	r3, r3, #23
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <TIM_Base_SetConfig+0xe8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <TIM_Base_SetConfig+0xec>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <TIM_Base_SetConfig+0xf0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a22      	ldr	r2, [pc, #136]	; (8005adc <TIM_Base_SetConfig+0xf4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x76>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <TIM_Base_SetConfig+0xf8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <TIM_Base_SetConfig+0xfc>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	4393      	bics	r3, r2
 8005a76:	001a      	movs	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a0c      	ldr	r2, [pc, #48]	; (8005acc <TIM_Base_SetConfig+0xe4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_Base_SetConfig+0xce>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a0d      	ldr	r2, [pc, #52]	; (8005ad8 <TIM_Base_SetConfig+0xf0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_Base_SetConfig+0xce>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <TIM_Base_SetConfig+0xf4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_Base_SetConfig+0xce>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <TIM_Base_SetConfig+0xf8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d103      	bne.n	8005abe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	615a      	str	r2, [r3, #20]
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b004      	add	sp, #16
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40002000 	.word	0x40002000
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800
 8005ae4:	fffffcff 	.word	0xfffffcff

08005ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	2201      	movs	r2, #1
 8005af8:	4393      	bics	r3, r2
 8005afa:	001a      	movs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2270      	movs	r2, #112	; 0x70
 8005b16:	4393      	bics	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	4393      	bics	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	4393      	bics	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <TIM_OC1_SetConfig+0xf8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_OC1_SetConfig+0x76>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <TIM_OC1_SetConfig+0xfc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_OC1_SetConfig+0x76>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <TIM_OC1_SetConfig+0x100>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC1_SetConfig+0x76>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a24      	ldr	r2, [pc, #144]	; (8005bec <TIM_OC1_SetConfig+0x104>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10c      	bne.n	8005b78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2208      	movs	r2, #8
 8005b62:	4393      	bics	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2204      	movs	r2, #4
 8005b74:	4393      	bics	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <TIM_OC1_SetConfig+0xf8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <TIM_OC1_SetConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <TIM_OC1_SetConfig+0xfc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_OC1_SetConfig+0xb0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <TIM_OC1_SetConfig+0x100>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC1_SetConfig+0xb0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <TIM_OC1_SetConfig+0x104>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d111      	bne.n	8005bbc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <TIM_OC1_SetConfig+0x108>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <TIM_OC1_SetConfig+0x10c>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b006      	add	sp, #24
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800
 8005bf0:	fffffeff 	.word	0xfffffeff
 8005bf4:	fffffdff 	.word	0xfffffdff

08005bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	2210      	movs	r2, #16
 8005c08:	4393      	bics	r3, r2
 8005c0a:	001a      	movs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <TIM_OC2_SetConfig+0xe8>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ce4 <TIM_OC2_SetConfig+0xec>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2220      	movs	r2, #32
 8005c42:	4393      	bics	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <TIM_OC2_SetConfig+0xf0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10d      	bne.n	8005c76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	4393      	bics	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2240      	movs	r2, #64	; 0x40
 8005c72:	4393      	bics	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <TIM_OC2_SetConfig+0xf0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_OC2_SetConfig+0x9e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <TIM_OC2_SetConfig+0xf4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_OC2_SetConfig+0x9e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <TIM_OC2_SetConfig+0xf8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_OC2_SetConfig+0x9e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <TIM_OC2_SetConfig+0xfc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d113      	bne.n	8005cbe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <TIM_OC2_SetConfig+0x100>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <TIM_OC2_SetConfig+0x104>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	621a      	str	r2, [r3, #32]
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b006      	add	sp, #24
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	ffff8fff 	.word	0xffff8fff
 8005ce4:	fffffcff 	.word	0xfffffcff
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800
 8005cf8:	fffffbff 	.word	0xfffffbff
 8005cfc:	fffff7ff 	.word	0xfffff7ff

08005d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	4a35      	ldr	r2, [pc, #212]	; (8005de4 <TIM_OC3_SetConfig+0xe4>)
 8005d10:	401a      	ands	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2270      	movs	r2, #112	; 0x70
 8005d2c:	4393      	bics	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2203      	movs	r2, #3
 8005d34:	4393      	bics	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4a28      	ldr	r2, [pc, #160]	; (8005de8 <TIM_OC3_SetConfig+0xe8>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a24      	ldr	r2, [pc, #144]	; (8005dec <TIM_OC3_SetConfig+0xec>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10d      	bne.n	8005d7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <TIM_OC3_SetConfig+0xf0>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <TIM_OC3_SetConfig+0xf4>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <TIM_OC3_SetConfig+0xec>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_OC3_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <TIM_OC3_SetConfig+0xf8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_OC3_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <TIM_OC3_SetConfig+0xfc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_OC3_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <TIM_OC3_SetConfig+0x100>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d113      	bne.n	8005dc2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <TIM_OC3_SetConfig+0x104>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC3_SetConfig+0x108>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b006      	add	sp, #24
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	fffffeff 	.word	0xfffffeff
 8005de8:	fffffdff 	.word	0xfffffdff
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	fffff7ff 	.word	0xfffff7ff
 8005df4:	fffffbff 	.word	0xfffffbff
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800
 8005e04:	ffffefff 	.word	0xffffefff
 8005e08:	ffffdfff 	.word	0xffffdfff

08005e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <TIM_OC4_SetConfig+0xb0>)
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <TIM_OC4_SetConfig+0xb4>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <TIM_OC4_SetConfig+0xb8>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <TIM_OC4_SetConfig+0xbc>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <TIM_OC4_SetConfig+0xc0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <TIM_OC4_SetConfig+0x78>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <TIM_OC4_SetConfig+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_OC4_SetConfig+0x78>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <TIM_OC4_SetConfig+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_OC4_SetConfig+0x78>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <TIM_OC4_SetConfig+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d109      	bne.n	8005e98 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <TIM_OC4_SetConfig+0xd0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b006      	add	sp, #24
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	ffffefff 	.word	0xffffefff
 8005ec0:	ffff8fff 	.word	0xffff8fff
 8005ec4:	fffffcff 	.word	0xfffffcff
 8005ec8:	ffffdfff 	.word	0xffffdfff
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800
 8005edc:	ffffbfff 	.word	0xffffbfff

08005ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4393      	bics	r3, r2
 8005efa:	001a      	movs	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	22f0      	movs	r2, #240	; 0xf0
 8005f0a:	4393      	bics	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4393      	bics	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	46c0      	nop			; (mov r8, r8)
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b006      	add	sp, #24
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	4393      	bics	r3, r2
 8005f50:	001a      	movs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <TIM_TI2_ConfigInputStage+0x60>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	031b      	lsls	r3, r3, #12
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	22a0      	movs	r2, #160	; 0xa0
 8005f78:	4393      	bics	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b006      	add	sp, #24
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	ffff0fff 	.word	0xffff0fff

08005fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2270      	movs	r2, #112	; 0x70
 8005fb4:	4393      	bics	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	2207      	movs	r2, #7
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b004      	add	sp, #16
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <TIM_ETR_SetConfig+0x3c>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bd80      	pop	{r7, pc}
 8006010:	ffff00ff 	.word	0xffff00ff

08006014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	221f      	movs	r2, #31
 8006024:	4013      	ands	r3, r2
 8006026:	2201      	movs	r2, #1
 8006028:	409a      	lsls	r2, r3
 800602a:	0013      	movs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	43d2      	mvns	r2, r2
 8006036:	401a      	ands	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	211f      	movs	r1, #31
 8006044:	400b      	ands	r3, r1
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4099      	lsls	r1, r3
 800604a:	000b      	movs	r3, r1
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b006      	add	sp, #24
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	223c      	movs	r2, #60	; 0x3c
 800606a:	5c9b      	ldrb	r3, [r3, r2]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006070:	2302      	movs	r3, #2
 8006072:	e047      	b.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	223c      	movs	r2, #60	; 0x3c
 8006078:	2101      	movs	r1, #1
 800607a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	223d      	movs	r2, #61	; 0x3d
 8006080:	2102      	movs	r1, #2
 8006082:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2270      	movs	r2, #112	; 0x70
 8006098:	4393      	bics	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00f      	beq.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	05db      	lsls	r3, r3, #23
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d009      	beq.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a11      	ldr	r2, [pc, #68]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a10      	ldr	r2, [pc, #64]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10c      	bne.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	4393      	bics	r3, r2
 80060de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	223d      	movs	r2, #61	; 0x3d
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	223c      	movs	r2, #60	; 0x3c
 80060fe:	2100      	movs	r1, #0
 8006100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b004      	add	sp, #16
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40014000 	.word	0x40014000

08006118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	223c      	movs	r2, #60	; 0x3c
 800612a:	5c9b      	ldrb	r3, [r3, r2]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006130:	2302      	movs	r3, #2
 8006132:	e03e      	b.n	80061b2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	223c      	movs	r2, #60	; 0x3c
 8006138:	2101      	movs	r1, #1
 800613a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	4393      	bics	r3, r2
 8006142:	001a      	movs	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006150:	401a      	ands	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a18      	ldr	r2, [pc, #96]	; (80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800615e:	401a      	ands	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800616c:	401a      	ands	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800617a:	401a      	ands	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006188:	401a      	ands	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006196:	401a      	ands	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	223c      	movs	r2, #60	; 0x3c
 80061ac:	2100      	movs	r1, #0
 80061ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	0018      	movs	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	b004      	add	sp, #16
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	fffffcff 	.word	0xfffffcff
 80061c0:	fffffbff 	.word	0xfffffbff
 80061c4:	fffff7ff 	.word	0xfffff7ff
 80061c8:	ffffefff 	.word	0xffffefff
 80061cc:	ffffdfff 	.word	0xffffdfff
 80061d0:	ffffbfff 	.word	0xffffbfff

080061d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ec:	46c0      	nop			; (mov r8, r8)
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b002      	add	sp, #8
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e044      	b.n	8006290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620a:	2b00      	cmp	r3, #0
 800620c:	d107      	bne.n	800621e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2274      	movs	r2, #116	; 0x74
 8006212:	2100      	movs	r1, #0
 8006214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0018      	movs	r0, r3
 800621a:	f7fb fdc5 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2101      	movs	r1, #1
 8006230:	438a      	bics	r2, r1
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	0018      	movs	r0, r3
 8006238:	f000 fc2e 	bl	8006a98 <UART_SetConfig>
 800623c:	0003      	movs	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e024      	b.n	8006290 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	0018      	movs	r0, r3
 8006252:	f000 fd61 	bl	8006d18 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	490d      	ldr	r1, [pc, #52]	; (8006298 <HAL_UART_Init+0xa4>)
 8006262:	400a      	ands	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	212a      	movs	r1, #42	; 0x2a
 8006272:	438a      	bics	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2101      	movs	r1, #1
 8006282:	430a      	orrs	r2, r1
 8006284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 fdf9 	bl	8006e80 <UART_CheckIdleState>
 800628e:	0003      	movs	r3, r0
}
 8006290:	0018      	movs	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	b002      	add	sp, #8
 8006296:	bd80      	pop	{r7, pc}
 8006298:	ffffb7ff 	.word	0xffffb7ff

0800629c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	1dbb      	adds	r3, r7, #6
 80062aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d000      	beq.n	80062b6 <HAL_UART_Transmit+0x1a>
 80062b4:	e096      	b.n	80063e4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_UART_Transmit+0x28>
 80062bc:	1dbb      	adds	r3, r7, #6
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e08e      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	015b      	lsls	r3, r3, #5
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d109      	bne.n	80062e8 <HAL_UART_Transmit+0x4c>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2201      	movs	r2, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d001      	beq.n	80062e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e07e      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2274      	movs	r2, #116	; 0x74
 80062ec:	5c9b      	ldrb	r3, [r3, r2]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Transmit+0x5a>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e077      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2274      	movs	r2, #116	; 0x74
 80062fa:	2101      	movs	r1, #1
 80062fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	2100      	movs	r1, #0
 8006304:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2221      	movs	r2, #33	; 0x21
 800630a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630c:	f7fb feb6 	bl	800207c <HAL_GetTick>
 8006310:	0003      	movs	r3, r0
 8006312:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1dba      	adds	r2, r7, #6
 8006318:	2150      	movs	r1, #80	; 0x50
 800631a:	8812      	ldrh	r2, [r2, #0]
 800631c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1dba      	adds	r2, r7, #6
 8006322:	2152      	movs	r1, #82	; 0x52
 8006324:	8812      	ldrh	r2, [r2, #0]
 8006326:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	015b      	lsls	r3, r3, #5
 8006330:	429a      	cmp	r2, r3
 8006332:	d108      	bne.n	8006346 <HAL_UART_Transmit+0xaa>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	e003      	b.n	800634e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2274      	movs	r2, #116	; 0x74
 8006352:	2100      	movs	r1, #0
 8006354:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006356:	e02d      	b.n	80063b4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	0013      	movs	r3, r2
 8006362:	2200      	movs	r2, #0
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	f000 fdd3 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 800636a:	1e03      	subs	r3, r0, #0
 800636c:	d001      	beq.n	8006372 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e039      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	05d2      	lsls	r2, r2, #23
 8006382:	0dd2      	lsrs	r2, r2, #23
 8006384:	b292      	uxth	r2, r2
 8006386:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	3302      	adds	r3, #2
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	e008      	b.n	80063a2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	b292      	uxth	r2, r2
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3301      	adds	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2252      	movs	r2, #82	; 0x52
 80063a6:	5a9b      	ldrh	r3, [r3, r2]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b299      	uxth	r1, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2252      	movs	r2, #82	; 0x52
 80063b2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2252      	movs	r2, #82	; 0x52
 80063b8:	5a9b      	ldrh	r3, [r3, r2]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1cb      	bne.n	8006358 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	0013      	movs	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	2140      	movs	r1, #64	; 0x40
 80063ce:	f000 fd9f 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d001      	beq.n	80063da <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e005      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b008      	add	sp, #32
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b088      	sub	sp, #32
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	1dbb      	adds	r3, r7, #6
 80063fa:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006400:	2b20      	cmp	r3, #32
 8006402:	d150      	bne.n	80064a6 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_UART_Receive_IT+0x24>
 800640a:	1dbb      	adds	r3, r7, #6
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e048      	b.n	80064a8 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	015b      	lsls	r3, r3, #5
 800641e:	429a      	cmp	r2, r3
 8006420:	d109      	bne.n	8006436 <HAL_UART_Receive_IT+0x48>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2201      	movs	r2, #1
 800642e:	4013      	ands	r3, r2
 8006430:	d001      	beq.n	8006436 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e038      	b.n	80064a8 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2274      	movs	r2, #116	; 0x74
 800643a:	5c9b      	ldrb	r3, [r3, r2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Receive_IT+0x56>
 8006440:	2302      	movs	r3, #2
 8006442:	e031      	b.n	80064a8 <HAL_UART_Receive_IT+0xba>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2274      	movs	r2, #116	; 0x74
 8006448:	2101      	movs	r1, #1
 800644a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	4013      	ands	r3, r2
 800645e:	d019      	beq.n	8006494 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006460:	f3ef 8310 	mrs	r3, PRIMASK
 8006464:	613b      	str	r3, [r7, #16]
  return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	2301      	movs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	04c9      	lsls	r1, r1, #19
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f383 8810 	msr	PRIMASK, r3
}
 8006492:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006494:	1dbb      	adds	r3, r7, #6
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	0018      	movs	r0, r3
 800649e:	f000 fdfb 	bl	8007098 <UART_Start_Receive_IT>
 80064a2:	0003      	movs	r3, r0
 80064a4:	e000      	b.n	80064a8 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	0018      	movs	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b008      	add	sp, #32
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b0ab      	sub	sp, #172	; 0xac
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	22a4      	movs	r2, #164	; 0xa4
 80064c0:	18b9      	adds	r1, r7, r2
 80064c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	20a0      	movs	r0, #160	; 0xa0
 80064cc:	1839      	adds	r1, r7, r0
 80064ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	219c      	movs	r1, #156	; 0x9c
 80064d8:	1879      	adds	r1, r7, r1
 80064da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064dc:	0011      	movs	r1, r2
 80064de:	18bb      	adds	r3, r7, r2
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a99      	ldr	r2, [pc, #612]	; (8006748 <HAL_UART_IRQHandler+0x298>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	2298      	movs	r2, #152	; 0x98
 80064e8:	18bc      	adds	r4, r7, r2
 80064ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80064ec:	18bb      	adds	r3, r7, r2
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d114      	bne.n	800651e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f4:	187b      	adds	r3, r7, r1
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2220      	movs	r2, #32
 80064fa:	4013      	ands	r3, r2
 80064fc:	d00f      	beq.n	800651e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fe:	183b      	adds	r3, r7, r0
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2220      	movs	r2, #32
 8006504:	4013      	ands	r3, r2
 8006506:	d00a      	beq.n	800651e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	2b00      	cmp	r3, #0
 800650e:	d100      	bne.n	8006512 <HAL_UART_IRQHandler+0x62>
 8006510:	e296      	b.n	8006a40 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	0010      	movs	r0, r2
 800651a:	4798      	blx	r3
      }
      return;
 800651c:	e290      	b.n	8006a40 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800651e:	2398      	movs	r3, #152	; 0x98
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d100      	bne.n	800652a <HAL_UART_IRQHandler+0x7a>
 8006528:	e114      	b.n	8006754 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800652a:	239c      	movs	r3, #156	; 0x9c
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	4013      	ands	r3, r2
 8006534:	d106      	bne.n	8006544 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006536:	23a0      	movs	r3, #160	; 0xa0
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a83      	ldr	r2, [pc, #524]	; (800674c <HAL_UART_IRQHandler+0x29c>)
 800653e:	4013      	ands	r3, r2
 8006540:	d100      	bne.n	8006544 <HAL_UART_IRQHandler+0x94>
 8006542:	e107      	b.n	8006754 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006544:	23a4      	movs	r3, #164	; 0xa4
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2201      	movs	r2, #1
 800654c:	4013      	ands	r3, r2
 800654e:	d012      	beq.n	8006576 <HAL_UART_IRQHandler+0xc6>
 8006550:	23a0      	movs	r3, #160	; 0xa0
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4013      	ands	r3, r2
 800655c:	d00b      	beq.n	8006576 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2280      	movs	r2, #128	; 0x80
 800656a:	589b      	ldr	r3, [r3, r2]
 800656c:	2201      	movs	r2, #1
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006576:	23a4      	movs	r3, #164	; 0xa4
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2202      	movs	r2, #2
 800657e:	4013      	ands	r3, r2
 8006580:	d011      	beq.n	80065a6 <HAL_UART_IRQHandler+0xf6>
 8006582:	239c      	movs	r3, #156	; 0x9c
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2201      	movs	r2, #1
 800658a:	4013      	ands	r3, r2
 800658c:	d00b      	beq.n	80065a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2202      	movs	r2, #2
 8006594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	589b      	ldr	r3, [r3, r2]
 800659c:	2204      	movs	r2, #4
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a6:	23a4      	movs	r3, #164	; 0xa4
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2204      	movs	r2, #4
 80065ae:	4013      	ands	r3, r2
 80065b0:	d011      	beq.n	80065d6 <HAL_UART_IRQHandler+0x126>
 80065b2:	239c      	movs	r3, #156	; 0x9c
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	4013      	ands	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2204      	movs	r2, #4
 80065c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2280      	movs	r2, #128	; 0x80
 80065ca:	589b      	ldr	r3, [r3, r2]
 80065cc:	2202      	movs	r2, #2
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2180      	movs	r1, #128	; 0x80
 80065d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065d6:	23a4      	movs	r3, #164	; 0xa4
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2208      	movs	r2, #8
 80065de:	4013      	ands	r3, r2
 80065e0:	d017      	beq.n	8006612 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e2:	23a0      	movs	r3, #160	; 0xa0
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2220      	movs	r2, #32
 80065ea:	4013      	ands	r3, r2
 80065ec:	d105      	bne.n	80065fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065ee:	239c      	movs	r3, #156	; 0x9c
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f8:	d00b      	beq.n	8006612 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	589b      	ldr	r3, [r3, r2]
 8006608:	2208      	movs	r2, #8
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006612:	23a4      	movs	r3, #164	; 0xa4
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	4013      	ands	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_UART_IRQHandler+0x198>
 8006620:	23a0      	movs	r3, #160	; 0xa0
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	04db      	lsls	r3, r3, #19
 800662a:	4013      	ands	r3, r2
 800662c:	d00c      	beq.n	8006648 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	0112      	lsls	r2, r2, #4
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	589b      	ldr	r3, [r3, r2]
 800663e:	2220      	movs	r2, #32
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	589b      	ldr	r3, [r3, r2]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d100      	bne.n	8006654 <HAL_UART_IRQHandler+0x1a4>
 8006652:	e1f7      	b.n	8006a44 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006654:	23a4      	movs	r3, #164	; 0xa4
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2220      	movs	r2, #32
 800665c:	4013      	ands	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006660:	23a0      	movs	r3, #160	; 0xa0
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2220      	movs	r2, #32
 8006668:	4013      	ands	r3, r2
 800666a:	d008      	beq.n	800667e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	0010      	movs	r0, r2
 800667c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	589b      	ldr	r3, [r3, r2]
 8006684:	2194      	movs	r1, #148	; 0x94
 8006686:	187a      	adds	r2, r7, r1
 8006688:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2240      	movs	r2, #64	; 0x40
 8006692:	4013      	ands	r3, r2
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d004      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006698:	187b      	adds	r3, r7, r1
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2228      	movs	r2, #40	; 0x28
 800669e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066a0:	d047      	beq.n	8006732 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 fd93 	bl	80071d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d137      	bne.n	8006728 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b8:	f3ef 8310 	mrs	r3, PRIMASK
 80066bc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80066be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c0:	2090      	movs	r0, #144	; 0x90
 80066c2:	183a      	adds	r2, r7, r0
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	2301      	movs	r3, #1
 80066c8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066cc:	f383 8810 	msr	PRIMASK, r3
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	438a      	bics	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
 80066e2:	183b      	adds	r3, r7, r0
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ea:	f383 8810 	msr	PRIMASK, r3
}
 80066ee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	4a14      	ldr	r2, [pc, #80]	; (8006750 <HAL_UART_IRQHandler+0x2a0>)
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	0018      	movs	r0, r3
 8006706:	f7fc fb1f 	bl	8002d48 <HAL_DMA_Abort_IT>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d01a      	beq.n	8006744 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	0018      	movs	r0, r3
 800671a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e012      	b.n	8006744 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	0018      	movs	r0, r3
 8006722:	f000 f9a5 	bl	8006a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006726:	e00d      	b.n	8006744 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f9a0 	bl	8006a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e008      	b.n	8006744 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 f99b 	bl	8006a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2280      	movs	r2, #128	; 0x80
 800673e:	2100      	movs	r1, #0
 8006740:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006742:	e17f      	b.n	8006a44 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	46c0      	nop			; (mov r8, r8)
    return;
 8006746:	e17d      	b.n	8006a44 <HAL_UART_IRQHandler+0x594>
 8006748:	0000080f 	.word	0x0000080f
 800674c:	04000120 	.word	0x04000120
 8006750:	08007295 	.word	0x08007295

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	2b01      	cmp	r3, #1
 800675a:	d000      	beq.n	800675e <HAL_UART_IRQHandler+0x2ae>
 800675c:	e131      	b.n	80069c2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800675e:	23a4      	movs	r3, #164	; 0xa4
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2210      	movs	r2, #16
 8006766:	4013      	ands	r3, r2
 8006768:	d100      	bne.n	800676c <HAL_UART_IRQHandler+0x2bc>
 800676a:	e12a      	b.n	80069c2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800676c:	23a0      	movs	r3, #160	; 0xa0
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2210      	movs	r2, #16
 8006774:	4013      	ands	r3, r2
 8006776:	d100      	bne.n	800677a <HAL_UART_IRQHandler+0x2ca>
 8006778:	e123      	b.n	80069c2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	4013      	ands	r3, r2
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d000      	beq.n	8006792 <HAL_UART_IRQHandler+0x2e2>
 8006790:	e09b      	b.n	80068ca <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	217e      	movs	r1, #126	; 0x7e
 800679c:	187b      	adds	r3, r7, r1
 800679e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80067a0:	187b      	adds	r3, r7, r1
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d100      	bne.n	80067aa <HAL_UART_IRQHandler+0x2fa>
 80067a8:	e14e      	b.n	8006a48 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2258      	movs	r2, #88	; 0x58
 80067ae:	5a9b      	ldrh	r3, [r3, r2]
 80067b0:	187a      	adds	r2, r7, r1
 80067b2:	8812      	ldrh	r2, [r2, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d300      	bcc.n	80067ba <HAL_UART_IRQHandler+0x30a>
 80067b8:	e146      	b.n	8006a48 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	187a      	adds	r2, r7, r1
 80067be:	215a      	movs	r1, #90	; 0x5a
 80067c0:	8812      	ldrh	r2, [r2, #0]
 80067c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d06e      	beq.n	80068ac <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ce:	f3ef 8310 	mrs	r3, PRIMASK
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80067d8:	2301      	movs	r3, #1
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	f383 8810 	msr	PRIMASK, r3
}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	499a      	ldr	r1, [pc, #616]	; (8006a58 <HAL_UART_IRQHandler+0x5a8>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	f383 8810 	msr	PRIMASK, r3
}
 80067fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006800:	f3ef 8310 	mrs	r3, PRIMASK
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006808:	677b      	str	r3, [r7, #116]	; 0x74
 800680a:	2301      	movs	r3, #1
 800680c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2101      	movs	r1, #1
 8006822:	438a      	bics	r2, r1
 8006824:	609a      	str	r2, [r3, #8]
 8006826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006828:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	f383 8810 	msr	PRIMASK, r3
}
 8006830:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006832:	f3ef 8310 	mrs	r3, PRIMASK
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006838:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	673b      	str	r3, [r7, #112]	; 0x70
 800683c:	2301      	movs	r3, #1
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	f383 8810 	msr	PRIMASK, r3
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	438a      	bics	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
 8006858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800685a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685e:	f383 8810 	msr	PRIMASK, r3
}
 8006862:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006870:	f3ef 8310 	mrs	r3, PRIMASK
 8006874:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006876:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800687a:	2301      	movs	r3, #1
 800687c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006880:	f383 8810 	msr	PRIMASK, r3
}
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2110      	movs	r1, #16
 8006892:	438a      	bics	r2, r1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800689c:	f383 8810 	msr	PRIMASK, r3
}
 80068a0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7fc fa16 	bl	8002cd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2258      	movs	r2, #88	; 0x58
 80068b0:	5a9a      	ldrh	r2, [r3, r2]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	215a      	movs	r1, #90	; 0x5a
 80068b6:	5a5b      	ldrh	r3, [r3, r1]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0011      	movs	r1, r2
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f8dc 	bl	8006a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c8:	e0be      	b.n	8006a48 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2258      	movs	r2, #88	; 0x58
 80068ce:	5a99      	ldrh	r1, [r3, r2]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	225a      	movs	r2, #90	; 0x5a
 80068d4:	5a9b      	ldrh	r3, [r3, r2]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	208e      	movs	r0, #142	; 0x8e
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	1a8a      	subs	r2, r1, r2
 80068de:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	225a      	movs	r2, #90	; 0x5a
 80068e4:	5a9b      	ldrh	r3, [r3, r2]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d100      	bne.n	80068ee <HAL_UART_IRQHandler+0x43e>
 80068ec:	e0ae      	b.n	8006a4c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d100      	bne.n	80068f8 <HAL_UART_IRQHandler+0x448>
 80068f6:	e0a9      	b.n	8006a4c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f8:	f3ef 8310 	mrs	r3, PRIMASK
 80068fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80068fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006900:	2488      	movs	r4, #136	; 0x88
 8006902:	193a      	adds	r2, r7, r4
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	2301      	movs	r3, #1
 8006908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f383 8810 	msr	PRIMASK, r3
}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	494f      	ldr	r1, [pc, #316]	; (8006a5c <HAL_UART_IRQHandler+0x5ac>)
 800691e:	400a      	ands	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	193b      	adds	r3, r7, r4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f383 8810 	msr	PRIMASK, r3
}
 800692e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006930:	f3ef 8310 	mrs	r3, PRIMASK
 8006934:	61bb      	str	r3, [r7, #24]
  return(result);
 8006936:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	2484      	movs	r4, #132	; 0x84
 800693a:	193a      	adds	r2, r7, r4
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	2301      	movs	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2101      	movs	r1, #1
 8006956:	438a      	bics	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	193b      	adds	r3, r7, r4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	f383 8810 	msr	PRIMASK, r3
}
 8006966:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697a:	f3ef 8310 	mrs	r3, PRIMASK
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006982:	2480      	movs	r4, #128	; 0x80
 8006984:	193a      	adds	r2, r7, r4
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	2301      	movs	r3, #1
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f383 8810 	msr	PRIMASK, r3
}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2110      	movs	r1, #16
 80069a0:	438a      	bics	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	193b      	adds	r3, r7, r4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	0011      	movs	r1, r2
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 f860 	bl	8006a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069c0:	e044      	b.n	8006a4c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069c2:	23a4      	movs	r3, #164	; 0xa4
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	035b      	lsls	r3, r3, #13
 80069cc:	4013      	ands	r3, r2
 80069ce:	d010      	beq.n	80069f2 <HAL_UART_IRQHandler+0x542>
 80069d0:	239c      	movs	r3, #156	; 0x9c
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	03db      	lsls	r3, r3, #15
 80069da:	4013      	ands	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2280      	movs	r2, #128	; 0x80
 80069e4:	0352      	lsls	r2, r2, #13
 80069e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0018      	movs	r0, r3
 80069ec:	f000 fdfc 	bl	80075e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069f0:	e02f      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069f2:	23a4      	movs	r3, #164	; 0xa4
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	4013      	ands	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069fe:	23a0      	movs	r3, #160	; 0xa0
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2280      	movs	r2, #128	; 0x80
 8006a06:	4013      	ands	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01e      	beq.n	8006a50 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	0010      	movs	r0, r2
 8006a1a:	4798      	blx	r3
    }
    return;
 8006a1c:	e018      	b.n	8006a50 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a1e:	23a4      	movs	r3, #164	; 0xa4
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2240      	movs	r2, #64	; 0x40
 8006a26:	4013      	ands	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
 8006a2a:	23a0      	movs	r3, #160	; 0xa0
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2240      	movs	r2, #64	; 0x40
 8006a32:	4013      	ands	r3, r2
 8006a34:	d00d      	beq.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f000 fc42 	bl	80072c2 <UART_EndTransmit_IT>
    return;
 8006a3e:	e008      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	e006      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	e004      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006a48:	46c0      	nop			; (mov r8, r8)
 8006a4a:	e002      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006a50:	46c0      	nop			; (mov r8, r8)
  }

}
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b02b      	add	sp, #172	; 0xac
 8006a56:	bd90      	pop	{r4, r7, pc}
 8006a58:	fffffeff 	.word	0xfffffeff
 8006a5c:	fffffedf 	.word	0xfffffedf

08006a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a78:	46c0      	nop			; (mov r8, r8)
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b002      	add	sp, #8
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	000a      	movs	r2, r1
 8006a8a:	1cbb      	adds	r3, r7, #2
 8006a8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aa0:	231e      	movs	r3, #30
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a8d      	ldr	r2, [pc, #564]	; (8006cfc <UART_SetConfig+0x264>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a88      	ldr	r2, [pc, #544]	; (8006d00 <UART_SetConfig+0x268>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a7f      	ldr	r2, [pc, #508]	; (8006d04 <UART_SetConfig+0x26c>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	0019      	movs	r1, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a7b      	ldr	r2, [pc, #492]	; (8006d08 <UART_SetConfig+0x270>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d127      	bne.n	8006b6e <UART_SetConfig+0xd6>
 8006b1e:	4b7b      	ldr	r3, [pc, #492]	; (8006d0c <UART_SetConfig+0x274>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	2203      	movs	r2, #3
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d00d      	beq.n	8006b46 <UART_SetConfig+0xae>
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0xcc>
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d014      	beq.n	8006b5a <UART_SetConfig+0xc2>
 8006b30:	d818      	bhi.n	8006b64 <UART_SetConfig+0xcc>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <UART_SetConfig+0xa4>
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d00a      	beq.n	8006b50 <UART_SetConfig+0xb8>
 8006b3a:	e013      	b.n	8006b64 <UART_SetConfig+0xcc>
 8006b3c:	231f      	movs	r3, #31
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e021      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b46:	231f      	movs	r3, #31
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	e01c      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b50:	231f      	movs	r3, #31
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	2204      	movs	r2, #4
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e017      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b5a:	231f      	movs	r3, #31
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2208      	movs	r2, #8
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	e012      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b64:	231f      	movs	r3, #31
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	2210      	movs	r2, #16
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e00d      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <UART_SetConfig+0x278>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d104      	bne.n	8006b82 <UART_SetConfig+0xea>
 8006b78:	231f      	movs	r3, #31
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e003      	b.n	8006b8a <UART_SetConfig+0xf2>
 8006b82:	231f      	movs	r3, #31
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	2210      	movs	r2, #16
 8006b88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d15d      	bne.n	8006c52 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006b96:	231f      	movs	r3, #31
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d015      	beq.n	8006bcc <UART_SetConfig+0x134>
 8006ba0:	dc18      	bgt.n	8006bd4 <UART_SetConfig+0x13c>
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d00d      	beq.n	8006bc2 <UART_SetConfig+0x12a>
 8006ba6:	dc15      	bgt.n	8006bd4 <UART_SetConfig+0x13c>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <UART_SetConfig+0x11a>
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d005      	beq.n	8006bbc <UART_SetConfig+0x124>
 8006bb0:	e010      	b.n	8006bd4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fd fd63 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	61bb      	str	r3, [r7, #24]
        break;
 8006bba:	e012      	b.n	8006be2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bbc:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <UART_SetConfig+0x27c>)
 8006bbe:	61bb      	str	r3, [r7, #24]
        break;
 8006bc0:	e00f      	b.n	8006be2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc2:	f7fd fced 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	61bb      	str	r3, [r7, #24]
        break;
 8006bca:	e00a      	b.n	8006be2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	61bb      	str	r3, [r7, #24]
        break;
 8006bd2:	e006      	b.n	8006be2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bd8:	231e      	movs	r3, #30
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
        break;
 8006be0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d100      	bne.n	8006bea <UART_SetConfig+0x152>
 8006be8:	e07b      	b.n	8006ce2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	005a      	lsls	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	18d2      	adds	r2, r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	0019      	movs	r1, r3
 8006bfc:	0010      	movs	r0, r2
 8006bfe:	f7f9 fa83 	bl	8000108 <__udivsi3>
 8006c02:	0003      	movs	r3, r0
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	d91c      	bls.n	8006c48 <UART_SetConfig+0x1b0>
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	025b      	lsls	r3, r3, #9
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d217      	bcs.n	8006c48 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	200e      	movs	r0, #14
 8006c1e:	183b      	adds	r3, r7, r0
 8006c20:	210f      	movs	r1, #15
 8006c22:	438a      	bics	r2, r1
 8006c24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2207      	movs	r2, #7
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b299      	uxth	r1, r3
 8006c32:	183b      	adds	r3, r7, r0
 8006c34:	183a      	adds	r2, r7, r0
 8006c36:	8812      	ldrh	r2, [r2, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	183a      	adds	r2, r7, r0
 8006c42:	8812      	ldrh	r2, [r2, #0]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	e04c      	b.n	8006ce2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c48:	231e      	movs	r3, #30
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e047      	b.n	8006ce2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c52:	231f      	movs	r3, #31
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d015      	beq.n	8006c88 <UART_SetConfig+0x1f0>
 8006c5c:	dc18      	bgt.n	8006c90 <UART_SetConfig+0x1f8>
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00d      	beq.n	8006c7e <UART_SetConfig+0x1e6>
 8006c62:	dc15      	bgt.n	8006c90 <UART_SetConfig+0x1f8>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <UART_SetConfig+0x1d6>
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d005      	beq.n	8006c78 <UART_SetConfig+0x1e0>
 8006c6c:	e010      	b.n	8006c90 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6e:	f7fd fd05 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8006c72:	0003      	movs	r3, r0
 8006c74:	61bb      	str	r3, [r7, #24]
        break;
 8006c76:	e012      	b.n	8006c9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c78:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <UART_SetConfig+0x27c>)
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e00f      	b.n	8006c9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fd fc8f 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8006c82:	0003      	movs	r3, r0
 8006c84:	61bb      	str	r3, [r7, #24]
        break;
 8006c86:	e00a      	b.n	8006c9e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	61bb      	str	r3, [r7, #24]
        break;
 8006c8e:	e006      	b.n	8006c9e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c94:	231e      	movs	r3, #30
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
        break;
 8006c9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01e      	beq.n	8006ce2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	085a      	lsrs	r2, r3, #1
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	18d2      	adds	r2, r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	0010      	movs	r0, r2
 8006cb6:	f7f9 fa27 	bl	8000108 <__udivsi3>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d909      	bls.n	8006cda <UART_SetConfig+0x242>
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	025b      	lsls	r3, r3, #9
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d204      	bcs.n	8006cda <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	e003      	b.n	8006ce2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006cda:	231e      	movs	r3, #30
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cee:	231e      	movs	r3, #30
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781b      	ldrb	r3, [r3, #0]
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b008      	add	sp, #32
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	ffff69f3 	.word	0xffff69f3
 8006d00:	ffffcfff 	.word	0xffffcfff
 8006d04:	fffff4ff 	.word	0xfffff4ff
 8006d08:	40013800 	.word	0x40013800
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	40004400 	.word	0x40004400
 8006d14:	007a1200 	.word	0x007a1200

08006d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2201      	movs	r2, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a4a      	ldr	r2, [pc, #296]	; (8006e5c <UART_AdvFeatureConfig+0x144>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2202      	movs	r2, #2
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4a43      	ldr	r2, [pc, #268]	; (8006e60 <UART_AdvFeatureConfig+0x148>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	0019      	movs	r1, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2204      	movs	r2, #4
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a3b      	ldr	r2, [pc, #236]	; (8006e64 <UART_AdvFeatureConfig+0x14c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4a34      	ldr	r2, [pc, #208]	; (8006e68 <UART_AdvFeatureConfig+0x150>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2210      	movs	r2, #16
 8006dae:	4013      	ands	r3, r2
 8006db0:	d00b      	beq.n	8006dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <UART_AdvFeatureConfig+0x154>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2220      	movs	r2, #32
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <UART_AdvFeatureConfig+0x158>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	0019      	movs	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2240      	movs	r2, #64	; 0x40
 8006df2:	4013      	ands	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <UART_AdvFeatureConfig+0x15c>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	0019      	movs	r1, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e12:	2380      	movs	r3, #128	; 0x80
 8006e14:	035b      	lsls	r3, r3, #13
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d10b      	bne.n	8006e32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <UART_AdvFeatureConfig+0x160>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	0019      	movs	r1, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d00b      	beq.n	8006e54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <UART_AdvFeatureConfig+0x164>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	0019      	movs	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }
}
 8006e54:	46c0      	nop			; (mov r8, r8)
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	fffdffff 	.word	0xfffdffff
 8006e60:	fffeffff 	.word	0xfffeffff
 8006e64:	fffbffff 	.word	0xfffbffff
 8006e68:	ffff7fff 	.word	0xffff7fff
 8006e6c:	ffffefff 	.word	0xffffefff
 8006e70:	ffffdfff 	.word	0xffffdfff
 8006e74:	ffefffff 	.word	0xffefffff
 8006e78:	ff9fffff 	.word	0xff9fffff
 8006e7c:	fff7ffff 	.word	0xfff7ffff

08006e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2280      	movs	r2, #128	; 0x80
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e90:	f7fb f8f4 	bl	800207c <HAL_GetTick>
 8006e94:	0003      	movs	r3, r0
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d10c      	bne.n	8006ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	0391      	lsls	r1, r2, #14
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <UART_CheckIdleState+0x8c>)
 8006eb0:	9200      	str	r2, [sp, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f000 f82c 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d001      	beq.n	8006ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e021      	b.n	8006f04 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d10c      	bne.n	8006ee8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	03d1      	lsls	r1, r2, #15
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <UART_CheckIdleState+0x8c>)
 8006ed8:	9200      	str	r2, [sp, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f000 f818 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006ee0:	1e03      	subs	r3, r0, #0
 8006ee2:	d001      	beq.n	8006ee8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e00d      	b.n	8006f04 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2274      	movs	r2, #116	; 0x74
 8006efe:	2100      	movs	r1, #0
 8006f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b004      	add	sp, #16
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	01ffffff 	.word	0x01ffffff

08006f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b094      	sub	sp, #80	; 0x50
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	1dfb      	adds	r3, r7, #7
 8006f1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	e0a3      	b.n	800706a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f24:	3301      	adds	r3, #1
 8006f26:	d100      	bne.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006f28:	e09f      	b.n	800706a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2a:	f7fb f8a7 	bl	800207c <HAL_GetTick>
 8006f2e:	0002      	movs	r2, r0
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d13d      	bne.n	8006fbc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f40:	f3ef 8310 	mrs	r3, PRIMASK
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	f383 8810 	msr	PRIMASK, r3
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	494c      	ldr	r1, [pc, #304]	; (8007094 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006f62:	400a      	ands	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	f383 8810 	msr	PRIMASK, r3
}
 8006f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8310 	mrs	r3, PRIMASK
 8006f76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f383 8810 	msr	PRIMASK, r3
}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2101      	movs	r1, #1
 8006f94:	438a      	bics	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2274      	movs	r2, #116	; 0x74
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e067      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d050      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	2380      	movs	r3, #128	; 0x80
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d146      	bne.n	800706a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2280      	movs	r2, #128	; 0x80
 8006fe2:	0112      	lsls	r2, r2, #4
 8006fe4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fea:	613b      	str	r3, [r7, #16]
  return(result);
 8006fec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4923      	ldr	r1, [pc, #140]	; (8007094 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007008:	400a      	ands	r2, r1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007018:	f3ef 8310 	mrs	r3, PRIMASK
 800701c:	61fb      	str	r3, [r7, #28]
  return(result);
 800701e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007020:	64bb      	str	r3, [r7, #72]	; 0x48
 8007022:	2301      	movs	r3, #1
 8007024:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	f383 8810 	msr	PRIMASK, r3
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2101      	movs	r1, #1
 800703a:	438a      	bics	r2, r1
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	f383 8810 	msr	PRIMASK, r3
}
 8007048:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	2120      	movs	r1, #32
 800705c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2274      	movs	r2, #116	; 0x74
 8007062:	2100      	movs	r1, #0
 8007064:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e010      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	4013      	ands	r3, r2
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	425a      	negs	r2, r3
 800707a:	4153      	adcs	r3, r2
 800707c:	b2db      	uxtb	r3, r3
 800707e:	001a      	movs	r2, r3
 8007080:	1dfb      	adds	r3, r7, #7
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d100      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007088:	e74b      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	0018      	movs	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	b014      	add	sp, #80	; 0x50
 8007092:	bd80      	pop	{r7, pc}
 8007094:	fffffe5f 	.word	0xfffffe5f

08007098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08c      	sub	sp, #48	; 0x30
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	1dbb      	adds	r3, r7, #6
 80070a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1dba      	adds	r2, r7, #6
 80070b0:	2158      	movs	r1, #88	; 0x58
 80070b2:	8812      	ldrh	r2, [r2, #0]
 80070b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1dba      	adds	r2, r7, #6
 80070ba:	215a      	movs	r1, #90	; 0x5a
 80070bc:	8812      	ldrh	r2, [r2, #0]
 80070be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	2380      	movs	r3, #128	; 0x80
 80070cc:	015b      	lsls	r3, r3, #5
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d10d      	bne.n	80070ee <UART_Start_Receive_IT+0x56>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d104      	bne.n	80070e4 <UART_Start_Receive_IT+0x4c>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	225c      	movs	r2, #92	; 0x5c
 80070de:	4939      	ldr	r1, [pc, #228]	; (80071c4 <UART_Start_Receive_IT+0x12c>)
 80070e0:	5299      	strh	r1, [r3, r2]
 80070e2:	e01a      	b.n	800711a <UART_Start_Receive_IT+0x82>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	225c      	movs	r2, #92	; 0x5c
 80070e8:	21ff      	movs	r1, #255	; 0xff
 80070ea:	5299      	strh	r1, [r3, r2]
 80070ec:	e015      	b.n	800711a <UART_Start_Receive_IT+0x82>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10d      	bne.n	8007112 <UART_Start_Receive_IT+0x7a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <UART_Start_Receive_IT+0x70>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	225c      	movs	r2, #92	; 0x5c
 8007102:	21ff      	movs	r1, #255	; 0xff
 8007104:	5299      	strh	r1, [r3, r2]
 8007106:	e008      	b.n	800711a <UART_Start_Receive_IT+0x82>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225c      	movs	r2, #92	; 0x5c
 800710c:	217f      	movs	r1, #127	; 0x7f
 800710e:	5299      	strh	r1, [r3, r2]
 8007110:	e003      	b.n	800711a <UART_Start_Receive_IT+0x82>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	225c      	movs	r2, #92	; 0x5c
 8007116:	2100      	movs	r1, #0
 8007118:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2280      	movs	r2, #128	; 0x80
 800711e:	2100      	movs	r1, #0
 8007120:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2222      	movs	r2, #34	; 0x22
 8007126:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007128:	f3ef 8310 	mrs	r3, PRIMASK
 800712c:	61fb      	str	r3, [r7, #28]
  return(result);
 800712e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007132:	2301      	movs	r3, #1
 8007134:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			; (mov r8, r8)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2101      	movs	r1, #1
 800714a:	430a      	orrs	r2, r1
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	2380      	movs	r3, #128	; 0x80
 8007160:	015b      	lsls	r3, r3, #5
 8007162:	429a      	cmp	r2, r3
 8007164:	d107      	bne.n	8007176 <UART_Start_Receive_IT+0xde>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <UART_Start_Receive_IT+0x130>)
 8007172:	665a      	str	r2, [r3, #100]	; 0x64
 8007174:	e002      	b.n	800717c <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a14      	ldr	r2, [pc, #80]	; (80071cc <UART_Start_Receive_IT+0x134>)
 800717a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2274      	movs	r2, #116	; 0x74
 8007180:	2100      	movs	r1, #0
 8007182:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007184:	f3ef 8310 	mrs	r3, PRIMASK
 8007188:	613b      	str	r3, [r7, #16]
  return(result);
 800718a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
 800718e:	2301      	movs	r3, #1
 8007190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f383 8810 	msr	PRIMASK, r3
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2190      	movs	r1, #144	; 0x90
 80071a6:	0049      	lsls	r1, r1, #1
 80071a8:	430a      	orrs	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f383 8810 	msr	PRIMASK, r3
}
 80071b6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b00c      	add	sp, #48	; 0x30
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	000001ff 	.word	0x000001ff
 80071c8:	08007481 	.word	0x08007481
 80071cc:	08007319 	.word	0x08007319

080071d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	; 0x38
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d8:	f3ef 8310 	mrs	r3, PRIMASK
 80071dc:	617b      	str	r3, [r7, #20]
  return(result);
 80071de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
 80071e2:	2301      	movs	r3, #1
 80071e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4925      	ldr	r1, [pc, #148]	; (8007290 <UART_EndRxTransfer+0xc0>)
 80071fa:	400a      	ands	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720a:	f3ef 8310 	mrs	r3, PRIMASK
 800720e:	623b      	str	r3, [r7, #32]
  return(result);
 8007210:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
 8007214:	2301      	movs	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2101      	movs	r1, #1
 800722c:	438a      	bics	r2, r1
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f383 8810 	msr	PRIMASK, r3
}
 800723a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007240:	2b01      	cmp	r3, #1
 8007242:	d118      	bne.n	8007276 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007244:	f3ef 8310 	mrs	r3, PRIMASK
 8007248:	60bb      	str	r3, [r7, #8]
  return(result);
 800724a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724e:	2301      	movs	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f383 8810 	msr	PRIMASK, r3
}
 8007258:	46c0      	nop			; (mov r8, r8)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2110      	movs	r1, #16
 8007266:	438a      	bics	r2, r1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f383 8810 	msr	PRIMASK, r3
}
 8007274:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b00e      	add	sp, #56	; 0x38
 800728e:	bd80      	pop	{r7, pc}
 8007290:	fffffedf 	.word	0xfffffedf

08007294 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	225a      	movs	r2, #90	; 0x5a
 80072a6:	2100      	movs	r1, #0
 80072a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2252      	movs	r2, #82	; 0x52
 80072ae:	2100      	movs	r1, #0
 80072b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7ff fbdb 	bl	8006a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	46bd      	mov	sp, r7
 80072be:	b004      	add	sp, #16
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ca:	f3ef 8310 	mrs	r3, PRIMASK
 80072ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80072d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	2301      	movs	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f383 8810 	msr	PRIMASK, r3
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2140      	movs	r1, #64	; 0x40
 80072ec:	438a      	bics	r2, r1
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f383 8810 	msr	PRIMASK, r3
}
 80072fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff fba8 	bl	8006a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b006      	add	sp, #24
 8007316:	bd80      	pop	{r7, pc}

08007318 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b090      	sub	sp, #64	; 0x40
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007320:	203e      	movs	r0, #62	; 0x3e
 8007322:	183b      	adds	r3, r7, r0
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	215c      	movs	r1, #92	; 0x5c
 8007328:	5a52      	ldrh	r2, [r2, r1]
 800732a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007330:	2b22      	cmp	r3, #34	; 0x22
 8007332:	d000      	beq.n	8007336 <UART_RxISR_8BIT+0x1e>
 8007334:	e095      	b.n	8007462 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	213c      	movs	r1, #60	; 0x3c
 800733c:	187b      	adds	r3, r7, r1
 800733e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007340:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007342:	187b      	adds	r3, r7, r1
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b2da      	uxtb	r2, r3
 8007348:	183b      	adds	r3, r7, r0
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b2d9      	uxtb	r1, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	400a      	ands	r2, r1
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	225a      	movs	r2, #90	; 0x5a
 8007366:	5a9b      	ldrh	r3, [r3, r2]
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b299      	uxth	r1, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	225a      	movs	r2, #90	; 0x5a
 8007372:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	225a      	movs	r2, #90	; 0x5a
 8007378:	5a9b      	ldrh	r3, [r3, r2]
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d178      	bne.n	8007472 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007380:	f3ef 8310 	mrs	r3, PRIMASK
 8007384:	61bb      	str	r3, [r7, #24]
  return(result);
 8007386:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38
 800738a:	2301      	movs	r3, #1
 800738c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4936      	ldr	r1, [pc, #216]	; (800747c <UART_RxISR_8BIT+0x164>)
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f383 8810 	msr	PRIMASK, r3
}
 80073b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b2:	f3ef 8310 	mrs	r3, PRIMASK
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	637b      	str	r3, [r7, #52]	; 0x34
 80073bc:	2301      	movs	r3, #1
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2101      	movs	r1, #1
 80073d4:	438a      	bics	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d12f      	bne.n	8007458 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007402:	60fb      	str	r3, [r7, #12]
  return(result);
 8007404:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
 8007408:	2301      	movs	r3, #1
 800740a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f383 8810 	msr	PRIMASK, r3
}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2110      	movs	r1, #16
 8007420:	438a      	bics	r2, r1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f383 8810 	msr	PRIMASK, r3
}
 800742e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	2210      	movs	r2, #16
 8007438:	4013      	ands	r3, r2
 800743a:	2b10      	cmp	r3, #16
 800743c:	d103      	bne.n	8007446 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2210      	movs	r2, #16
 8007444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2258      	movs	r2, #88	; 0x58
 800744a:	5a9a      	ldrh	r2, [r3, r2]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	0011      	movs	r1, r2
 8007450:	0018      	movs	r0, r3
 8007452:	f7ff fb15 	bl	8006a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007456:	e00c      	b.n	8007472 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0018      	movs	r0, r3
 800745c:	f7f9 fb88 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8007460:	e007      	b.n	8007472 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2108      	movs	r1, #8
 800746e:	430a      	orrs	r2, r1
 8007470:	619a      	str	r2, [r3, #24]
}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	46bd      	mov	sp, r7
 8007476:	b010      	add	sp, #64	; 0x40
 8007478:	bd80      	pop	{r7, pc}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	fffffedf 	.word	0xfffffedf

08007480 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b090      	sub	sp, #64	; 0x40
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007488:	203e      	movs	r0, #62	; 0x3e
 800748a:	183b      	adds	r3, r7, r0
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	215c      	movs	r1, #92	; 0x5c
 8007490:	5a52      	ldrh	r2, [r2, r1]
 8007492:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007498:	2b22      	cmp	r3, #34	; 0x22
 800749a:	d000      	beq.n	800749e <UART_RxISR_16BIT+0x1e>
 800749c:	e095      	b.n	80075ca <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	213c      	movs	r1, #60	; 0x3c
 80074a4:	187b      	adds	r3, r7, r1
 80074a6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80074a8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80074b0:	187b      	adds	r3, r7, r1
 80074b2:	183a      	adds	r2, r7, r0
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	8812      	ldrh	r2, [r2, #0]
 80074b8:	4013      	ands	r3, r2
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	1c9a      	adds	r2, r3, #2
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	225a      	movs	r2, #90	; 0x5a
 80074ce:	5a9b      	ldrh	r3, [r3, r2]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b299      	uxth	r1, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	225a      	movs	r2, #90	; 0x5a
 80074da:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	225a      	movs	r2, #90	; 0x5a
 80074e0:	5a9b      	ldrh	r3, [r3, r2]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d178      	bne.n	80075da <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e8:	f3ef 8310 	mrs	r3, PRIMASK
 80074ec:	617b      	str	r3, [r7, #20]
  return(result);
 80074ee:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
 80074f2:	2301      	movs	r3, #1
 80074f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	46c0      	nop			; (mov r8, r8)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4936      	ldr	r1, [pc, #216]	; (80075e4 <UART_RxISR_16BIT+0x164>)
 800750a:	400a      	ands	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751a:	f3ef 8310 	mrs	r3, PRIMASK
 800751e:	623b      	str	r3, [r7, #32]
  return(result);
 8007520:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	633b      	str	r3, [r7, #48]	; 0x30
 8007524:	2301      	movs	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	46c0      	nop			; (mov r8, r8)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2101      	movs	r1, #1
 800753c:	438a      	bics	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755c:	2b01      	cmp	r3, #1
 800755e:	d12f      	bne.n	80075c0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007566:	f3ef 8310 	mrs	r3, PRIMASK
 800756a:	60bb      	str	r3, [r7, #8]
  return(result);
 800756c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007570:	2301      	movs	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2110      	movs	r1, #16
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f383 8810 	msr	PRIMASK, r3
}
 8007596:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2210      	movs	r2, #16
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d103      	bne.n	80075ae <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2210      	movs	r2, #16
 80075ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2258      	movs	r2, #88	; 0x58
 80075b2:	5a9a      	ldrh	r2, [r3, r2]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	0011      	movs	r1, r2
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7ff fa61 	bl	8006a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075be:	e00c      	b.n	80075da <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f7f9 fad4 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 80075c8:	e007      	b.n	80075da <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2108      	movs	r1, #8
 80075d6:	430a      	orrs	r2, r1
 80075d8:	619a      	str	r2, [r3, #24]
}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	46bd      	mov	sp, r7
 80075de:	b010      	add	sp, #64	; 0x40
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	fffffedf 	.word	0xfffffedf

080075e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	1d3b      	adds	r3, r7, #4
 8007602:	6019      	str	r1, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007606:	2317      	movs	r3, #23
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2274      	movs	r2, #116	; 0x74
 8007612:	5c9b      	ldrb	r3, [r3, r2]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007618:	2302      	movs	r3, #2
 800761a:	e04a      	b.n	80076b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2274      	movs	r2, #116	; 0x74
 8007620:	2101      	movs	r1, #1
 8007622:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2101      	movs	r1, #1
 8007636:	438a      	bics	r2, r1
 8007638:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007642:	4013      	ands	r3, r2
 8007644:	0019      	movs	r1, r3
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	f000 f860 	bl	8007726 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2101      	movs	r1, #1
 8007672:	430a      	orrs	r2, r1
 8007674:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007676:	f7fa fd01 	bl	800207c <HAL_GetTick>
 800767a:	0003      	movs	r3, r0
 800767c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2280      	movs	r2, #128	; 0x80
 8007682:	03d1      	lsls	r1, r2, #15
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007688:	9200      	str	r2, [sp, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	f7ff fc40 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8007690:	1e03      	subs	r3, r0, #0
 8007692:	d004      	beq.n	800769e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007694:	2317      	movs	r3, #23
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	2203      	movs	r2, #3
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e002      	b.n	80076a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2274      	movs	r2, #116	; 0x74
 80076a8:	2100      	movs	r1, #0
 80076aa:	5499      	strb	r1, [r3, r2]

  return status;
 80076ac:	2317      	movs	r3, #23
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	781b      	ldrb	r3, [r3, #0]
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b006      	add	sp, #24
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	ffcfffff 	.word	0xffcfffff
 80076c0:	01ffffff 	.word	0x01ffffff

080076c4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2274      	movs	r2, #116	; 0x74
 80076d0:	5c9b      	ldrb	r3, [r3, r2]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_UARTEx_EnableStopMode+0x16>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e021      	b.n	800771e <HAL_UARTEx_EnableStopMode+0x5a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2274      	movs	r2, #116	; 0x74
 80076de:	2101      	movs	r1, #1
 80076e0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e2:	f3ef 8310 	mrs	r3, PRIMASK
 80076e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e8:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	2301      	movs	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2102      	movs	r1, #2
 8007704:	430a      	orrs	r2, r1
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2274      	movs	r2, #116	; 0x74
 8007718:	2100      	movs	r1, #0
 800771a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	0018      	movs	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	b006      	add	sp, #24
 8007724:	bd80      	pop	{r7, pc}

08007726 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	6019      	str	r1, [r3, #0]
 8007732:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2210      	movs	r2, #16
 800773c:	4393      	bics	r3, r2
 800773e:	001a      	movs	r2, r3
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	889b      	ldrh	r3, [r3, #4]
 8007744:	0019      	movs	r1, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	0a19      	lsrs	r1, r3, #8
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	799b      	ldrb	r3, [r3, #6]
 800775c:	061a      	lsls	r2, r3, #24
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46bd      	mov	sp, r7
 800776a:	b004      	add	sp, #16
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <__errno>:
 8007770:	4b01      	ldr	r3, [pc, #4]	; (8007778 <__errno+0x8>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	4770      	bx	lr
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	20000034 	.word	0x20000034

0800777c <__libc_init_array>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	2600      	movs	r6, #0
 8007780:	4d0c      	ldr	r5, [pc, #48]	; (80077b4 <__libc_init_array+0x38>)
 8007782:	4c0d      	ldr	r4, [pc, #52]	; (80077b8 <__libc_init_array+0x3c>)
 8007784:	1b64      	subs	r4, r4, r5
 8007786:	10a4      	asrs	r4, r4, #2
 8007788:	42a6      	cmp	r6, r4
 800778a:	d109      	bne.n	80077a0 <__libc_init_array+0x24>
 800778c:	2600      	movs	r6, #0
 800778e:	f000 f945 	bl	8007a1c <_init>
 8007792:	4d0a      	ldr	r5, [pc, #40]	; (80077bc <__libc_init_array+0x40>)
 8007794:	4c0a      	ldr	r4, [pc, #40]	; (80077c0 <__libc_init_array+0x44>)
 8007796:	1b64      	subs	r4, r4, r5
 8007798:	10a4      	asrs	r4, r4, #2
 800779a:	42a6      	cmp	r6, r4
 800779c:	d105      	bne.n	80077aa <__libc_init_array+0x2e>
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	00b3      	lsls	r3, r6, #2
 80077a2:	58eb      	ldr	r3, [r5, r3]
 80077a4:	4798      	blx	r3
 80077a6:	3601      	adds	r6, #1
 80077a8:	e7ee      	b.n	8007788 <__libc_init_array+0xc>
 80077aa:	00b3      	lsls	r3, r6, #2
 80077ac:	58eb      	ldr	r3, [r5, r3]
 80077ae:	4798      	blx	r3
 80077b0:	3601      	adds	r6, #1
 80077b2:	e7f2      	b.n	800779a <__libc_init_array+0x1e>
 80077b4:	08007b20 	.word	0x08007b20
 80077b8:	08007b20 	.word	0x08007b20
 80077bc:	08007b20 	.word	0x08007b20
 80077c0:	08007b24 	.word	0x08007b24

080077c4 <malloc>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <malloc+0x10>)
 80077c8:	0001      	movs	r1, r0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	f000 f88c 	bl	80078e8 <_malloc_r>
 80077d0:	bd10      	pop	{r4, pc}
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	20000034 	.word	0x20000034

080077d8 <free>:
 80077d8:	b510      	push	{r4, lr}
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <free+0x10>)
 80077dc:	0001      	movs	r1, r0
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	f000 f816 	bl	8007810 <_free_r>
 80077e4:	bd10      	pop	{r4, pc}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	20000034 	.word	0x20000034

080077ec <memcpy>:
 80077ec:	2300      	movs	r3, #0
 80077ee:	b510      	push	{r4, lr}
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d100      	bne.n	80077f6 <memcpy+0xa>
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	5ccc      	ldrb	r4, [r1, r3]
 80077f8:	54c4      	strb	r4, [r0, r3]
 80077fa:	3301      	adds	r3, #1
 80077fc:	e7f8      	b.n	80077f0 <memcpy+0x4>

080077fe <memset>:
 80077fe:	0003      	movs	r3, r0
 8007800:	1882      	adds	r2, r0, r2
 8007802:	4293      	cmp	r3, r2
 8007804:	d100      	bne.n	8007808 <memset+0xa>
 8007806:	4770      	bx	lr
 8007808:	7019      	strb	r1, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	e7f9      	b.n	8007802 <memset+0x4>
	...

08007810 <_free_r>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	0005      	movs	r5, r0
 8007814:	2900      	cmp	r1, #0
 8007816:	d010      	beq.n	800783a <_free_r+0x2a>
 8007818:	1f0c      	subs	r4, r1, #4
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	da00      	bge.n	8007822 <_free_r+0x12>
 8007820:	18e4      	adds	r4, r4, r3
 8007822:	0028      	movs	r0, r5
 8007824:	f000 f8e8 	bl	80079f8 <__malloc_lock>
 8007828:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <_free_r+0x90>)
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d105      	bne.n	800783c <_free_r+0x2c>
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	6014      	str	r4, [r2, #0]
 8007834:	0028      	movs	r0, r5
 8007836:	f000 f8e7 	bl	8007a08 <__malloc_unlock>
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	42a3      	cmp	r3, r4
 800783e:	d908      	bls.n	8007852 <_free_r+0x42>
 8007840:	6821      	ldr	r1, [r4, #0]
 8007842:	1860      	adds	r0, r4, r1
 8007844:	4283      	cmp	r3, r0
 8007846:	d1f3      	bne.n	8007830 <_free_r+0x20>
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	1841      	adds	r1, r0, r1
 800784e:	6021      	str	r1, [r4, #0]
 8007850:	e7ee      	b.n	8007830 <_free_r+0x20>
 8007852:	001a      	movs	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <_free_r+0x4e>
 800785a:	42a3      	cmp	r3, r4
 800785c:	d9f9      	bls.n	8007852 <_free_r+0x42>
 800785e:	6811      	ldr	r1, [r2, #0]
 8007860:	1850      	adds	r0, r2, r1
 8007862:	42a0      	cmp	r0, r4
 8007864:	d10b      	bne.n	800787e <_free_r+0x6e>
 8007866:	6820      	ldr	r0, [r4, #0]
 8007868:	1809      	adds	r1, r1, r0
 800786a:	1850      	adds	r0, r2, r1
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	4283      	cmp	r3, r0
 8007870:	d1e0      	bne.n	8007834 <_free_r+0x24>
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	1841      	adds	r1, r0, r1
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	6053      	str	r3, [r2, #4]
 800787c:	e7da      	b.n	8007834 <_free_r+0x24>
 800787e:	42a0      	cmp	r0, r4
 8007880:	d902      	bls.n	8007888 <_free_r+0x78>
 8007882:	230c      	movs	r3, #12
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	e7d5      	b.n	8007834 <_free_r+0x24>
 8007888:	6821      	ldr	r1, [r4, #0]
 800788a:	1860      	adds	r0, r4, r1
 800788c:	4283      	cmp	r3, r0
 800788e:	d103      	bne.n	8007898 <_free_r+0x88>
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	1841      	adds	r1, r0, r1
 8007896:	6021      	str	r1, [r4, #0]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	6054      	str	r4, [r2, #4]
 800789c:	e7ca      	b.n	8007834 <_free_r+0x24>
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	2000042c 	.word	0x2000042c

080078a4 <sbrk_aligned>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0f      	ldr	r6, [pc, #60]	; (80078e4 <sbrk_aligned+0x40>)
 80078a8:	000d      	movs	r5, r1
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	0004      	movs	r4, r0
 80078ae:	2900      	cmp	r1, #0
 80078b0:	d102      	bne.n	80078b8 <sbrk_aligned+0x14>
 80078b2:	f000 f88f 	bl	80079d4 <_sbrk_r>
 80078b6:	6030      	str	r0, [r6, #0]
 80078b8:	0029      	movs	r1, r5
 80078ba:	0020      	movs	r0, r4
 80078bc:	f000 f88a 	bl	80079d4 <_sbrk_r>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d00a      	beq.n	80078da <sbrk_aligned+0x36>
 80078c4:	2303      	movs	r3, #3
 80078c6:	1cc5      	adds	r5, r0, #3
 80078c8:	439d      	bics	r5, r3
 80078ca:	42a8      	cmp	r0, r5
 80078cc:	d007      	beq.n	80078de <sbrk_aligned+0x3a>
 80078ce:	1a29      	subs	r1, r5, r0
 80078d0:	0020      	movs	r0, r4
 80078d2:	f000 f87f 	bl	80079d4 <_sbrk_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d101      	bne.n	80078de <sbrk_aligned+0x3a>
 80078da:	2501      	movs	r5, #1
 80078dc:	426d      	negs	r5, r5
 80078de:	0028      	movs	r0, r5
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	20000430 	.word	0x20000430

080078e8 <_malloc_r>:
 80078e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ea:	2203      	movs	r2, #3
 80078ec:	1ccb      	adds	r3, r1, #3
 80078ee:	4393      	bics	r3, r2
 80078f0:	3308      	adds	r3, #8
 80078f2:	0006      	movs	r6, r0
 80078f4:	001f      	movs	r7, r3
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d232      	bcs.n	8007960 <_malloc_r+0x78>
 80078fa:	270c      	movs	r7, #12
 80078fc:	42b9      	cmp	r1, r7
 80078fe:	d831      	bhi.n	8007964 <_malloc_r+0x7c>
 8007900:	0030      	movs	r0, r6
 8007902:	f000 f879 	bl	80079f8 <__malloc_lock>
 8007906:	4d32      	ldr	r5, [pc, #200]	; (80079d0 <_malloc_r+0xe8>)
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	001c      	movs	r4, r3
 800790c:	2c00      	cmp	r4, #0
 800790e:	d12e      	bne.n	800796e <_malloc_r+0x86>
 8007910:	0039      	movs	r1, r7
 8007912:	0030      	movs	r0, r6
 8007914:	f7ff ffc6 	bl	80078a4 <sbrk_aligned>
 8007918:	0004      	movs	r4, r0
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d11e      	bne.n	800795c <_malloc_r+0x74>
 800791e:	682c      	ldr	r4, [r5, #0]
 8007920:	0025      	movs	r5, r4
 8007922:	2d00      	cmp	r5, #0
 8007924:	d14a      	bne.n	80079bc <_malloc_r+0xd4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0029      	movs	r1, r5
 800792a:	18e3      	adds	r3, r4, r3
 800792c:	0030      	movs	r0, r6
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	f000 f850 	bl	80079d4 <_sbrk_r>
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	4283      	cmp	r3, r0
 8007938:	d143      	bne.n	80079c2 <_malloc_r+0xda>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	3703      	adds	r7, #3
 800793e:	1aff      	subs	r7, r7, r3
 8007940:	2303      	movs	r3, #3
 8007942:	439f      	bics	r7, r3
 8007944:	3708      	adds	r7, #8
 8007946:	2f0c      	cmp	r7, #12
 8007948:	d200      	bcs.n	800794c <_malloc_r+0x64>
 800794a:	270c      	movs	r7, #12
 800794c:	0039      	movs	r1, r7
 800794e:	0030      	movs	r0, r6
 8007950:	f7ff ffa8 	bl	80078a4 <sbrk_aligned>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d034      	beq.n	80079c2 <_malloc_r+0xda>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	19df      	adds	r7, r3, r7
 800795c:	6027      	str	r7, [r4, #0]
 800795e:	e013      	b.n	8007988 <_malloc_r+0xa0>
 8007960:	2b00      	cmp	r3, #0
 8007962:	dacb      	bge.n	80078fc <_malloc_r+0x14>
 8007964:	230c      	movs	r3, #12
 8007966:	2500      	movs	r5, #0
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	0028      	movs	r0, r5
 800796c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	1bd1      	subs	r1, r2, r7
 8007972:	d420      	bmi.n	80079b6 <_malloc_r+0xce>
 8007974:	290b      	cmp	r1, #11
 8007976:	d917      	bls.n	80079a8 <_malloc_r+0xc0>
 8007978:	19e2      	adds	r2, r4, r7
 800797a:	6027      	str	r7, [r4, #0]
 800797c:	42a3      	cmp	r3, r4
 800797e:	d111      	bne.n	80079a4 <_malloc_r+0xbc>
 8007980:	602a      	str	r2, [r5, #0]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	6053      	str	r3, [r2, #4]
 8007988:	0030      	movs	r0, r6
 800798a:	0025      	movs	r5, r4
 800798c:	f000 f83c 	bl	8007a08 <__malloc_unlock>
 8007990:	2207      	movs	r2, #7
 8007992:	350b      	adds	r5, #11
 8007994:	1d23      	adds	r3, r4, #4
 8007996:	4395      	bics	r5, r2
 8007998:	1aea      	subs	r2, r5, r3
 800799a:	429d      	cmp	r5, r3
 800799c:	d0e5      	beq.n	800796a <_malloc_r+0x82>
 800799e:	1b5b      	subs	r3, r3, r5
 80079a0:	50a3      	str	r3, [r4, r2]
 80079a2:	e7e2      	b.n	800796a <_malloc_r+0x82>
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	e7ec      	b.n	8007982 <_malloc_r+0x9a>
 80079a8:	6862      	ldr	r2, [r4, #4]
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	d101      	bne.n	80079b2 <_malloc_r+0xca>
 80079ae:	602a      	str	r2, [r5, #0]
 80079b0:	e7ea      	b.n	8007988 <_malloc_r+0xa0>
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	e7e8      	b.n	8007988 <_malloc_r+0xa0>
 80079b6:	0023      	movs	r3, r4
 80079b8:	6864      	ldr	r4, [r4, #4]
 80079ba:	e7a7      	b.n	800790c <_malloc_r+0x24>
 80079bc:	002c      	movs	r4, r5
 80079be:	686d      	ldr	r5, [r5, #4]
 80079c0:	e7af      	b.n	8007922 <_malloc_r+0x3a>
 80079c2:	230c      	movs	r3, #12
 80079c4:	0030      	movs	r0, r6
 80079c6:	6033      	str	r3, [r6, #0]
 80079c8:	f000 f81e 	bl	8007a08 <__malloc_unlock>
 80079cc:	e7cd      	b.n	800796a <_malloc_r+0x82>
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	2000042c 	.word	0x2000042c

080079d4 <_sbrk_r>:
 80079d4:	2300      	movs	r3, #0
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_sbrk_r+0x20>)
 80079da:	0004      	movs	r4, r0
 80079dc:	0008      	movs	r0, r1
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7fa fa8c 	bl	8001efc <_sbrk>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d103      	bne.n	80079f0 <_sbrk_r+0x1c>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d000      	beq.n	80079f0 <_sbrk_r+0x1c>
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	20000434 	.word	0x20000434

080079f8 <__malloc_lock>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4802      	ldr	r0, [pc, #8]	; (8007a04 <__malloc_lock+0xc>)
 80079fc:	f000 f80c 	bl	8007a18 <__retarget_lock_acquire_recursive>
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	20000438 	.word	0x20000438

08007a08 <__malloc_unlock>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	4802      	ldr	r0, [pc, #8]	; (8007a14 <__malloc_unlock+0xc>)
 8007a0c:	f000 f805 	bl	8007a1a <__retarget_lock_release_recursive>
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	20000438 	.word	0x20000438

08007a18 <__retarget_lock_acquire_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_release_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <_init>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr

08007a28 <_fini>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr
