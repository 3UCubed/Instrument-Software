
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a4  080079a4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080079a4  080079a4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a4  080079a4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080079ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000030  080079dc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080079dc  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001653b  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c54  00000000  00000000  00036593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000391e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001862c  00000000  00000000  0004ee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074f59  00000000  00000000  00067490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc3e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  000dc43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078b0 	.word	0x080078b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	080078b0 	.word	0x080078b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003f8:	f3bf 8f4f 	dsb	sy
}
 80003fc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <__NVIC_SystemReset+0x1c>)
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <__NVIC_SystemReset+0x20>)
 8000402:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000404:	f3bf 8f4f 	dsb	sy
}
 8000408:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	e7fd      	b.n	800040a <__NVIC_SystemReset+0x16>
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	05fa0004 	.word	0x05fa0004

08000418 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b097      	sub	sp, #92	; 0x5c
 800041c:	af02      	add	r7, sp, #8
 800041e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4bde      	ldr	r3, [pc, #888]	; (800079c <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d001      	beq.n	800042c <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000428:	f000 fbc9 	bl	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x7a6>
  {
	  if (ERPA_ON)
 800042c:	4bdc      	ldr	r3, [pc, #880]	; (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d101      	bne.n	8000438 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 8000434:	f000 fbc3 	bl	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x7a6>
	  {
		int es = ERPA_SAMPLE_COUNTER;
 8000438:	4bda      	ldr	r3, [pc, #872]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	647b      	str	r3, [r7, #68]	; 0x44
		int ec = ERPA_SAMPLE_CADENCE;
 800043e:	4bda      	ldr	r3, [pc, #872]	; (80007a8 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	643b      	str	r3, [r7, #64]	; 0x40
		if (ERPA_SAMPLE_COUNTER == ERPA_SAMPLE_CADENCE) {
 8000444:	4bd8      	ldr	r3, [pc, #864]	; (80007a8 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	001a      	movs	r2, r3
 800044a:	4bd6      	ldr	r3, [pc, #856]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	d000      	beq.n	8000454 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
 8000452:	e0d7      	b.n	8000604 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>
			 * +/- 0.5v Every 100ms
			 */

			/* Write to SPI (begin transfer?) */

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	011b      	lsls	r3, r3, #4
 800045a:	4ad4      	ldr	r2, [pc, #848]	; (80007ac <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800045c:	0019      	movs	r1, r3
 800045e:	0010      	movs	r0, r2
 8000460:	f002 ff86 	bl	8003370 <HAL_GPIO_ReadPin>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d1f6      	bne.n	8000456 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
			 * Steps DAC
			 * +/- 0.5v Every 100ms
			*/

			  /* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000468:	49d1      	ldr	r1, [pc, #836]	; (80007b0 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800046a:	48d2      	ldr	r0, [pc, #840]	; (80007b4 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800046c:	2301      	movs	r3, #1
 800046e:	2201      	movs	r2, #1
 8000470:	f004 fb24 	bl	8004abc <HAL_SPI_Transmit>
			SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000474:	4bd0      	ldr	r3, [pc, #832]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4bcf      	ldr	r3, [pc, #828]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800047a:	49d0      	ldr	r1, [pc, #832]	; (80007bc <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800047c:	400a      	ands	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
			while (!(SPI2->SR));
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	4bcd      	ldr	r3, [pc, #820]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0fb      	beq.n	8000482 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
			erpa_raw = SPI2->DR;
 800048a:	4bcb      	ldr	r3, [pc, #812]	; (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	001a      	movs	r2, r3
 8000490:	4bcb      	ldr	r3, [pc, #812]	; (80007c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000492:	601a      	str	r2, [r3, #0]

			ERPA_ADC_AVG += erpa_raw;
 8000494:	4bcb      	ldr	r3, [pc, #812]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4bc9      	ldr	r3, [pc, #804]	; (80007c0 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	18d2      	adds	r2, r2, r3
 800049e:	4bc9      	ldr	r3, [pc, #804]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80004a0:	601a      	str	r2, [r3, #0]
			times_added++;
 80004a2:	4bc9      	ldr	r3, [pc, #804]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	4bc7      	ldr	r3, [pc, #796]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80004aa:	601a      	str	r2, [r3, #0]


			int pc = ERPA_PACKET_COUNTER;
 80004ac:	4bc7      	ldr	r3, [pc, #796]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			int ps = ERPA_PACKET_SPEED;
 80004b2:	2364      	movs	r3, #100	; 0x64
 80004b4:	63bb      	str	r3, [r7, #56]	; 0x38

			if (ERPA_PACKET_COUNTER == ERPA_PACKET_SPEED) {
 80004b6:	2364      	movs	r3, #100	; 0x64
 80004b8:	001a      	movs	r2, r3
 80004ba:	4bc4      	ldr	r3, [pc, #784]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d000      	beq.n	80004c4 <HAL_TIM_OC_DelayElapsedCallback+0xac>
 80004c2:	e094      	b.n	80005ee <HAL_TIM_OC_DelayElapsedCallback+0x1d6>

				DAC->DHR12R1 = DAC_OUT[step];
 80004c4:	4bc2      	ldr	r3, [pc, #776]	; (80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	0019      	movs	r1, r3
 80004ca:	4bc2      	ldr	r3, [pc, #776]	; (80007d4 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80004cc:	4ac2      	ldr	r2, [pc, #776]	; (80007d8 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80004ce:	0089      	lsls	r1, r1, #2
 80004d0:	588a      	ldr	r2, [r1, r2]
 80004d2:	609a      	str	r2, [r3, #8]

				HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80004d4:	2311      	movs	r3, #17
 80004d6:	001a      	movs	r2, r3
 80004d8:	49c0      	ldr	r1, [pc, #768]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004da:	4bc1      	ldr	r3, [pc, #772]	; (80007e0 <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 ff99 	bl	8002414 <HAL_ADC_Start_DMA>
								  adcChannelCount);
				uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80004e2:	2436      	movs	r4, #54	; 0x36
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	4abd      	ldr	r2, [pc, #756]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004e8:	8812      	ldrh	r2, [r2, #0]
 80004ea:	801a      	strh	r2, [r3, #0]
				uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80004ec:	2534      	movs	r5, #52	; 0x34
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	4aba      	ldr	r2, [pc, #744]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004f2:	8992      	ldrh	r2, [r2, #12]
 80004f4:	801a      	strh	r2, [r3, #0]
				uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80004f6:	2632      	movs	r6, #50	; 0x32
 80004f8:	19bb      	adds	r3, r7, r6
 80004fa:	4ab8      	ldr	r2, [pc, #736]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80004fc:	89d2      	ldrh	r2, [r2, #14]
 80004fe:	801a      	strh	r2, [r3, #0]
				uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 8000500:	2130      	movs	r1, #48	; 0x30
 8000502:	187b      	adds	r3, r7, r1
 8000504:	4ab5      	ldr	r2, [pc, #724]	; (80007dc <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000506:	8a12      	ldrh	r2, [r2, #16]
 8000508:	801a      	strh	r2, [r3, #0]

				ERPA_ADC_AVG = ERPA_ADC_AVG / times_added;
 800050a:	4bae      	ldr	r3, [pc, #696]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4bae      	ldr	r3, [pc, #696]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f7ff fe81 	bl	800021c <__divsi3>
 800051a:	0003      	movs	r3, r0
 800051c:	001a      	movs	r2, r3
 800051e:	4ba9      	ldr	r3, [pc, #676]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000520:	601a      	str	r2, [r3, #0]
				int check = ERPA_ADC_AVG;
 8000522:	4ba8      	ldr	r3, [pc, #672]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c

				erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000528:	22aa      	movs	r2, #170	; 0xaa
 800052a:	4bae      	ldr	r3, [pc, #696]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800052c:	701a      	strb	r2, [r3, #0]
				erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800052e:	22aa      	movs	r2, #170	; 0xaa
 8000530:	4bac      	ldr	r3, [pc, #688]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000532:	705a      	strb	r2, [r3, #1]
				erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000534:	4bac      	ldr	r3, [pc, #688]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4ba9      	ldr	r3, [pc, #676]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000540:	709a      	strb	r2, [r3, #2]
				erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000542:	4ba9      	ldr	r3, [pc, #676]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4ba6      	ldr	r3, [pc, #664]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800054a:	70da      	strb	r2, [r3, #3]
				erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800054c:	193b      	adds	r3, r7, r4
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	b29b      	uxth	r3, r3
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4ba3      	ldr	r3, [pc, #652]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000558:	711a      	strb	r2, [r3, #4]
				erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 800055a:	193b      	adds	r3, r7, r4
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4ba0      	ldr	r3, [pc, #640]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000562:	715a      	strb	r2, [r3, #5]
				erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000564:	197b      	adds	r3, r7, r5
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	b29b      	uxth	r3, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b9d      	ldr	r3, [pc, #628]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000570:	719a      	strb	r2, [r3, #6]
				erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 8000572:	197b      	adds	r3, r7, r5
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b9a      	ldr	r3, [pc, #616]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800057a:	71da      	strb	r2, [r3, #7]
				erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800057c:	19bb      	adds	r3, r7, r6
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	b29b      	uxth	r3, r3
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b97      	ldr	r3, [pc, #604]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000588:	721a      	strb	r2, [r3, #8]
				erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 800058a:	19bb      	adds	r3, r7, r6
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b94      	ldr	r3, [pc, #592]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000592:	725a      	strb	r2, [r3, #9]
				erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000594:	2130      	movs	r1, #48	; 0x30
 8000596:	187b      	adds	r3, r7, r1
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b29b      	uxth	r3, r3
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b90      	ldr	r3, [pc, #576]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005a2:	729a      	strb	r2, [r3, #10]
				erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b8e      	ldr	r3, [pc, #568]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005ac:	72da      	strb	r2, [r3, #11]
				erpa_buf[12] = ((ERPA_ADC_AVG & 0xFF00) >> 8);      // ERPA eADC MSB
 80005ae:	4b85      	ldr	r3, [pc, #532]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	121b      	asrs	r3, r3, #8
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b8b      	ldr	r3, [pc, #556]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005b8:	731a      	strb	r2, [r3, #12]
				erpa_buf[13] = (ERPA_ADC_AVG & 0xFF);               // ERPA eADC LSB
 80005ba:	4b82      	ldr	r3, [pc, #520]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b88      	ldr	r3, [pc, #544]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005c2:	735a      	strb	r2, [r3, #13]

				ERPA_ADC_AVG = 0;
 80005c4:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
				times_added = 0;
 80005ca:	4b7f      	ldr	r3, [pc, #508]	; (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]

				HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80005d0:	4984      	ldr	r1, [pc, #528]	; (80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005d2:	4886      	ldr	r0, [pc, #536]	; (80007ec <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	220e      	movs	r2, #14
 80005d8:	f005 fed4 	bl	8006384 <HAL_UART_Transmit>
				ERPA_PACKET_COUNTER = 0;
 80005dc:	4b7b      	ldr	r3, [pc, #492]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
				erpa_seq++;
 80005e2:	4b81      	ldr	r3, [pc, #516]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4b7f      	ldr	r3, [pc, #508]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005ec:	801a      	strh	r2, [r3, #0]
			}

			ERPA_SAMPLE_COUNTER = 0;
 80005ee:	4b6d      	ldr	r3, [pc, #436]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
			if (erpa_seq == 65535) {
 80005f4:	4b7c      	ldr	r3, [pc, #496]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4a7d      	ldr	r2, [pc, #500]	; (80007f0 <HAL_TIM_OC_DelayElapsedCallback+0x3d8>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d102      	bne.n	8000604 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>
				erpa_seq = 0;
 80005fe:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
			}

		}
      ERPA_SAMPLE_COUNTER++;
 8000604:	4b67      	ldr	r3, [pc, #412]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	4b66      	ldr	r3, [pc, #408]	; (80007a4 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800060c:	601a      	str	r2, [r3, #0]
      ERPA_PACKET_COUNTER++;
 800060e:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000616:	601a      	str	r2, [r3, #0]
      if (HK_ON)
 8000618:	4b76      	ldr	r3, [pc, #472]	; (80007f4 <HAL_TIM_OC_DelayElapsedCallback+0x3dc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d100      	bne.n	8000622 <HAL_TIM_OC_DelayElapsedCallback+0x20a>
 8000620:	e2cd      	b.n	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x7a6>
      {
        if (HK_COUNTER == HK_CADENCE)
 8000622:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <HAL_TIM_OC_DelayElapsedCallback+0x3e0>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	001a      	movs	r2, r3
 8000628:	4b74      	ldr	r3, [pc, #464]	; (80007fc <HAL_TIM_OC_DelayElapsedCallback+0x3e4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d000      	beq.n	8000632 <HAL_TIM_OC_DelayElapsedCallback+0x21a>
 8000630:	e2c0      	b.n	8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x79c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000632:	2200      	movs	r2, #0
 8000634:	2508      	movs	r5, #8
 8000636:	197b      	adds	r3, r7, r5
 8000638:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800063a:	2390      	movs	r3, #144	; 0x90
 800063c:	b299      	uxth	r1, r3
 800063e:	262b      	movs	r6, #43	; 0x2b
 8000640:	19bc      	adds	r4, r7, r6
 8000642:	197a      	adds	r2, r7, r5
 8000644:	486e      	ldr	r0, [pc, #440]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000646:	23fa      	movs	r3, #250	; 0xfa
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	f002 ff5f 	bl	8003510 <HAL_I2C_Master_Transmit>
 8000652:	0003      	movs	r3, r0
 8000654:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 8000656:	19bb      	adds	r3, r7, r6
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <HAL_TIM_OC_DelayElapsedCallback+0x258>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800065e:	197b      	adds	r3, r7, r5
 8000660:	4a68      	ldr	r2, [pc, #416]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 8000662:	ca03      	ldmia	r2!, {r0, r1}
 8000664:	c303      	stmia	r3!, {r0, r1}
 8000666:	8811      	ldrh	r1, [r2, #0]
 8000668:	8019      	strh	r1, [r3, #0]
 800066a:	7892      	ldrb	r2, [r2, #2]
 800066c:	709a      	strb	r2, [r3, #2]
 800066e:	e02b      	b.n	80006c8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	b299      	uxth	r1, r3
 8000674:	252b      	movs	r5, #43	; 0x2b
 8000676:	197c      	adds	r4, r7, r5
 8000678:	2608      	movs	r6, #8
 800067a:	19ba      	adds	r2, r7, r6
 800067c:	4860      	ldr	r0, [pc, #384]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	f003 f84b 	bl	8003720 <HAL_I2C_Master_Receive>
 800068a:	0003      	movs	r3, r0
 800068c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <HAL_TIM_OC_DelayElapsedCallback+0x290>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000696:	19bb      	adds	r3, r7, r6
 8000698:	4a5b      	ldr	r2, [pc, #364]	; (8000808 <HAL_TIM_OC_DelayElapsedCallback+0x3f0>)
 800069a:	ca03      	ldmia	r2!, {r0, r1}
 800069c:	c303      	stmia	r3!, {r0, r1}
 800069e:	8811      	ldrh	r1, [r2, #0]
 80006a0:	8019      	strh	r1, [r3, #0]
 80006a2:	7892      	ldrb	r2, [r2, #2]
 80006a4:	709a      	strb	r2, [r3, #2]
 80006a6:	e00f      	b.n	80006c8 <HAL_TIM_OC_DelayElapsedCallback+0x2b0>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 80006a8:	2008      	movs	r0, #8
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	021a      	lsls	r2, r3, #8
 80006b0:	214e      	movs	r1, #78	; 0x4e
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	5e9b      	ldrsh	r3, [r3, r2]
 80006bc:	183a      	adds	r2, r7, r0
 80006be:	7852      	ldrb	r2, [r2, #1]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	10da      	asrs	r2, r3, #3
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 80006c8:	2200      	movs	r2, #0
 80006ca:	2508      	movs	r5, #8
 80006cc:	197b      	adds	r3, r7, r5
 80006ce:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 80006d0:	2394      	movs	r3, #148	; 0x94
 80006d2:	b299      	uxth	r1, r3
 80006d4:	262b      	movs	r6, #43	; 0x2b
 80006d6:	19bc      	adds	r4, r7, r6
 80006d8:	197a      	adds	r2, r7, r5
 80006da:	4849      	ldr	r0, [pc, #292]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	f002 ff14 	bl	8003510 <HAL_I2C_Master_Transmit>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80006ec:	19bb      	adds	r3, r7, r6
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <HAL_TIM_OC_DelayElapsedCallback+0x2ee>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 80006f8:	ca03      	ldmia	r2!, {r0, r1}
 80006fa:	c303      	stmia	r3!, {r0, r1}
 80006fc:	8811      	ldrh	r1, [r2, #0]
 80006fe:	8019      	strh	r1, [r3, #0]
 8000700:	7892      	ldrb	r2, [r2, #2]
 8000702:	709a      	strb	r2, [r3, #2]
 8000704:	e02b      	b.n	800075e <HAL_TIM_OC_DelayElapsedCallback+0x346>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000706:	2394      	movs	r3, #148	; 0x94
 8000708:	b299      	uxth	r1, r3
 800070a:	252b      	movs	r5, #43	; 0x2b
 800070c:	197c      	adds	r4, r7, r5
 800070e:	2608      	movs	r6, #8
 8000710:	19ba      	adds	r2, r7, r6
 8000712:	483b      	ldr	r0, [pc, #236]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000714:	23fa      	movs	r3, #250	; 0xfa
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2302      	movs	r3, #2
 800071c:	f003 f800 	bl	8003720 <HAL_I2C_Master_Receive>
 8000720:	0003      	movs	r3, r0
 8000722:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000724:	197b      	adds	r3, r7, r5
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <HAL_TIM_OC_DelayElapsedCallback+0x326>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800072c:	19bb      	adds	r3, r7, r6
 800072e:	4a36      	ldr	r2, [pc, #216]	; (8000808 <HAL_TIM_OC_DelayElapsedCallback+0x3f0>)
 8000730:	ca03      	ldmia	r2!, {r0, r1}
 8000732:	c303      	stmia	r3!, {r0, r1}
 8000734:	8811      	ldrh	r1, [r2, #0]
 8000736:	8019      	strh	r1, [r3, #0]
 8000738:	7892      	ldrb	r2, [r2, #2]
 800073a:	709a      	strb	r2, [r3, #2]
 800073c:	e00f      	b.n	800075e <HAL_TIM_OC_DelayElapsedCallback+0x346>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 800073e:	2008      	movs	r0, #8
 8000740:	183b      	adds	r3, r7, r0
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	021a      	lsls	r2, r3, #8
 8000746:	214c      	movs	r1, #76	; 0x4c
 8000748:	187b      	adds	r3, r7, r1
 800074a:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	5e9b      	ldrsh	r3, [r3, r2]
 8000752:	183a      	adds	r2, r7, r0
 8000754:	7852      	ldrb	r2, [r2, #1]
 8000756:	4313      	orrs	r3, r2
 8000758:	10da      	asrs	r2, r3, #3
 800075a:	187b      	adds	r3, r7, r1
 800075c:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800075e:	2200      	movs	r2, #0
 8000760:	2508      	movs	r5, #8
 8000762:	197b      	adds	r3, r7, r5
 8000764:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000766:	2392      	movs	r3, #146	; 0x92
 8000768:	b299      	uxth	r1, r3
 800076a:	262b      	movs	r6, #43	; 0x2b
 800076c:	19bc      	adds	r4, r7, r6
 800076e:	197a      	adds	r2, r7, r5
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <HAL_TIM_OC_DelayElapsedCallback+0x3e8>)
 8000772:	23fa      	movs	r3, #250	; 0xfa
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	f002 fec9 	bl	8003510 <HAL_I2C_Master_Transmit>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000782:	19bb      	adds	r3, r7, r6
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d040      	beq.n	800080c <HAL_TIM_OC_DelayElapsedCallback+0x3f4>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800078a:	197b      	adds	r3, r7, r5
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_TIM_OC_DelayElapsedCallback+0x3ec>)
 800078e:	ca03      	ldmia	r2!, {r0, r1}
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	8811      	ldrh	r1, [r2, #0]
 8000794:	8019      	strh	r1, [r3, #0]
 8000796:	7892      	ldrb	r2, [r2, #2]
 8000798:	709a      	strb	r2, [r3, #2]
 800079a:	e063      	b.n	8000864 <HAL_TIM_OC_DelayElapsedCallback+0x44c>
 800079c:	20000240 	.word	0x20000240
 80007a0:	20000385 	.word	0x20000385
 80007a4:	2000038c 	.word	0x2000038c
 80007a8:	20000020 	.word	0x20000020
 80007ac:	48000400 	.word	0x48000400
 80007b0:	08007900 	.word	0x08007900
 80007b4:	20000194 	.word	0x20000194
 80007b8:	40003800 	.word	0x40003800
 80007bc:	fffffbff 	.word	0xfffffbff
 80007c0:	20000340 	.word	0x20000340
 80007c4:	20000394 	.word	0x20000394
 80007c8:	20000390 	.word	0x20000390
 80007cc:	20000388 	.word	0x20000388
 80007d0:	2000033a 	.word	0x2000033a
 80007d4:	40007400 	.word	0x40007400
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000318 	.word	0x20000318
 80007e0:	2000004c 	.word	0x2000004c
 80007e4:	20000344 	.word	0x20000344
 80007e8:	20000352 	.word	0x20000352
 80007ec:	20000288 	.word	0x20000288
 80007f0:	0000ffff 	.word	0x0000ffff
 80007f4:	20000386 	.word	0x20000386
 80007f8:	20000022 	.word	0x20000022
 80007fc:	2000039c 	.word	0x2000039c
 8000800:	200000e4 	.word	0x200000e4
 8000804:	080078c8 	.word	0x080078c8
 8000808:	080078d4 	.word	0x080078d4
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800080c:	2392      	movs	r3, #146	; 0x92
 800080e:	b299      	uxth	r1, r3
 8000810:	252b      	movs	r5, #43	; 0x2b
 8000812:	197c      	adds	r4, r7, r5
 8000814:	2608      	movs	r6, #8
 8000816:	19ba      	adds	r2, r7, r6
 8000818:	4830      	ldr	r0, [pc, #192]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	f002 ff7d 	bl	8003720 <HAL_I2C_Master_Receive>
 8000826:	0003      	movs	r3, r0
 8000828:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800082a:	197b      	adds	r3, r7, r5
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <HAL_TIM_OC_DelayElapsedCallback+0x42c>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000832:	19bb      	adds	r3, r7, r6
 8000834:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 8000836:	ca03      	ldmia	r2!, {r0, r1}
 8000838:	c303      	stmia	r3!, {r0, r1}
 800083a:	8811      	ldrh	r1, [r2, #0]
 800083c:	8019      	strh	r1, [r3, #0]
 800083e:	7892      	ldrb	r2, [r2, #2]
 8000840:	709a      	strb	r2, [r3, #2]
 8000842:	e00f      	b.n	8000864 <HAL_TIM_OC_DelayElapsedCallback+0x44c>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000844:	2008      	movs	r0, #8
 8000846:	183b      	adds	r3, r7, r0
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	021a      	lsls	r2, r3, #8
 800084c:	214a      	movs	r1, #74	; 0x4a
 800084e:	187b      	adds	r3, r7, r1
 8000850:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	5e9b      	ldrsh	r3, [r3, r2]
 8000858:	183a      	adds	r2, r7, r0
 800085a:	7852      	ldrb	r2, [r2, #1]
 800085c:	4313      	orrs	r3, r2
 800085e:	10da      	asrs	r2, r3, #3
 8000860:	187b      	adds	r3, r7, r1
 8000862:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000864:	2200      	movs	r2, #0
 8000866:	2508      	movs	r5, #8
 8000868:	197b      	adds	r3, r7, r5
 800086a:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 800086c:	2396      	movs	r3, #150	; 0x96
 800086e:	b299      	uxth	r1, r3
 8000870:	262b      	movs	r6, #43	; 0x2b
 8000872:	19bc      	adds	r4, r7, r6
 8000874:	197a      	adds	r2, r7, r5
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 8000878:	23fa      	movs	r3, #250	; 0xfa
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	f002 fe46 	bl	8003510 <HAL_I2C_Master_Transmit>
 8000884:	0003      	movs	r3, r0
 8000886:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000888:	19bb      	adds	r3, r7, r6
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d008      	beq.n	80008a2 <HAL_TIM_OC_DelayElapsedCallback+0x48a>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000890:	197b      	adds	r3, r7, r5
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x4cc>)
 8000894:	ca03      	ldmia	r2!, {r0, r1}
 8000896:	c303      	stmia	r3!, {r0, r1}
 8000898:	8811      	ldrh	r1, [r2, #0]
 800089a:	8019      	strh	r1, [r3, #0]
 800089c:	7892      	ldrb	r2, [r2, #2]
 800089e:	709a      	strb	r2, [r3, #2]
 80008a0:	e032      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 80008a2:	2396      	movs	r3, #150	; 0x96
 80008a4:	b299      	uxth	r1, r3
 80008a6:	252b      	movs	r5, #43	; 0x2b
 80008a8:	197c      	adds	r4, r7, r5
 80008aa:	2608      	movs	r6, #8
 80008ac:	19ba      	adds	r2, r7, r6
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x4c4>)
 80008b0:	23fa      	movs	r3, #250	; 0xfa
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	f002 ff32 	bl	8003720 <HAL_I2C_Master_Receive>
 80008bc:	0003      	movs	r3, r0
 80008be:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80008c0:	197b      	adds	r3, r7, r5
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00f      	beq.n	80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x4d0>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80008c8:	19bb      	adds	r3, r7, r6
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x4c8>)
 80008cc:	ca03      	ldmia	r2!, {r0, r1}
 80008ce:	c303      	stmia	r3!, {r0, r1}
 80008d0:	8811      	ldrh	r1, [r2, #0]
 80008d2:	8019      	strh	r1, [r3, #0]
 80008d4:	7892      	ldrb	r2, [r2, #2]
 80008d6:	709a      	strb	r2, [r3, #2]
 80008d8:	e016      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0x4f0>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000e4 	.word	0x200000e4
 80008e0:	080078d4 	.word	0x080078d4
 80008e4:	080078c8 	.word	0x080078c8
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 80008e8:	2008      	movs	r0, #8
 80008ea:	183b      	adds	r3, r7, r0
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	021a      	lsls	r2, r3, #8
 80008f0:	2148      	movs	r1, #72	; 0x48
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	5e9b      	ldrsh	r3, [r3, r2]
 80008fc:	183a      	adds	r2, r7, r0
 80008fe:	7852      	ldrb	r2, [r2, #1]
 8000900:	4313      	orrs	r3, r2
 8000902:	10da      	asrs	r2, r3, #3
 8000904:	187b      	adds	r3, r7, r1
 8000906:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000908:	2311      	movs	r3, #17
 800090a:	001a      	movs	r2, r3
 800090c:	49dd      	ldr	r1, [pc, #884]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800090e:	4bde      	ldr	r3, [pc, #888]	; (8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x870>)
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fd7f 	bl	8002414 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000916:	2128      	movs	r1, #40	; 0x28
 8000918:	187b      	adds	r3, r7, r1
 800091a:	4ada      	ldr	r2, [pc, #872]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800091c:	8852      	ldrh	r2, [r2, #2]
 800091e:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 8000920:	2026      	movs	r0, #38	; 0x26
 8000922:	183b      	adds	r3, r7, r0
 8000924:	4ad7      	ldr	r2, [pc, #860]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000926:	8892      	ldrh	r2, [r2, #4]
 8000928:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 800092a:	2424      	movs	r4, #36	; 0x24
 800092c:	193b      	adds	r3, r7, r4
 800092e:	4ad5      	ldr	r2, [pc, #852]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000930:	88d2      	ldrh	r2, [r2, #6]
 8000932:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000934:	2522      	movs	r5, #34	; 0x22
 8000936:	197b      	adds	r3, r7, r5
 8000938:	4ad2      	ldr	r2, [pc, #840]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800093a:	8912      	ldrh	r2, [r2, #8]
 800093c:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800093e:	2620      	movs	r6, #32
 8000940:	19bb      	adds	r3, r7, r6
 8000942:	4ad0      	ldr	r2, [pc, #832]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000944:	8952      	ldrh	r2, [r2, #10]
 8000946:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 8000948:	231e      	movs	r3, #30
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	4acd      	ldr	r2, [pc, #820]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800094e:	8a52      	ldrh	r2, [r2, #18]
 8000950:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 8000952:	221c      	movs	r2, #28
 8000954:	18bb      	adds	r3, r7, r2
 8000956:	4acb      	ldr	r2, [pc, #812]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000958:	8a92      	ldrh	r2, [r2, #20]
 800095a:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 800095c:	231a      	movs	r3, #26
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	4ac8      	ldr	r2, [pc, #800]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000962:	8ad2      	ldrh	r2, [r2, #22]
 8000964:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000966:	2218      	movs	r2, #24
 8000968:	18bb      	adds	r3, r7, r2
 800096a:	4ac6      	ldr	r2, [pc, #792]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800096c:	8b12      	ldrh	r2, [r2, #24]
 800096e:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 8000970:	2316      	movs	r3, #22
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	4ac3      	ldr	r2, [pc, #780]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000976:	8b52      	ldrh	r2, [r2, #26]
 8000978:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 800097a:	2214      	movs	r2, #20
 800097c:	18bb      	adds	r3, r7, r2
 800097e:	4ac1      	ldr	r2, [pc, #772]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000980:	8b92      	ldrh	r2, [r2, #28]
 8000982:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000984:	2312      	movs	r3, #18
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	4abe      	ldr	r2, [pc, #760]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 800098a:	8bd2      	ldrh	r2, [r2, #30]
 800098c:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800098e:	2210      	movs	r2, #16
 8000990:	18bb      	adds	r3, r7, r2
 8000992:	4abc      	ldr	r2, [pc, #752]	; (8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x86c>)
 8000994:	8c12      	ldrh	r2, [r2, #32]
 8000996:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 8000998:	22cc      	movs	r2, #204	; 0xcc
 800099a:	4bbc      	ldr	r3, [pc, #752]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 800099c:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 800099e:	22cc      	movs	r2, #204	; 0xcc
 80009a0:	4bba      	ldr	r3, [pc, #744]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009a2:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 80009a4:	4bba      	ldr	r3, [pc, #744]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4bb7      	ldr	r3, [pc, #732]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009b0:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 80009b2:	4bb7      	ldr	r3, [pc, #732]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4bb4      	ldr	r3, [pc, #720]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009ba:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80009bc:	2312      	movs	r3, #18
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4bb0      	ldr	r3, [pc, #704]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009ca:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 80009cc:	2312      	movs	r3, #18
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4bad      	ldr	r3, [pc, #692]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009d6:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 80009d8:	2210      	movs	r2, #16
 80009da:	18bb      	adds	r3, r7, r2
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4ba9      	ldr	r3, [pc, #676]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009e6:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 80009e8:	2210      	movs	r2, #16
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4ba6      	ldr	r3, [pc, #664]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 80009f2:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 80009f4:	234e      	movs	r3, #78	; 0x4e
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	5e9b      	ldrsh	r3, [r3, r2]
 80009fc:	121b      	asrs	r3, r3, #8
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4ba2      	ldr	r3, [pc, #648]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a02:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000a04:	234e      	movs	r3, #78	; 0x4e
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b9f      	ldr	r3, [pc, #636]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a0e:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000a10:	234c      	movs	r3, #76	; 0x4c
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	5e9b      	ldrsh	r3, [r3, r2]
 8000a18:	121b      	asrs	r3, r3, #8
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b9b      	ldr	r3, [pc, #620]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a1e:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000a20:	234c      	movs	r3, #76	; 0x4c
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b98      	ldr	r3, [pc, #608]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a2a:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000a2c:	234a      	movs	r3, #74	; 0x4a
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	5e9b      	ldrsh	r3, [r3, r2]
 8000a34:	121b      	asrs	r3, r3, #8
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b94      	ldr	r3, [pc, #592]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a3a:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000a3c:	234a      	movs	r3, #74	; 0x4a
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b91      	ldr	r3, [pc, #580]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a46:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 8000a48:	2348      	movs	r3, #72	; 0x48
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	5e9b      	ldrsh	r3, [r3, r2]
 8000a50:	121b      	asrs	r3, r3, #8
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b8d      	ldr	r3, [pc, #564]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a56:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 8000a58:	2348      	movs	r3, #72	; 0x48
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b8a      	ldr	r3, [pc, #552]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a62:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b87      	ldr	r3, [pc, #540]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a70:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a7a:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000a7c:	183b      	adds	r3, r7, r0
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b81      	ldr	r3, [pc, #516]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a88:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000a8a:	183b      	adds	r3, r7, r0
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b7e      	ldr	r3, [pc, #504]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000a92:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000a94:	211e      	movs	r1, #30
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b7a      	ldr	r3, [pc, #488]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000aa2:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000aac:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000aba:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b72      	ldr	r3, [pc, #456]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000ac4:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000ac6:	201a      	movs	r0, #26
 8000ac8:	183b      	adds	r3, r7, r0
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b6e      	ldr	r3, [pc, #440]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000ad4:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b6b      	ldr	r3, [pc, #428]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000ade:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000ae0:	2018      	movs	r0, #24
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000aee:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000af0:	183b      	adds	r3, r7, r0
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b65      	ldr	r3, [pc, #404]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000af8:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000afa:	211c      	movs	r1, #28
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b08:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b12:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000b14:	2114      	movs	r1, #20
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b22:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b2c:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000b2e:	2016      	movs	r0, #22
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000b40:	183b      	adds	r3, r7, r0
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b48:	2221      	movs	r2, #33	; 0x21
 8000b4a:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000b4c:	197b      	adds	r3, r7, r5
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2d9      	uxtb	r1, r3
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b58:	2222      	movs	r2, #34	; 0x22
 8000b5a:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000b5c:	197b      	adds	r3, r7, r5
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2d9      	uxtb	r1, r3
 8000b62:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b64:	2223      	movs	r2, #35	; 0x23
 8000b66:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000b68:	19bb      	adds	r3, r7, r6
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2d9      	uxtb	r1, r3
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b74:	2224      	movs	r2, #36	; 0x24
 8000b76:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000b78:	19bb      	adds	r3, r7, r6
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b80:	2225      	movs	r2, #37	; 0x25
 8000b82:	5499      	strb	r1, [r3, r2]


          HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000b84:	4941      	ldr	r1, [pc, #260]	; (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x874>)
 8000b86:	4843      	ldr	r0, [pc, #268]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x87c>)
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	2226      	movs	r2, #38	; 0x26
 8000b8c:	f005 fbfa 	bl	8006384 <HAL_UART_Transmit>


          hk_seq++;
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 8000b9a:	801a      	strh	r2, [r3, #0]
          HK_COUNTER = 0;
 8000b9c:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x880>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
          if (hk_seq == 65535) {
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	; (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x884>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d108      	bne.n	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x7a6>
        	  hk_seq = 0;
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x878>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e004      	b.n	8000bbe <HAL_TIM_OC_DelayElapsedCallback+0x7a6>
          }
        }
        else
        {
          HK_COUNTER++;
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x880>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x880>)
 8000bbc:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  if (htim == &htim1)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x888>)
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d000      	beq.n	8000bc8 <HAL_TIM_OC_DelayElapsedCallback+0x7b0>
 8000bc6:	e086      	b.n	8000cd6 <HAL_TIM_OC_DelayElapsedCallback+0x8be>
  {
      if (PMT_ON)
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x88c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d100      	bne.n	8000bd2 <HAL_TIM_OC_DelayElapsedCallback+0x7ba>
 8000bd0:	e081      	b.n	8000cd6 <HAL_TIM_OC_DelayElapsedCallback+0x8be>
      { // check pin state
    	if (PMT_COUNTER == PMT_CADENCE) {
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_TIM_OC_DelayElapsedCallback+0x890>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_TIM_OC_DelayElapsedCallback+0x894>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d000      	beq.n	8000be2 <HAL_TIM_OC_DelayElapsedCallback+0x7ca>
 8000be0:	e074      	b.n	8000ccc <HAL_TIM_OC_DelayElapsedCallback+0x8b4>


    		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	005a      	lsls	r2, r3, #1
 8000be8:	2390      	movs	r3, #144	; 0x90
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 fbbe 	bl	8003370 <HAL_GPIO_ReadPin>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d1f5      	bne.n	8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x7cc>
    		 * Every 125ms
    		 */


    		/* Write to SPI (begin transfer?) */
    		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000bf8:	492d      	ldr	r1, [pc, #180]	; (8000cb0 <HAL_TIM_OC_DelayElapsedCallback+0x898>)
 8000bfa:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <HAL_TIM_OC_DelayElapsedCallback+0x89c>)
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f003 ff5c 	bl	8004abc <HAL_SPI_Transmit>
    		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x8a0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x8a0>)
 8000c0a:	492c      	ldr	r1, [pc, #176]	; (8000cbc <HAL_TIM_OC_DelayElapsedCallback+0x8a4>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
    		while (!(SPI1->SR));
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x8a0>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0fb      	beq.n	8000c12 <HAL_TIM_OC_DelayElapsedCallback+0x7fa>

    		//RXNE here

    		pmt_raw = SPI1->DR;
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x8a0>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000c22:	601a      	str	r2, [r3, #0]

    		int r = pmt_raw;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]


    		pmt_buf[0] = pmt_sync;
 8000c2a:	22bb      	movs	r2, #187	; 0xbb
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c2e:	701a      	strb	r2, [r3, #0]
    		pmt_buf[1] = pmt_sync;
 8000c30:	22bb      	movs	r2, #187	; 0xbb
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c34:	705a      	strb	r2, [r3, #1]
    		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x8b0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c42:	709a      	strb	r2, [r3, #2]
    		pmt_buf[3] = (pmt_seq & 0xFF);
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x8b0>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c4c:	70da      	strb	r2, [r3, #3]
    		pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	121b      	asrs	r3, r3, #8
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c58:	711a      	strb	r2, [r3, #4]
    		pmt_buf[5] = (pmt_raw & 0xFF);
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_TIM_OC_DelayElapsedCallback+0x8a8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c62:	715a      	strb	r2, [r3, #5]

        	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000c64:	4917      	ldr	r1, [pc, #92]	; (8000cc4 <HAL_TIM_OC_DelayElapsedCallback+0x8ac>)
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x87c>)
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	f005 fb8a 	bl	8006384 <HAL_UART_Transmit>

    		pmt_seq++;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x8b0>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0x8b0>)
 8000c7a:	801a      	strh	r2, [r3, #0]
    		PMT_COUNTER = 0;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_TIM_OC_DelayElapsedCallback+0x894>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
    	}
      }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000c82:	e028      	b.n	8000cd6 <HAL_TIM_OC_DelayElapsedCallback+0x8be>
 8000c84:	20000318 	.word	0x20000318
 8000c88:	2000004c 	.word	0x2000004c
 8000c8c:	2000035c 	.word	0x2000035c
 8000c90:	20000382 	.word	0x20000382
 8000c94:	20000288 	.word	0x20000288
 8000c98:	2000039c 	.word	0x2000039c
 8000c9c:	0000ffff 	.word	0x0000ffff
 8000ca0:	200001f8 	.word	0x200001f8
 8000ca4:	20000384 	.word	0x20000384
 8000ca8:	20000021 	.word	0x20000021
 8000cac:	20000398 	.word	0x20000398
 8000cb0:	08007900 	.word	0x08007900
 8000cb4:	20000130 	.word	0x20000130
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	fffffbff 	.word	0xfffffbff
 8000cc0:	2000033c 	.word	0x2000033c
 8000cc4:	20000354 	.word	0x20000354
 8000cc8:	2000035a 	.word	0x2000035a
    		PMT_COUNTER++;
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x8c8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0x8c8>)
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b015      	add	sp, #84	; 0x54
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000398 	.word	0x20000398

08000ce4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 8000cec:	498d      	ldr	r1, [pc, #564]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000cee:	4b8e      	ldr	r3, [pc, #568]	; (8000f28 <HAL_UART_RxCpltCallback+0x244>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f005 fbef 	bl	80064d6 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	4a89      	ldr	r2, [pc, #548]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	701a      	strb	r2, [r3, #0]
  unsigned char second = rx_buf[1];
 8000d02:	230e      	movs	r3, #14
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000d08:	7852      	ldrb	r2, [r2, #1]
 8000d0a:	701a      	strb	r2, [r3, #0]
  switch (key)
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b21      	cmp	r3, #33	; 0x21
 8000d12:	d900      	bls.n	8000d16 <HAL_UART_RxCpltCallback+0x32>
 8000d14:	e102      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
 8000d16:	009a      	lsls	r2, r3, #2
 8000d18:	4b84      	ldr	r3, [pc, #528]	; (8000f2c <HAL_UART_RxCpltCallback+0x248>)
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000d20:	4b83      	ldr	r3, [pc, #524]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	2201      	movs	r2, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 fb3f 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000d2c:	e0f6      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000d2e:	4b80      	ldr	r3, [pc, #512]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 fb38 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000d3a:	e0ef      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000d3c:	4b7c      	ldr	r3, [pc, #496]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	2201      	movs	r2, #1
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fb31 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000d48:	e0e8      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000d4a:	4b79      	ldr	r3, [pc, #484]	; (8000f30 <HAL_UART_RxCpltCallback+0x24c>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	2200      	movs	r2, #0
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fb2a 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000d56:	e0e1      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x1B:
  {
    if (step < 7)
 8000d58:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	d900      	bls.n	8000d62 <HAL_UART_RxCpltCallback+0x7e>
 8000d60:	e0d9      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x232>
    {
      step++;
 8000d62:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d6c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d6e:	e0d2      	b.n	8000f16 <HAL_UART_RxCpltCallback+0x232>
  }
  case 0x1C:
  {
    if (step > 0)
 8000d70:	4b70      	ldr	r3, [pc, #448]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d100      	bne.n	8000d7a <HAL_UART_RxCpltCallback+0x96>
 8000d78:	e0cf      	b.n	8000f1a <HAL_UART_RxCpltCallback+0x236>
    {
      step--;
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <HAL_UART_RxCpltCallback+0x250>)
 8000d84:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000d86:	e0c8      	b.n	8000f1a <HAL_UART_RxCpltCallback+0x236>
  }
  case 0x1E: { // ERPA Cadence Multiplier
	  ERPA_SAMPLE_CADENCE = rx_buf[1];
 8000d88:	4b66      	ldr	r3, [pc, #408]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000d8a:	785a      	ldrb	r2, [r3, #1]
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <HAL_UART_RxCpltCallback+0x254>)
 8000d8e:	701a      	strb	r2, [r3, #0]
	  ERPA_SAMPLE_COUNTER = 0;
 8000d90:	4b6a      	ldr	r3, [pc, #424]	; (8000f3c <HAL_UART_RxCpltCallback+0x258>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
	  ERPA_PACKET_COUNTER = 0;
 8000d96:	4b6a      	ldr	r3, [pc, #424]	; (8000f40 <HAL_UART_RxCpltCallback+0x25c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
	  break;
 8000d9c:	e0be      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x1F: { // PMT Cadence Multiplier
	  PMT_CADENCE = rx_buf[1];
 8000d9e:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000da0:	785a      	ldrb	r2, [r3, #1]
 8000da2:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <HAL_UART_RxCpltCallback+0x260>)
 8000da4:	701a      	strb	r2, [r3, #0]
	  PMT_COUNTER = 0;
 8000da6:	4b68      	ldr	r3, [pc, #416]	; (8000f48 <HAL_UART_RxCpltCallback+0x264>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
	  break;
 8000dac:	e0b6      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x20: { // HK Cadence Multiplier
	  HK_CADENCE = rx_buf[1];
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_UART_RxCpltCallback+0x240>)
 8000db0:	785a      	ldrb	r2, [r3, #1]
 8000db2:	4b66      	ldr	r3, [pc, #408]	; (8000f4c <HAL_UART_RxCpltCallback+0x268>)
 8000db4:	701a      	strb	r2, [r3, #0]
	  HK_COUNTER = 0;
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_UART_RxCpltCallback+0x26c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
	  break;
 8000dbc:	e0ae      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x21:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000dbe:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <HAL_UART_RxCpltCallback+0x270>)
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 faf0 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000dca:	e0a7      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x13:
  {

    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000dcc:	4b61      	ldr	r3, [pc, #388]	; (8000f54 <HAL_UART_RxCpltCallback+0x270>)
 8000dce:	2120      	movs	r1, #32
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 fae9 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000dd8:	e0a0      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000dda:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <HAL_UART_RxCpltCallback+0x270>)
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	2201      	movs	r2, #1
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fae2 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000de6:	e099      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000de8:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <HAL_UART_RxCpltCallback+0x270>)
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 fadb 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000df4:	e092      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000df6:	4858      	ldr	r0, [pc, #352]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f002 fad3 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e04:	e08a      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000e06:	4854      	ldr	r0, [pc, #336]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0019      	movs	r1, r3
 8000e10:	f002 facb 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e14:	e082      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000e16:	4850      	ldr	r0, [pc, #320]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	019b      	lsls	r3, r3, #6
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	0019      	movs	r1, r3
 8000e20:	f002 fac3 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e24:	e07a      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000e26:	484c      	ldr	r0, [pc, #304]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f002 fabb 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e34:	e072      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000e36:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 fab4 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e42:	e06b      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 faad 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e50:	e064      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000e52:	4841      	ldr	r0, [pc, #260]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	f002 faa5 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e60:	e05c      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000e62:	483d      	ldr	r0, [pc, #244]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	f002 fa9d 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e70:	e054      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000e72:	4839      	ldr	r0, [pc, #228]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	2201      	movs	r2, #1
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	f002 fa95 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e80:	e04c      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000e82:	4835      	ldr	r0, [pc, #212]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f002 fa8d 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e90:	e044      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	2201      	movs	r2, #1
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 fa86 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000e9e:	e03d      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_UART_RxCpltCallback+0x274>)
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f002 fa7f 	bl	80033aa <HAL_GPIO_WritePin>
    break;
 8000eac:	e036      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000eae:	f001 f963 	bl	8002178 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f002 ffcb 	bl	8003e50 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000eba:	f7ff fa9b 	bl	80003f4 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_UART_RxCpltCallback+0x278>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_UART_RxCpltCallback+0x27c>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f004 f915 	bl	80050f8 <HAL_TIM_OC_Start_IT>
    break;
 8000ece:	e025      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_UART_RxCpltCallback+0x278>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_UART_RxCpltCallback+0x27c>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	0018      	movs	r0, r3
 8000edc:	f004 fa0c 	bl	80052f8 <HAL_TIM_OC_Stop_IT>
    break;
 8000ee0:	e01c      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_RxCpltCallback+0x280>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <HAL_UART_RxCpltCallback+0x284>)
 8000eea:	210c      	movs	r1, #12
 8000eec:	0018      	movs	r0, r3
 8000eee:	f004 f903 	bl	80050f8 <HAL_TIM_OC_Start_IT>
    break;
 8000ef2:	e013      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_RxCpltCallback+0x280>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_UART_RxCpltCallback+0x284>)
 8000efc:	210c      	movs	r1, #12
 8000efe:	0018      	movs	r0, r3
 8000f00:	f004 f9fa 	bl	80052f8 <HAL_TIM_OC_Stop_IT>
    break;
 8000f04:	e00a      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_UART_RxCpltCallback+0x288>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
    break;
 8000f0c:	e006      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_RxCpltCallback+0x288>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
    break;
 8000f14:	e002      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
    break;
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	e000      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x238>
    break;
 8000f1a:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000030c 	.word	0x2000030c
 8000f28:	20000288 	.word	0x20000288
 8000f2c:	08007904 	.word	0x08007904
 8000f30:	48001400 	.word	0x48001400
 8000f34:	2000033a 	.word	0x2000033a
 8000f38:	20000020 	.word	0x20000020
 8000f3c:	2000038c 	.word	0x2000038c
 8000f40:	20000388 	.word	0x20000388
 8000f44:	20000021 	.word	0x20000021
 8000f48:	20000398 	.word	0x20000398
 8000f4c:	20000022 	.word	0x20000022
 8000f50:	2000039c 	.word	0x2000039c
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	20000384 	.word	0x20000384
 8000f60:	200001f8 	.word	0x200001f8
 8000f64:	20000385 	.word	0x20000385
 8000f68:	20000240 	.word	0x20000240
 8000f6c:	20000386 	.word	0x20000386

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f001 f89c 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f85e 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 fc76 	bl	800186c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f80:	f000 fc56 	bl	8001830 <MX_DMA_Init>
  MX_SPI2_Init();
 8000f84:	f000 faa0 	bl	80014c8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f88:	f000 fade 	bl	8001548 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f8c:	f000 fb92 	bl	80016b4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f90:	f000 fa5a 	bl	8001448 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f94:	f000 fc0c 	bl	80017b0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000f98:	f000 f9e4 	bl	8001364 <MX_DAC1_Init>
  MX_ADC_Init();
 8000f9c:	f000 f8b6 	bl	800110c <MX_ADC_Init>
  MX_I2C1_Init();
 8000fa0:	f000 fa12 	bl	80013c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <main+0xb8>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f001 fe22 	bl	8002bf2 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <main+0xbc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	69da      	ldr	r2, [r3, #28]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	401a      	ands	r2, r3
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d0f5      	beq.n	8000fb0 <main+0x40>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <main+0xbc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	03db      	lsls	r3, r3, #15
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	03db      	lsls	r3, r3, #15
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d1f5      	bne.n	8000fc6 <main+0x56>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <main+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <main+0xc0>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <main+0xc0>)
 8000fe8:	225b      	movs	r2, #91	; 0x5b
 8000fea:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <main+0xc0>)
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <main+0xbc>)
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	f006 fb74 	bl	80076e0 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <main+0x90>
      Error_Handler();
 8000ffc:	f000 fcd0 	bl	80019a0 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <main+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <main+0xbc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	03c9      	lsls	r1, r1, #15
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <main+0xbc>)
 8001014:	0018      	movs	r0, r3
 8001016:	f006 fbc9 	bl	80077ac <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 800101a:	4906      	ldr	r1, [pc, #24]	; (8001034 <main+0xc4>)
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <main+0xbc>)
 800101e:	2202      	movs	r2, #2
 8001020:	0018      	movs	r0, r3
 8001022:	f005 fa58 	bl	80064d6 <HAL_UART_Receive_IT>
 8001026:	e7f8      	b.n	800101a <main+0xaa>
 8001028:	200000d0 	.word	0x200000d0
 800102c:	20000288 	.word	0x20000288
 8001030:	20000310 	.word	0x20000310
 8001034:	2000030c 	.word	0x2000030c

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b097      	sub	sp, #92	; 0x5c
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	2428      	movs	r4, #40	; 0x28
 8001040:	193b      	adds	r3, r7, r4
 8001042:	0018      	movs	r0, r3
 8001044:	2330      	movs	r3, #48	; 0x30
 8001046:	001a      	movs	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f006 fc29 	bl	80078a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104e:	2318      	movs	r3, #24
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	0018      	movs	r0, r3
 8001054:	2310      	movs	r3, #16
 8001056:	001a      	movs	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	f006 fc21 	bl	80078a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	0018      	movs	r0, r3
 8001062:	2314      	movs	r3, #20
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f006 fc1a 	bl	80078a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800106c:	0021      	movs	r1, r4
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2212      	movs	r2, #18
 8001072:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2201      	movs	r2, #1
 8001078:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2210      	movs	r2, #16
 8001084:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2210      	movs	r2, #16
 800108a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2202      	movs	r2, #2
 8001090:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	22a0      	movs	r2, #160	; 0xa0
 800109c:	0392      	lsls	r2, r2, #14
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 ff05 	bl	8003eb8 <HAL_RCC_OscConfig>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010b2:	f000 fc75 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	2118      	movs	r1, #24
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2207      	movs	r2, #7
 80010bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2202      	movs	r2, #2
 80010c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2101      	movs	r1, #1
 80010d4:	0018      	movs	r0, r3
 80010d6:	f003 fa09 	bl	80044ec <HAL_RCC_ClockConfig>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010de:	f000 fc5f 	bl	80019a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2221      	movs	r2, #33	; 0x21
 80010e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2203      	movs	r2, #3
 80010ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	0018      	movs	r0, r3
 80010f8:	f003 fb4a 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001100:	f000 fc4e 	bl	80019a0 <Error_Handler>
  }
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b017      	add	sp, #92	; 0x5c
 800110a:	bd90      	pop	{r4, r7, pc}

0800110c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	0018      	movs	r0, r3
 8001116:	230c      	movs	r3, #12
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f006 fbc0 	bl	80078a0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001120:	4b8e      	ldr	r3, [pc, #568]	; (800135c <MX_ADC_Init+0x250>)
 8001122:	4a8f      	ldr	r2, [pc, #572]	; (8001360 <MX_ADC_Init+0x254>)
 8001124:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001126:	4b8d      	ldr	r3, [pc, #564]	; (800135c <MX_ADC_Init+0x250>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b8b      	ldr	r3, [pc, #556]	; (800135c <MX_ADC_Init+0x250>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001132:	4b8a      	ldr	r3, [pc, #552]	; (800135c <MX_ADC_Init+0x250>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <MX_ADC_Init+0x250>)
 800113a:	2201      	movs	r2, #1
 800113c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b87      	ldr	r3, [pc, #540]	; (800135c <MX_ADC_Init+0x250>)
 8001140:	2204      	movs	r2, #4
 8001142:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001144:	4b85      	ldr	r3, [pc, #532]	; (800135c <MX_ADC_Init+0x250>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800114a:	4b84      	ldr	r3, [pc, #528]	; (800135c <MX_ADC_Init+0x250>)
 800114c:	2200      	movs	r2, #0
 800114e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001150:	4b82      	ldr	r3, [pc, #520]	; (800135c <MX_ADC_Init+0x250>)
 8001152:	2200      	movs	r2, #0
 8001154:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <MX_ADC_Init+0x250>)
 8001158:	2200      	movs	r2, #0
 800115a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115c:	4b7f      	ldr	r3, [pc, #508]	; (800135c <MX_ADC_Init+0x250>)
 800115e:	22c2      	movs	r2, #194	; 0xc2
 8001160:	32ff      	adds	r2, #255	; 0xff
 8001162:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b7d      	ldr	r3, [pc, #500]	; (800135c <MX_ADC_Init+0x250>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b7c      	ldr	r3, [pc, #496]	; (800135c <MX_ADC_Init+0x250>)
 800116c:	2224      	movs	r2, #36	; 0x24
 800116e:	2100      	movs	r1, #0
 8001170:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001172:	4b7a      	ldr	r3, [pc, #488]	; (800135c <MX_ADC_Init+0x250>)
 8001174:	2201      	movs	r2, #1
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001178:	4b78      	ldr	r3, [pc, #480]	; (800135c <MX_ADC_Init+0x250>)
 800117a:	0018      	movs	r0, r3
 800117c:	f001 f80a 	bl	8002194 <HAL_ADC_Init>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001184:	f000 fc0c 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	0152      	lsls	r2, r2, #5
 8001194:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	0552      	lsls	r2, r2, #21
 800119c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <MX_ADC_Init+0x250>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 f9cf 	bl	8002548 <HAL_ADC_ConfigChannel>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80011ae:	f000 fbf7 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011b8:	1d3a      	adds	r2, r7, #4
 80011ba:	4b68      	ldr	r3, [pc, #416]	; (800135c <MX_ADC_Init+0x250>)
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 f9c2 	bl	8002548 <HAL_ADC_ConfigChannel>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80011c8:	f000 fbea 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2202      	movs	r2, #2
 80011d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011d2:	1d3a      	adds	r2, r7, #4
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <MX_ADC_Init+0x250>)
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 f9b5 	bl	8002548 <HAL_ADC_ConfigChannel>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80011e2:	f000 fbdd 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2203      	movs	r2, #3
 80011ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ec:	1d3a      	adds	r2, r7, #4
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <MX_ADC_Init+0x250>)
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f001 f9a8 	bl	8002548 <HAL_ADC_ConfigChannel>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80011fc:	f000 fbd0 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2205      	movs	r2, #5
 8001204:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001206:	1d3a      	adds	r2, r7, #4
 8001208:	4b54      	ldr	r3, [pc, #336]	; (800135c <MX_ADC_Init+0x250>)
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f001 f99b 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d001      	beq.n	800121a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001216:	f000 fbc3 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2206      	movs	r2, #6
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001220:	1d3a      	adds	r2, r7, #4
 8001222:	4b4e      	ldr	r3, [pc, #312]	; (800135c <MX_ADC_Init+0x250>)
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f001 f98e 	bl	8002548 <HAL_ADC_ConfigChannel>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8001230:	f000 fbb6 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2207      	movs	r2, #7
 8001238:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800123a:	1d3a      	adds	r2, r7, #4
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <MX_ADC_Init+0x250>)
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f001 f981 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800124a:	f000 fba9 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2208      	movs	r2, #8
 8001252:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001254:	1d3a      	adds	r2, r7, #4
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <MX_ADC_Init+0x250>)
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 f974 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8001264:	f000 fb9c 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2209      	movs	r2, #9
 800126c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800126e:	1d3a      	adds	r2, r7, #4
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <MX_ADC_Init+0x250>)
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f001 f967 	bl	8002548 <HAL_ADC_ConfigChannel>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800127e:	f000 fb8f 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	220a      	movs	r2, #10
 8001286:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001288:	1d3a      	adds	r2, r7, #4
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <MX_ADC_Init+0x250>)
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f001 f95a 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001294:	1e03      	subs	r3, r0, #0
 8001296:	d001      	beq.n	800129c <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001298:	f000 fb82 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	220b      	movs	r2, #11
 80012a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012a2:	1d3a      	adds	r2, r7, #4
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_ADC_Init+0x250>)
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f001 f94d 	bl	8002548 <HAL_ADC_ConfigChannel>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80012b2:	f000 fb75 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	220c      	movs	r2, #12
 80012ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012bc:	1d3a      	adds	r2, r7, #4
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_ADC_Init+0x250>)
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 f940 	bl	8002548 <HAL_ADC_ConfigChannel>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80012cc:	f000 fb68 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	220d      	movs	r2, #13
 80012d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012d6:	1d3a      	adds	r2, r7, #4
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_ADC_Init+0x250>)
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f001 f933 	bl	8002548 <HAL_ADC_ConfigChannel>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80012e6:	f000 fb5b 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	220e      	movs	r2, #14
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012f0:	1d3a      	adds	r2, r7, #4
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_ADC_Init+0x250>)
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 f926 	bl	8002548 <HAL_ADC_ConfigChannel>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8001300:	f000 fb4e 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	220f      	movs	r2, #15
 8001308:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_ADC_Init+0x250>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f001 f919 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800131a:	f000 fb41 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2210      	movs	r2, #16
 8001322:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_ADC_Init+0x250>)
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f001 f90c 	bl	8002548 <HAL_ADC_ConfigChannel>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8001334:	f000 fb34 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2211      	movs	r2, #17
 800133c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800133e:	1d3a      	adds	r2, r7, #4
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_ADC_Init+0x250>)
 8001342:	0011      	movs	r1, r2
 8001344:	0018      	movs	r0, r3
 8001346:	f001 f8ff 	bl	8002548 <HAL_ADC_ConfigChannel>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC_Init+0x246>
  {
    Error_Handler();
 800134e:	f000 fb27 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	2000004c 	.word	0x2000004c
 8001360:	40012400 	.word	0x40012400

08001364 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_DAC1_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001370:	003b      	movs	r3, r7
 8001372:	0018      	movs	r0, r3
 8001374:	2308      	movs	r3, #8
 8001376:	001a      	movs	r2, r3
 8001378:	2100      	movs	r1, #0
 800137a:	f006 fa91 	bl	80078a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_DAC1_Init+0x5c>)
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <MX_DAC1_Init+0x60>)
 8001382:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_DAC1_Init+0x5c>)
 8001386:	0018      	movs	r0, r3
 8001388:	f001 fbd2 	bl	8002b30 <HAL_DAC_Init>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001390:	f000 fb06 	bl	80019a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001394:	003b      	movs	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800139a:	003b      	movs	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013a0:	0039      	movs	r1, r7
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_DAC1_Init+0x5c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f001 fbe5 	bl	8002b76 <HAL_DAC_ConfigChannel>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 80013b0:	f000 faf6 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000033a 	.word	0x2000033a
 80013c0:	200000d0 	.word	0x200000d0
 80013c4:	40007400 	.word	0x40007400

080013c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_I2C1_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_I2C1_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_I2C1_Init+0x74>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_I2C1_Init+0x7c>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_I2C1_Init+0x74>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_I2C1_Init+0x74>)
 8001404:	0018      	movs	r0, r3
 8001406:	f001 ffed 	bl	80033e4 <HAL_I2C_Init>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800140e:	f000 fac7 	bl	80019a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_I2C1_Init+0x74>)
 8001414:	2100      	movs	r1, #0
 8001416:	0018      	movs	r0, r3
 8001418:	f002 fc82 	bl	8003d20 <HAL_I2CEx_ConfigAnalogFilter>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001420:	f000 fabe 	bl	80019a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <MX_I2C1_Init+0x74>)
 8001426:	2100      	movs	r1, #0
 8001428:	0018      	movs	r0, r3
 800142a:	f002 fcc5 	bl	8003db8 <HAL_I2CEx_ConfigDigitalFilter>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 fab5 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000e4 	.word	0x200000e4
 8001440:	40005400 	.word	0x40005400
 8001444:	2000090e 	.word	0x2000090e

08001448 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_SPI1_Init+0x78>)
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <MX_SPI1_Init+0x7c>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001454:	2282      	movs	r2, #130	; 0x82
 8001456:	0052      	lsls	r2, r2, #1
 8001458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_SPI1_Init+0x78>)
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	00d2      	lsls	r2, r2, #3
 8001460:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001464:	22f0      	movs	r2, #240	; 0xf0
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_SPI1_Init+0x78>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001480:	2230      	movs	r2, #48	; 0x30
 8001482:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_SPI1_Init+0x78>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_SPI1_Init+0x78>)
 8001498:	2207      	movs	r2, #7
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI1_Init+0x78>)
 800149e:	2200      	movs	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_SPI1_Init+0x78>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <MX_SPI1_Init+0x78>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f003 fa4e 	bl	800494c <HAL_SPI_Init>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d001      	beq.n	80014b8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80014b4:	f000 fa74 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000130 	.word	0x20000130
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_SPI2_Init+0x78>)
 80014ce:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <MX_SPI2_Init+0x7c>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_SPI2_Init+0x78>)
 80014d4:	2282      	movs	r2, #130	; 0x82
 80014d6:	0052      	lsls	r2, r2, #1
 80014d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_SPI2_Init+0x78>)
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	00d2      	lsls	r2, r2, #3
 80014e0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_SPI2_Init+0x78>)
 80014e4:	22f0      	movs	r2, #240	; 0xf0
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_SPI2_Init+0x78>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_SPI2_Init+0x78>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_SPI2_Init+0x78>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_SPI2_Init+0x78>)
 8001500:	2230      	movs	r2, #48	; 0x30
 8001502:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI2_Init+0x78>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_SPI2_Init+0x78>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_SPI2_Init+0x78>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_SPI2_Init+0x78>)
 8001518:	2207      	movs	r2, #7
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_SPI2_Init+0x78>)
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_SPI2_Init+0x78>)
 8001524:	2208      	movs	r2, #8
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <MX_SPI2_Init+0x78>)
 800152a:	0018      	movs	r0, r3
 800152c:	f003 fa0e 	bl	800494c <HAL_SPI_Init>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 fa34 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	20000194 	.word	0x20000194
 8001544:	40003800 	.word	0x40003800

08001548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	2348      	movs	r3, #72	; 0x48
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	0018      	movs	r0, r3
 8001554:	2310      	movs	r3, #16
 8001556:	001a      	movs	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	f006 f9a1 	bl	80078a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	2340      	movs	r3, #64	; 0x40
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	0018      	movs	r0, r3
 8001564:	2308      	movs	r3, #8
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f006 f999 	bl	80078a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156e:	2324      	movs	r3, #36	; 0x24
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	0018      	movs	r0, r3
 8001574:	231c      	movs	r3, #28
 8001576:	001a      	movs	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f006 f991 	bl	80078a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	0018      	movs	r0, r3
 8001582:	2320      	movs	r3, #32
 8001584:	001a      	movs	r2, r3
 8001586:	2100      	movs	r1, #0
 8001588:	f006 f98a 	bl	80078a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <MX_TIM1_Init+0x160>)
 800158e:	4a47      	ldr	r2, [pc, #284]	; (80016ac <MX_TIM1_Init+0x164>)
 8001590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <MX_TIM1_Init+0x160>)
 8001594:	2263      	movs	r2, #99	; 0x63
 8001596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <MX_TIM1_Init+0x160>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 600 - 1;
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <MX_TIM1_Init+0x168>)
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 fd4d 	bl	8005058 <HAL_TIM_Base_Init>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015c2:	f000 f9ed 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	2148      	movs	r1, #72	; 0x48
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0152      	lsls	r2, r2, #5
 80015ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d0:	187a      	adds	r2, r7, r1
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f004 f986 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015e0:	f000 f9de 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <MX_TIM1_Init+0x160>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f003 ff4a 	bl	8005480 <HAL_TIM_PWM_Init>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80015f0:	f000 f9d6 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001602:	187a      	adds	r2, r7, r1
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM1_Init+0x160>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f004 fd9b 	bl	8006144 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001612:	f000 f9c5 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001616:	2124      	movs	r1, #36	; 0x24
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2260      	movs	r2, #96	; 0x60
 800161c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7 -1;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2206      	movs	r2, #6
 8001622:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001642:	1879      	adds	r1, r7, r1
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_TIM1_Init+0x160>)
 8001646:	2200      	movs	r2, #0
 8001648:	0018      	movs	r0, r3
 800164a:	f004 f887 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001652:	f000 f9a5 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0192      	lsls	r2, r2, #6
 800167a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001682:	1d3a      	adds	r2, r7, #4
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_TIM1_Init+0x160>)
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f004 fdb9 	bl	8006200 <HAL_TIMEx_ConfigBreakDeadTime>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001692:	f000 f985 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <MX_TIM1_Init+0x160>)
 8001698:	0018      	movs	r0, r3
 800169a:	f000 fbc1 	bl	8001e20 <HAL_TIM_MspPostInit>

}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b016      	add	sp, #88	; 0x58
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	200001f8 	.word	0x200001f8
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	00000257 	.word	0x00000257

080016b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	2328      	movs	r3, #40	; 0x28
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	0018      	movs	r0, r3
 80016c0:	2310      	movs	r3, #16
 80016c2:	001a      	movs	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	f006 f8eb 	bl	80078a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ca:	2320      	movs	r3, #32
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	0018      	movs	r0, r3
 80016d0:	2308      	movs	r3, #8
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f006 f8e3 	bl	80078a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	0018      	movs	r0, r3
 80016de:	231c      	movs	r3, #28
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f006 f8dc 	bl	80078a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <MX_TIM2_Init+0xf8>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	05d2      	lsls	r2, r2, #23
 80016ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <MX_TIM2_Init+0xf8>)
 80016f2:	2263      	movs	r2, #99	; 0x63
 80016f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <MX_TIM2_Init+0xf8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 480 - 1;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <MX_TIM2_Init+0xf8>)
 80016fe:	22e0      	movs	r2, #224	; 0xe0
 8001700:	32ff      	adds	r2, #255	; 0xff
 8001702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_TIM2_Init+0xf8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <MX_TIM2_Init+0xf8>)
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_TIM2_Init+0xf8>)
 8001712:	0018      	movs	r0, r3
 8001714:	f003 fca0 	bl	8005058 <HAL_TIM_Base_Init>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800171c:	f000 f940 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	2128      	movs	r1, #40	; 0x28
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0152      	lsls	r2, r2, #5
 8001728:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172a:	187a      	adds	r2, r7, r1
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_TIM2_Init+0xf8>)
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f004 f8d9 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800173a:	f000 f931 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM2_Init+0xf8>)
 8001740:	0018      	movs	r0, r3
 8001742:	f003 fe9d 	bl	8005480 <HAL_TIM_PWM_Init>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800174a:	f000 f929 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2120      	movs	r1, #32
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175c:	187a      	adds	r2, r7, r1
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_TIM2_Init+0xf8>)
 8001760:	0011      	movs	r1, r2
 8001762:	0018      	movs	r0, r3
 8001764:	f004 fcee 	bl	8006144 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	1e03      	subs	r3, r0, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800176c:	f000 f918 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2260      	movs	r2, #96	; 0x60
 8001774:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5 - 1;
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2204      	movs	r2, #4
 800177a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001788:	1d39      	adds	r1, r7, #4
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_TIM2_Init+0xf8>)
 800178c:	220c      	movs	r2, #12
 800178e:	0018      	movs	r0, r3
 8001790:	f003 ffe4 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001798:	f000 f902 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <MX_TIM2_Init+0xf8>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fb3e 	bl	8001e20 <HAL_TIM_MspPostInit>

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b00e      	add	sp, #56	; 0x38
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000240 	.word	0x20000240

080017b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_USART1_UART_Init+0x6c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_USART1_UART_Init+0x70>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_USART1_UART_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017c8:	4a18      	ldr	r2, [pc, #96]	; (800182c <MX_USART1_UART_Init+0x7c>)
 80017ca:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017ce:	22e1      	movs	r2, #225	; 0xe1
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017e8:	220c      	movs	r2, #12
 80017ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART1_UART_Init+0x78>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_USART1_UART_Init+0x78>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART1_UART_Init+0x78>)
 8001806:	0018      	movs	r0, r3
 8001808:	f004 fd68 	bl	80062dc <HAL_UART_Init>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001810:	f000 f8c6 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000352 	.word	0x20000352
 8001820:	2000035a 	.word	0x2000035a
 8001824:	20000382 	.word	0x20000382
 8001828:	20000288 	.word	0x20000288
 800182c:	40013800 	.word	0x40013800

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_DMA_Init+0x38>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_DMA_Init+0x38>)
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_DMA_Init+0x38>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2009      	movs	r0, #9
 8001854:	f001 f93a 	bl	8002acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001858:	2009      	movs	r0, #9
 800185a:	f001 f94c 	bl	8002af6 <HAL_NVIC_EnableIRQ>

}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	2414      	movs	r4, #20
 8001874:	193b      	adds	r3, r7, r4
 8001876:	0018      	movs	r0, r3
 8001878:	2314      	movs	r3, #20
 800187a:	001a      	movs	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	f006 f80f 	bl	80078a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <MX_GPIO_Init+0x124>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <MX_GPIO_Init+0x124>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0309      	lsls	r1, r1, #12
 800188c:	430a      	orrs	r2, r1
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <MX_GPIO_Init+0x124>)
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	031b      	lsls	r3, r3, #12
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_GPIO_Init+0x124>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <MX_GPIO_Init+0x124>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	03c9      	lsls	r1, r1, #15
 80018a8:	430a      	orrs	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <MX_GPIO_Init+0x124>)
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	03db      	lsls	r3, r3, #15
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <MX_GPIO_Init+0x124>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <MX_GPIO_Init+0x124>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0289      	lsls	r1, r1, #10
 80018c4:	430a      	orrs	r2, r1
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <MX_GPIO_Init+0x124>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <MX_GPIO_Init+0x124>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <MX_GPIO_Init+0x124>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	02c9      	lsls	r1, r1, #11
 80018e0:	430a      	orrs	r2, r1
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <MX_GPIO_Init+0x124>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	02db      	lsls	r3, r3, #11
 80018ec:	4013      	ands	r3, r2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018f2:	239f      	movs	r3, #159	; 0x9f
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	4827      	ldr	r0, [pc, #156]	; (8001994 <MX_GPIO_Init+0x128>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	0019      	movs	r1, r3
 80018fc:	f001 fd55 	bl	80033aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <MX_GPIO_Init+0x12c>)
 8001902:	2200      	movs	r2, #0
 8001904:	21c0      	movs	r1, #192	; 0xc0
 8001906:	0018      	movs	r0, r3
 8001908:	f001 fd4f 	bl	80033aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <MX_GPIO_Init+0x130>)
 800190e:	2200      	movs	r2, #0
 8001910:	2160      	movs	r1, #96	; 0x60
 8001912:	0018      	movs	r0, r3
 8001914:	f001 fd49 	bl	80033aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001918:	193b      	adds	r3, r7, r4
 800191a:	229f      	movs	r2, #159	; 0x9f
 800191c:	0192      	lsls	r2, r2, #6
 800191e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	193b      	adds	r3, r7, r4
 8001922:	2201      	movs	r2, #1
 8001924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	193b      	adds	r3, r7, r4
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	193b      	adds	r3, r7, r4
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	193b      	adds	r3, r7, r4
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_GPIO_Init+0x128>)
 8001936:	0019      	movs	r1, r3
 8001938:	0010      	movs	r0, r2
 800193a:	f001 fba9 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800193e:	193b      	adds	r3, r7, r4
 8001940:	22c0      	movs	r2, #192	; 0xc0
 8001942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	193b      	adds	r3, r7, r4
 8001946:	2201      	movs	r2, #1
 8001948:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	193b      	adds	r3, r7, r4
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	193b      	adds	r3, r7, r4
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001956:	193b      	adds	r3, r7, r4
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <MX_GPIO_Init+0x12c>)
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f001 fb97 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001962:	0021      	movs	r1, r4
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2260      	movs	r2, #96	; 0x60
 8001968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2201      	movs	r2, #1
 800196e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	187b      	adds	r3, r7, r1
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	187b      	adds	r3, r7, r1
 800197e:	4a07      	ldr	r2, [pc, #28]	; (800199c <MX_GPIO_Init+0x130>)
 8001980:	0019      	movs	r1, r3
 8001982:	0010      	movs	r0, r2
 8001984:	f001 fb84 	bl	8003090 <HAL_GPIO_Init>

}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b00b      	add	sp, #44	; 0x2c
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	48000800 	.word	0x48000800
 8001998:	48001400 	.word	0x48001400
 800199c:	48000400 	.word	0x48000400

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_MspInit+0x44>)
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_MspInit+0x44>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_MspInit+0x44>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x44>)
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_MspInit+0x44>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0549      	lsls	r1, r1, #21
 80019d4:	430a      	orrs	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_MspInit+0x44>)
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	055b      	lsls	r3, r3, #21
 80019e0:	4013      	ands	r3, r2
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b08d      	sub	sp, #52	; 0x34
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	241c      	movs	r4, #28
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	0018      	movs	r0, r3
 8001a02:	2314      	movs	r3, #20
 8001a04:	001a      	movs	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	f005 ff4a 	bl	80078a0 <memset>
  if(hadc->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_ADC_MspInit+0x148>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d000      	beq.n	8001a18 <HAL_ADC_MspInit+0x24>
 8001a16:	e08d      	b.n	8001b34 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a18:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0089      	lsls	r1, r1, #2
 8001a22:	430a      	orrs	r2, r1
 8001a24:	619a      	str	r2, [r3, #24]
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0309      	lsls	r1, r1, #12
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	031b      	lsls	r3, r3, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0289      	lsls	r1, r1, #10
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	029b      	lsls	r3, r3, #10
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	02c9      	lsls	r1, r1, #11
 8001a76:	430a      	orrs	r2, r1
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_ADC_MspInit+0x14c>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	02db      	lsls	r3, r3, #11
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	223f      	movs	r2, #63	; 0x3f
 8001a8c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2203      	movs	r2, #3
 8001a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_ADC_MspInit+0x150>)
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f001 faf5 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	22ef      	movs	r2, #239	; 0xef
 8001aaa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2203      	movs	r2, #3
 8001ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	193a      	adds	r2, r7, r4
 8001aba:	2390      	movs	r3, #144	; 0x90
 8001abc:	05db      	lsls	r3, r3, #23
 8001abe:	0011      	movs	r1, r2
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f001 fae5 	bl	8003090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	2203      	movs	r2, #3
 8001aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2203      	movs	r2, #3
 8001ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_ADC_MspInit+0x154>)
 8001adc:	0019      	movs	r1, r3
 8001ade:	0010      	movs	r0, r2
 8001ae0:	f001 fad6 	bl	8003090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_ADC_MspInit+0x15c>)
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	0052      	lsls	r2, r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	00d2      	lsls	r2, r2, #3
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f001 f8a2 	bl	8002c64 <HAL_DMA_Init>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001b24:	f7ff ff3c 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_ADC_MspInit+0x158>)
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b00d      	add	sp, #52	; 0x34
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	2000008c 	.word	0x2000008c
 8001b50:	40020008 	.word	0x40020008

08001b54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b08b      	sub	sp, #44	; 0x2c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	2414      	movs	r4, #20
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	0018      	movs	r0, r3
 8001b62:	2314      	movs	r3, #20
 8001b64:	001a      	movs	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f005 fe9a 	bl	80078a0 <memset>
  if(hdac->Instance==DAC)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_DAC_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0589      	lsls	r1, r1, #22
 8001b80:	430a      	orrs	r2, r1
 8001b82:	61da      	str	r2, [r3, #28]
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	059b      	lsls	r3, r3, #22
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0289      	lsls	r1, r1, #10
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_DAC_MspInit+0x88>)
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	193a      	adds	r2, r7, r4
 8001bc2:	2390      	movs	r3, #144	; 0x90
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f001 fa61 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b00b      	add	sp, #44	; 0x2c
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40007400 	.word	0x40007400
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	2414      	movs	r4, #20
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	0018      	movs	r0, r3
 8001bee:	2314      	movs	r3, #20
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f005 fe54 	bl	80078a0 <memset>
  if(hi2c->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_I2C_MspInit+0x90>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d132      	bne.n	8001c68 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	02c9      	lsls	r1, r1, #11
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	22c0      	movs	r2, #192	; 0xc0
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c26:	0021      	movs	r1, r4
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2212      	movs	r2, #18
 8001c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2203      	movs	r2, #3
 8001c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_I2C_MspInit+0x98>)
 8001c44:	0019      	movs	r1, r3
 8001c46:	0010      	movs	r0, r2
 8001c48:	f001 fa22 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0389      	lsls	r1, r1, #14
 8001c56:	430a      	orrs	r2, r1
 8001c58:	61da      	str	r2, [r3, #28]
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_I2C_MspInit+0x94>)
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	039b      	lsls	r3, r3, #14
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b00b      	add	sp, #44	; 0x2c
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000400 	.word	0x48000400

08001c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b08d      	sub	sp, #52	; 0x34
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	241c      	movs	r4, #28
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	2314      	movs	r3, #20
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f005 fe06 	bl	80078a0 <memset>
  if(hspi->Instance==SPI1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_SPI_MspInit+0x100>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d132      	bne.n	8001d04 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0149      	lsls	r1, r1, #5
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	02c9      	lsls	r1, r1, #11
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	02db      	lsls	r3, r3, #11
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001cd6:	0021      	movs	r1, r4
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2218      	movs	r2, #24
 8001cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2203      	movs	r2, #3
 8001cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <HAL_SPI_MspInit+0x108>)
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	f001 f9c7 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d02:	e037      	b.n	8001d74 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_SPI_MspInit+0x10c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d132      	bne.n	8001d74 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	01c9      	lsls	r1, r1, #7
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	61da      	str	r2, [r3, #28]
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	02c9      	lsls	r1, r1, #11
 8001d34:	430a      	orrs	r2, r1
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_SPI_MspInit+0x104>)
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	02db      	lsls	r3, r3, #11
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d46:	211c      	movs	r1, #28
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	22c0      	movs	r2, #192	; 0xc0
 8001d4c:	01d2      	lsls	r2, r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2202      	movs	r2, #2
 8001d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_SPI_MspInit+0x108>)
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	0010      	movs	r0, r2
 8001d70:	f001 f98e 	bl	8003090 <HAL_GPIO_Init>
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b00d      	add	sp, #52	; 0x34
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	40003800 	.word	0x40003800

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_TIM_Base_MspInit+0x8c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d11e      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0109      	lsls	r1, r1, #4
 8001da8:	430a      	orrs	r2, r1
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	200d      	movs	r0, #13
 8001dc0:	f000 fe84 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001dc4:	200d      	movs	r0, #13
 8001dc6:	f000 fe96 	bl	8002af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2101      	movs	r1, #1
 8001dce:	200e      	movs	r0, #14
 8001dd0:	f000 fe7c 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001dd4:	200e      	movs	r0, #14
 8001dd6:	f000 fe8e 	bl	8002af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dda:	e019      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	05db      	lsls	r3, r3, #23
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d113      	bne.n	8001e10 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_TIM_Base_MspInit+0x90>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	200f      	movs	r0, #15
 8001e06:	f000 fe61 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f000 fe73 	bl	8002af6 <HAL_NVIC_EnableIRQ>
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	2414      	movs	r4, #20
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2314      	movs	r3, #20
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f005 fd34 	bl	80078a0 <memset>
  if(htim->Instance==TIM1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ef0 <HAL_TIM_MspPostInit+0xd0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d126      	bne.n	8001e90 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0289      	lsls	r1, r1, #10
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	0052      	lsls	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	0021      	movs	r1, r4
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	187a      	adds	r2, r7, r1
 8001e82:	2390      	movs	r3, #144	; 0x90
 8001e84:	05db      	lsls	r3, r3, #23
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 f901 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e8e:	e02a      	b.n	8001ee6 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d124      	bne.n	8001ee6 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	02c9      	lsls	r1, r1, #11
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_TIM_MspPostInit+0xd4>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	02db      	lsls	r3, r3, #11
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eb8:	2114      	movs	r1, #20
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_TIM_MspPostInit+0xd8>)
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f001 f8d5 	bl	8003090 <HAL_GPIO_Init>
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b00b      	add	sp, #44	; 0x2c
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b08b      	sub	sp, #44	; 0x2c
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	2414      	movs	r4, #20
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	0018      	movs	r0, r3
 8001f0a:	2314      	movs	r3, #20
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f005 fcc6 	bl	80078a0 <memset>
  if(huart->Instance==USART1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_UART_MspInit+0xa4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d13b      	bne.n	8001f96 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	01c9      	lsls	r1, r1, #7
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0289      	lsls	r1, r1, #10
 8001f44:	430a      	orrs	r2, r1
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_UART_MspInit+0xa8>)
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	22c0      	movs	r2, #192	; 0xc0
 8001f5a:	00d2      	lsls	r2, r2, #3
 8001f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	0021      	movs	r1, r4
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2202      	movs	r2, #2
 8001f64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2201      	movs	r2, #1
 8001f76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	187a      	adds	r2, r7, r1
 8001f7a:	2390      	movs	r3, #144	; 0x90
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f001 f885 	bl	8003090 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	201b      	movs	r0, #27
 8001f8c:	f000 fd9e 	bl	8002acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f90:	201b      	movs	r0, #27
 8001f92:	f000 fdb0 	bl	8002af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b00b      	add	sp, #44	; 0x2c
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <NMI_Handler+0x4>

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8b8 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <DMA1_Channel1_IRQHandler+0x14>)
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 ff6b 	bl	8002eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	2000008c 	.word	0x2000008c

08001ff0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f003 fa9a 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	200001f8 	.word	0x200001f8

08002008 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <TIM1_CC_IRQHandler+0x14>)
 800200e:	0018      	movs	r0, r3
 8002010:	f003 fa8e 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	200001f8 	.word	0x200001f8

08002020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <TIM2_IRQHandler+0x14>)
 8002026:	0018      	movs	r0, r3
 8002028:	f003 fa82 	bl	8005530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20000240 	.word	0x20000240

08002038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <USART1_IRQHandler+0x14>)
 800203e:	0018      	movs	r0, r3
 8002040:	f004 faaa 	bl	8006598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	20000288 	.word	0x20000288

08002050 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <Reset_Handler>:
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <LoopForever+0x2>)
 800205e:	4685      	mov	sp, r0
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <LoopForever+0x6>)
 8002062:	490e      	ldr	r1, [pc, #56]	; (800209c <LoopForever+0xa>)
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <LoopForever+0xe>)
 8002066:	2300      	movs	r3, #0
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:
 800206a:	58d4      	ldr	r4, [r2, r3]
 800206c:	50c4      	str	r4, [r0, r3]
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:
 8002070:	18c4      	adds	r4, r0, r3
 8002072:	428c      	cmp	r4, r1
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopForever+0x12>)
 8002078:	4c0b      	ldr	r4, [pc, #44]	; (80020a8 <LoopForever+0x16>)
 800207a:	2300      	movs	r3, #0
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:
 8002082:	42a2      	cmp	r2, r4
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>
 8002086:	f7ff ffe3 	bl	8002050 <SystemInit>
 800208a:	f005 fbe5 	bl	8007858 <__libc_init_array>
 800208e:	f7fe ff6f 	bl	8000f70 <main>

08002092 <LoopForever>:
 8002092:	e7fe      	b.n	8002092 <LoopForever>
 8002094:	20002000 	.word	0x20002000
 8002098:	20000000 	.word	0x20000000
 800209c:	20000030 	.word	0x20000030
 80020a0:	080079ac 	.word	0x080079ac
 80020a4:	20000030 	.word	0x20000030
 80020a8:	200003a4 	.word	0x200003a4

080020ac <ADC1_COMP_IRQHandler>:
 80020ac:	e7fe      	b.n	80020ac <ADC1_COMP_IRQHandler>
	...

080020b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_Init+0x24>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_Init+0x24>)
 80020ba:	2110      	movs	r1, #16
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f809 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7ff fc71 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_InitTick+0x5c>)
 80020e2:	681c      	ldr	r4, [r3, #0]
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_InitTick+0x60>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	0019      	movs	r1, r3
 80020ea:	23fa      	movs	r3, #250	; 0xfa
 80020ec:	0098      	lsls	r0, r3, #2
 80020ee:	f7fe f80b 	bl	8000108 <__udivsi3>
 80020f2:	0003      	movs	r3, r0
 80020f4:	0019      	movs	r1, r3
 80020f6:	0020      	movs	r0, r4
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 fd09 	bl	8002b16 <HAL_SYSTICK_Config>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e00f      	b.n	800212c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d80b      	bhi.n	800212a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	2301      	movs	r3, #1
 8002116:	425b      	negs	r3, r3
 8002118:	2200      	movs	r2, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f000 fcd6 	bl	8002acc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_InitTick+0x64>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b003      	add	sp, #12
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	20000024 	.word	0x20000024
 8002138:	2000002c 	.word	0x2000002c
 800213c:	20000028 	.word	0x20000028

08002140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_IncTick+0x1c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	001a      	movs	r2, r3
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_IncTick+0x20>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	18d2      	adds	r2, r2, r3
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_IncTick+0x20>)
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	2000002c 	.word	0x2000002c
 8002160:	200003a0 	.word	0x200003a0

08002164 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <HAL_GetTick+0x10>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	200003a0 	.word	0x200003a0

08002178 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_SuspendTick+0x18>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_SuspendTick+0x18>)
 8002182:	2102      	movs	r1, #2
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e125      	b.n	80023fe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2234      	movs	r2, #52	; 0x34
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fc12 	bl	80019f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	2210      	movs	r2, #16
 80021d6:	4013      	ands	r3, r2
 80021d8:	d000      	beq.n	80021dc <HAL_ADC_Init+0x48>
 80021da:	e103      	b.n	80023e4 <HAL_ADC_Init+0x250>
 80021dc:	230f      	movs	r3, #15
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d000      	beq.n	80021e8 <HAL_ADC_Init+0x54>
 80021e6:	e0fd      	b.n	80023e4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80021f2:	d000      	beq.n	80021f6 <HAL_ADC_Init+0x62>
 80021f4:	e0f6      	b.n	80023e4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	4a83      	ldr	r2, [pc, #524]	; (8002408 <HAL_ADC_Init+0x274>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	2202      	movs	r2, #2
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2203      	movs	r2, #3
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d112      	bne.n	800223a <HAL_ADC_Init+0xa6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	4013      	ands	r3, r2
 800221e:	2b01      	cmp	r3, #1
 8002220:	d009      	beq.n	8002236 <HAL_ADC_Init+0xa2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	401a      	ands	r2, r3
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	429a      	cmp	r2, r3
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0xa6>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_ADC_Init+0xa8>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2218      	movs	r2, #24
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	0899      	lsrs	r1, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4964      	ldr	r1, [pc, #400]	; (800240c <HAL_ADC_Init+0x278>)
 800227a:	400a      	ands	r2, r1
 800227c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7e1b      	ldrb	r3, [r3, #24]
 8002282:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e5b      	ldrb	r3, [r3, #25]
 8002288:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800228a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e9b      	ldrb	r3, [r3, #26]
 8002290:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002292:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_Init+0x10e>
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	015b      	lsls	r3, r3, #5
 80022a0:	e000      	b.n	80022a4 <HAL_ADC_Init+0x110>
 80022a2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80022aa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_Init+0x124>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e000      	b.n	80022ba <HAL_ADC_Init+0x126>
 80022b8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80022ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2124      	movs	r1, #36	; 0x24
 80022c0:	5c5b      	ldrb	r3, [r3, r1]
 80022c2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022c4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7edb      	ldrb	r3, [r3, #27]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d115      	bne.n	8002300 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e9b      	ldrb	r3, [r3, #26]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	e00b      	b.n	8002300 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	2220      	movs	r2, #32
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	2201      	movs	r2, #1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	23c2      	movs	r3, #194	; 0xc2
 8002306:	33ff      	adds	r3, #255	; 0xff
 8002308:	429a      	cmp	r2, r3
 800230a:	d007      	beq.n	800231c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002314:	4313      	orrs	r3, r2
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	055b      	lsls	r3, r3, #21
 8002334:	429a      	cmp	r2, r3
 8002336:	d01b      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d017      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	2b02      	cmp	r3, #2
 8002346:	d013      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2b03      	cmp	r3, #3
 800234e:	d00f      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00b      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b05      	cmp	r3, #5
 800235e:	d007      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b06      	cmp	r3, #6
 8002366:	d003      	beq.n	8002370 <HAL_ADC_Init+0x1dc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b07      	cmp	r3, #7
 800236e:	d112      	bne.n	8002396 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2107      	movs	r1, #7
 800237c:	438a      	bics	r2, r1
 800237e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6959      	ldr	r1, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	2207      	movs	r2, #7
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_ADC_Init+0x27c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10b      	bne.n	80023be <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	2203      	movs	r2, #3
 80023b2:	4393      	bics	r3, r2
 80023b4:	2201      	movs	r2, #1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023bc:	e01c      	b.n	80023f8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	2212      	movs	r2, #18
 80023c4:	4393      	bics	r3, r2
 80023c6:	2210      	movs	r2, #16
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	2201      	movs	r2, #1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023e2:	e009      	b.n	80023f8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	2210      	movs	r2, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023f8:	230f      	movs	r3, #15
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b004      	add	sp, #16
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	fffffefd 	.word	0xfffffefd
 800240c:	fffe0219 	.word	0xfffe0219
 8002410:	833fffe7 	.word	0x833fffe7

08002414 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2317      	movs	r3, #23
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2204      	movs	r2, #4
 8002430:	4013      	ands	r3, r2
 8002432:	d15e      	bne.n	80024f2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2234      	movs	r2, #52	; 0x34
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADC_Start_DMA+0x2e>
 800243e:	2302      	movs	r3, #2
 8002440:	e05e      	b.n	8002500 <HAL_ADC_Start_DMA+0xec>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2234      	movs	r2, #52	; 0x34
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	7e5b      	ldrb	r3, [r3, #25]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002452:	2317      	movs	r3, #23
 8002454:	18fc      	adds	r4, r7, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f983 	bl	8002764 <ADC_Enable>
 800245e:	0003      	movs	r3, r0
 8002460:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002462:	2317      	movs	r3, #23
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d146      	bne.n	80024fa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_ADC_Start_DMA+0xf4>)
 8002472:	4013      	ands	r3, r2
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	0052      	lsls	r2, r2, #1
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2234      	movs	r2, #52	; 0x34
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_ADC_Start_DMA+0xf8>)
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_ADC_Start_DMA+0xfc>)
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_ADC_Start_DMA+0x100>)
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	221c      	movs	r2, #28
 80024aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2110      	movs	r1, #16
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3340      	adds	r3, #64	; 0x40
 80024d6:	0019      	movs	r1, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f000 fc0a 	bl	8002cf4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2104      	movs	r1, #4
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e003      	b.n	80024fa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024f2:	2317      	movs	r3, #23
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024fa:	2317      	movs	r3, #23
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b007      	add	sp, #28
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	fffff0fe 	.word	0xfffff0fe
 800250c:	0800286d 	.word	0x0800286d
 8002510:	08002921 	.word	0x08002921
 8002514:	0800293f 	.word	0x0800293f

08002518 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002552:	230f      	movs	r3, #15
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	055b      	lsls	r3, r3, #21
 8002566:	429a      	cmp	r2, r3
 8002568:	d011      	beq.n	800258e <HAL_ADC_ConfigChannel+0x46>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00d      	beq.n	800258e <HAL_ADC_ConfigChannel+0x46>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	2b02      	cmp	r3, #2
 8002578:	d009      	beq.n	800258e <HAL_ADC_ConfigChannel+0x46>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	2b03      	cmp	r3, #3
 8002580:	d005      	beq.n	800258e <HAL_ADC_ConfigChannel+0x46>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	2b04      	cmp	r3, #4
 8002588:	d001      	beq.n	800258e <HAL_ADC_ConfigChannel+0x46>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2234      	movs	r2, #52	; 0x34
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x54>
 8002598:	2302      	movs	r3, #2
 800259a:	e0d0      	b.n	800273e <HAL_ADC_ConfigChannel+0x1f6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2234      	movs	r2, #52	; 0x34
 80025a0:	2101      	movs	r1, #1
 80025a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d000      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x6a>
 80025b0:	e0b4      	b.n	800271c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a64      	ldr	r2, [pc, #400]	; (8002748 <HAL_ADC_ConfigChannel+0x200>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_ADC_ConfigChannel+0x76>
 80025bc:	e082      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	055b      	lsls	r3, r3, #21
 80025dc:	429a      	cmp	r2, r3
 80025de:	d037      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d033      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d02f      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d02b      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d027      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b05      	cmp	r3, #5
 8002606:	d023      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	2b06      	cmp	r3, #6
 800260e:	d01f      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b07      	cmp	r3, #7
 8002616:	d01b      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2107      	movs	r1, #7
 8002624:	400b      	ands	r3, r1
 8002626:	429a      	cmp	r2, r3
 8002628:	d012      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2107      	movs	r1, #7
 8002636:	438a      	bics	r2, r1
 8002638:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6959      	ldr	r1, [r3, #20]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2207      	movs	r2, #7
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b10      	cmp	r3, #16
 8002656:	d007      	beq.n	8002668 <HAL_ADC_ConfigChannel+0x120>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b11      	cmp	r3, #17
 800265e:	d003      	beq.n	8002668 <HAL_ADC_ConfigChannel+0x120>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b12      	cmp	r3, #18
 8002666:	d163      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_ADC_ConfigChannel+0x204>)
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d009      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x140>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b11      	cmp	r3, #17
 800267a:	d102      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x13a>
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	03db      	lsls	r3, r3, #15
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x144>
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	045b      	lsls	r3, r3, #17
 8002686:	e001      	b.n	800268c <HAL_ADC_ConfigChannel+0x144>
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	4a2f      	ldr	r2, [pc, #188]	; (800274c <HAL_ADC_ConfigChannel+0x204>)
 800268e:	430b      	orrs	r3, r1
 8002690:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d14a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_ADC_ConfigChannel+0x208>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	492d      	ldr	r1, [pc, #180]	; (8002754 <HAL_ADC_ConfigChannel+0x20c>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7fd fd31 	bl	8000108 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	001a      	movs	r2, r3
 80026aa:	0013      	movs	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x16e>
 80026c2:	e035      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	4099      	lsls	r1, r3
 80026d2:	000b      	movs	r3, r1
 80026d4:	43d9      	mvns	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	400a      	ands	r2, r1
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d007      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x1ae>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b11      	cmp	r3, #17
 80026ec:	d003      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x1ae>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d11c      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_ADC_ConfigChannel+0x204>)
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d007      	beq.n	8002712 <HAL_ADC_ConfigChannel+0x1ca>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b11      	cmp	r3, #17
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1c6>
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_ADC_ConfigChannel+0x210>)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1cc>
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_ADC_ConfigChannel+0x214>)
 8002710:	e000      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1cc>
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_ADC_ConfigChannel+0x218>)
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_ADC_ConfigChannel+0x204>)
 8002716:	400b      	ands	r3, r1
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e009      	b.n	8002730 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	2220      	movs	r2, #32
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002728:	230f      	movs	r3, #15
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2234      	movs	r2, #52	; 0x34
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002738:	230f      	movs	r3, #15
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	781b      	ldrb	r3, [r3, #0]
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	00001001 	.word	0x00001001
 800274c:	40012708 	.word	0x40012708
 8002750:	20000024 	.word	0x20000024
 8002754:	000f4240 	.word	0x000f4240
 8002758:	ffbfffff 	.word	0xffbfffff
 800275c:	feffffff 	.word	0xfeffffff
 8002760:	ff7fffff 	.word	0xff7fffff

08002764 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2203      	movs	r2, #3
 800277c:	4013      	ands	r3, r2
 800277e:	2b01      	cmp	r3, #1
 8002780:	d112      	bne.n	80027a8 <ADC_Enable+0x44>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	2b01      	cmp	r3, #1
 800278e:	d009      	beq.n	80027a4 <ADC_Enable+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	401a      	ands	r2, r3
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d101      	bne.n	80027a8 <ADC_Enable+0x44>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <ADC_Enable+0x46>
 80027a8:	2300      	movs	r3, #0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d152      	bne.n	8002854 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <ADC_Enable+0xfc>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	2210      	movs	r2, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2201      	movs	r2, #1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e03f      	b.n	8002856 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <ADC_Enable+0x100>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	491f      	ldr	r1, [pc, #124]	; (8002868 <ADC_Enable+0x104>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fc8b 	bl	8000108 <__udivsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027f6:	e002      	b.n	80027fe <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f9      	bne.n	80027f8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002804:	f7ff fcae 	bl	8002164 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800280c:	e01b      	b.n	8002846 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800280e:	f7ff fca9 	bl	8002164 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d914      	bls.n	8002846 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	4013      	ands	r3, r2
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00d      	beq.n	8002846 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	2210      	movs	r2, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	2201      	movs	r2, #1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	2b01      	cmp	r3, #1
 8002852:	d1dc      	bne.n	800280e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	80000017 	.word	0x80000017
 8002864:	20000024 	.word	0x20000024
 8002868:	000f4240 	.word	0x000f4240

0800286c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	2250      	movs	r2, #80	; 0x50
 8002880:	4013      	ands	r3, r2
 8002882:	d140      	bne.n	8002906 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	431a      	orrs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	23c0      	movs	r3, #192	; 0xc0
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4013      	ands	r3, r2
 800289e:	d12d      	bne.n	80028fc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d129      	bne.n	80028fc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2208      	movs	r2, #8
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d122      	bne.n	80028fc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2204      	movs	r2, #4
 80028be:	4013      	ands	r3, r2
 80028c0:	d110      	bne.n	80028e4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	210c      	movs	r1, #12
 80028ce:	438a      	bics	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4a11      	ldr	r2, [pc, #68]	; (800291c <ADC_DMAConvCplt+0xb0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	2201      	movs	r2, #1
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
 80028e2:	e00b      	b.n	80028fc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	2220      	movs	r2, #32
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	2201      	movs	r2, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7ff fe0a 	bl	8002518 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002904:	e005      	b.n	8002912 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	0010      	movs	r0, r2
 8002910:	4798      	blx	r3
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	fffffefe 	.word	0xfffffefe

08002920 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0018      	movs	r0, r3
 8002932:	f7ff fdf9 	bl	8002528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}

0800293e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	2204      	movs	r2, #4
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff fde6 	bl	8002538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}

08002974 <__NVIC_EnableIRQ>:
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	0002      	movs	r2, r0
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b7f      	cmp	r3, #127	; 0x7f
 8002986:	d809      	bhi.n	800299c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	001a      	movs	r2, r3
 800298e:	231f      	movs	r3, #31
 8002990:	401a      	ands	r2, r3
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_EnableIRQ+0x30>)
 8002994:	2101      	movs	r1, #1
 8002996:	4091      	lsls	r1, r2
 8002998:	000a      	movs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_SetPriority>:
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b7f      	cmp	r3, #127	; 0x7f
 80029bc:	d828      	bhi.n	8002a10 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <__NVIC_SetPriority+0xd4>)
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	33c0      	adds	r3, #192	; 0xc0
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	589b      	ldr	r3, [r3, r2]
 80029ce:	1dfa      	adds	r2, r7, #7
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	0011      	movs	r1, r2
 80029d4:	2203      	movs	r2, #3
 80029d6:	400a      	ands	r2, r1
 80029d8:	00d2      	lsls	r2, r2, #3
 80029da:	21ff      	movs	r1, #255	; 0xff
 80029dc:	4091      	lsls	r1, r2
 80029de:	000a      	movs	r2, r1
 80029e0:	43d2      	mvns	r2, r2
 80029e2:	401a      	ands	r2, r3
 80029e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	22ff      	movs	r2, #255	; 0xff
 80029ec:	401a      	ands	r2, r3
 80029ee:	1dfb      	adds	r3, r7, #7
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	0018      	movs	r0, r3
 80029f4:	2303      	movs	r3, #3
 80029f6:	4003      	ands	r3, r0
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029fc:	481f      	ldr	r0, [pc, #124]	; (8002a7c <__NVIC_SetPriority+0xd4>)
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	430a      	orrs	r2, r1
 8002a08:	33c0      	adds	r3, #192	; 0xc0
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	501a      	str	r2, [r3, r0]
}
 8002a0e:	e031      	b.n	8002a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <__NVIC_SetPriority+0xd8>)
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0019      	movs	r1, r3
 8002a18:	230f      	movs	r3, #15
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	3b08      	subs	r3, #8
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3306      	adds	r3, #6
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1dfa      	adds	r2, r7, #7
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	0011      	movs	r1, r2
 8002a30:	2203      	movs	r2, #3
 8002a32:	400a      	ands	r2, r1
 8002a34:	00d2      	lsls	r2, r2, #3
 8002a36:	21ff      	movs	r1, #255	; 0xff
 8002a38:	4091      	lsls	r1, r2
 8002a3a:	000a      	movs	r2, r1
 8002a3c:	43d2      	mvns	r2, r2
 8002a3e:	401a      	ands	r2, r3
 8002a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	401a      	ands	r2, r3
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	2303      	movs	r3, #3
 8002a52:	4003      	ands	r3, r0
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a58:	4809      	ldr	r0, [pc, #36]	; (8002a80 <__NVIC_SetPriority+0xd8>)
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	001c      	movs	r4, r3
 8002a60:	230f      	movs	r3, #15
 8002a62:	4023      	ands	r3, r4
 8002a64:	3b08      	subs	r3, #8
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	3306      	adds	r3, #6
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	18c3      	adds	r3, r0, r3
 8002a70:	3304      	adds	r3, #4
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b003      	add	sp, #12
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	045b      	lsls	r3, r3, #17
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d301      	bcc.n	8002a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e010      	b.n	8002abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <SysTick_Config+0x44>)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	425b      	negs	r3, r3
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff ff7c 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x44>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x44>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	1c02      	adds	r2, r0, #0
 8002adc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff5d 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	0002      	movs	r2, r0
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b02:	1dfb      	adds	r3, r7, #7
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7ff ff33 	bl	8002974 <__NVIC_EnableIRQ>
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff ffaf 	bl	8002a84 <SysTick_Config>
 8002b26:	0003      	movs	r3, r0
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e015      	b.n	8002b6e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fe fffd 	bl	8001b54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	795b      	ldrb	r3, [r3, #5]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_DAC_ConfigChannel+0x20>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e029      	b.n	8002bea <HAL_DAC_ConfigChannel+0x74>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002baa:	223e      	movs	r2, #62	; 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	795b      	ldrb	r3, [r3, #5]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_DAC_Start+0x16>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e028      	b.n	8002c5a <HAL_DAC_Start+0x68>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b3c      	cmp	r3, #60	; 0x3c
 8002c3a:	d107      	bne.n	8002c4c <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e036      	b.n	8002ce8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	2102      	movs	r1, #2
 8002c80:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_DMA_Init+0x8c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f9c4 	bl	8003058 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}  
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	ffffc00f 	.word	0xffffc00f

08002cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2317      	movs	r3, #23
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_DMA_Start_IT+0x24>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e04f      	b.n	8002db8 <HAL_DMA_Start_IT+0xc4>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2221      	movs	r2, #33	; 0x21
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d13a      	bne.n	8002da2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2221      	movs	r2, #33	; 0x21
 8002d30:	2102      	movs	r1, #2
 8002d32:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	438a      	bics	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f954 	bl	8002ffe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	210e      	movs	r1, #14
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e00f      	b.n	8002d90 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	210a      	movs	r1, #10
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e007      	b.n	8002db2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002daa:	2317      	movs	r3, #23
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002db2:	2317      	movs	r3, #23
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	781b      	ldrb	r3, [r3, #0]
} 
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e020      	b.n	8002e28 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	210e      	movs	r1, #14
 8002df2:	438a      	bics	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	438a      	bics	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4091      	lsls	r1, r2
 8002e12:	000a      	movs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	210f      	movs	r1, #15
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	5c9b      	ldrb	r3, [r3, r2]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d006      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e028      	b.n	8002eac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	210e      	movs	r1, #14
 8002e66:	438a      	bics	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	438a      	bics	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2101      	movs	r1, #1
 8002e84:	4091      	lsls	r1, r2
 8002e86:	000a      	movs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2221      	movs	r2, #33	; 0x21
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	4798      	blx	r3
    } 
  }
  return status;
 8002eac:	230f      	movs	r3, #15
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	0013      	movs	r3, r2
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d024      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x72>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d020      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d107      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2104      	movs	r1, #4
 8002f02:	438a      	bics	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	2104      	movs	r1, #4
 8002f10:	4091      	lsls	r1, r2
 8002f12:	000a      	movs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d100      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x66>
 8002f1e:	e06a      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	0010      	movs	r0, r2
 8002f28:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f2a:	e064      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2202      	movs	r2, #2
 8002f32:	409a      	lsls	r2, r3
 8002f34:	0013      	movs	r3, r2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d02b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xda>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d10b      	bne.n	8002f68 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	210a      	movs	r1, #10
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2221      	movs	r2, #33	; 0x21
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	2102      	movs	r1, #2
 8002f72:	4091      	lsls	r1, r2
 8002f74:	000a      	movs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	0010      	movs	r0, r2
 8002f90:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002f92:	e030      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	2208      	movs	r2, #8
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d028      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d024      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	210e      	movs	r1, #14
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4091      	lsls	r1, r2
 8002fc8:	000a      	movs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	4798      	blx	r3
    }
   }
}  
 8002ff4:	e7ff      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x13c>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	2101      	movs	r1, #1
 8003016:	4091      	lsls	r1, r2
 8003018:	000a      	movs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d108      	bne.n	800303e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800303c:	e007      	b.n	800304e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <DMA_CalcBaseAndBitshift+0x30>)
 8003066:	4694      	mov	ip, r2
 8003068:	4463      	add	r3, ip
 800306a:	2114      	movs	r1, #20
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd f84b 	bl	8000108 <__udivsi3>
 8003072:	0003      	movs	r3, r0
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <DMA_CalcBaseAndBitshift+0x34>)
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	bffdfff8 	.word	0xbffdfff8
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309e:	e14f      	b.n	8003340 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4091      	lsls	r1, r2
 80030aa:	000a      	movs	r2, r1
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <HAL_GPIO_Init+0x28>
 80030b6:	e140      	b.n	800333a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d005      	beq.n	80030d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d130      	bne.n	8003132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	409a      	lsls	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	43da      	mvns	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	0013      	movs	r3, r2
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003106:	2201      	movs	r2, #1
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	43da      	mvns	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	2201      	movs	r2, #1
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2203      	movs	r2, #3
 8003138:	4013      	ands	r3, r2
 800313a:	2b03      	cmp	r3, #3
 800313c:	d017      	beq.n	800316e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	43da      	mvns	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	4013      	ands	r3, r2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d123      	bne.n	80031c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	08da      	lsrs	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3208      	adds	r2, #8
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	58d3      	ldr	r3, [r2, r3]
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2107      	movs	r1, #7
 80031a6:	400b      	ands	r3, r1
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2203      	movs	r2, #3
 80031e0:	401a      	ands	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	23c0      	movs	r3, #192	; 0xc0
 80031fc:	029b      	lsls	r3, r3, #10
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_GPIO_Init+0x174>
 8003202:	e09a      	b.n	800333a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003204:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_GPIO_Init+0x2c8>)
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_GPIO_Init+0x2c8>)
 800320a:	2101      	movs	r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
 8003210:	4b51      	ldr	r3, [pc, #324]	; (8003358 <HAL_GPIO_Init+0x2c8>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800321c:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_GPIO_Init+0x2cc>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	589b      	ldr	r3, [r3, r2]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2203      	movs	r2, #3
 800322e:	4013      	ands	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	43da      	mvns	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	2390      	movs	r3, #144	; 0x90
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	429a      	cmp	r2, r3
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x1e2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a44      	ldr	r2, [pc, #272]	; (8003360 <HAL_GPIO_Init+0x2d0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x1de>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a43      	ldr	r2, [pc, #268]	; (8003364 <HAL_GPIO_Init+0x2d4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x1da>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_GPIO_Init+0x2d8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x1d6>
 8003262:	2303      	movs	r3, #3
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x1e4>
 8003266:	2305      	movs	r3, #5
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x1e4>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x1e4>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x1e4>
 8003272:	2300      	movs	r3, #0
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	2103      	movs	r1, #3
 8003278:	400a      	ands	r2, r1
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003284:	4935      	ldr	r1, [pc, #212]	; (800335c <HAL_GPIO_Init+0x2cc>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_GPIO_Init+0x2dc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43da      	mvns	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	025b      	lsls	r3, r3, #9
 80032aa:	4013      	ands	r3, r2
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_GPIO_Init+0x2dc>)
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_GPIO_Init+0x2dc>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43da      	mvns	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	029b      	lsls	r3, r3, #10
 80032d4:	4013      	ands	r3, r2
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_GPIO_Init+0x2dc>)
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_GPIO_Init+0x2dc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	035b      	lsls	r3, r3, #13
 80032fe:	4013      	ands	r3, r2
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_GPIO_Init+0x2dc>)
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_GPIO_Init+0x2dc>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43da      	mvns	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	039b      	lsls	r3, r3, #14
 8003328:	4013      	ands	r3, r2
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_GPIO_Init+0x2dc>)
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	40da      	lsrs	r2, r3
 8003348:	1e13      	subs	r3, r2, #0
 800334a:	d000      	beq.n	800334e <HAL_GPIO_Init+0x2be>
 800334c:	e6a8      	b.n	80030a0 <HAL_GPIO_Init+0x10>
  } 
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b006      	add	sp, #24
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	40010000 	.word	0x40010000
 8003360:	48000400 	.word	0x48000400
 8003364:	48000800 	.word	0x48000800
 8003368:	48000c00 	.word	0x48000c00
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	000a      	movs	r2, r1
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	1cba      	adds	r2, r7, #2
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	4013      	ands	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800338a:	230f      	movs	r3, #15
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e003      	b.n	800339c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003394:	230f      	movs	r3, #15
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800339c:	230f      	movs	r3, #15
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
  }
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b004      	add	sp, #16
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	0008      	movs	r0, r1
 80033b4:	0011      	movs	r1, r2
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	1c02      	adds	r2, r0, #0
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	1c7b      	adds	r3, r7, #1
 80033be:	1c0a      	adds	r2, r1, #0
 80033c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c2:	1c7b      	adds	r3, r7, #1
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ca:	1cbb      	adds	r3, r7, #2
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d2:	e003      	b.n	80033dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d4:	1cbb      	adds	r3, r7, #2
 80033d6:	881a      	ldrh	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e082      	b.n	80034fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2241      	movs	r2, #65	; 0x41
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2240      	movs	r2, #64	; 0x40
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f7fe fbe7 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2241      	movs	r2, #65	; 0x41
 8003416:	2124      	movs	r1, #36	; 0x24
 8003418:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	438a      	bics	r2, r1
 8003428:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_I2C_Init+0x120>)
 8003434:	400a      	ands	r2, r1
 8003436:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4931      	ldr	r1, [pc, #196]	; (8003508 <HAL_I2C_Init+0x124>)
 8003444:	400a      	ands	r2, r1
 8003446:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0209      	lsls	r1, r1, #8
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	e007      	b.n	8003472 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2184      	movs	r1, #132	; 0x84
 800346c:	0209      	lsls	r1, r1, #8
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d104      	bne.n	8003484 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	491f      	ldr	r1, [pc, #124]	; (800350c <HAL_I2C_Init+0x128>)
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <HAL_I2C_Init+0x124>)
 80034a0:	400a      	ands	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69d9      	ldr	r1, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2241      	movs	r2, #65	; 0x41
 80034e8:	2120      	movs	r1, #32
 80034ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2242      	movs	r2, #66	; 0x42
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}
 8003504:	f0ffffff 	.word	0xf0ffffff
 8003508:	ffff7fff 	.word	0xffff7fff
 800350c:	02008000 	.word	0x02008000

08003510 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	0008      	movs	r0, r1
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	0019      	movs	r1, r3
 800351e:	230a      	movs	r3, #10
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	1c02      	adds	r2, r0, #0
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	2308      	movs	r3, #8
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	1c0a      	adds	r2, r1, #0
 800352c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2241      	movs	r2, #65	; 0x41
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	d000      	beq.n	800353c <HAL_I2C_Master_Transmit+0x2c>
 800353a:	e0e7      	b.n	800370c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2240      	movs	r2, #64	; 0x40
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_I2C_Master_Transmit+0x3a>
 8003546:	2302      	movs	r3, #2
 8003548:	e0e1      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003552:	f7fe fe07 	bl	8002164 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	0219      	lsls	r1, r3, #8
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2319      	movs	r3, #25
 8003566:	2201      	movs	r2, #1
 8003568:	f000 fa04 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0cc      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2241      	movs	r2, #65	; 0x41
 8003578:	2121      	movs	r1, #33	; 0x21
 800357a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2242      	movs	r2, #66	; 0x42
 8003580:	2110      	movs	r1, #16
 8003582:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2208      	movs	r2, #8
 8003594:	18ba      	adds	r2, r7, r2
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2bff      	cmp	r3, #255	; 0xff
 80035a8:	d911      	bls.n	80035ce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	22ff      	movs	r2, #255	; 0xff
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	045c      	lsls	r4, r3, #17
 80035ba:	230a      	movs	r3, #10
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	8819      	ldrh	r1, [r3, #0]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	4b55      	ldr	r3, [pc, #340]	; (8003718 <HAL_I2C_Master_Transmit+0x208>)
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	0023      	movs	r3, r4
 80035c8:	f000 fb74 	bl	8003cb4 <I2C_TransferConfig>
 80035cc:	e075      	b.n	80036ba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	049c      	lsls	r4, r3, #18
 80035e2:	230a      	movs	r3, #10
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	8819      	ldrh	r1, [r3, #0]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_I2C_Master_Transmit+0x208>)
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	0023      	movs	r3, r4
 80035f0:	f000 fb60 	bl	8003cb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035f4:	e061      	b.n	80036ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f9f8 	bl	80039f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e081      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03a      	beq.n	80036ba <HAL_I2C_Master_Transmit+0x1aa>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d136      	bne.n	80036ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800364c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	0013      	movs	r3, r2
 8003656:	2200      	movs	r2, #0
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	f000 f98b 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e053      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	2bff      	cmp	r3, #255	; 0xff
 800366e:	d911      	bls.n	8003694 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	b2da      	uxtb	r2, r3
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	045c      	lsls	r4, r3, #17
 8003680:	230a      	movs	r3, #10
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	8819      	ldrh	r1, [r3, #0]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	2300      	movs	r3, #0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	0023      	movs	r3, r4
 800368e:	f000 fb11 	bl	8003cb4 <I2C_TransferConfig>
 8003692:	e012      	b.n	80036ba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	049c      	lsls	r4, r3, #18
 80036a8:	230a      	movs	r3, #10
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	8819      	ldrh	r1, [r3, #0]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	0023      	movs	r3, r4
 80036b6:	f000 fafd 	bl	8003cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d198      	bne.n	80035f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	0018      	movs	r0, r3
 80036cc:	f000 f9d0 	bl	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e01a      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2220      	movs	r2, #32
 80036de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	490c      	ldr	r1, [pc, #48]	; (800371c <HAL_I2C_Master_Transmit+0x20c>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2241      	movs	r2, #65	; 0x41
 80036f4:	2120      	movs	r1, #32
 80036f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2242      	movs	r2, #66	; 0x42
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b007      	add	sp, #28
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	80002000 	.word	0x80002000
 800371c:	fe00e800 	.word	0xfe00e800

08003720 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	0008      	movs	r0, r1
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	0019      	movs	r1, r3
 800372e:	230a      	movs	r3, #10
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	1c02      	adds	r2, r0, #0
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	2308      	movs	r3, #8
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	1c0a      	adds	r2, r1, #0
 800373c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2241      	movs	r2, #65	; 0x41
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	d000      	beq.n	800374c <HAL_I2C_Master_Receive+0x2c>
 800374a:	e0e8      	b.n	800391e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2C_Master_Receive+0x3a>
 8003756:	2302      	movs	r3, #2
 8003758:	e0e2      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003762:	f7fe fcff 	bl	8002164 <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	0219      	lsls	r1, r3, #8
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2319      	movs	r3, #25
 8003776:	2201      	movs	r2, #1
 8003778:	f000 f8fc 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0cd      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2241      	movs	r2, #65	; 0x41
 8003788:	2122      	movs	r1, #34	; 0x22
 800378a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2242      	movs	r2, #66	; 0x42
 8003790:	2110      	movs	r1, #16
 8003792:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2208      	movs	r2, #8
 80037a4:	18ba      	adds	r2, r7, r2
 80037a6:	8812      	ldrh	r2, [r2, #0]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2bff      	cmp	r3, #255	; 0xff
 80037b8:	d911      	bls.n	80037de <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	045c      	lsls	r4, r3, #17
 80037ca:	230a      	movs	r3, #10
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	8819      	ldrh	r1, [r3, #0]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	4b55      	ldr	r3, [pc, #340]	; (8003928 <HAL_I2C_Master_Receive+0x208>)
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	0023      	movs	r3, r4
 80037d8:	f000 fa6c 	bl	8003cb4 <I2C_TransferConfig>
 80037dc:	e076      	b.n	80038cc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	049c      	lsls	r4, r3, #18
 80037f2:	230a      	movs	r3, #10
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	8819      	ldrh	r1, [r3, #0]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_I2C_Master_Receive+0x208>)
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	0023      	movs	r3, r4
 8003800:	f000 fa58 	bl	8003cb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003804:	e062      	b.n	80038cc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f96b 	bl	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e082      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03a      	beq.n	80038cc <HAL_I2C_Master_Receive+0x1ac>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d136      	bne.n	80038cc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800385e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	0013      	movs	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	f000 f882 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e053      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d911      	bls.n	80038a6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	045c      	lsls	r4, r3, #17
 8003892:	230a      	movs	r3, #10
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	8819      	ldrh	r1, [r3, #0]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	0023      	movs	r3, r4
 80038a0:	f000 fa08 	bl	8003cb4 <I2C_TransferConfig>
 80038a4:	e012      	b.n	80038cc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	049c      	lsls	r4, r3, #18
 80038ba:	230a      	movs	r3, #10
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	8819      	ldrh	r1, [r3, #0]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	0023      	movs	r3, r4
 80038c8:	f000 f9f4 	bl	8003cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d197      	bne.n	8003806 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f8c7 	bl	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01a      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2220      	movs	r2, #32
 80038f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <HAL_I2C_Master_Receive+0x20c>)
 80038fe:	400a      	ands	r2, r1
 8003900:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2241      	movs	r2, #65	; 0x41
 8003906:	2120      	movs	r1, #32
 8003908:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2242      	movs	r2, #66	; 0x42
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	2100      	movs	r1, #0
 8003918:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b007      	add	sp, #28
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	80002400 	.word	0x80002400
 800392c:	fe00e800 	.word	0xfe00e800

08003930 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	2b01      	cmp	r3, #1
 800395a:	d007      	beq.n	800396c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
  }
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	e021      	b.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	d01e      	beq.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fbea 	bl	8002164 <HAL_GetTick>
 8003990:	0002      	movs	r2, r0
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d113      	bne.n	80039ca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	2220      	movs	r2, #32
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2241      	movs	r2, #65	; 0x41
 80039b2:	2120      	movs	r1, #32
 80039b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2242      	movs	r2, #66	; 0x42
 80039ba:	2100      	movs	r1, #0
 80039bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00f      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	425a      	negs	r2, r3
 80039da:	4153      	adcs	r3, r2
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	001a      	movs	r2, r3
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d0ce      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b004      	add	sp, #16
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039fe:	e02b      	b.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 f8da 	bl	8003bc0 <I2C_IsAcknowledgeFailed>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e029      	b.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe fba3 	bl	8002164 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	2220      	movs	r2, #32
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2241      	movs	r2, #65	; 0x41
 8003a40:	2120      	movs	r1, #32
 8003a42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2242      	movs	r2, #66	; 0x42
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2240      	movs	r2, #64	; 0x40
 8003a50:	2100      	movs	r1, #0
 8003a52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d1cc      	bne.n	8003a00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b004      	add	sp, #16
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	e028      	b.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 f89b 	bl	8003bc0 <I2C_IsAcknowledgeFailed>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e026      	b.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fe fb67 	bl	8002164 <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d113      	bne.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	2220      	movs	r2, #32
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2241      	movs	r2, #65	; 0x41
 8003ab8:	2120      	movs	r1, #32
 8003aba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2242      	movs	r2, #66	; 0x42
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d1cf      	bne.n	8003a7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003af4:	e055      	b.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f85f 	bl	8003bc0 <I2C_IsAcknowledgeFailed>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e053      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2220      	movs	r2, #32
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d129      	bne.n	8003b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d105      	bne.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e03f      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2220      	movs	r2, #32
 8003b38:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	491d      	ldr	r1, [pc, #116]	; (8003bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2241      	movs	r2, #65	; 0x41
 8003b54:	2120      	movs	r1, #32
 8003b56:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2242      	movs	r2, #66	; 0x42
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	2100      	movs	r1, #0
 8003b66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e022      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe fafa 	bl	8002164 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	2220      	movs	r2, #32
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2241      	movs	r2, #65	; 0x41
 8003b92:	2120      	movs	r1, #32
 8003b94:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d1a2      	bne.n	8003af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	fe00e800 	.word	0xfe00e800

08003bc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d164      	bne.n	8003ca4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	049b      	lsls	r3, r3, #18
 8003be4:	401a      	ands	r2, r3
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	049b      	lsls	r3, r3, #18
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d02b      	beq.n	8003c46 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	01c9      	lsls	r1, r1, #7
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c00:	e021      	b.n	8003c46 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d01e      	beq.n	8003c46 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c08:	f7fe faac 	bl	8002164 <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <I2C_IsAcknowledgeFailed+0x5e>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	2220      	movs	r2, #32
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2241      	movs	r2, #65	; 0x41
 8003c2e:	2120      	movs	r1, #32
 8003c30:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2242      	movs	r2, #66	; 0x42
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2240      	movs	r2, #64	; 0x40
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e02f      	b.n	8003ca6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d1d6      	bne.n	8003c02 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7ff fe62 	bl	8003930 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	2204      	movs	r2, #4
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2241      	movs	r2, #65	; 0x41
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2242      	movs	r2, #66	; 0x42
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2240      	movs	r2, #64	; 0x40
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	fe00e800 	.word	0xfe00e800

08003cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	0008      	movs	r0, r1
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	240a      	movs	r4, #10
 8003cc4:	193b      	adds	r3, r7, r4
 8003cc6:	1c02      	adds	r2, r0, #0
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	2009      	movs	r0, #9
 8003ccc:	183b      	adds	r3, r7, r0
 8003cce:	1c0a      	adds	r2, r1, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	0d51      	lsrs	r1, r2, #21
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	00d2      	lsls	r2, r2, #3
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	490e      	ldr	r1, [pc, #56]	; (8003d1c <I2C_TransferConfig+0x68>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	43d2      	mvns	r2, r2
 8003ce8:	401a      	ands	r2, r3
 8003cea:	0011      	movs	r1, r2
 8003cec:	193b      	adds	r3, r7, r4
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	059b      	lsls	r3, r3, #22
 8003cf2:	0d9a      	lsrs	r2, r3, #22
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	0418      	lsls	r0, r3, #16
 8003cfa:	23ff      	movs	r3, #255	; 0xff
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	4003      	ands	r3, r0
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b005      	add	sp, #20
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	03ff63ff 	.word	0x03ff63ff

08003d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2241      	movs	r2, #65	; 0x41
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d138      	bne.n	8003da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e032      	b.n	8003daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	2101      	movs	r1, #1
 8003d4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2241      	movs	r2, #65	; 0x41
 8003d50:	2124      	movs	r1, #36	; 0x24
 8003d52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4911      	ldr	r1, [pc, #68]	; (8003db4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2241      	movs	r2, #65	; 0x41
 8003d98:	2120      	movs	r1, #32
 8003d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	ffffefff 	.word	0xffffefff

08003db8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2241      	movs	r2, #65	; 0x41
 8003dc6:	5c9b      	ldrb	r3, [r3, r2]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d139      	bne.n	8003e42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	5c9b      	ldrb	r3, [r3, r2]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e033      	b.n	8003e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2124      	movs	r1, #36	; 0x24
 8003dea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2241      	movs	r2, #65	; 0x41
 8003e32:	2120      	movs	r1, #32
 8003e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2240      	movs	r2, #64	; 0x40
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	fffff0ff 	.word	0xfffff0ff

08003e50 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	000a      	movs	r2, r1
 8003e5a:	1cfb      	adds	r3, r7, #3
 8003e5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_PWR_EnterSTOPMode+0x60>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_PWR_EnterSTOPMode+0x60>)
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e84:	2104      	movs	r1, #4
 8003e86:	430a      	orrs	r2, r1
 8003e88:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e8a:	1cfb      	adds	r3, r7, #3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e92:	bf30      	wfi
 8003e94:	e002      	b.n	8003e9c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e96:	bf40      	sev
    __WFE();
 8003e98:	bf20      	wfe
    __WFE();
 8003e9a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_PWR_EnterSTOPMode+0x64>)
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_PWR_EnterSTOPMode+0x64>)
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	611a      	str	r2, [r3, #16]
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e301      	b.n	80044ce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x1e>
 8003ed4:	e08d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ed6:	4bc3      	ldr	r3, [pc, #780]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	220c      	movs	r2, #12
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00e      	beq.n	8003f00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ee2:	4bc0      	ldr	r3, [pc, #768]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	220c      	movs	r2, #12
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x64>
 8003eee:	4bbd      	ldr	r3, [pc, #756]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	025b      	lsls	r3, r3, #9
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10d      	bne.n	8003f1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	4bb8      	ldr	r3, [pc, #736]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <HAL_RCC_OscConfig+0x56>
 8003f0c:	e070      	b.n	8003ff0 <HAL_RCC_OscConfig+0x138>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d000      	beq.n	8003f18 <HAL_RCC_OscConfig+0x60>
 8003f16:	e06b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e2d8      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_OscConfig+0x7c>
 8003f24:	4baf      	ldr	r3, [pc, #700]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4bae      	ldr	r3, [pc, #696]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0249      	lsls	r1, r1, #9
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e02f      	b.n	8003f94 <HAL_RCC_OscConfig+0xdc>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_OscConfig+0x9e>
 8003f3c:	4ba9      	ldr	r3, [pc, #676]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4ba8      	ldr	r3, [pc, #672]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f42:	49a9      	ldr	r1, [pc, #676]	; (80041e8 <HAL_RCC_OscConfig+0x330>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	4ba6      	ldr	r3, [pc, #664]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	49a7      	ldr	r1, [pc, #668]	; (80041ec <HAL_RCC_OscConfig+0x334>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e01e      	b.n	8003f94 <HAL_RCC_OscConfig+0xdc>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d10e      	bne.n	8003f7c <HAL_RCC_OscConfig+0xc4>
 8003f5e:	4ba1      	ldr	r3, [pc, #644]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4ba0      	ldr	r3, [pc, #640]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	02c9      	lsls	r1, r1, #11
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4b9d      	ldr	r3, [pc, #628]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b9c      	ldr	r3, [pc, #624]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	0249      	lsls	r1, r1, #9
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0xdc>
 8003f7c:	4b99      	ldr	r3, [pc, #612]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b98      	ldr	r3, [pc, #608]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f82:	4999      	ldr	r1, [pc, #612]	; (80041e8 <HAL_RCC_OscConfig+0x330>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b95      	ldr	r3, [pc, #596]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003f8e:	4997      	ldr	r1, [pc, #604]	; (80041ec <HAL_RCC_OscConfig+0x334>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d014      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f8e2 	bl	8002164 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa6:	f7fe f8dd 	bl	8002164 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e28a      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb8:	4b8a      	ldr	r3, [pc, #552]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	029b      	lsls	r3, r3, #10
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0xee>
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe f8cd 	bl	8002164 <HAL_GetTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fe f8c8 	bl	8002164 <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e275      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	4b80      	ldr	r3, [pc, #512]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	4013      	ands	r3, r2
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x118>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <HAL_RCC_OscConfig+0x146>
 8003ffc:	e069      	b.n	80040d2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ffe:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	220c      	movs	r2, #12
 8004004:	4013      	ands	r3, r2
 8004006:	d00b      	beq.n	8004020 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004008:	4b76      	ldr	r3, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	220c      	movs	r2, #12
 800400e:	4013      	ands	r3, r2
 8004010:	2b08      	cmp	r3, #8
 8004012:	d11c      	bne.n	800404e <HAL_RCC_OscConfig+0x196>
 8004014:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	025b      	lsls	r3, r3, #9
 800401c:	4013      	ands	r3, r2
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004020:	4b70      	ldr	r3, [pc, #448]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2202      	movs	r2, #2
 8004026:	4013      	ands	r3, r2
 8004028:	d005      	beq.n	8004036 <HAL_RCC_OscConfig+0x17e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e24b      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b6b      	ldr	r3, [pc, #428]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	22f8      	movs	r2, #248	; 0xf8
 800403c:	4393      	bics	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00da      	lsls	r2, r3, #3
 8004046:	4b67      	ldr	r3, [pc, #412]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404c:	e041      	b.n	80040d2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d024      	beq.n	80040a0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800405c:	2101      	movs	r1, #1
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe f87f 	bl	8002164 <HAL_GetTick>
 8004066:	0003      	movs	r3, r0
 8004068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406c:	f7fe f87a 	bl	8002164 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e227      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2202      	movs	r2, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d0f1      	beq.n	800406c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	22f8      	movs	r2, #248	; 0xf8
 800408e:	4393      	bics	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00da      	lsls	r2, r3, #3
 8004098:	4b52      	ldr	r3, [pc, #328]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e018      	b.n	80040d2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	438a      	bics	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe f85a 	bl	8002164 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b6:	f7fe f855 	bl	8002164 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e202      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c8:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f1      	bne.n	80040b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	4013      	ands	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80040e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e8:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fe f838 	bl	8002164 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fe f833 	bl	8002164 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1e0      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d0f1      	beq.n	80040fa <HAL_RCC_OscConfig+0x242>
 8004116:	e018      	b.n	800414a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004118:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fe f81e 	bl	8002164 <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412e:	f7fe f819 	bl	8002164 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1c6      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2202      	movs	r2, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d1f1      	bne.n	800412e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	d100      	bne.n	8004156 <HAL_RCC_OscConfig+0x29e>
 8004154:	e0b4      	b.n	80042c0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	201f      	movs	r0, #31
 8004158:	183b      	adds	r3, r7, r0
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	055b      	lsls	r3, r3, #21
 8004166:	4013      	ands	r3, r2
 8004168:	d110      	bne.n	800418c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0549      	lsls	r1, r1, #21
 8004174:	430a      	orrs	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	055b      	lsls	r3, r3, #21
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004186:	183b      	adds	r3, r7, r0
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCC_OscConfig+0x338>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d11a      	bne.n	80041ce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_RCC_OscConfig+0x338>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_RCC_OscConfig+0x338>)
 800419e:	2180      	movs	r1, #128	; 0x80
 80041a0:	0049      	lsls	r1, r1, #1
 80041a2:	430a      	orrs	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a6:	f7fd ffdd 	bl	8002164 <HAL_GetTick>
 80041aa:	0003      	movs	r3, r0
 80041ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fd ffd8 	bl	8002164 <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e185      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_OscConfig+0x338>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4013      	ands	r3, r2
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10e      	bne.n	80041f4 <HAL_RCC_OscConfig+0x33c>
 80041d6:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	4b02      	ldr	r3, [pc, #8]	; (80041e4 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	2101      	movs	r1, #1
 80041de:	430a      	orrs	r2, r1
 80041e0:	621a      	str	r2, [r3, #32]
 80041e2:	e035      	b.n	8004250 <HAL_RCC_OscConfig+0x398>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	fffeffff 	.word	0xfffeffff
 80041ec:	fffbffff 	.word	0xfffbffff
 80041f0:	40007000 	.word	0x40007000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <HAL_RCC_OscConfig+0x35e>
 80041fc:	4bb6      	ldr	r3, [pc, #728]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	4bb5      	ldr	r3, [pc, #724]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004202:	2101      	movs	r1, #1
 8004204:	438a      	bics	r2, r1
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	4bb3      	ldr	r3, [pc, #716]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	4bb2      	ldr	r3, [pc, #712]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800420e:	2104      	movs	r1, #4
 8004210:	438a      	bics	r2, r1
 8004212:	621a      	str	r2, [r3, #32]
 8004214:	e01c      	b.n	8004250 <HAL_RCC_OscConfig+0x398>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x380>
 800421e:	4bae      	ldr	r3, [pc, #696]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	4bad      	ldr	r3, [pc, #692]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004224:	2104      	movs	r1, #4
 8004226:	430a      	orrs	r2, r1
 8004228:	621a      	str	r2, [r3, #32]
 800422a:	4bab      	ldr	r3, [pc, #684]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	4baa      	ldr	r3, [pc, #680]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004230:	2101      	movs	r1, #1
 8004232:	430a      	orrs	r2, r1
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0x398>
 8004238:	4ba7      	ldr	r3, [pc, #668]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	4ba6      	ldr	r3, [pc, #664]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800423e:	2101      	movs	r1, #1
 8004240:	438a      	bics	r2, r1
 8004242:	621a      	str	r2, [r3, #32]
 8004244:	4ba4      	ldr	r3, [pc, #656]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	4ba3      	ldr	r3, [pc, #652]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800424a:	2104      	movs	r1, #4
 800424c:	438a      	bics	r2, r1
 800424e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004258:	f7fd ff84 	bl	8002164 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e009      	b.n	8004276 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd ff7f 	bl	8002164 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	4a9b      	ldr	r2, [pc, #620]	; (80044dc <HAL_RCC_OscConfig+0x624>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e12b      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	4b98      	ldr	r3, [pc, #608]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	2202      	movs	r2, #2
 800427c:	4013      	ands	r3, r2
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x3aa>
 8004280:	e013      	b.n	80042aa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7fd ff6f 	bl	8002164 <HAL_GetTick>
 8004286:	0003      	movs	r3, r0
 8004288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	e009      	b.n	80042a0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fd ff6a 	bl	8002164 <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	4a91      	ldr	r2, [pc, #580]	; (80044dc <HAL_RCC_OscConfig+0x624>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e116      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	4b8d      	ldr	r3, [pc, #564]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	2202      	movs	r2, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	4b87      	ldr	r3, [pc, #540]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042ba:	4989      	ldr	r1, [pc, #548]	; (80044e0 <HAL_RCC_OscConfig+0x628>)
 80042bc:	400a      	ands	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2210      	movs	r2, #16
 80042c6:	4013      	ands	r3, r2
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d12a      	bne.n	8004328 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042d2:	4b81      	ldr	r3, [pc, #516]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042d8:	2104      	movs	r1, #4
 80042da:	430a      	orrs	r2, r1
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042de:	4b7e      	ldr	r3, [pc, #504]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e2:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80042e4:	2101      	movs	r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7fd ff3b 	bl	8002164 <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042f4:	f7fd ff36 	bl	8002164 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0e3      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004306:	4b74      	ldr	r3, [pc, #464]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	2202      	movs	r2, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d0f1      	beq.n	80042f4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004310:	4b71      	ldr	r3, [pc, #452]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	22f8      	movs	r2, #248	; 0xf8
 8004316:	4393      	bics	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	00da      	lsls	r2, r3, #3
 8004320:	4b6d      	ldr	r3, [pc, #436]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004322:	430a      	orrs	r2, r1
 8004324:	635a      	str	r2, [r3, #52]	; 0x34
 8004326:	e034      	b.n	8004392 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	3305      	adds	r3, #5
 800432e:	d111      	bne.n	8004354 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004330:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004334:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004336:	2104      	movs	r1, #4
 8004338:	438a      	bics	r2, r1
 800433a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800433c:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	22f8      	movs	r2, #248	; 0xf8
 8004342:	4393      	bics	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800434e:	430a      	orrs	r2, r1
 8004350:	635a      	str	r2, [r3, #52]	; 0x34
 8004352:	e01e      	b.n	8004392 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004354:	4b60      	ldr	r3, [pc, #384]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	4b5f      	ldr	r3, [pc, #380]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800435a:	2104      	movs	r1, #4
 800435c:	430a      	orrs	r2, r1
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004360:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004364:	4b5c      	ldr	r3, [pc, #368]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004366:	2101      	movs	r1, #1
 8004368:	438a      	bics	r2, r1
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fd fefa 	bl	8002164 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004376:	f7fd fef5 	bl	8002164 <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0a2      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d1f1      	bne.n	8004376 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d100      	bne.n	800439c <HAL_RCC_OscConfig+0x4e4>
 800439a:	e097      	b.n	80044cc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800439c:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	220c      	movs	r2, #12
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d100      	bne.n	80043aa <HAL_RCC_OscConfig+0x4f2>
 80043a8:	e06b      	b.n	8004482 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d14c      	bne.n	800444c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043b8:	494a      	ldr	r1, [pc, #296]	; (80044e4 <HAL_RCC_OscConfig+0x62c>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043be:	f7fd fed1 	bl	8002164 <HAL_GetTick>
 80043c2:	0003      	movs	r3, r0
 80043c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fecc 	bl	8002164 <HAL_GetTick>
 80043cc:	0002      	movs	r2, r0
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e079      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	049b      	lsls	r3, r3, #18
 80043e2:	4013      	ands	r3, r2
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e6:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	220f      	movs	r2, #15
 80043ec:	4393      	bics	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fa:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <HAL_RCC_OscConfig+0x630>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	431a      	orrs	r2, r3
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	0449      	lsls	r1, r1, #17
 800441e:	430a      	orrs	r2, r1
 8004420:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fd fe9f 	bl	8002164 <HAL_GetTick>
 8004426:	0003      	movs	r3, r0
 8004428:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd fe9a 	bl	8002164 <HAL_GetTick>
 8004430:	0002      	movs	r2, r0
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e047      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	049b      	lsls	r3, r3, #18
 8004446:	4013      	ands	r3, r2
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x574>
 800444a:	e03f      	b.n	80044cc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004452:	4924      	ldr	r1, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x62c>)
 8004454:	400a      	ands	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fd fe84 	bl	8002164 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fe7f 	bl	8002164 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e02c      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	049b      	lsls	r3, r3, #18
 800447c:	4013      	ands	r3, r2
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x5aa>
 8004480:	e024      	b.n	80044cc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e01f      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCC_OscConfig+0x620>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	401a      	ands	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10e      	bne.n	80044c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	220f      	movs	r2, #15
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	23f0      	movs	r3, #240	; 0xf0
 80044bc:	039b      	lsls	r3, r3, #14
 80044be:	401a      	ands	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b008      	add	sp, #32
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	40021000 	.word	0x40021000
 80044dc:	00001388 	.word	0x00001388
 80044e0:	efffffff 	.word	0xefffffff
 80044e4:	feffffff 	.word	0xfeffffff
 80044e8:	ffc2ffff 	.word	0xffc2ffff

080044ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b3      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004500:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	4013      	ands	r3, r2
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d911      	bls.n	8004532 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b58      	ldr	r3, [pc, #352]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	4393      	bics	r3, r2
 8004516:	0019      	movs	r1, r3
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2201      	movs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e09a      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d015      	beq.n	8004568 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2204      	movs	r2, #4
 8004542:	4013      	ands	r3, r2
 8004544:	d006      	beq.n	8004554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004546:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 800454c:	21e0      	movs	r1, #224	; 0xe0
 800454e:	00c9      	lsls	r1, r1, #3
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	22f0      	movs	r2, #240	; 0xf0
 800455a:	4393      	bics	r3, r2
 800455c:	0019      	movs	r1, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d040      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	4013      	ands	r3, r2
 8004584:	d114      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06e      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	4b38      	ldr	r3, [pc, #224]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	049b      	lsls	r3, r3, #18
 800459a:	4013      	ands	r3, r2
 800459c:	d108      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e062      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	4b34      	ldr	r3, [pc, #208]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e05b      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	4393      	bics	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c4:	f7fd fdce 	bl	8002164 <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045cc:	e009      	b.n	80045e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ce:	f7fd fdc9 	bl	8002164 <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <HAL_RCC_ClockConfig+0x18c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e042      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	220c      	movs	r2, #12
 80045e8:	401a      	ands	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1ec      	bne.n	80045ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d211      	bcs.n	8004626 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	4393      	bics	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCC_ClockConfig+0x184>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e020      	b.n	8004668 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2204      	movs	r2, #4
 800462c:	4013      	ands	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <HAL_RCC_ClockConfig+0x190>)
 8004636:	4013      	ands	r3, r2
 8004638:	0019      	movs	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004644:	f000 f820 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004648:	0001      	movs	r1, r0
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x188>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	220f      	movs	r2, #15
 8004652:	4013      	ands	r3, r2
 8004654:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x194>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	000a      	movs	r2, r1
 800465a:	40da      	lsrs	r2, r3
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x198>)
 800465e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004660:	2003      	movs	r0, #3
 8004662:	f7fd fd39 	bl	80020d8 <HAL_InitTick>
  
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40022000 	.word	0x40022000
 8004674:	40021000 	.word	0x40021000
 8004678:	00001388 	.word	0x00001388
 800467c:	fffff8ff 	.word	0xfffff8ff
 8004680:	0800798c 	.word	0x0800798c
 8004684:	20000024 	.word	0x20000024

08004688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b08f      	sub	sp, #60	; 0x3c
 800468c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800468e:	2314      	movs	r3, #20
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004694:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004696:	c313      	stmia	r3!, {r0, r1, r4}
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046a2:	c313      	stmia	r3!, {r0, r1, r4}
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ac:	2300      	movs	r3, #0
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b0:	2300      	movs	r3, #0
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	220c      	movs	r2, #12
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d002      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d003      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x50>
 80046d0:	e02d      	b.n	800472e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046d6:	e02d      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	0c9b      	lsrs	r3, r3, #18
 80046dc:	220f      	movs	r2, #15
 80046de:	4013      	ands	r3, r2
 80046e0:	2214      	movs	r2, #20
 80046e2:	18ba      	adds	r2, r7, r2
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	220f      	movs	r2, #15
 80046ee:	4013      	ands	r3, r2
 80046f0:	1d3a      	adds	r2, r7, #4
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	4013      	ands	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004702:	4812      	ldr	r0, [pc, #72]	; (800474c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004704:	f7fb fd00 	bl	8000108 <__udivsi3>
 8004708:	0003      	movs	r3, r0
 800470a:	001a      	movs	r2, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	4353      	muls	r3, r2
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
 8004712:	e009      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004716:	000a      	movs	r2, r1
 8004718:	0152      	lsls	r2, r2, #5
 800471a:	1a52      	subs	r2, r2, r1
 800471c:	0193      	lsls	r3, r2, #6
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	185b      	adds	r3, r3, r1
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800472c:	e002      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004732:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b00f      	add	sp, #60	; 0x3c
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	080078e0 	.word	0x080078e0
 8004744:	080078f0 	.word	0x080078f0
 8004748:	40021000 	.word	0x40021000
 800474c:	007a1200 	.word	0x007a1200

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b02      	ldr	r3, [pc, #8]	; (8004760 <HAL_RCC_GetHCLKFreq+0x10>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000024 	.word	0x20000024

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004768:	f7ff fff2 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 800476c:	0001      	movs	r1, r0
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	2207      	movs	r2, #7
 8004776:	4013      	ands	r3, r2
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <HAL_RCC_GetPCLK1Freq+0x28>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	40d9      	lsrs	r1, r3
 800477e:	000b      	movs	r3, r1
}    
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	40021000 	.word	0x40021000
 800478c:	0800799c 	.word	0x0800799c

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	025b      	lsls	r3, r3, #9
 80047a8:	4013      	ands	r3, r2
 80047aa:	d100      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047ac:	e08e      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047ae:	2017      	movs	r0, #23
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	055b      	lsls	r3, r3, #21
 80047be:	4013      	ands	r3, r2
 80047c0:	d110      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	4b5c      	ldr	r3, [pc, #368]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	0549      	lsls	r1, r1, #21
 80047cc:	430a      	orrs	r2, r1
 80047ce:	61da      	str	r2, [r3, #28]
 80047d0:	4b58      	ldr	r3, [pc, #352]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	055b      	lsls	r3, r3, #21
 80047d8:	4013      	ands	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	4b54      	ldr	r3, [pc, #336]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	4013      	ands	r3, r2
 80047ee:	d11a      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f0:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	0049      	lsls	r1, r1, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fe:	f7fd fcb1 	bl	8002164 <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd fcac 	bl	8002164 <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e087      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4013      	ands	r3, r2
 8004824:	d0f0      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	23c0      	movs	r3, #192	; 0xc0
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4013      	ands	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d034      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	23c0      	movs	r3, #192	; 0xc0
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4013      	ands	r3, r2
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d02c      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004848:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4a3b      	ldr	r2, [pc, #236]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800484e:	4013      	ands	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004852:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	0249      	lsls	r1, r1, #9
 800485c:	430a      	orrs	r2, r1
 800485e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004866:	4936      	ldr	r1, [pc, #216]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004868:	400a      	ands	r2, r1
 800486a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800486c:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	4013      	ands	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fd fc73 	bl	8002164 <HAL_GetTick>
 800487e:	0003      	movs	r3, r0
 8004880:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	e009      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fd fc6e 	bl	8002164 <HAL_GetTick>
 8004888:	0002      	movs	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e048      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004898:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	2202      	movs	r2, #2
 800489e:	4013      	ands	r3, r2
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4a25      	ldr	r2, [pc, #148]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048b2:	430a      	orrs	r2, r1
 80048b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048b6:	2317      	movs	r3, #23
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048c6:	4920      	ldr	r1, [pc, #128]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2201      	movs	r2, #1
 80048d2:	4013      	ands	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d6:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	2203      	movs	r2, #3
 80048dc:	4393      	bics	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2220      	movs	r2, #32
 80048f0:	4013      	ands	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	2210      	movs	r2, #16
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004904:	430a      	orrs	r2, r1
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4013      	ands	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2240      	movs	r2, #64	; 0x40
 800491a:	4393      	bics	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004924:	430a      	orrs	r2, r1
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	0018      	movs	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	b006      	add	sp, #24
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
 800493c:	fffffcff 	.word	0xfffffcff
 8004940:	fffeffff 	.word	0xfffeffff
 8004944:	00001388 	.word	0x00001388
 8004948:	efffffff 	.word	0xefffffff

0800494c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0a8      	b.n	8004ab0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	2382      	movs	r3, #130	; 0x82
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	429a      	cmp	r2, r3
 8004970:	d009      	beq.n	8004986 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	61da      	str	r2, [r3, #28]
 8004978:	e005      	b.n	8004986 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	225d      	movs	r2, #93	; 0x5d
 8004990:	5c9b      	ldrb	r3, [r3, r2]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	225c      	movs	r2, #92	; 0x5c
 800499c:	2100      	movs	r1, #0
 800499e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fd f96a 	bl	8001c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	225d      	movs	r2, #93	; 0x5d
 80049ac:	2102      	movs	r1, #2
 80049ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	438a      	bics	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	23e0      	movs	r3, #224	; 0xe0
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d902      	bls.n	80049d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	015b      	lsls	r3, r3, #5
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	23f0      	movs	r3, #240	; 0xf0
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d008      	beq.n	80049f6 <HAL_SPI_Init+0xaa>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	23e0      	movs	r3, #224	; 0xe0
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	2382      	movs	r3, #130	; 0x82
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	401a      	ands	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6899      	ldr	r1, [r3, #8]
 8004a04:	2384      	movs	r3, #132	; 0x84
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	400b      	ands	r3, r1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2102      	movs	r1, #2
 8004a12:	400b      	ands	r3, r1
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	400b      	ands	r3, r1
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6999      	ldr	r1, [r3, #24]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	400b      	ands	r3, r1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2138      	movs	r1, #56	; 0x38
 8004a32:	400b      	ands	r3, r1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	0011      	movs	r1, r2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2110      	movs	r1, #16
 8004a64:	400b      	ands	r3, r1
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	400b      	ands	r3, r1
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68d9      	ldr	r1, [r3, #12]
 8004a76:	23f0      	movs	r3, #240	; 0xf0
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	400b      	ands	r3, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	0011      	movs	r1, r2
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	015b      	lsls	r3, r3, #5
 8004a86:	401a      	ands	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69da      	ldr	r2, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4907      	ldr	r1, [pc, #28]	; (8004ab8 <HAL_SPI_Init+0x16c>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	225d      	movs	r2, #93	; 0x5d
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	fffff7ff 	.word	0xfffff7ff

08004abc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	1dbb      	adds	r3, r7, #6
 8004aca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004acc:	231f      	movs	r3, #31
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	225c      	movs	r2, #92	; 0x5c
 8004ad8:	5c9b      	ldrb	r3, [r3, r2]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Transmit+0x26>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e140      	b.n	8004d64 <HAL_SPI_Transmit+0x2a8>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	225c      	movs	r2, #92	; 0x5c
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aea:	f7fd fb3b 	bl	8002164 <HAL_GetTick>
 8004aee:	0003      	movs	r3, r0
 8004af0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004af2:	2316      	movs	r3, #22
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	1dba      	adds	r2, r7, #6
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	225d      	movs	r2, #93	; 0x5d
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d004      	beq.n	8004b12 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004b08:	231f      	movs	r3, #31
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b10:	e11d      	b.n	8004d4e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_SPI_Transmit+0x64>
 8004b18:	1dbb      	adds	r3, r7, #6
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004b20:	231f      	movs	r3, #31
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b28:	e111      	b.n	8004d4e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	225d      	movs	r2, #93	; 0x5d
 8004b2e:	2103      	movs	r1, #3
 8004b30:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1dba      	adds	r2, r7, #6
 8004b42:	8812      	ldrh	r2, [r2, #0]
 8004b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1dba      	adds	r2, r7, #6
 8004b4a:	8812      	ldrh	r2, [r2, #0]
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2244      	movs	r2, #68	; 0x44
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2246      	movs	r2, #70	; 0x46
 8004b60:	2100      	movs	r1, #0
 8004b62:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d110      	bne.n	8004b9e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2140      	movs	r1, #64	; 0x40
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	01c9      	lsls	r1, r1, #7
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2240      	movs	r2, #64	; 0x40
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d007      	beq.n	8004bbc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2140      	movs	r1, #64	; 0x40
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	23e0      	movs	r3, #224	; 0xe0
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d94e      	bls.n	8004c66 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_SPI_Transmit+0x11e>
 8004bd0:	2316      	movs	r3, #22
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d13f      	bne.n	8004c5a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	1c9a      	adds	r2, r3, #2
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bfe:	e02c      	b.n	8004c5a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2202      	movs	r2, #2
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d112      	bne.n	8004c34 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c32:	e012      	b.n	8004c5a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c34:	f7fd fa96 	bl	8002164 <HAL_GetTick>
 8004c38:	0002      	movs	r2, r0
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d802      	bhi.n	8004c4a <HAL_SPI_Transmit+0x18e>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_SPI_Transmit+0x194>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004c50:	231f      	movs	r3, #31
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2203      	movs	r2, #3
 8004c56:	701a      	strb	r2, [r3, #0]
          goto error;
 8004c58:	e079      	b.n	8004d4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cd      	bne.n	8004c00 <HAL_SPI_Transmit+0x144>
 8004c64:	e04f      	b.n	8004d06 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d004      	beq.n	8004c78 <HAL_SPI_Transmit+0x1bc>
 8004c6e:	2316      	movs	r3, #22
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d141      	bne.n	8004cfc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004c9e:	e02d      	b.n	8004cfc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d113      	bne.n	8004cd6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd4:	e012      	b.n	8004cfc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd6:	f7fd fa45 	bl	8002164 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d802      	bhi.n	8004cec <HAL_SPI_Transmit+0x230>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Transmit+0x236>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	701a      	strb	r2, [r3, #0]
          goto error;
 8004cfa:	e028      	b.n	8004d4e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cc      	bne.n	8004ca0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f000 f95d 	bl	8004fcc <SPI_EndRxTxTransaction>
 8004d12:	1e03      	subs	r3, r0, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004d42:	231f      	movs	r3, #31
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e000      	b.n	8004d4e <HAL_SPI_Transmit+0x292>
  }

error:
 8004d4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	225d      	movs	r2, #93	; 0x5d
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	225c      	movs	r2, #92	; 0x5c
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004d5e:	231f      	movs	r3, #31
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	781b      	ldrb	r3, [r3, #0]
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b008      	add	sp, #32
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d7c:	f7fd f9f2 	bl	8002164 <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d8c:	f7fd f9ea 	bl	8002164 <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d94:	4b3a      	ldr	r3, [pc, #232]	; (8004e80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	0d1b      	lsrs	r3, r3, #20
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	4353      	muls	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da2:	e058      	b.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	d055      	beq.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004daa:	f7fd f9db 	bl	8002164 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d902      	bls.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d142      	bne.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	21e0      	movs	r1, #224	; 0xe0
 8004dcc:	438a      	bics	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	2382      	movs	r3, #130	; 0x82
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d113      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d005      	beq.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2140      	movs	r1, #64	; 0x40
 8004e00:	438a      	bics	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	019b      	lsls	r3, r3, #6
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d110      	bne.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	491a      	ldr	r1, [pc, #104]	; (8004e84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	0189      	lsls	r1, r1, #6
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	225d      	movs	r2, #93	; 0x5d
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	225c      	movs	r2, #92	; 0x5c
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e017      	b.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	425a      	negs	r2, r3
 8004e66:	4153      	adcs	r3, r2
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d197      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b008      	add	sp, #32
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	20000024 	.word	0x20000024
 8004e84:	ffffdfff 	.word	0xffffdfff

08004e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e96:	2317      	movs	r3, #23
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e9e:	f7fd f961 	bl	8002164 <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	18d3      	adds	r3, r2, r3
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eae:	f7fd f959 	bl	8002164 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	00da      	lsls	r2, r3, #3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	0d1b      	lsrs	r3, r3, #20
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	4353      	muls	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ed4:	e068      	b.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	23c0      	movs	r3, #192	; 0xc0
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10a      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	2117      	movs	r1, #23
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d055      	beq.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efc:	f7fd f932 	bl	8002164 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d902      	bls.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d142      	bne.n	8004f98 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	21e0      	movs	r1, #224	; 0xe0
 8004f1e:	438a      	bics	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	2382      	movs	r3, #130	; 0x82
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d113      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d005      	beq.n	8004f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d107      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	; 0x40
 8004f52:	438a      	bics	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d110      	bne.n	8004f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	0189      	lsls	r1, r1, #6
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	225d      	movs	r2, #93	; 0x5d
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	225c      	movs	r2, #92	; 0x5c
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e010      	b.n	8004fba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d18e      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b00a      	add	sp, #40	; 0x28
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	20000024 	.word	0x20000024
 8004fc8:	ffffdfff 	.word	0xffffdfff

08004fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	0159      	lsls	r1, r3, #5
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	0013      	movs	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7ff ff4e 	bl	8004e88 <SPI_WaitFifoStateUntilTimeout>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	d007      	beq.n	8005000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e027      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0013      	movs	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	f7ff fead 	bl	8004d6c <SPI_WaitFlagStateUntilTimeout>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d007      	beq.n	8005026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	2220      	movs	r2, #32
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e014      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	23c0      	movs	r3, #192	; 0xc0
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	0013      	movs	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	f7ff ff27 	bl	8004e88 <SPI_WaitFifoStateUntilTimeout>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d007      	beq.n	800504e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	2220      	movs	r2, #32
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e000      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b004      	add	sp, #16
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e042      	b.n	80050f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	223d      	movs	r2, #61	; 0x3d
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	223c      	movs	r2, #60	; 0x3c
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	0018      	movs	r0, r3
 8005082:	f7fc fe83 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	223d      	movs	r2, #61	; 0x3d
 800508a:	2102      	movs	r1, #2
 800508c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	0019      	movs	r1, r3
 8005098:	0010      	movs	r0, r2
 800509a:	f000 fd19 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2246      	movs	r2, #70	; 0x46
 80050a2:	2101      	movs	r1, #1
 80050a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	223e      	movs	r2, #62	; 0x3e
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	223f      	movs	r2, #63	; 0x3f
 80050b2:	2101      	movs	r1, #1
 80050b4:	5499      	strb	r1, [r3, r2]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2240      	movs	r2, #64	; 0x40
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2241      	movs	r2, #65	; 0x41
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2242      	movs	r2, #66	; 0x42
 80050ca:	2101      	movs	r1, #1
 80050cc:	5499      	strb	r1, [r3, r2]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2243      	movs	r2, #67	; 0x43
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2244      	movs	r2, #68	; 0x44
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2245      	movs	r2, #69	; 0x45
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	223d      	movs	r2, #61	; 0x3d
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b002      	add	sp, #8
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	230f      	movs	r3, #15
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <HAL_TIM_OC_Start_IT+0x2a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	223e      	movs	r2, #62	; 0x3e
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	1e5a      	subs	r2, r3, #1
 800511c:	4193      	sbcs	r3, r2
 800511e:	b2db      	uxtb	r3, r3
 8005120:	e01f      	b.n	8005162 <HAL_TIM_OC_Start_IT+0x6a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b04      	cmp	r3, #4
 8005126:	d108      	bne.n	800513a <HAL_TIM_OC_Start_IT+0x42>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	223f      	movs	r2, #63	; 0x3f
 800512c:	5c9b      	ldrb	r3, [r3, r2]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	4193      	sbcs	r3, r2
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e013      	b.n	8005162 <HAL_TIM_OC_Start_IT+0x6a>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d108      	bne.n	8005152 <HAL_TIM_OC_Start_IT+0x5a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	5c9b      	ldrb	r3, [r3, r2]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	1e5a      	subs	r2, r3, #1
 800514c:	4193      	sbcs	r3, r2
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e007      	b.n	8005162 <HAL_TIM_OC_Start_IT+0x6a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2241      	movs	r2, #65	; 0x41
 8005156:	5c9b      	ldrb	r3, [r3, r2]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	4193      	sbcs	r3, r2
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0b7      	b.n	80052da <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_TIM_OC_Start_IT+0x82>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	223e      	movs	r2, #62	; 0x3e
 8005174:	2102      	movs	r1, #2
 8005176:	5499      	strb	r1, [r3, r2]
 8005178:	e013      	b.n	80051a2 <HAL_TIM_OC_Start_IT+0xaa>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d104      	bne.n	800518a <HAL_TIM_OC_Start_IT+0x92>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	223f      	movs	r2, #63	; 0x3f
 8005184:	2102      	movs	r1, #2
 8005186:	5499      	strb	r1, [r3, r2]
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_OC_Start_IT+0xaa>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d104      	bne.n	800519a <HAL_TIM_OC_Start_IT+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2240      	movs	r2, #64	; 0x40
 8005194:	2102      	movs	r1, #2
 8005196:	5499      	strb	r1, [r3, r2]
 8005198:	e003      	b.n	80051a2 <HAL_TIM_OC_Start_IT+0xaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2241      	movs	r2, #65	; 0x41
 800519e:	2102      	movs	r1, #2
 80051a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d02a      	beq.n	80051fe <HAL_TIM_OC_Start_IT+0x106>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	d830      	bhi.n	8005210 <HAL_TIM_OC_Start_IT+0x118>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0xf4>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d82a      	bhi.n	8005210 <HAL_TIM_OC_Start_IT+0x118>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_TIM_OC_Start_IT+0xd0>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d009      	beq.n	80051da <HAL_TIM_OC_Start_IT+0xe2>
 80051c6:	e023      	b.n	8005210 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2102      	movs	r1, #2
 80051d4:	430a      	orrs	r2, r1
 80051d6:	60da      	str	r2, [r3, #12]
      break;
 80051d8:	e01f      	b.n	800521a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2104      	movs	r1, #4
 80051e6:	430a      	orrs	r2, r1
 80051e8:	60da      	str	r2, [r3, #12]
      break;
 80051ea:	e016      	b.n	800521a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2108      	movs	r1, #8
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]
      break;
 80051fc:	e00d      	b.n	800521a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2110      	movs	r1, #16
 800520a:	430a      	orrs	r2, r1
 800520c:	60da      	str	r2, [r3, #12]
      break;
 800520e:	e004      	b.n	800521a <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8005210:	230f      	movs	r3, #15
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
      break;
 8005218:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800521a:	230f      	movs	r3, #15
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d157      	bne.n	80052d4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	0018      	movs	r0, r3
 800522e:	f000 ff65 	bl	80060fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_TIM_OC_Start_IT+0x162>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_TIM_OC_Start_IT+0x162>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a28      	ldr	r2, [pc, #160]	; (80052ec <HAL_TIM_OC_Start_IT+0x1f4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIM_OC_Start_IT+0x162>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <HAL_TIM_OC_Start_IT+0x1f8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_TIM_OC_Start_IT+0x166>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_TIM_OC_Start_IT+0x168>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0209      	lsls	r1, r1, #8
 8005272:	430a      	orrs	r2, r1
 8005274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00f      	beq.n	80052a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	05db      	lsls	r3, r3, #23
 8005288:	429a      	cmp	r2, r3
 800528a:	d009      	beq.n	80052a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIM_OC_Start_IT+0x1fc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_TIM_OC_Start_IT+0x1f0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2207      	movs	r2, #7
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b06      	cmp	r3, #6
 80052b0:	d010      	beq.n	80052d4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2101      	movs	r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e007      	b.n	80052d4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800
 80052f4:	40000400 	.word	0x40000400

080052f8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	230f      	movs	r3, #15
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d02a      	beq.n	8005366 <HAL_TIM_OC_Stop_IT+0x6e>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d830      	bhi.n	8005378 <HAL_TIM_OC_Stop_IT+0x80>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d01b      	beq.n	8005354 <HAL_TIM_OC_Stop_IT+0x5c>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d82a      	bhi.n	8005378 <HAL_TIM_OC_Stop_IT+0x80>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_TIM_OC_Stop_IT+0x38>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d009      	beq.n	8005342 <HAL_TIM_OC_Stop_IT+0x4a>
 800532e:	e023      	b.n	8005378 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2102      	movs	r1, #2
 800533c:	438a      	bics	r2, r1
 800533e:	60da      	str	r2, [r3, #12]
      break;
 8005340:	e01f      	b.n	8005382 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2104      	movs	r1, #4
 800534e:	438a      	bics	r2, r1
 8005350:	60da      	str	r2, [r3, #12]
      break;
 8005352:	e016      	b.n	8005382 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2108      	movs	r1, #8
 8005360:	438a      	bics	r2, r1
 8005362:	60da      	str	r2, [r3, #12]
      break;
 8005364:	e00d      	b.n	8005382 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2110      	movs	r1, #16
 8005372:	438a      	bics	r2, r1
 8005374:	60da      	str	r2, [r3, #12]
      break;
 8005376:	e004      	b.n	8005382 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005378:	230f      	movs	r3, #15
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
      break;
 8005380:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005382:	230f      	movs	r3, #15
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d000      	beq.n	800538e <HAL_TIM_OC_Stop_IT+0x96>
 800538c:	e063      	b.n	8005456 <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	2200      	movs	r2, #0
 8005396:	0018      	movs	r0, r3
 8005398:	f000 feb0 	bl	80060fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a30      	ldr	r2, [pc, #192]	; (8005464 <HAL_TIM_OC_Stop_IT+0x16c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_OC_Stop_IT+0xcc>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <HAL_TIM_OC_Stop_IT+0x170>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_OC_Stop_IT+0xcc>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	; (800546c <HAL_TIM_OC_Stop_IT+0x174>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_OC_Stop_IT+0xcc>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2c      	ldr	r2, [pc, #176]	; (8005470 <HAL_TIM_OC_Stop_IT+0x178>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_OC_Stop_IT+0xd0>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_TIM_OC_Stop_IT+0xd2>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d013      	beq.n	80053f6 <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <HAL_TIM_OC_Stop_IT+0x17c>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <HAL_TIM_OC_Stop_IT+0xfe>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4a25      	ldr	r2, [pc, #148]	; (8005478 <HAL_TIM_OC_Stop_IT+0x180>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_OC_Stop_IT+0xfe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4922      	ldr	r1, [pc, #136]	; (800547c <HAL_TIM_OC_Stop_IT+0x184>)
 80053f2:	400a      	ands	r2, r1
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_TIM_OC_Stop_IT+0x17c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	d10d      	bne.n	800541e <HAL_TIM_OC_Stop_IT+0x126>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_OC_Stop_IT+0x180>)
 800540a:	4013      	ands	r3, r2
 800540c:	d107      	bne.n	800541e <HAL_TIM_OC_Stop_IT+0x126>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2101      	movs	r1, #1
 800541a:	438a      	bics	r2, r1
 800541c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_TIM_OC_Stop_IT+0x136>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	223e      	movs	r2, #62	; 0x3e
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]
 800542c:	e013      	b.n	8005456 <HAL_TIM_OC_Stop_IT+0x15e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d104      	bne.n	800543e <HAL_TIM_OC_Stop_IT+0x146>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	223f      	movs	r2, #63	; 0x3f
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]
 800543c:	e00b      	b.n	8005456 <HAL_TIM_OC_Stop_IT+0x15e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d104      	bne.n	800544e <HAL_TIM_OC_Stop_IT+0x156>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	2101      	movs	r1, #1
 800544a:	5499      	strb	r1, [r3, r2]
 800544c:	e003      	b.n	8005456 <HAL_TIM_OC_Stop_IT+0x15e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2241      	movs	r2, #65	; 0x41
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	781b      	ldrb	r3, [r3, #0]
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	00001111 	.word	0x00001111
 8005478:	00000444 	.word	0x00000444
 800547c:	ffff7fff 	.word	0xffff7fff

08005480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e042      	b.n	8005518 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223d      	movs	r2, #61	; 0x3d
 8005496:	5c9b      	ldrb	r3, [r3, r2]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223c      	movs	r2, #60	; 0x3c
 80054a2:	2100      	movs	r1, #0
 80054a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 f839 	bl	8005520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223d      	movs	r2, #61	; 0x3d
 80054b2:	2102      	movs	r1, #2
 80054b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	0019      	movs	r1, r3
 80054c0:	0010      	movs	r0, r2
 80054c2:	f000 fb05 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2246      	movs	r2, #70	; 0x46
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223e      	movs	r2, #62	; 0x3e
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223f      	movs	r2, #63	; 0x3f
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2241      	movs	r2, #65	; 0x41
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2242      	movs	r2, #66	; 0x42
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2243      	movs	r2, #67	; 0x43
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2244      	movs	r2, #68	; 0x44
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2245      	movs	r2, #69	; 0x45
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	223d      	movs	r2, #61	; 0x3d
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d124      	bne.n	8005590 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	4013      	ands	r3, r2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11d      	bne.n	8005590 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2203      	movs	r2, #3
 800555a:	4252      	negs	r2, r2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2203      	movs	r2, #3
 800556c:	4013      	ands	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	0018      	movs	r0, r3
 8005574:	f000 fa94 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005578:	e007      	b.n	800558a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f7fa ff4b 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 fa93 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2204      	movs	r2, #4
 8005598:	4013      	ands	r3, r2
 800559a:	2b04      	cmp	r3, #4
 800559c:	d125      	bne.n	80055ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2204      	movs	r2, #4
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11e      	bne.n	80055ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2205      	movs	r2, #5
 80055b2:	4252      	negs	r2, r2
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	23c0      	movs	r3, #192	; 0xc0
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 fa67 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 80055d2:	e007      	b.n	80055e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fa ff1e 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 fa66 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d124      	bne.n	8005642 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2208      	movs	r2, #8
 8005600:	4013      	ands	r3, r2
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11d      	bne.n	8005642 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2209      	movs	r2, #9
 800560c:	4252      	negs	r2, r2
 800560e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	2203      	movs	r2, #3
 800561e:	4013      	ands	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 fa3b 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 800562a:	e007      	b.n	800563c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0018      	movs	r0, r3
 8005630:	f7fa fef2 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fa3a 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2210      	movs	r2, #16
 800564a:	4013      	ands	r3, r2
 800564c:	2b10      	cmp	r3, #16
 800564e:	d125      	bne.n	800569c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2210      	movs	r2, #16
 8005658:	4013      	ands	r3, r2
 800565a:	2b10      	cmp	r3, #16
 800565c:	d11e      	bne.n	800569c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2211      	movs	r2, #17
 8005664:	4252      	negs	r2, r2
 8005666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2208      	movs	r2, #8
 800566c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	23c0      	movs	r3, #192	; 0xc0
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4013      	ands	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fa0e 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8005684:	e007      	b.n	8005696 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	0018      	movs	r0, r3
 800568a:	f7fa fec5 	bl	8000418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 fa0d 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10f      	bne.n	80056ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d108      	bne.n	80056ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2202      	movs	r2, #2
 80056be:	4252      	negs	r2, r2
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f000 f9e3 	bl	8005a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d10f      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d108      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2281      	movs	r2, #129	; 0x81
 80056ec:	4252      	negs	r2, r2
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fdea 	bl	80062cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	4013      	ands	r3, r2
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d10f      	bne.n	8005726 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2240      	movs	r2, #64	; 0x40
 800570e:	4013      	ands	r3, r2
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d108      	bne.n	8005726 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2241      	movs	r2, #65	; 0x41
 800571a:	4252      	negs	r2, r2
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 f9cd 	bl	8005ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2220      	movs	r2, #32
 800572e:	4013      	ands	r3, r2
 8005730:	2b20      	cmp	r3, #32
 8005732:	d10f      	bne.n	8005754 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	4013      	ands	r3, r2
 800573e:	2b20      	cmp	r3, #32
 8005740:	d108      	bne.n	8005754 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2221      	movs	r2, #33	; 0x21
 8005748:	4252      	negs	r2, r2
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fdb4 	bl	80062bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2317      	movs	r3, #23
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	223c      	movs	r2, #60	; 0x3c
 8005774:	5c9b      	ldrb	r3, [r3, r2]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_TIM_PWM_ConfigChannel+0x22>
 800577a:	2302      	movs	r3, #2
 800577c:	e0ad      	b.n	80058da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	223c      	movs	r2, #60	; 0x3c
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d100      	bne.n	800578e <HAL_TIM_PWM_ConfigChannel+0x32>
 800578c:	e076      	b.n	800587c <HAL_TIM_PWM_ConfigChannel+0x120>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d900      	bls.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005794:	e095      	b.n	80058c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d04e      	beq.n	800583a <HAL_TIM_PWM_ConfigChannel+0xde>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d900      	bls.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80057a2:	e08e      	b.n	80058c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d021      	beq.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80057b0:	e087      	b.n	80058c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fa08 	bl	8005bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2108      	movs	r1, #8
 80057cc:	430a      	orrs	r2, r1
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2104      	movs	r1, #4
 80057dc:	438a      	bics	r2, r1
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
      break;
 80057f2:	e06b      	b.n	80058cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0011      	movs	r1, r2
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 fa6f 	bl	8005ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	0109      	lsls	r1, r1, #4
 8005810:	430a      	orrs	r2, r1
 8005812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4931      	ldr	r1, [pc, #196]	; (80058e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005820:	400a      	ands	r2, r1
 8005822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6999      	ldr	r1, [r3, #24]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	619a      	str	r2, [r3, #24]
      break;
 8005838:	e048      	b.n	80058cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	0011      	movs	r1, r2
 8005842:	0018      	movs	r0, r3
 8005844:	f000 fad0 	bl	8005de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2108      	movs	r1, #8
 8005854:	430a      	orrs	r2, r1
 8005856:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2104      	movs	r1, #4
 8005864:	438a      	bics	r2, r1
 8005866:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69d9      	ldr	r1, [r3, #28]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	61da      	str	r2, [r3, #28]
      break;
 800587a:	e027      	b.n	80058cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f000 fb35 	bl	8005ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	0109      	lsls	r1, r1, #4
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	490f      	ldr	r1, [pc, #60]	; (80058e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69d9      	ldr	r1, [r3, #28]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e004      	b.n	80058cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80058c2:	2317      	movs	r3, #23
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
      break;
 80058ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	223c      	movs	r2, #60	; 0x3c
 80058d0:	2100      	movs	r1, #0
 80058d2:	5499      	strb	r1, [r3, r2]

  return status;
 80058d4:	2317      	movs	r3, #23
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	781b      	ldrb	r3, [r3, #0]
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b006      	add	sp, #24
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	fffffbff 	.word	0xfffffbff

080058e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	230f      	movs	r3, #15
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	223c      	movs	r2, #60	; 0x3c
 80058fe:	5c9b      	ldrb	r3, [r3, r2]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_TIM_ConfigClockSource+0x20>
 8005904:	2302      	movs	r3, #2
 8005906:	e0bc      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x19a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	223c      	movs	r2, #60	; 0x3c
 800590c:	2101      	movs	r1, #1
 800590e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223d      	movs	r2, #61	; 0x3d
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2277      	movs	r2, #119	; 0x77
 8005924:	4393      	bics	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4a58      	ldr	r2, [pc, #352]	; (8005a8c <HAL_TIM_ConfigClockSource+0x1a4>)
 800592c:	4013      	ands	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	0192      	lsls	r2, r2, #6
 8005940:	4293      	cmp	r3, r2
 8005942:	d040      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xde>
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	0192      	lsls	r2, r2, #6
 8005948:	4293      	cmp	r3, r2
 800594a:	d900      	bls.n	800594e <HAL_TIM_ConfigClockSource+0x66>
 800594c:	e088      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	0152      	lsls	r2, r2, #5
 8005952:	4293      	cmp	r3, r2
 8005954:	d100      	bne.n	8005958 <HAL_TIM_ConfigClockSource+0x70>
 8005956:	e088      	b.n	8005a6a <HAL_TIM_ConfigClockSource+0x182>
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	0152      	lsls	r2, r2, #5
 800595c:	4293      	cmp	r3, r2
 800595e:	d900      	bls.n	8005962 <HAL_TIM_ConfigClockSource+0x7a>
 8005960:	e07e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 8005962:	2b70      	cmp	r3, #112	; 0x70
 8005964:	d018      	beq.n	8005998 <HAL_TIM_ConfigClockSource+0xb0>
 8005966:	d900      	bls.n	800596a <HAL_TIM_ConfigClockSource+0x82>
 8005968:	e07a      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 800596a:	2b60      	cmp	r3, #96	; 0x60
 800596c:	d04f      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x126>
 800596e:	d900      	bls.n	8005972 <HAL_TIM_ConfigClockSource+0x8a>
 8005970:	e076      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 8005972:	2b50      	cmp	r3, #80	; 0x50
 8005974:	d03b      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x106>
 8005976:	d900      	bls.n	800597a <HAL_TIM_ConfigClockSource+0x92>
 8005978:	e072      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d057      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0x146>
 800597e:	d900      	bls.n	8005982 <HAL_TIM_ConfigClockSource+0x9a>
 8005980:	e06e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d063      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x166>
 8005986:	d86b      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 8005988:	2b20      	cmp	r3, #32
 800598a:	d060      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x166>
 800598c:	d868      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d05d      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x166>
 8005992:	2b10      	cmp	r3, #16
 8005994:	d05b      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x166>
 8005996:	e063      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f000 fb88 	bl	80060bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2277      	movs	r2, #119	; 0x77
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
      break;
 80059c4:	e052      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 fb71 	bl	80060bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	01c9      	lsls	r1, r1, #7
 80059e8:	430a      	orrs	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]
      break;
 80059ec:	e03e      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	001a      	movs	r2, r3
 80059fc:	f000 fae4 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2150      	movs	r1, #80	; 0x50
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 fb3e 	bl	8006088 <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e02e      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6859      	ldr	r1, [r3, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	f000 fb02 	bl	8006024 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2160      	movs	r1, #96	; 0x60
 8005a26:	0018      	movs	r0, r3
 8005a28:	f000 fb2e 	bl	8006088 <TIM_ITRx_SetConfig>
      break;
 8005a2c:	e01e      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	001a      	movs	r2, r3
 8005a3c:	f000 fac4 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2140      	movs	r1, #64	; 0x40
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 fb1e 	bl	8006088 <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e00e      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	0019      	movs	r1, r3
 8005a58:	0010      	movs	r0, r2
 8005a5a:	f000 fb15 	bl	8006088 <TIM_ITRx_SetConfig>
      break;
 8005a5e:	e005      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005a60:	230f      	movs	r3, #15
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005a6a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	223d      	movs	r2, #61	; 0x3d
 8005a70:	2101      	movs	r1, #1
 8005a72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223c      	movs	r2, #60	; 0x3c
 8005a78:	2100      	movs	r1, #0
 8005a7a:	5499      	strb	r1, [r3, r2]

  return status;
 8005a7c:	230f      	movs	r3, #15
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	781b      	ldrb	r3, [r3, #0]
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b004      	add	sp, #16
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	ffff00ff 	.word	0xffff00ff

08005a90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b002      	add	sp, #8
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b002      	add	sp, #8
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <TIM_Base_SetConfig+0xe4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d008      	beq.n	8005afa <TIM_Base_SetConfig+0x2a>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	05db      	lsls	r3, r3, #23
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d003      	beq.n	8005afa <TIM_Base_SetConfig+0x2a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <TIM_Base_SetConfig+0xe8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2270      	movs	r2, #112	; 0x70
 8005afe:	4393      	bics	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <TIM_Base_SetConfig+0xe4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d013      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <TIM_Base_SetConfig+0xe8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a24      	ldr	r2, [pc, #144]	; (8005bbc <TIM_Base_SetConfig+0xec>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <TIM_Base_SetConfig+0xf0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <TIM_Base_SetConfig+0xf4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_Base_SetConfig+0x76>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <TIM_Base_SetConfig+0xf8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <TIM_Base_SetConfig+0xfc>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	4393      	bics	r3, r2
 8005b5e:	001a      	movs	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <TIM_Base_SetConfig+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_Base_SetConfig+0xce>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <TIM_Base_SetConfig+0xf0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_Base_SetConfig+0xce>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <TIM_Base_SetConfig+0xf4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_Base_SetConfig+0xce>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <TIM_Base_SetConfig+0xf8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d103      	bne.n	8005ba6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	615a      	str	r2, [r3, #20]
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b004      	add	sp, #16
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40002000 	.word	0x40002000
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	fffffcff 	.word	0xfffffcff

08005bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	2201      	movs	r2, #1
 8005be0:	4393      	bics	r3, r2
 8005be2:	001a      	movs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2270      	movs	r2, #112	; 0x70
 8005bfe:	4393      	bics	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2203      	movs	r2, #3
 8005c06:	4393      	bics	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2202      	movs	r2, #2
 8005c18:	4393      	bics	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <TIM_OC1_SetConfig+0xf8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_OC1_SetConfig+0x76>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <TIM_OC1_SetConfig+0xfc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_OC1_SetConfig+0x76>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <TIM_OC1_SetConfig+0x100>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC1_SetConfig+0x76>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a24      	ldr	r2, [pc, #144]	; (8005cd4 <TIM_OC1_SetConfig+0x104>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10c      	bne.n	8005c60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	4393      	bics	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	4393      	bics	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <TIM_OC1_SetConfig+0xf8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_OC1_SetConfig+0xb0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <TIM_OC1_SetConfig+0xfc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC1_SetConfig+0xb0>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <TIM_OC1_SetConfig+0x100>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0xb0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <TIM_OC1_SetConfig+0x104>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d111      	bne.n	8005ca4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <TIM_OC1_SetConfig+0x108>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <TIM_OC1_SetConfig+0x10c>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b006      	add	sp, #24
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800
 8005cd8:	fffffeff 	.word	0xfffffeff
 8005cdc:	fffffdff 	.word	0xfffffdff

08005ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	4393      	bics	r3, r2
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <TIM_OC2_SetConfig+0xe8>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <TIM_OC2_SetConfig+0xec>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	4393      	bics	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_OC2_SetConfig+0xf0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2280      	movs	r2, #128	; 0x80
 8005d46:	4393      	bics	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <TIM_OC2_SetConfig+0xf0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_OC2_SetConfig+0x9e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <TIM_OC2_SetConfig+0xf4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_OC2_SetConfig+0x9e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <TIM_OC2_SetConfig+0xf8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC2_SetConfig+0x9e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <TIM_OC2_SetConfig+0xfc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d113      	bne.n	8005da6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC2_SetConfig+0x100>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC2_SetConfig+0x104>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b006      	add	sp, #24
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	ffff8fff 	.word	0xffff8fff
 8005dcc:	fffffcff 	.word	0xfffffcff
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800
 8005de0:	fffffbff 	.word	0xfffffbff
 8005de4:	fffff7ff 	.word	0xfffff7ff

08005de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005df8:	401a      	ands	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2270      	movs	r2, #112	; 0x70
 8005e14:	4393      	bics	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4a28      	ldr	r2, [pc, #160]	; (8005ed0 <TIM_OC3_SetConfig+0xe8>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <TIM_OC3_SetConfig+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d10d      	bne.n	8005e62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <TIM_OC3_SetConfig+0xf0>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <TIM_OC3_SetConfig+0xf4>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <TIM_OC3_SetConfig+0xec>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <TIM_OC3_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <TIM_OC3_SetConfig+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_OC3_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <TIM_OC3_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC3_SetConfig+0x9a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <TIM_OC3_SetConfig+0x100>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d113      	bne.n	8005eaa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <TIM_OC3_SetConfig+0x104>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <TIM_OC3_SetConfig+0x108>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b006      	add	sp, #24
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fffffeff 	.word	0xfffffeff
 8005ed0:	fffffdff 	.word	0xfffffdff
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	fffff7ff 	.word	0xfffff7ff
 8005edc:	fffffbff 	.word	0xfffffbff
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800
 8005eec:	ffffefff 	.word	0xffffefff
 8005ef0:	ffffdfff 	.word	0xffffdfff

08005ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <TIM_OC4_SetConfig+0xb0>)
 8005f04:	401a      	ands	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <TIM_OC4_SetConfig+0xb4>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_OC4_SetConfig+0xb8>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <TIM_OC4_SetConfig+0xbc>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	031b      	lsls	r3, r3, #12
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <TIM_OC4_SetConfig+0xc0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_OC4_SetConfig+0x78>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <TIM_OC4_SetConfig+0xc4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_OC4_SetConfig+0x78>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC4_SetConfig+0xc8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC4_SetConfig+0x78>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC4_SetConfig+0xcc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC4_SetConfig+0xd0>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b006      	add	sp, #24
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	ffffefff 	.word	0xffffefff
 8005fa8:	ffff8fff 	.word	0xffff8fff
 8005fac:	fffffcff 	.word	0xfffffcff
 8005fb0:	ffffdfff 	.word	0xffffdfff
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	ffffbfff 	.word	0xffffbfff

08005fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4393      	bics	r3, r2
 8005fe2:	001a      	movs	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	22f0      	movs	r2, #240	; 0xf0
 8005ff2:	4393      	bics	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	220a      	movs	r2, #10
 8006004:	4393      	bics	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	621a      	str	r2, [r3, #32]
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b006      	add	sp, #24
 8006022:	bd80      	pop	{r7, pc}

08006024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	2210      	movs	r2, #16
 8006036:	4393      	bics	r3, r2
 8006038:	001a      	movs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <TIM_TI2_ConfigInputStage+0x60>)
 800604e:	4013      	ands	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	22a0      	movs	r2, #160	; 0xa0
 8006060:	4393      	bics	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	46bd      	mov	sp, r7
 800607e:	b006      	add	sp, #24
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	ffff0fff 	.word	0xffff0fff

08006088 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2270      	movs	r2, #112	; 0x70
 800609c:	4393      	bics	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	2207      	movs	r2, #7
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	609a      	str	r2, [r3, #8]
}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b004      	add	sp, #16
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <TIM_ETR_SetConfig+0x3c>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	431a      	orrs	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b006      	add	sp, #24
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	ffff00ff 	.word	0xffff00ff

080060fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	221f      	movs	r2, #31
 800610c:	4013      	ands	r3, r2
 800610e:	2201      	movs	r2, #1
 8006110:	409a      	lsls	r2, r3
 8006112:	0013      	movs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	43d2      	mvns	r2, r2
 800611e:	401a      	ands	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	211f      	movs	r1, #31
 800612c:	400b      	ands	r3, r1
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4099      	lsls	r1, r3
 8006132:	000b      	movs	r3, r1
 8006134:	431a      	orrs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b006      	add	sp, #24
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	223c      	movs	r2, #60	; 0x3c
 8006152:	5c9b      	ldrb	r3, [r3, r2]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006158:	2302      	movs	r3, #2
 800615a:	e047      	b.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	223c      	movs	r2, #60	; 0x3c
 8006160:	2101      	movs	r1, #1
 8006162:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	223d      	movs	r2, #61	; 0x3d
 8006168:	2102      	movs	r1, #2
 800616a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2270      	movs	r2, #112	; 0x70
 8006180:	4393      	bics	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	05db      	lsls	r3, r3, #23
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d009      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a10      	ldr	r2, [pc, #64]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10c      	bne.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2280      	movs	r2, #128	; 0x80
 80061c4:	4393      	bics	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	223d      	movs	r2, #61	; 0x3d
 80061de:	2101      	movs	r1, #1
 80061e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	223c      	movs	r2, #60	; 0x3c
 80061e6:	2100      	movs	r1, #0
 80061e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b004      	add	sp, #16
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40014000 	.word	0x40014000

08006200 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	223c      	movs	r2, #60	; 0x3c
 8006212:	5c9b      	ldrb	r3, [r3, r2]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006218:	2302      	movs	r3, #2
 800621a:	e03e      	b.n	800629a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	223c      	movs	r2, #60	; 0x3c
 8006220:	2101      	movs	r1, #1
 8006222:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	4393      	bics	r3, r2
 800622a:	001a      	movs	r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006238:	401a      	ands	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006246:	401a      	ands	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a16      	ldr	r2, [pc, #88]	; (80062ac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006254:	401a      	ands	r2, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006262:	401a      	ands	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006270:	401a      	ands	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800627e:	401a      	ands	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223c      	movs	r2, #60	; 0x3c
 8006294:	2100      	movs	r1, #0
 8006296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b004      	add	sp, #16
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	fffffcff 	.word	0xfffffcff
 80062a8:	fffffbff 	.word	0xfffffbff
 80062ac:	fffff7ff 	.word	0xfffff7ff
 80062b0:	ffffefff 	.word	0xffffefff
 80062b4:	ffffdfff 	.word	0xffffdfff
 80062b8:	ffffbfff 	.word	0xffffbfff

080062bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b002      	add	sp, #8
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e044      	b.n	8006378 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d107      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2274      	movs	r2, #116	; 0x74
 80062fa:	2100      	movs	r1, #0
 80062fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f7fb fdfb 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	; 0x24
 800630a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2101      	movs	r1, #1
 8006318:	438a      	bics	r2, r1
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fc2e 	bl	8006b80 <UART_SetConfig>
 8006324:	0003      	movs	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e024      	b.n	8006378 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 fd61 	bl	8006e00 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	490d      	ldr	r1, [pc, #52]	; (8006380 <HAL_UART_Init+0xa4>)
 800634a:	400a      	ands	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	212a      	movs	r1, #42	; 0x2a
 800635a:	438a      	bics	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 fdf9 	bl	8006f68 <UART_CheckIdleState>
 8006376:	0003      	movs	r3, r0
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}
 8006380:	ffffb7ff 	.word	0xffffb7ff

08006384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	1dbb      	adds	r3, r7, #6
 8006392:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006398:	2b20      	cmp	r3, #32
 800639a:	d000      	beq.n	800639e <HAL_UART_Transmit+0x1a>
 800639c:	e096      	b.n	80064cc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_UART_Transmit+0x28>
 80063a4:	1dbb      	adds	r3, r7, #6
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e08e      	b.n	80064ce <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	015b      	lsls	r3, r3, #5
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d109      	bne.n	80063d0 <HAL_UART_Transmit+0x4c>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2201      	movs	r2, #1
 80063c8:	4013      	ands	r3, r2
 80063ca:	d001      	beq.n	80063d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e07e      	b.n	80064ce <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2274      	movs	r2, #116	; 0x74
 80063d4:	5c9b      	ldrb	r3, [r3, r2]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit+0x5a>
 80063da:	2302      	movs	r3, #2
 80063dc:	e077      	b.n	80064ce <HAL_UART_Transmit+0x14a>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2274      	movs	r2, #116	; 0x74
 80063e2:	2101      	movs	r1, #1
 80063e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	2100      	movs	r1, #0
 80063ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2221      	movs	r2, #33	; 0x21
 80063f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063f4:	f7fb feb6 	bl	8002164 <HAL_GetTick>
 80063f8:	0003      	movs	r3, r0
 80063fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1dba      	adds	r2, r7, #6
 8006400:	2150      	movs	r1, #80	; 0x50
 8006402:	8812      	ldrh	r2, [r2, #0]
 8006404:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1dba      	adds	r2, r7, #6
 800640a:	2152      	movs	r1, #82	; 0x52
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	429a      	cmp	r2, r3
 800641a:	d108      	bne.n	800642e <HAL_UART_Transmit+0xaa>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e003      	b.n	8006436 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2274      	movs	r2, #116	; 0x74
 800643a:	2100      	movs	r1, #0
 800643c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800643e:	e02d      	b.n	800649c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	0013      	movs	r3, r2
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	f000 fdd3 	bl	8006ff8 <UART_WaitOnFlagUntilTimeout>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d001      	beq.n	800645a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e039      	b.n	80064ce <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	05d2      	lsls	r2, r2, #23
 800646a:	0dd2      	lsrs	r2, r2, #23
 800646c:	b292      	uxth	r2, r2
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	3302      	adds	r3, #2
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e008      	b.n	800648a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	b292      	uxth	r2, r2
 8006482:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2252      	movs	r2, #82	; 0x52
 800648e:	5a9b      	ldrh	r3, [r3, r2]
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b299      	uxth	r1, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2252      	movs	r2, #82	; 0x52
 800649a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2252      	movs	r2, #82	; 0x52
 80064a0:	5a9b      	ldrh	r3, [r3, r2]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1cb      	bne.n	8006440 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	0013      	movs	r3, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	f000 fd9f 	bl	8006ff8 <UART_WaitOnFlagUntilTimeout>
 80064ba:	1e03      	subs	r3, r0, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e005      	b.n	80064ce <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	0018      	movs	r0, r3
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b008      	add	sp, #32
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	1dbb      	adds	r3, r7, #6
 80064e2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d150      	bne.n	800658e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_Receive_IT+0x24>
 80064f2:	1dbb      	adds	r3, r7, #6
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e048      	b.n	8006590 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	015b      	lsls	r3, r3, #5
 8006506:	429a      	cmp	r2, r3
 8006508:	d109      	bne.n	800651e <HAL_UART_Receive_IT+0x48>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2201      	movs	r2, #1
 8006516:	4013      	ands	r3, r2
 8006518:	d001      	beq.n	800651e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e038      	b.n	8006590 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2274      	movs	r2, #116	; 0x74
 8006522:	5c9b      	ldrb	r3, [r3, r2]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UART_Receive_IT+0x56>
 8006528:	2302      	movs	r3, #2
 800652a:	e031      	b.n	8006590 <HAL_UART_Receive_IT+0xba>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2274      	movs	r2, #116	; 0x74
 8006530:	2101      	movs	r1, #1
 8006532:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	4013      	ands	r3, r2
 8006546:	d019      	beq.n	800657c <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006548:	f3ef 8310 	mrs	r3, PRIMASK
 800654c:	613b      	str	r3, [r7, #16]
  return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f383 8810 	msr	PRIMASK, r3
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2180      	movs	r1, #128	; 0x80
 800656a:	04c9      	lsls	r1, r1, #19
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881a      	ldrh	r2, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 fdfb 	bl	8007180 <UART_Start_Receive_IT>
 800658a:	0003      	movs	r3, r0
 800658c:	e000      	b.n	8006590 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	0018      	movs	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	b008      	add	sp, #32
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b0ab      	sub	sp, #172	; 0xac
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	22a4      	movs	r2, #164	; 0xa4
 80065a8:	18b9      	adds	r1, r7, r2
 80065aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	20a0      	movs	r0, #160	; 0xa0
 80065b4:	1839      	adds	r1, r7, r0
 80065b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	219c      	movs	r1, #156	; 0x9c
 80065c0:	1879      	adds	r1, r7, r1
 80065c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065c4:	0011      	movs	r1, r2
 80065c6:	18bb      	adds	r3, r7, r2
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a99      	ldr	r2, [pc, #612]	; (8006830 <HAL_UART_IRQHandler+0x298>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2298      	movs	r2, #152	; 0x98
 80065d0:	18bc      	adds	r4, r7, r2
 80065d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80065d4:	18bb      	adds	r3, r7, r2
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2220      	movs	r2, #32
 80065e2:	4013      	ands	r3, r2
 80065e4:	d00f      	beq.n	8006606 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065e6:	183b      	adds	r3, r7, r0
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2220      	movs	r2, #32
 80065ec:	4013      	ands	r3, r2
 80065ee:	d00a      	beq.n	8006606 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d100      	bne.n	80065fa <HAL_UART_IRQHandler+0x62>
 80065f8:	e296      	b.n	8006b28 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	0010      	movs	r0, r2
 8006602:	4798      	blx	r3
      }
      return;
 8006604:	e290      	b.n	8006b28 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006606:	2398      	movs	r3, #152	; 0x98
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d100      	bne.n	8006612 <HAL_UART_IRQHandler+0x7a>
 8006610:	e114      	b.n	800683c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006612:	239c      	movs	r3, #156	; 0x9c
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	4013      	ands	r3, r2
 800661c:	d106      	bne.n	800662c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800661e:	23a0      	movs	r3, #160	; 0xa0
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a83      	ldr	r2, [pc, #524]	; (8006834 <HAL_UART_IRQHandler+0x29c>)
 8006626:	4013      	ands	r3, r2
 8006628:	d100      	bne.n	800662c <HAL_UART_IRQHandler+0x94>
 800662a:	e107      	b.n	800683c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800662c:	23a4      	movs	r3, #164	; 0xa4
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	4013      	ands	r3, r2
 8006636:	d012      	beq.n	800665e <HAL_UART_IRQHandler+0xc6>
 8006638:	23a0      	movs	r3, #160	; 0xa0
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	2380      	movs	r3, #128	; 0x80
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	589b      	ldr	r3, [r3, r2]
 8006654:	2201      	movs	r2, #1
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800665e:	23a4      	movs	r3, #164	; 0xa4
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2202      	movs	r2, #2
 8006666:	4013      	ands	r3, r2
 8006668:	d011      	beq.n	800668e <HAL_UART_IRQHandler+0xf6>
 800666a:	239c      	movs	r3, #156	; 0x9c
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d00b      	beq.n	800668e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2202      	movs	r2, #2
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	589b      	ldr	r3, [r3, r2]
 8006684:	2204      	movs	r2, #4
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800668e:	23a4      	movs	r3, #164	; 0xa4
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2204      	movs	r2, #4
 8006696:	4013      	ands	r3, r2
 8006698:	d011      	beq.n	80066be <HAL_UART_IRQHandler+0x126>
 800669a:	239c      	movs	r3, #156	; 0x9c
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2204      	movs	r2, #4
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	589b      	ldr	r3, [r3, r2]
 80066b4:	2202      	movs	r2, #2
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066be:	23a4      	movs	r3, #164	; 0xa4
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4013      	ands	r3, r2
 80066c8:	d017      	beq.n	80066fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066ca:	23a0      	movs	r3, #160	; 0xa0
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2220      	movs	r2, #32
 80066d2:	4013      	ands	r3, r2
 80066d4:	d105      	bne.n	80066e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066d6:	239c      	movs	r3, #156	; 0x9c
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2208      	movs	r2, #8
 80066e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	589b      	ldr	r3, [r3, r2]
 80066f0:	2208      	movs	r2, #8
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066fa:	23a4      	movs	r3, #164	; 0xa4
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4013      	ands	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_UART_IRQHandler+0x198>
 8006708:	23a0      	movs	r3, #160	; 0xa0
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	04db      	lsls	r3, r3, #19
 8006712:	4013      	ands	r3, r2
 8006714:	d00c      	beq.n	8006730 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2280      	movs	r2, #128	; 0x80
 8006724:	589b      	ldr	r3, [r3, r2]
 8006726:	2220      	movs	r2, #32
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2180      	movs	r1, #128	; 0x80
 800672e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	589b      	ldr	r3, [r3, r2]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d100      	bne.n	800673c <HAL_UART_IRQHandler+0x1a4>
 800673a:	e1f7      	b.n	8006b2c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800673c:	23a4      	movs	r3, #164	; 0xa4
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2220      	movs	r2, #32
 8006744:	4013      	ands	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006748:	23a0      	movs	r3, #160	; 0xa0
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2220      	movs	r2, #32
 8006750:	4013      	ands	r3, r2
 8006752:	d008      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	0010      	movs	r0, r2
 8006764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2280      	movs	r2, #128	; 0x80
 800676a:	589b      	ldr	r3, [r3, r2]
 800676c:	2194      	movs	r1, #148	; 0x94
 800676e:	187a      	adds	r2, r7, r1
 8006770:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	4013      	ands	r3, r2
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d004      	beq.n	800678a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006780:	187b      	adds	r3, r7, r1
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2228      	movs	r2, #40	; 0x28
 8006786:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006788:	d047      	beq.n	800681a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 fd93 	bl	80072b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2240      	movs	r2, #64	; 0x40
 800679a:	4013      	ands	r3, r2
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d137      	bne.n	8006810 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a0:	f3ef 8310 	mrs	r3, PRIMASK
 80067a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80067a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a8:	2090      	movs	r0, #144	; 0x90
 80067aa:	183a      	adds	r2, r7, r0
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	438a      	bics	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	183b      	adds	r3, r7, r0
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067d2:	f383 8810 	msr	PRIMASK, r3
}
 80067d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d012      	beq.n	8006806 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a14      	ldr	r2, [pc, #80]	; (8006838 <HAL_UART_IRQHandler+0x2a0>)
 80067e6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fc fb1f 	bl	8002e30 <HAL_DMA_Abort_IT>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d01a      	beq.n	800682c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006800:	0018      	movs	r0, r3
 8006802:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e012      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 f9a5 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680e:	e00d      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0018      	movs	r0, r3
 8006814:	f000 f9a0 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e008      	b.n	800682c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	0018      	movs	r0, r3
 800681e:	f000 f99b 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2280      	movs	r2, #128	; 0x80
 8006826:	2100      	movs	r1, #0
 8006828:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800682a:	e17f      	b.n	8006b2c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	46c0      	nop			; (mov r8, r8)
    return;
 800682e:	e17d      	b.n	8006b2c <HAL_UART_IRQHandler+0x594>
 8006830:	0000080f 	.word	0x0000080f
 8006834:	04000120 	.word	0x04000120
 8006838:	0800737d 	.word	0x0800737d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	2b01      	cmp	r3, #1
 8006842:	d000      	beq.n	8006846 <HAL_UART_IRQHandler+0x2ae>
 8006844:	e131      	b.n	8006aaa <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006846:	23a4      	movs	r3, #164	; 0xa4
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2210      	movs	r2, #16
 800684e:	4013      	ands	r3, r2
 8006850:	d100      	bne.n	8006854 <HAL_UART_IRQHandler+0x2bc>
 8006852:	e12a      	b.n	8006aaa <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006854:	23a0      	movs	r3, #160	; 0xa0
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2210      	movs	r2, #16
 800685c:	4013      	ands	r3, r2
 800685e:	d100      	bne.n	8006862 <HAL_UART_IRQHandler+0x2ca>
 8006860:	e123      	b.n	8006aaa <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2210      	movs	r2, #16
 8006868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	4013      	ands	r3, r2
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d000      	beq.n	800687a <HAL_UART_IRQHandler+0x2e2>
 8006878:	e09b      	b.n	80069b2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	217e      	movs	r1, #126	; 0x7e
 8006884:	187b      	adds	r3, r7, r1
 8006886:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006888:	187b      	adds	r3, r7, r1
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d100      	bne.n	8006892 <HAL_UART_IRQHandler+0x2fa>
 8006890:	e14e      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2258      	movs	r2, #88	; 0x58
 8006896:	5a9b      	ldrh	r3, [r3, r2]
 8006898:	187a      	adds	r2, r7, r1
 800689a:	8812      	ldrh	r2, [r2, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d300      	bcc.n	80068a2 <HAL_UART_IRQHandler+0x30a>
 80068a0:	e146      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	187a      	adds	r2, r7, r1
 80068a6:	215a      	movs	r1, #90	; 0x5a
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d06e      	beq.n	8006994 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068be:	67bb      	str	r3, [r7, #120]	; 0x78
 80068c0:	2301      	movs	r3, #1
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c6:	f383 8810 	msr	PRIMASK, r3
}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	499a      	ldr	r1, [pc, #616]	; (8006b40 <HAL_UART_IRQHandler+0x5a8>)
 80068d8:	400a      	ands	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	f383 8810 	msr	PRIMASK, r3
}
 80068e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f0:	677b      	str	r3, [r7, #116]	; 0x74
 80068f2:	2301      	movs	r3, #1
 80068f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f8:	f383 8810 	msr	PRIMASK, r3
}
 80068fc:	46c0      	nop			; (mov r8, r8)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2101      	movs	r1, #1
 800690a:	438a      	bics	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
 800690e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006910:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	f383 8810 	msr	PRIMASK, r3
}
 8006918:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800691a:	f3ef 8310 	mrs	r3, PRIMASK
 800691e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006920:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006922:	673b      	str	r3, [r7, #112]	; 0x70
 8006924:	2301      	movs	r3, #1
 8006926:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692a:	f383 8810 	msr	PRIMASK, r3
}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2140      	movs	r1, #64	; 0x40
 800693c:	438a      	bics	r2, r1
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006942:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006946:	f383 8810 	msr	PRIMASK, r3
}
 800694a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006958:	f3ef 8310 	mrs	r3, PRIMASK
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800695e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006962:	2301      	movs	r3, #1
 8006964:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006968:	f383 8810 	msr	PRIMASK, r3
}
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2110      	movs	r1, #16
 800697a:	438a      	bics	r2, r1
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006984:	f383 8810 	msr	PRIMASK, r3
}
 8006988:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	0018      	movs	r0, r3
 8006990:	f7fc fa16 	bl	8002dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2258      	movs	r2, #88	; 0x58
 8006998:	5a9a      	ldrh	r2, [r3, r2]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	215a      	movs	r1, #90	; 0x5a
 800699e:	5a5b      	ldrh	r3, [r3, r1]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 f8dc 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b0:	e0be      	b.n	8006b30 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2258      	movs	r2, #88	; 0x58
 80069b6:	5a99      	ldrh	r1, [r3, r2]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	225a      	movs	r2, #90	; 0x5a
 80069bc:	5a9b      	ldrh	r3, [r3, r2]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	208e      	movs	r0, #142	; 0x8e
 80069c2:	183b      	adds	r3, r7, r0
 80069c4:	1a8a      	subs	r2, r1, r2
 80069c6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	225a      	movs	r2, #90	; 0x5a
 80069cc:	5a9b      	ldrh	r3, [r3, r2]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d100      	bne.n	80069d6 <HAL_UART_IRQHandler+0x43e>
 80069d4:	e0ae      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80069d6:	183b      	adds	r3, r7, r0
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d100      	bne.n	80069e0 <HAL_UART_IRQHandler+0x448>
 80069de:	e0a9      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e0:	f3ef 8310 	mrs	r3, PRIMASK
 80069e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80069e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069e8:	2488      	movs	r4, #136	; 0x88
 80069ea:	193a      	adds	r2, r7, r4
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	2301      	movs	r3, #1
 80069f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f383 8810 	msr	PRIMASK, r3
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	494f      	ldr	r1, [pc, #316]	; (8006b44 <HAL_UART_IRQHandler+0x5ac>)
 8006a06:	400a      	ands	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f383 8810 	msr	PRIMASK, r3
}
 8006a16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a18:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a1e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	2484      	movs	r4, #132	; 0x84
 8006a22:	193a      	adds	r2, r7, r4
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	2301      	movs	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	438a      	bics	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	193b      	adds	r3, r7, r4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f383 8810 	msr	PRIMASK, r3
}
 8006a4e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6a:	2480      	movs	r4, #128	; 0x80
 8006a6c:	193a      	adds	r2, r7, r4
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	2301      	movs	r3, #1
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	f383 8810 	msr	PRIMASK, r3
}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2110      	movs	r1, #16
 8006a88:	438a      	bics	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	193b      	adds	r3, r7, r4
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	f383 8810 	msr	PRIMASK, r3
}
 8006a98:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a9a:	183b      	adds	r3, r7, r0
 8006a9c:	881a      	ldrh	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 f860 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa8:	e044      	b.n	8006b34 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aaa:	23a4      	movs	r3, #164	; 0xa4
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	035b      	lsls	r3, r3, #13
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d010      	beq.n	8006ada <HAL_UART_IRQHandler+0x542>
 8006ab8:	239c      	movs	r3, #156	; 0x9c
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	2380      	movs	r3, #128	; 0x80
 8006ac0:	03db      	lsls	r3, r3, #15
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	0352      	lsls	r2, r2, #13
 8006ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f000 fdfc 	bl	80076d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ad8:	e02f      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ada:	23a4      	movs	r3, #164	; 0xa4
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ae6:	23a0      	movs	r3, #160	; 0xa0
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2280      	movs	r2, #128	; 0x80
 8006aee:	4013      	ands	r3, r2
 8006af0:	d009      	beq.n	8006b06 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01e      	beq.n	8006b38 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	0010      	movs	r0, r2
 8006b02:	4798      	blx	r3
    }
    return;
 8006b04:	e018      	b.n	8006b38 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b06:	23a4      	movs	r3, #164	; 0xa4
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2240      	movs	r2, #64	; 0x40
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d013      	beq.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
 8006b12:	23a0      	movs	r3, #160	; 0xa0
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d00d      	beq.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 fc42 	bl	80073aa <UART_EndTransmit_IT>
    return;
 8006b26:	e008      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	e006      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	e004      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	e002      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	e000      	b.n	8006b3a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006b38:	46c0      	nop			; (mov r8, r8)
  }

}
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	b02b      	add	sp, #172	; 0xac
 8006b3e:	bd90      	pop	{r4, r7, pc}
 8006b40:	fffffeff 	.word	0xfffffeff
 8006b44:	fffffedf 	.word	0xfffffedf

08006b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b50:	46c0      	nop			; (mov r8, r8)
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b002      	add	sp, #8
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b002      	add	sp, #8
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	000a      	movs	r2, r1
 8006b72:	1cbb      	adds	r3, r7, #2
 8006b74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b002      	add	sp, #8
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b88:	231e      	movs	r3, #30
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a8d      	ldr	r2, [pc, #564]	; (8006de4 <UART_SetConfig+0x264>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4a88      	ldr	r2, [pc, #544]	; (8006de8 <UART_SetConfig+0x268>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	0019      	movs	r1, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a7f      	ldr	r2, [pc, #508]	; (8006dec <UART_SetConfig+0x26c>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	0019      	movs	r1, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a7b      	ldr	r2, [pc, #492]	; (8006df0 <UART_SetConfig+0x270>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d127      	bne.n	8006c56 <UART_SetConfig+0xd6>
 8006c06:	4b7b      	ldr	r3, [pc, #492]	; (8006df4 <UART_SetConfig+0x274>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d00d      	beq.n	8006c2e <UART_SetConfig+0xae>
 8006c12:	d81b      	bhi.n	8006c4c <UART_SetConfig+0xcc>
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d014      	beq.n	8006c42 <UART_SetConfig+0xc2>
 8006c18:	d818      	bhi.n	8006c4c <UART_SetConfig+0xcc>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <UART_SetConfig+0xa4>
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d00a      	beq.n	8006c38 <UART_SetConfig+0xb8>
 8006c22:	e013      	b.n	8006c4c <UART_SetConfig+0xcc>
 8006c24:	231f      	movs	r3, #31
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e021      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c2e:	231f      	movs	r3, #31
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	2202      	movs	r2, #2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e01c      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c38:	231f      	movs	r3, #31
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e017      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c42:	231f      	movs	r3, #31
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	2208      	movs	r2, #8
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	e012      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c4c:	231f      	movs	r3, #31
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	2210      	movs	r2, #16
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e00d      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a67      	ldr	r2, [pc, #412]	; (8006df8 <UART_SetConfig+0x278>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d104      	bne.n	8006c6a <UART_SetConfig+0xea>
 8006c60:	231f      	movs	r3, #31
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e003      	b.n	8006c72 <UART_SetConfig+0xf2>
 8006c6a:	231f      	movs	r3, #31
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	2210      	movs	r2, #16
 8006c70:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d15d      	bne.n	8006d3a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006c7e:	231f      	movs	r3, #31
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d015      	beq.n	8006cb4 <UART_SetConfig+0x134>
 8006c88:	dc18      	bgt.n	8006cbc <UART_SetConfig+0x13c>
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d00d      	beq.n	8006caa <UART_SetConfig+0x12a>
 8006c8e:	dc15      	bgt.n	8006cbc <UART_SetConfig+0x13c>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <UART_SetConfig+0x11a>
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d005      	beq.n	8006ca4 <UART_SetConfig+0x124>
 8006c98:	e010      	b.n	8006cbc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7fd fd63 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	61bb      	str	r3, [r7, #24]
        break;
 8006ca2:	e012      	b.n	8006cca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca4:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <UART_SetConfig+0x27c>)
 8006ca6:	61bb      	str	r3, [r7, #24]
        break;
 8006ca8:	e00f      	b.n	8006cca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006caa:	f7fd fced 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	61bb      	str	r3, [r7, #24]
        break;
 8006cb2:	e00a      	b.n	8006cca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	61bb      	str	r3, [r7, #24]
        break;
 8006cba:	e006      	b.n	8006cca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cc0:	231e      	movs	r3, #30
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]
        break;
 8006cc8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d100      	bne.n	8006cd2 <UART_SetConfig+0x152>
 8006cd0:	e07b      	b.n	8006dca <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	005a      	lsls	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	18d2      	adds	r2, r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	0010      	movs	r0, r2
 8006ce6:	f7f9 fa0f 	bl	8000108 <__udivsi3>
 8006cea:	0003      	movs	r3, r0
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	d91c      	bls.n	8006d30 <UART_SetConfig+0x1b0>
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	2380      	movs	r3, #128	; 0x80
 8006cfa:	025b      	lsls	r3, r3, #9
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d217      	bcs.n	8006d30 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	200e      	movs	r0, #14
 8006d06:	183b      	adds	r3, r7, r0
 8006d08:	210f      	movs	r1, #15
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2207      	movs	r2, #7
 8006d16:	4013      	ands	r3, r2
 8006d18:	b299      	uxth	r1, r3
 8006d1a:	183b      	adds	r3, r7, r0
 8006d1c:	183a      	adds	r2, r7, r0
 8006d1e:	8812      	ldrh	r2, [r2, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	183a      	adds	r2, r7, r0
 8006d2a:	8812      	ldrh	r2, [r2, #0]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	e04c      	b.n	8006dca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006d30:	231e      	movs	r3, #30
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	e047      	b.n	8006dca <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d3a:	231f      	movs	r3, #31
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d015      	beq.n	8006d70 <UART_SetConfig+0x1f0>
 8006d44:	dc18      	bgt.n	8006d78 <UART_SetConfig+0x1f8>
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d00d      	beq.n	8006d66 <UART_SetConfig+0x1e6>
 8006d4a:	dc15      	bgt.n	8006d78 <UART_SetConfig+0x1f8>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <UART_SetConfig+0x1d6>
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d005      	beq.n	8006d60 <UART_SetConfig+0x1e0>
 8006d54:	e010      	b.n	8006d78 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d56:	f7fd fd05 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	61bb      	str	r3, [r7, #24]
        break;
 8006d5e:	e012      	b.n	8006d86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d60:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <UART_SetConfig+0x27c>)
 8006d62:	61bb      	str	r3, [r7, #24]
        break;
 8006d64:	e00f      	b.n	8006d86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d66:	f7fd fc8f 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	61bb      	str	r3, [r7, #24]
        break;
 8006d6e:	e00a      	b.n	8006d86 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	61bb      	str	r3, [r7, #24]
        break;
 8006d76:	e006      	b.n	8006d86 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d7c:	231e      	movs	r3, #30
 8006d7e:	18fb      	adds	r3, r7, r3
 8006d80:	2201      	movs	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
        break;
 8006d84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01e      	beq.n	8006dca <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	085a      	lsrs	r2, r3, #1
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	18d2      	adds	r2, r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	0010      	movs	r0, r2
 8006d9e:	f7f9 f9b3 	bl	8000108 <__udivsi3>
 8006da2:	0003      	movs	r3, r0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b0f      	cmp	r3, #15
 8006dac:	d909      	bls.n	8006dc2 <UART_SetConfig+0x242>
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	025b      	lsls	r3, r3, #9
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d204      	bcs.n	8006dc2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e003      	b.n	8006dca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc2:	231e      	movs	r3, #30
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dd6:	231e      	movs	r3, #30
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	781b      	ldrb	r3, [r3, #0]
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b008      	add	sp, #32
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	ffff69f3 	.word	0xffff69f3
 8006de8:	ffffcfff 	.word	0xffffcfff
 8006dec:	fffff4ff 	.word	0xfffff4ff
 8006df0:	40013800 	.word	0x40013800
 8006df4:	40021000 	.word	0x40021000
 8006df8:	40004400 	.word	0x40004400
 8006dfc:	007a1200 	.word	0x007a1200

08006e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4a4a      	ldr	r2, [pc, #296]	; (8006f44 <UART_AdvFeatureConfig+0x144>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4013      	ands	r3, r2
 8006e32:	d00b      	beq.n	8006e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4a43      	ldr	r2, [pc, #268]	; (8006f48 <UART_AdvFeatureConfig+0x148>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2204      	movs	r2, #4
 8006e52:	4013      	ands	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a3b      	ldr	r2, [pc, #236]	; (8006f4c <UART_AdvFeatureConfig+0x14c>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	0019      	movs	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	2208      	movs	r2, #8
 8006e74:	4013      	ands	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a34      	ldr	r2, [pc, #208]	; (8006f50 <UART_AdvFeatureConfig+0x150>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	0019      	movs	r1, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2210      	movs	r2, #16
 8006e96:	4013      	ands	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4a2c      	ldr	r2, [pc, #176]	; (8006f54 <UART_AdvFeatureConfig+0x154>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	4a25      	ldr	r2, [pc, #148]	; (8006f58 <UART_AdvFeatureConfig+0x158>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	4013      	ands	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <UART_AdvFeatureConfig+0x15c>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	0019      	movs	r1, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006efa:	2380      	movs	r3, #128	; 0x80
 8006efc:	035b      	lsls	r3, r3, #13
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d10b      	bne.n	8006f1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <UART_AdvFeatureConfig+0x160>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	4013      	ands	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	4a0e      	ldr	r2, [pc, #56]	; (8006f64 <UART_AdvFeatureConfig+0x164>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	0019      	movs	r1, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }
}
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	fffdffff 	.word	0xfffdffff
 8006f48:	fffeffff 	.word	0xfffeffff
 8006f4c:	fffbffff 	.word	0xfffbffff
 8006f50:	ffff7fff 	.word	0xffff7fff
 8006f54:	ffffefff 	.word	0xffffefff
 8006f58:	ffffdfff 	.word	0xffffdfff
 8006f5c:	ffefffff 	.word	0xffefffff
 8006f60:	ff9fffff 	.word	0xff9fffff
 8006f64:	fff7ffff 	.word	0xfff7ffff

08006f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	2100      	movs	r1, #0
 8006f76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f78:	f7fb f8f4 	bl	8002164 <HAL_GetTick>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2208      	movs	r2, #8
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d10c      	bne.n	8006fa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2280      	movs	r2, #128	; 0x80
 8006f92:	0391      	lsls	r1, r2, #14
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <UART_CheckIdleState+0x8c>)
 8006f98:	9200      	str	r2, [sp, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f000 f82c 	bl	8006ff8 <UART_WaitOnFlagUntilTimeout>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d001      	beq.n	8006fa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e021      	b.n	8006fec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d10c      	bne.n	8006fd0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	03d1      	lsls	r1, r2, #15
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <UART_CheckIdleState+0x8c>)
 8006fc0:	9200      	str	r2, [sp, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f000 f818 	bl	8006ff8 <UART_WaitOnFlagUntilTimeout>
 8006fc8:	1e03      	subs	r3, r0, #0
 8006fca:	d001      	beq.n	8006fd0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e00d      	b.n	8006fec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2274      	movs	r2, #116	; 0x74
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b004      	add	sp, #16
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	01ffffff 	.word	0x01ffffff

08006ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b094      	sub	sp, #80	; 0x50
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	1dfb      	adds	r3, r7, #7
 8007006:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007008:	e0a3      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800700c:	3301      	adds	r3, #1
 800700e:	d100      	bne.n	8007012 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007010:	e09f      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007012:	f7fb f8a7 	bl	8002164 <HAL_GetTick>
 8007016:	0002      	movs	r2, r0
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800701e:	429a      	cmp	r2, r3
 8007020:	d302      	bcc.n	8007028 <UART_WaitOnFlagUntilTimeout+0x30>
 8007022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007024:	2b00      	cmp	r3, #0
 8007026:	d13d      	bne.n	80070a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007028:	f3ef 8310 	mrs	r3, PRIMASK
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	2301      	movs	r3, #1
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	f383 8810 	msr	PRIMASK, r3
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	494c      	ldr	r1, [pc, #304]	; (800717c <UART_WaitOnFlagUntilTimeout+0x184>)
 800704a:	400a      	ands	r2, r1
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007050:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f383 8810 	msr	PRIMASK, r3
}
 8007058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705a:	f3ef 8310 	mrs	r3, PRIMASK
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
 8007064:	2301      	movs	r3, #1
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2101      	movs	r1, #1
 800707c:	438a      	bics	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2274      	movs	r2, #116	; 0x74
 800709c:	2100      	movs	r1, #0
 800709e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e067      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2204      	movs	r2, #4
 80070ac:	4013      	ands	r3, r2
 80070ae:	d050      	beq.n	8007152 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69da      	ldr	r2, [r3, #28]
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	401a      	ands	r2, r3
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d146      	bne.n	8007152 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	0112      	lsls	r2, r2, #4
 80070cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ce:	f3ef 8310 	mrs	r3, PRIMASK
 80070d2:	613b      	str	r3, [r7, #16]
  return(result);
 80070d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f383 8810 	msr	PRIMASK, r3
}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4923      	ldr	r1, [pc, #140]	; (800717c <UART_WaitOnFlagUntilTimeout+0x184>)
 80070f0:	400a      	ands	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f383 8810 	msr	PRIMASK, r3
}
 80070fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007100:	f3ef 8310 	mrs	r3, PRIMASK
 8007104:	61fb      	str	r3, [r7, #28]
  return(result);
 8007106:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	64bb      	str	r3, [r7, #72]	; 0x48
 800710a:	2301      	movs	r3, #1
 800710c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f383 8810 	msr	PRIMASK, r3
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2101      	movs	r1, #1
 8007122:	438a      	bics	r2, r1
 8007124:	609a      	str	r2, [r3, #8]
 8007126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	f383 8810 	msr	PRIMASK, r3
}
 8007130:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	2120      	movs	r1, #32
 8007144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2274      	movs	r2, #116	; 0x74
 800714a:	2100      	movs	r1, #0
 800714c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e010      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4013      	ands	r3, r2
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	425a      	negs	r2, r3
 8007162:	4153      	adcs	r3, r2
 8007164:	b2db      	uxtb	r3, r3
 8007166:	001a      	movs	r2, r3
 8007168:	1dfb      	adds	r3, r7, #7
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d100      	bne.n	8007172 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007170:	e74b      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	0018      	movs	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	b014      	add	sp, #80	; 0x50
 800717a:	bd80      	pop	{r7, pc}
 800717c:	fffffe5f 	.word	0xfffffe5f

08007180 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08c      	sub	sp, #48	; 0x30
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	1dbb      	adds	r3, r7, #6
 800718c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1dba      	adds	r2, r7, #6
 8007198:	2158      	movs	r1, #88	; 0x58
 800719a:	8812      	ldrh	r2, [r2, #0]
 800719c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1dba      	adds	r2, r7, #6
 80071a2:	215a      	movs	r1, #90	; 0x5a
 80071a4:	8812      	ldrh	r2, [r2, #0]
 80071a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	015b      	lsls	r3, r3, #5
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d10d      	bne.n	80071d6 <UART_Start_Receive_IT+0x56>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <UART_Start_Receive_IT+0x4c>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	225c      	movs	r2, #92	; 0x5c
 80071c6:	4939      	ldr	r1, [pc, #228]	; (80072ac <UART_Start_Receive_IT+0x12c>)
 80071c8:	5299      	strh	r1, [r3, r2]
 80071ca:	e01a      	b.n	8007202 <UART_Start_Receive_IT+0x82>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	225c      	movs	r2, #92	; 0x5c
 80071d0:	21ff      	movs	r1, #255	; 0xff
 80071d2:	5299      	strh	r1, [r3, r2]
 80071d4:	e015      	b.n	8007202 <UART_Start_Receive_IT+0x82>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <UART_Start_Receive_IT+0x7a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <UART_Start_Receive_IT+0x70>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	225c      	movs	r2, #92	; 0x5c
 80071ea:	21ff      	movs	r1, #255	; 0xff
 80071ec:	5299      	strh	r1, [r3, r2]
 80071ee:	e008      	b.n	8007202 <UART_Start_Receive_IT+0x82>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	225c      	movs	r2, #92	; 0x5c
 80071f4:	217f      	movs	r1, #127	; 0x7f
 80071f6:	5299      	strh	r1, [r3, r2]
 80071f8:	e003      	b.n	8007202 <UART_Start_Receive_IT+0x82>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	225c      	movs	r2, #92	; 0x5c
 80071fe:	2100      	movs	r1, #0
 8007200:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2280      	movs	r2, #128	; 0x80
 8007206:	2100      	movs	r1, #0
 8007208:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2222      	movs	r2, #34	; 0x22
 800720e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007210:	f3ef 8310 	mrs	r3, PRIMASK
 8007214:	61fb      	str	r3, [r7, #28]
  return(result);
 8007216:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	2301      	movs	r3, #1
 800721c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f383 8810 	msr	PRIMASK, r3
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2101      	movs	r1, #1
 8007232:	430a      	orrs	r2, r1
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	f383 8810 	msr	PRIMASK, r3
}
 8007240:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	015b      	lsls	r3, r3, #5
 800724a:	429a      	cmp	r2, r3
 800724c:	d107      	bne.n	800725e <UART_Start_Receive_IT+0xde>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <UART_Start_Receive_IT+0x130>)
 800725a:	665a      	str	r2, [r3, #100]	; 0x64
 800725c:	e002      	b.n	8007264 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <UART_Start_Receive_IT+0x134>)
 8007262:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2274      	movs	r2, #116	; 0x74
 8007268:	2100      	movs	r1, #0
 800726a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800726c:	f3ef 8310 	mrs	r3, PRIMASK
 8007270:	613b      	str	r3, [r7, #16]
  return(result);
 8007272:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f383 8810 	msr	PRIMASK, r3
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2190      	movs	r1, #144	; 0x90
 800728e:	0049      	lsls	r1, r1, #1
 8007290:	430a      	orrs	r2, r1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	0018      	movs	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b00c      	add	sp, #48	; 0x30
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	000001ff 	.word	0x000001ff
 80072b0:	08007569 	.word	0x08007569
 80072b4:	08007401 	.word	0x08007401

080072b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c0:	f3ef 8310 	mrs	r3, PRIMASK
 80072c4:	617b      	str	r3, [r7, #20]
  return(result);
 80072c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ca:	2301      	movs	r3, #1
 80072cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f383 8810 	msr	PRIMASK, r3
}
 80072d4:	46c0      	nop			; (mov r8, r8)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4925      	ldr	r1, [pc, #148]	; (8007378 <UART_EndRxTransfer+0xc0>)
 80072e2:	400a      	ands	r2, r1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f383 8810 	msr	PRIMASK, r3
}
 80072f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f2:	f3ef 8310 	mrs	r3, PRIMASK
 80072f6:	623b      	str	r3, [r7, #32]
  return(result);
 80072f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	633b      	str	r3, [r7, #48]	; 0x30
 80072fc:	2301      	movs	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	f383 8810 	msr	PRIMASK, r3
}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2101      	movs	r1, #1
 8007314:	438a      	bics	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f383 8810 	msr	PRIMASK, r3
}
 8007322:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007328:	2b01      	cmp	r3, #1
 800732a:	d118      	bne.n	800735e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732c:	f3ef 8310 	mrs	r3, PRIMASK
 8007330:	60bb      	str	r3, [r7, #8]
  return(result);
 8007332:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007336:	2301      	movs	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f383 8810 	msr	PRIMASK, r3
}
 8007340:	46c0      	nop			; (mov r8, r8)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2110      	movs	r1, #16
 800734e:	438a      	bics	r2, r1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f383 8810 	msr	PRIMASK, r3
}
 800735c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007370:	46c0      	nop			; (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	b00e      	add	sp, #56	; 0x38
 8007376:	bd80      	pop	{r7, pc}
 8007378:	fffffedf 	.word	0xfffffedf

0800737c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	225a      	movs	r2, #90	; 0x5a
 800738e:	2100      	movs	r1, #0
 8007390:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2252      	movs	r2, #82	; 0x52
 8007396:	2100      	movs	r1, #0
 8007398:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff fbdb 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b004      	add	sp, #16
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b2:	f3ef 8310 	mrs	r3, PRIMASK
 80073b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	2301      	movs	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2140      	movs	r1, #64	; 0x40
 80073d4:	438a      	bics	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f7ff fba8 	bl	8006b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b006      	add	sp, #24
 80073fe:	bd80      	pop	{r7, pc}

08007400 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	; 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007408:	203e      	movs	r0, #62	; 0x3e
 800740a:	183b      	adds	r3, r7, r0
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	215c      	movs	r1, #92	; 0x5c
 8007410:	5a52      	ldrh	r2, [r2, r1]
 8007412:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007418:	2b22      	cmp	r3, #34	; 0x22
 800741a:	d000      	beq.n	800741e <UART_RxISR_8BIT+0x1e>
 800741c:	e095      	b.n	800754a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	213c      	movs	r1, #60	; 0x3c
 8007424:	187b      	adds	r3, r7, r1
 8007426:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007428:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800742a:	187b      	adds	r3, r7, r1
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	183b      	adds	r3, r7, r0
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b2d9      	uxtb	r1, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	400a      	ands	r2, r1
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	225a      	movs	r2, #90	; 0x5a
 800744e:	5a9b      	ldrh	r3, [r3, r2]
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b299      	uxth	r1, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	225a      	movs	r2, #90	; 0x5a
 800745a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	225a      	movs	r2, #90	; 0x5a
 8007460:	5a9b      	ldrh	r3, [r3, r2]
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d178      	bne.n	800755a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007468:	f3ef 8310 	mrs	r3, PRIMASK
 800746c:	61bb      	str	r3, [r7, #24]
  return(result);
 800746e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
 8007472:	2301      	movs	r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f383 8810 	msr	PRIMASK, r3
}
 800747c:	46c0      	nop			; (mov r8, r8)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4936      	ldr	r1, [pc, #216]	; (8007564 <UART_RxISR_8BIT+0x164>)
 800748a:	400a      	ands	r2, r1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f383 8810 	msr	PRIMASK, r3
}
 8007498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800749a:	f3ef 8310 	mrs	r3, PRIMASK
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
 80074a4:	2301      	movs	r3, #1
 80074a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	f383 8810 	msr	PRIMASK, r3
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2101      	movs	r1, #1
 80074bc:	438a      	bics	r2, r1
 80074be:	609a      	str	r2, [r3, #8]
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	f383 8810 	msr	PRIMASK, r3
}
 80074ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d12f      	bne.n	8007540 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ec:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30
 80074f0:	2301      	movs	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f383 8810 	msr	PRIMASK, r3
}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2110      	movs	r1, #16
 8007508:	438a      	bics	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f383 8810 	msr	PRIMASK, r3
}
 8007516:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	2210      	movs	r2, #16
 8007520:	4013      	ands	r3, r2
 8007522:	2b10      	cmp	r3, #16
 8007524:	d103      	bne.n	800752e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2210      	movs	r2, #16
 800752c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2258      	movs	r2, #88	; 0x58
 8007532:	5a9a      	ldrh	r2, [r3, r2]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0011      	movs	r1, r2
 8007538:	0018      	movs	r0, r3
 800753a:	f7ff fb15 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800753e:	e00c      	b.n	800755a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f7f9 fbce 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 8007548:	e007      	b.n	800755a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2108      	movs	r1, #8
 8007556:	430a      	orrs	r2, r1
 8007558:	619a      	str	r2, [r3, #24]
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b010      	add	sp, #64	; 0x40
 8007560:	bd80      	pop	{r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	fffffedf 	.word	0xfffffedf

08007568 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b090      	sub	sp, #64	; 0x40
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007570:	203e      	movs	r0, #62	; 0x3e
 8007572:	183b      	adds	r3, r7, r0
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	215c      	movs	r1, #92	; 0x5c
 8007578:	5a52      	ldrh	r2, [r2, r1]
 800757a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007580:	2b22      	cmp	r3, #34	; 0x22
 8007582:	d000      	beq.n	8007586 <UART_RxISR_16BIT+0x1e>
 8007584:	e095      	b.n	80076b2 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	213c      	movs	r1, #60	; 0x3c
 800758c:	187b      	adds	r3, r7, r1
 800758e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007590:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007596:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007598:	187b      	adds	r3, r7, r1
 800759a:	183a      	adds	r2, r7, r0
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	8812      	ldrh	r2, [r2, #0]
 80075a0:	4013      	ands	r3, r2
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ac:	1c9a      	adds	r2, r3, #2
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	225a      	movs	r2, #90	; 0x5a
 80075b6:	5a9b      	ldrh	r3, [r3, r2]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b299      	uxth	r1, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	225a      	movs	r2, #90	; 0x5a
 80075c2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	225a      	movs	r2, #90	; 0x5a
 80075c8:	5a9b      	ldrh	r3, [r3, r2]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d178      	bne.n	80076c2 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d0:	f3ef 8310 	mrs	r3, PRIMASK
 80075d4:	617b      	str	r3, [r7, #20]
  return(result);
 80075d6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
 80075da:	2301      	movs	r3, #1
 80075dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	f383 8810 	msr	PRIMASK, r3
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4936      	ldr	r1, [pc, #216]	; (80076cc <UART_RxISR_16BIT+0x164>)
 80075f2:	400a      	ands	r2, r1
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007602:	f3ef 8310 	mrs	r3, PRIMASK
 8007606:	623b      	str	r3, [r7, #32]
  return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	633b      	str	r3, [r7, #48]	; 0x30
 800760c:	2301      	movs	r3, #1
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2101      	movs	r1, #1
 8007624:	438a      	bics	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	f383 8810 	msr	PRIMASK, r3
}
 8007632:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	2b01      	cmp	r3, #1
 8007646:	d12f      	bne.n	80076a8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800764e:	f3ef 8310 	mrs	r3, PRIMASK
 8007652:	60bb      	str	r3, [r7, #8]
  return(result);
 8007654:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007658:	2301      	movs	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f383 8810 	msr	PRIMASK, r3
}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2110      	movs	r1, #16
 8007670:	438a      	bics	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f383 8810 	msr	PRIMASK, r3
}
 800767e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	2210      	movs	r2, #16
 8007688:	4013      	ands	r3, r2
 800768a:	2b10      	cmp	r3, #16
 800768c:	d103      	bne.n	8007696 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2210      	movs	r2, #16
 8007694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2258      	movs	r2, #88	; 0x58
 800769a:	5a9a      	ldrh	r2, [r3, r2]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	0011      	movs	r1, r2
 80076a0:	0018      	movs	r0, r3
 80076a2:	f7ff fa61 	bl	8006b68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a6:	e00c      	b.n	80076c2 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	0018      	movs	r0, r3
 80076ac:	f7f9 fb1a 	bl	8000ce4 <HAL_UART_RxCpltCallback>
}
 80076b0:	e007      	b.n	80076c2 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2108      	movs	r1, #8
 80076be:	430a      	orrs	r2, r1
 80076c0:	619a      	str	r2, [r3, #24]
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b010      	add	sp, #64	; 0x40
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	fffffedf 	.word	0xfffffedf

080076d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	b002      	add	sp, #8
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	6019      	str	r1, [r3, #0]
 80076ec:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ee:	2317      	movs	r3, #23
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2274      	movs	r2, #116	; 0x74
 80076fa:	5c9b      	ldrb	r3, [r3, r2]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007700:	2302      	movs	r3, #2
 8007702:	e04a      	b.n	800779a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2274      	movs	r2, #116	; 0x74
 8007708:	2101      	movs	r1, #1
 800770a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2224      	movs	r2, #36	; 0x24
 8007710:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2101      	movs	r1, #1
 800771e:	438a      	bics	r2, r1
 8007720:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800772a:	4013      	ands	r3, r2
 800772c:	0019      	movs	r1, r3
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	f000 f860 	bl	800780e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2101      	movs	r1, #1
 800775a:	430a      	orrs	r2, r1
 800775c:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800775e:	f7fa fd01 	bl	8002164 <HAL_GetTick>
 8007762:	0003      	movs	r3, r0
 8007764:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2280      	movs	r2, #128	; 0x80
 800776a:	03d1      	lsls	r1, r2, #15
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	4a0e      	ldr	r2, [pc, #56]	; (80077a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007770:	9200      	str	r2, [sp, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	f7ff fc40 	bl	8006ff8 <UART_WaitOnFlagUntilTimeout>
 8007778:	1e03      	subs	r3, r0, #0
 800777a:	d004      	beq.n	8007786 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800777c:	2317      	movs	r3, #23
 800777e:	18fb      	adds	r3, r7, r3
 8007780:	2203      	movs	r2, #3
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	e002      	b.n	800778c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2274      	movs	r2, #116	; 0x74
 8007790:	2100      	movs	r1, #0
 8007792:	5499      	strb	r1, [r3, r2]

  return status;
 8007794:	2317      	movs	r3, #23
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	781b      	ldrb	r3, [r3, #0]
}
 800779a:	0018      	movs	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	b006      	add	sp, #24
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			; (mov r8, r8)
 80077a4:	ffcfffff 	.word	0xffcfffff
 80077a8:	01ffffff 	.word	0x01ffffff

080077ac <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2274      	movs	r2, #116	; 0x74
 80077b8:	5c9b      	ldrb	r3, [r3, r2]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_UARTEx_EnableStopMode+0x16>
 80077be:	2302      	movs	r3, #2
 80077c0:	e021      	b.n	8007806 <HAL_UARTEx_EnableStopMode+0x5a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2274      	movs	r2, #116	; 0x74
 80077c6:	2101      	movs	r1, #1
 80077c8:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ca:	f3ef 8310 	mrs	r3, PRIMASK
 80077ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d0:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	2301      	movs	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f383 8810 	msr	PRIMASK, r3
}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2102      	movs	r1, #2
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2274      	movs	r2, #116	; 0x74
 8007800:	2100      	movs	r1, #0
 8007802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	0018      	movs	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	b006      	add	sp, #24
 800780c:	bd80      	pop	{r7, pc}

0800780e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	6019      	str	r1, [r3, #0]
 800781a:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2210      	movs	r2, #16
 8007824:	4393      	bics	r3, r2
 8007826:	001a      	movs	r2, r3
 8007828:	1d3b      	adds	r3, r7, #4
 800782a:	889b      	ldrh	r3, [r3, #4]
 800782c:	0019      	movs	r1, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	0a19      	lsrs	r1, r3, #8
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	799b      	ldrb	r3, [r3, #6]
 8007844:	061a      	lsls	r2, r3, #24
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	46bd      	mov	sp, r7
 8007852:	b004      	add	sp, #16
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <__libc_init_array>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	2600      	movs	r6, #0
 800785c:	4d0c      	ldr	r5, [pc, #48]	; (8007890 <__libc_init_array+0x38>)
 800785e:	4c0d      	ldr	r4, [pc, #52]	; (8007894 <__libc_init_array+0x3c>)
 8007860:	1b64      	subs	r4, r4, r5
 8007862:	10a4      	asrs	r4, r4, #2
 8007864:	42a6      	cmp	r6, r4
 8007866:	d109      	bne.n	800787c <__libc_init_array+0x24>
 8007868:	2600      	movs	r6, #0
 800786a:	f000 f821 	bl	80078b0 <_init>
 800786e:	4d0a      	ldr	r5, [pc, #40]	; (8007898 <__libc_init_array+0x40>)
 8007870:	4c0a      	ldr	r4, [pc, #40]	; (800789c <__libc_init_array+0x44>)
 8007872:	1b64      	subs	r4, r4, r5
 8007874:	10a4      	asrs	r4, r4, #2
 8007876:	42a6      	cmp	r6, r4
 8007878:	d105      	bne.n	8007886 <__libc_init_array+0x2e>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	00b3      	lsls	r3, r6, #2
 800787e:	58eb      	ldr	r3, [r5, r3]
 8007880:	4798      	blx	r3
 8007882:	3601      	adds	r6, #1
 8007884:	e7ee      	b.n	8007864 <__libc_init_array+0xc>
 8007886:	00b3      	lsls	r3, r6, #2
 8007888:	58eb      	ldr	r3, [r5, r3]
 800788a:	4798      	blx	r3
 800788c:	3601      	adds	r6, #1
 800788e:	e7f2      	b.n	8007876 <__libc_init_array+0x1e>
 8007890:	080079a4 	.word	0x080079a4
 8007894:	080079a4 	.word	0x080079a4
 8007898:	080079a4 	.word	0x080079a4
 800789c:	080079a8 	.word	0x080079a8

080078a0 <memset>:
 80078a0:	0003      	movs	r3, r0
 80078a2:	1882      	adds	r2, r0, r2
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d100      	bne.n	80078aa <memset+0xa>
 80078a8:	4770      	bx	lr
 80078aa:	7019      	strb	r1, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	e7f9      	b.n	80078a4 <memset+0x4>

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
