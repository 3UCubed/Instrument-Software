
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008104  08008104  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008104  08008104  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008104  08008104  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800810c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000098  080081a4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080081a4  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016752  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5d  00000000  00000000  00036812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00039570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014181  00000000  00000000  0003bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f19  00000000  00000000  0004feb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078342  00000000  00000000  00068dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf0  00000000  00000000  000e1164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008000 	.word	0x08008000

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08008000 	.word	0x08008000

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR address of individual i2c sensor
 * @return int16_t integer result from sensor
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
  int16_t output;
  uint8_t buf[2];
  HAL_StatusTypeDef ret;
  buf[0] = REG_TEMP;
 8000250:	2200      	movs	r2, #0
 8000252:	2508      	movs	r5, #8
 8000254:	197b      	adds	r3, r7, r5
 8000256:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1,
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b299      	uxth	r1, r3
 800025e:	260d      	movs	r6, #13
 8000260:	19bc      	adds	r4, r7, r6
 8000262:	197a      	adds	r2, r7, r5
 8000264:	4825      	ldr	r0, [pc, #148]	; (80002fc <poll_i2c_sensor+0xb8>)
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2301      	movs	r3, #1
 800026e:	f003 f961 	bl	8003534 <HAL_I2C_Master_Transmit>
 8000272:	0003      	movs	r3, r0
 8000274:	7023      	strb	r3, [r4, #0]
                                1000);
  if (ret != HAL_OK)
 8000276:	19bb      	adds	r3, r7, r6
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d008      	beq.n	8000290 <poll_i2c_sensor+0x4c>
  {
    strcpy((char *)buf, "Error Tx\r\n");
 800027e:	197b      	adds	r3, r7, r5
 8000280:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <poll_i2c_sensor+0xbc>)
 8000282:	ca03      	ldmia	r2!, {r0, r1}
 8000284:	c303      	stmia	r3!, {r0, r1}
 8000286:	8811      	ldrh	r1, [r2, #0]
 8000288:	8019      	strh	r1, [r3, #0]
 800028a:	7892      	ldrb	r2, [r2, #2]
 800028c:	709a      	strb	r2, [r3, #2]
 800028e:	e02c      	b.n	80002ea <poll_i2c_sensor+0xa6>
  }
  else
  {
    /* Read 2 bytes from the temperature register */
    ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2,
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b299      	uxth	r1, r3
 8000296:	250d      	movs	r5, #13
 8000298:	197c      	adds	r4, r7, r5
 800029a:	2608      	movs	r6, #8
 800029c:	19ba      	adds	r2, r7, r6
 800029e:	4817      	ldr	r0, [pc, #92]	; (80002fc <poll_i2c_sensor+0xb8>)
 80002a0:	23fa      	movs	r3, #250	; 0xfa
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2302      	movs	r3, #2
 80002a8:	f003 fa4c 	bl	8003744 <HAL_I2C_Master_Receive>
 80002ac:	0003      	movs	r3, r0
 80002ae:	7023      	strb	r3, [r4, #0]
                                 1000);
    if (ret != HAL_OK)
 80002b0:	197b      	adds	r3, r7, r5
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <poll_i2c_sensor+0x86>
    {
      strcpy((char *)buf, "Error Rx\r\n");
 80002b8:	19bb      	adds	r3, r7, r6
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <poll_i2c_sensor+0xc0>)
 80002bc:	ca03      	ldmia	r2!, {r0, r1}
 80002be:	c303      	stmia	r3!, {r0, r1}
 80002c0:	8811      	ldrh	r1, [r2, #0]
 80002c2:	8019      	strh	r1, [r3, #0]
 80002c4:	7892      	ldrb	r2, [r2, #2]
 80002c6:	709a      	strb	r2, [r3, #2]
 80002c8:	e00f      	b.n	80002ea <poll_i2c_sensor+0xa6>
    }
    else
    {
      output = (int16_t)(buf[0] << 8);
 80002ca:	2008      	movs	r0, #8
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	021a      	lsls	r2, r3, #8
 80002d2:	210e      	movs	r1, #14
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	801a      	strh	r2, [r3, #0]
      output = (output | buf[1]) >> 3;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	5e9b      	ldrsh	r3, [r3, r2]
 80002de:	183a      	adds	r2, r7, r0
 80002e0:	7852      	ldrb	r2, [r2, #1]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	10da      	asrs	r2, r3, #3
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	801a      	strh	r2, [r3, #0]
    }
  }
  return output;
 80002ea:	230e      	movs	r3, #14
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	2200      	movs	r2, #0
 80002f0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b005      	add	sp, #20
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	2000014c 	.word	0x2000014c
 8000300:	08008018 	.word	0x08008018
 8000304:	08008024 	.word	0x08008024

08000308 <i2c>:
 * @brief called in hk routine to poll each i2c sensor
 *
 * @return int16_t* size 4 buffer to return i2c values
 */
int16_t *i2c()
{
 8000308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
  int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800030e:	2390      	movs	r3, #144	; 0x90
 8000310:	250e      	movs	r5, #14
 8000312:	197c      	adds	r4, r7, r5
 8000314:	0018      	movs	r0, r3
 8000316:	f7ff ff95 	bl	8000244 <poll_i2c_sensor>
 800031a:	0003      	movs	r3, r0
 800031c:	8023      	strh	r3, [r4, #0]
  int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800031e:	2394      	movs	r3, #148	; 0x94
 8000320:	260c      	movs	r6, #12
 8000322:	19bc      	adds	r4, r7, r6
 8000324:	0018      	movs	r0, r3
 8000326:	f7ff ff8d 	bl	8000244 <poll_i2c_sensor>
 800032a:	0003      	movs	r3, r0
 800032c:	8023      	strh	r3, [r4, #0]
  int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800032e:	2392      	movs	r3, #146	; 0x92
 8000330:	220a      	movs	r2, #10
 8000332:	18bc      	adds	r4, r7, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f7ff ff85 	bl	8000244 <poll_i2c_sensor>
 800033a:	0003      	movs	r3, r0
 800033c:	8023      	strh	r3, [r4, #0]
  int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800033e:	2396      	movs	r3, #150	; 0x96
 8000340:	2108      	movs	r1, #8
 8000342:	187c      	adds	r4, r7, r1
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff7d 	bl	8000244 <poll_i2c_sensor>
 800034a:	0003      	movs	r3, r0
 800034c:	8023      	strh	r3, [r4, #0]

  int16_t *results = malloc(4 * sizeof(int16_t));
 800034e:	2008      	movs	r0, #8
 8000350:	f007 fd2a 	bl	8007da8 <malloc>
 8000354:	0003      	movs	r3, r0
 8000356:	607b      	str	r3, [r7, #4]
  results[0] = output1;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	197a      	adds	r2, r7, r5
 800035c:	8812      	ldrh	r2, [r2, #0]
 800035e:	801a      	strh	r2, [r3, #0]
  results[1] = output2;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3302      	adds	r3, #2
 8000364:	19ba      	adds	r2, r7, r6
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	801a      	strh	r2, [r3, #0]
  results[2] = output3;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3304      	adds	r3, #4
 800036e:	220a      	movs	r2, #10
 8000370:	18ba      	adds	r2, r7, r2
 8000372:	8812      	ldrh	r2, [r2, #0]
 8000374:	801a      	strh	r2, [r3, #0]
  results[3] = output4;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3306      	adds	r3, #6
 800037a:	2108      	movs	r1, #8
 800037c:	187a      	adds	r2, r7, r1
 800037e:	8812      	ldrh	r2, [r2, #0]
 8000380:	801a      	strh	r2, [r3, #0]
  return results;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	0018      	movs	r0, r3
 8000386:	46bd      	mov	sp, r7
 8000388:	b005      	add	sp, #20
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800038c <hk_adc>:
 *
 * @param adc which adc to call (currently not being used)
 * @return uint16_t* results of hk adcs
 */
uint16_t *hk_adc(ADC_HandleTypeDef *adc)
{
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	b08b      	sub	sp, #44	; 0x2c
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000394:	2311      	movs	r3, #17
 8000396:	001a      	movs	r2, r3
 8000398:	494c      	ldr	r1, [pc, #304]	; (80004cc <hk_adc+0x140>)
 800039a:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <hk_adc+0x144>)
 800039c:	0018      	movs	r0, r3
 800039e:	f002 f84b 	bl	8002438 <HAL_ADC_Start_DMA>
                    adcChannelCount);

  uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80003a2:	2426      	movs	r4, #38	; 0x26
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	4a49      	ldr	r2, [pc, #292]	; (80004cc <hk_adc+0x140>)
 80003a8:	8852      	ldrh	r2, [r2, #2]
 80003aa:	801a      	strh	r2, [r3, #0]
  uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80003ac:	2524      	movs	r5, #36	; 0x24
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	4a46      	ldr	r2, [pc, #280]	; (80004cc <hk_adc+0x140>)
 80003b2:	8892      	ldrh	r2, [r2, #4]
 80003b4:	801a      	strh	r2, [r3, #0]
  uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80003b6:	2622      	movs	r6, #34	; 0x22
 80003b8:	19bb      	adds	r3, r7, r6
 80003ba:	4a44      	ldr	r2, [pc, #272]	; (80004cc <hk_adc+0x140>)
 80003bc:	88d2      	ldrh	r2, [r2, #6]
 80003be:	801a      	strh	r2, [r3, #0]
  uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80003c0:	2320      	movs	r3, #32
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	4a41      	ldr	r2, [pc, #260]	; (80004cc <hk_adc+0x140>)
 80003c6:	8912      	ldrh	r2, [r2, #8]
 80003c8:	801a      	strh	r2, [r3, #0]
  uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80003ca:	211e      	movs	r1, #30
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <hk_adc+0x140>)
 80003d0:	8952      	ldrh	r2, [r2, #10]
 80003d2:	801a      	strh	r2, [r3, #0]
  uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80003d4:	201c      	movs	r0, #28
 80003d6:	183b      	adds	r3, r7, r0
 80003d8:	4a3c      	ldr	r2, [pc, #240]	; (80004cc <hk_adc+0x140>)
 80003da:	8a52      	ldrh	r2, [r2, #18]
 80003dc:	801a      	strh	r2, [r3, #0]
  uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80003de:	231a      	movs	r3, #26
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	4a3a      	ldr	r2, [pc, #232]	; (80004cc <hk_adc+0x140>)
 80003e4:	8a92      	ldrh	r2, [r2, #20]
 80003e6:	801a      	strh	r2, [r3, #0]
  uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80003e8:	2218      	movs	r2, #24
 80003ea:	18bb      	adds	r3, r7, r2
 80003ec:	4a37      	ldr	r2, [pc, #220]	; (80004cc <hk_adc+0x140>)
 80003ee:	8ad2      	ldrh	r2, [r2, #22]
 80003f0:	801a      	strh	r2, [r3, #0]
  uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 80003f2:	2316      	movs	r3, #22
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <hk_adc+0x140>)
 80003f8:	8b12      	ldrh	r2, [r2, #24]
 80003fa:	801a      	strh	r2, [r3, #0]
  uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80003fc:	2214      	movs	r2, #20
 80003fe:	18bb      	adds	r3, r7, r2
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <hk_adc+0x140>)
 8000402:	8b52      	ldrh	r2, [r2, #26]
 8000404:	801a      	strh	r2, [r3, #0]
  uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000406:	2112      	movs	r1, #18
 8000408:	187b      	adds	r3, r7, r1
 800040a:	4a30      	ldr	r2, [pc, #192]	; (80004cc <hk_adc+0x140>)
 800040c:	8b92      	ldrh	r2, [r2, #28]
 800040e:	801a      	strh	r2, [r3, #0]
  uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000410:	2310      	movs	r3, #16
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <hk_adc+0x140>)
 8000416:	8bd2      	ldrh	r2, [r2, #30]
 8000418:	801a      	strh	r2, [r3, #0]
  uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 800041a:	210e      	movs	r1, #14
 800041c:	187b      	adds	r3, r7, r1
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <hk_adc+0x140>)
 8000420:	8c12      	ldrh	r2, [r2, #32]
 8000422:	801a      	strh	r2, [r3, #0]

  uint16_t *results = malloc(13 * sizeof(uint16_t));
 8000424:	201a      	movs	r0, #26
 8000426:	f007 fcbf 	bl	8007da8 <malloc>
 800042a:	0003      	movs	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]
  results[0] = MCU_TEMP;
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2210      	movs	r2, #16
 8000432:	18ba      	adds	r2, r7, r2
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	801a      	strh	r2, [r3, #0]
  results[1] = MCU_VREF;
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3302      	adds	r3, #2
 800043c:	210e      	movs	r1, #14
 800043e:	187a      	adds	r2, r7, r1
 8000440:	8812      	ldrh	r2, [r2, #0]
 8000442:	801a      	strh	r2, [r3, #0]
  results[2] = PA1;
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	3304      	adds	r3, #4
 8000448:	193a      	adds	r2, r7, r4
 800044a:	8812      	ldrh	r2, [r2, #0]
 800044c:	801a      	strh	r2, [r3, #0]
  results[3] = PA2;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3306      	adds	r3, #6
 8000452:	197a      	adds	r2, r7, r5
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	801a      	strh	r2, [r3, #0]
  results[4] = PC0;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	3308      	adds	r3, #8
 800045c:	201c      	movs	r0, #28
 800045e:	183a      	adds	r2, r7, r0
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	801a      	strh	r2, [r3, #0]
  results[5] = PA3;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	330a      	adds	r3, #10
 8000468:	19ba      	adds	r2, r7, r6
 800046a:	8812      	ldrh	r2, [r2, #0]
 800046c:	801a      	strh	r2, [r3, #0]
  results[6] = PC2;
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	330c      	adds	r3, #12
 8000472:	2418      	movs	r4, #24
 8000474:	193a      	adds	r2, r7, r4
 8000476:	8812      	ldrh	r2, [r2, #0]
 8000478:	801a      	strh	r2, [r3, #0]
  results[7] = PC3;
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	330e      	adds	r3, #14
 800047e:	2416      	movs	r4, #22
 8000480:	193a      	adds	r2, r7, r4
 8000482:	8812      	ldrh	r2, [r2, #0]
 8000484:	801a      	strh	r2, [r3, #0]
  results[8] = PC1;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	3310      	adds	r3, #16
 800048a:	201a      	movs	r0, #26
 800048c:	183a      	adds	r2, r7, r0
 800048e:	8812      	ldrh	r2, [r2, #0]
 8000490:	801a      	strh	r2, [r3, #0]
  results[9] = PC5;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3312      	adds	r3, #18
 8000496:	2412      	movs	r4, #18
 8000498:	193a      	adds	r2, r7, r4
 800049a:	8812      	ldrh	r2, [r2, #0]
 800049c:	801a      	strh	r2, [r3, #0]
  results[10] = PC4;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	3314      	adds	r3, #20
 80004a2:	2014      	movs	r0, #20
 80004a4:	183a      	adds	r2, r7, r0
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	801a      	strh	r2, [r3, #0]
  results[11] = PA5;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3316      	adds	r3, #22
 80004ae:	2220      	movs	r2, #32
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	8812      	ldrh	r2, [r2, #0]
 80004b4:	801a      	strh	r2, [r3, #0]
  results[12] = PA6;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	3318      	adds	r3, #24
 80004ba:	211e      	movs	r1, #30
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	8812      	ldrh	r2, [r2, #0]
 80004c0:	801a      	strh	r2, [r3, #0]

  return results;
 80004c2:	68bb      	ldr	r3, [r7, #8]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b00b      	add	sp, #44	; 0x2c
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	20000428 	.word	0x20000428
 80004d0:	200000b4 	.word	0x200000b4

080004d4 <erpa_adc>:
 * @brief polls erpa adcs
 *
 * @return uint16_t* results of erpa adcs
 */
uint16_t *erpa_adc()
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80004da:	2311      	movs	r3, #17
 80004dc:	001a      	movs	r2, r3
 80004de:	491b      	ldr	r1, [pc, #108]	; (800054c <erpa_adc+0x78>)
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <erpa_adc+0x7c>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 ffa8 	bl	8002438 <HAL_ADC_Start_DMA>
                    adcChannelCount);
  uint16_t PA0 = adcResultsDMA[0]; // ADC_IN0, END_mon: entrance/collimator monitor
 80004e8:	240e      	movs	r4, #14
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <erpa_adc+0x78>)
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	801a      	strh	r2, [r3, #0]
  uint16_t PA7 = adcResultsDMA[6]; // ADC_IN7, SWP_mon: Sweep voltage monitor
 80004f2:	250c      	movs	r5, #12
 80004f4:	197b      	adds	r3, r7, r5
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <erpa_adc+0x78>)
 80004f8:	8992      	ldrh	r2, [r2, #12]
 80004fa:	801a      	strh	r2, [r3, #0]
  uint16_t PB0 = adcResultsDMA[7]; // ADC_IN8, TMP 1: Sweep temperature
 80004fc:	260a      	movs	r6, #10
 80004fe:	19bb      	adds	r3, r7, r6
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <erpa_adc+0x78>)
 8000502:	89d2      	ldrh	r2, [r2, #14]
 8000504:	801a      	strh	r2, [r3, #0]
  uint16_t PB1 = adcResultsDMA[8]; // ADC_IN9, TMP 2: feedbacks
 8000506:	2308      	movs	r3, #8
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <erpa_adc+0x78>)
 800050c:	8a12      	ldrh	r2, [r2, #16]
 800050e:	801a      	strh	r2, [r3, #0]

  uint16_t *results = malloc(4 * sizeof(uint16_t));
 8000510:	2008      	movs	r0, #8
 8000512:	f007 fc49 	bl	8007da8 <malloc>
 8000516:	0003      	movs	r3, r0
 8000518:	607b      	str	r3, [r7, #4]

  results[0] = PA0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	193a      	adds	r2, r7, r4
 800051e:	8812      	ldrh	r2, [r2, #0]
 8000520:	801a      	strh	r2, [r3, #0]
  results[1] = PA7;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3302      	adds	r3, #2
 8000526:	197a      	adds	r2, r7, r5
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	801a      	strh	r2, [r3, #0]
  results[2] = PB0;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	19ba      	adds	r2, r7, r6
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	801a      	strh	r2, [r3, #0]
  results[3] = PB1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3306      	adds	r3, #6
 800053a:	2208      	movs	r2, #8
 800053c:	18ba      	adds	r2, r7, r2
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	801a      	strh	r2, [r3, #0]

  return results;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b005      	add	sp, #20
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054c:	20000428 	.word	0x20000428
 8000550:	200000b4 	.word	0x200000b4

08000554 <set_erpa_sweep>:
/**
 * @brief Set the erpa sweep value
 *
 */
void set_erpa_sweep()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  DAC->DHR12R1 = DAC_OUT[step];
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <set_erpa_sweep+0x1c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	0019      	movs	r1, r3
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <set_erpa_sweep+0x20>)
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <set_erpa_sweep+0x24>)
 8000562:	0089      	lsls	r1, r1, #2
 8000564:	588a      	ldr	r2, [r1, r2]
 8000566:	609a      	str	r2, [r3, #8]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	2000044a 	.word	0x2000044a
 8000574:	40007400 	.word	0x40007400
 8000578:	20000000 	.word	0x20000000

0800057c <do_auto_sweep>:
/**
 * @brief if auto sweep is enabled, will increase step
 *
 */
void do_auto_sweep()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  if (step == 7)
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <do_auto_sweep+0x4c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d103      	bne.n	8000590 <do_auto_sweep+0x14>
  {
    is_increasing = 0;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <do_auto_sweep+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e006      	b.n	800059e <do_auto_sweep+0x22>
  }
  else if (step == 0)
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <do_auto_sweep+0x4c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <do_auto_sweep+0x22>
  {
    is_increasing = 1;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <do_auto_sweep+0x50>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
  }

  if (is_increasing)
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <do_auto_sweep+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <do_auto_sweep+0x38>
  {
    step++;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <do_auto_sweep+0x4c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <do_auto_sweep+0x4c>)
 80005b0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    step--;
  }
}
 80005b2:	e005      	b.n	80005c0 <do_auto_sweep+0x44>
    step--;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <do_auto_sweep+0x4c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <do_auto_sweep+0x4c>)
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	2000044a 	.word	0x2000044a
 80005cc:	20000020 	.word	0x20000020

080005d0 <spi>:
 *
 * @param spi given spi peripheral
 * @return uint16_t raw value from reading spi peripheral
 */
uint16_t spi(SPI_HandleTypeDef spi)
{
 80005d0:	b084      	sub	sp, #16
 80005d2:	b5b0      	push	{r4, r5, r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	2518      	movs	r5, #24
 80005da:	197c      	adds	r4, r7, r5
 80005dc:	6020      	str	r0, [r4, #0]
 80005de:	6061      	str	r1, [r4, #4]
 80005e0:	60a2      	str	r2, [r4, #8]
 80005e2:	60e3      	str	r3, [r4, #12]
  /* Write to SPI (begin transfer?) */
  HAL_SPI_Transmit(&spi, (uint8_t *)&WRITE, 1, 1);
 80005e4:	4911      	ldr	r1, [pc, #68]	; (800062c <spi+0x5c>)
 80005e6:	1978      	adds	r0, r7, r5
 80005e8:	2301      	movs	r3, #1
 80005ea:	2201      	movs	r2, #1
 80005ec:	f004 fa78 	bl	8004ae0 <HAL_SPI_Transmit>
  spi.Instance->CR1 &= ~(1 << 10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 80005f0:	0029      	movs	r1, r5
 80005f2:	197b      	adds	r3, r7, r5
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <spi+0x60>)
 80005fe:	400a      	ands	r2, r1
 8000600:	601a      	str	r2, [r3, #0]
  while (!(spi.Instance->SR))
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	2218      	movs	r2, #24
 8000606:	18bb      	adds	r3, r7, r2
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <spi+0x34>
    ;
  uint16_t raw = spi.Instance->DR;
 8000610:	18bb      	adds	r3, r7, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68da      	ldr	r2, [r3, #12]
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	801a      	strh	r2, [r3, #0]
  return raw;
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	881b      	ldrh	r3, [r3, #0]
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bcb0      	pop	{r4, r5, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	b004      	add	sp, #16
 800062a:	4718      	bx	r3
 800062c:	08008050 	.word	0x08008050
 8000630:	fffffbff 	.word	0xfffffbff

08000634 <send_erpa_packet>:
 *
 * @param erpa_spi erpa spi raw value
 * @param erpa_adc_results erpa adc results
 */
void send_erpa_packet(int erpa_spi, uint16_t *erpa_adc_results)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]

  uint8_t erpa_buf[14];
  erpa_buf[0] = erpa_sync;                              // ERPA SYNC 0xAA MSB
 800063e:	22aa      	movs	r2, #170	; 0xaa
 8000640:	2108      	movs	r1, #8
 8000642:	187b      	adds	r3, r7, r1
 8000644:	701a      	strb	r2, [r3, #0]
  erpa_buf[1] = erpa_sync;                              // ERPA SYNC 0xAA LSB
 8000646:	22aa      	movs	r2, #170	; 0xaa
 8000648:	187b      	adds	r3, r7, r1
 800064a:	705a      	strb	r2, [r3, #1]
  erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8);             // ERPA SEQ # MSB
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <send_erpa_packet+0xd0>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b29b      	uxth	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	187b      	adds	r3, r7, r1
 8000658:	709a      	strb	r2, [r3, #2]
  erpa_buf[3] = (erpa_seq & 0xFF);                      // ERPA SEQ # MSB
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <send_erpa_packet+0xd0>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	187b      	adds	r3, r7, r1
 8000662:	70da      	strb	r2, [r3, #3]
  erpa_buf[4] = ((erpa_adc_results[0]) >> 8);           // ENDmon MSB
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2da      	uxtb	r2, r3
 800066e:	187b      	adds	r3, r7, r1
 8000670:	711a      	strb	r2, [r3, #4]
  erpa_buf[5] = (erpa_adc_results[0] & 0xFF);           // ENDmon LSB
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	187b      	adds	r3, r7, r1
 800067a:	715a      	strb	r2, [r3, #5]
  erpa_buf[6] = ((erpa_adc_results[1] & 0xFF00) >> 8);  // SWP Monitored MSB
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3302      	adds	r3, #2
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	187b      	adds	r3, r7, r1
 800068a:	719a      	strb	r2, [r3, #6]
  erpa_buf[7] = (erpa_adc_results[1] & 0xFF);           // SWP Monitored LSB
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3302      	adds	r3, #2
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	187b      	adds	r3, r7, r1
 8000696:	71da      	strb	r2, [r3, #7]
  erpa_buf[8] = ((erpa_adc_results[2] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	3304      	adds	r3, #4
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	721a      	strb	r2, [r3, #8]
  erpa_buf[9] = (erpa_adc_results[2] & 0xFF);           // TEMPURATURE 1 LSB
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	3304      	adds	r3, #4
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	725a      	strb	r2, [r3, #9]
  erpa_buf[10] = ((erpa_adc_results[3] & 0xFF00) >> 8); // TEMPURATURE 2 MSB
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	3306      	adds	r3, #6
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	729a      	strb	r2, [r3, #10]
  erpa_buf[11] = (erpa_adc_results[3] & 0xFF);          // TEMPURATURE 2 LSB
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3306      	adds	r3, #6
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	72da      	strb	r2, [r3, #11]
  erpa_buf[12] = ((erpa_spi & 0xFF00) >> 8);            // ERPA eADC MSB
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	121b      	asrs	r3, r3, #8
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	731a      	strb	r2, [r3, #12]
  erpa_buf[13] = (erpa_spi & 0xFF);                     // ERPA eADC LSB
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	735a      	strb	r2, [r3, #13]

  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 80006e2:	1879      	adds	r1, r7, r1
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <send_erpa_packet+0xd4>)
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	220e      	movs	r2, #14
 80006ea:	f006 f8c9 	bl	8006880 <HAL_UART_Transmit>

  erpa_seq++;
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <send_erpa_packet+0xd0>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <send_erpa_packet+0xd0>)
 80006f8:	801a      	strh	r2, [r3, #0]
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b006      	add	sp, #24
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	2000045c 	.word	0x2000045c
 8000708:	20000338 	.word	0x20000338

0800070c <send_hk_packet>:
 *
 * @param i2c_values values of all i2c sensors
 * @param hk_adc_results hk adc results
 */
void send_hk_packet(int16_t *i2c_values, uint16_t *hk_adc_results)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]

  uint8_t hk_buf[38];                              // buffer that is filled with HK packet info
  hk_buf[0] = hk_sync;                             // HK SYNC 0xCC MSB					0 SYNC
 8000716:	22cc      	movs	r2, #204	; 0xcc
 8000718:	2108      	movs	r1, #8
 800071a:	187b      	adds	r3, r7, r1
 800071c:	701a      	strb	r2, [r3, #0]
  hk_buf[1] = hk_sync;                             // HK SYNC 0xCC LSB
 800071e:	22cc      	movs	r2, #204	; 0xcc
 8000720:	187b      	adds	r3, r7, r1
 8000722:	705a      	strb	r2, [r3, #1]
  hk_buf[2] = ((hk_seq & 0xFF00) >> 8);            // HK SEQ # MSB		1 SEQUENCE
 8000724:	4b88      	ldr	r3, [pc, #544]	; (8000948 <send_hk_packet+0x23c>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	b29b      	uxth	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	187b      	adds	r3, r7, r1
 8000730:	709a      	strb	r2, [r3, #2]
  hk_buf[3] = (hk_seq & 0xFF);                     // HK SEQ # LSB
 8000732:	4b85      	ldr	r3, [pc, #532]	; (8000948 <send_hk_packet+0x23c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	187b      	adds	r3, r7, r1
 800073a:	70da      	strb	r2, [r3, #3]
  hk_buf[4] = ((hk_adc_results[0] & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29b      	uxth	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	187b      	adds	r3, r7, r1
 8000748:	711a      	strb	r2, [r3, #4]
  hk_buf[5] = (hk_adc_results[0] & 0xFF);          // VSENSE LSB
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	715a      	strb	r2, [r3, #5]
  hk_buf[6] = ((hk_adc_results[1] & 0xFF00) >> 8);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3302      	adds	r3, #2
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	b29b      	uxth	r3, r3
 800075e:	b2da      	uxtb	r2, r3
 8000760:	187b      	adds	r3, r7, r1
 8000762:	719a      	strb	r2, [r3, #6]
  hk_buf[7] = (hk_adc_results[1] & 0xFF);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	3302      	adds	r3, #2
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	187b      	adds	r3, r7, r1
 800076e:	71da      	strb	r2, [r3, #7]
  hk_buf[8] = ((i2c_values[0] & 0xFF00) >> 8);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	5e9b      	ldrsh	r3, [r3, r2]
 8000776:	121b      	asrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	187b      	adds	r3, r7, r1
 800077c:	721a      	strb	r2, [r3, #8]
  hk_buf[9] = (i2c_values[0] & 0xFF);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	5e9b      	ldrsh	r3, [r3, r2]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	0008      	movs	r0, r1
 8000788:	187b      	adds	r3, r7, r1
 800078a:	725a      	strb	r2, [r3, #9]
  hk_buf[10] = ((i2c_values[1] & 0xFF00) >> 8);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3302      	adds	r3, #2
 8000790:	2200      	movs	r2, #0
 8000792:	5e9b      	ldrsh	r3, [r3, r2]
 8000794:	121b      	asrs	r3, r3, #8
 8000796:	b2da      	uxtb	r2, r3
 8000798:	183b      	adds	r3, r7, r0
 800079a:	729a      	strb	r2, [r3, #10]
  hk_buf[11] = (i2c_values[1] & 0xFF);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	2200      	movs	r2, #0
 80007a2:	5e9b      	ldrsh	r3, [r3, r2]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	183b      	adds	r3, r7, r0
 80007a8:	72da      	strb	r2, [r3, #11]
  hk_buf[12] = ((i2c_values[2] & 0xFF00) >> 8);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	5e9b      	ldrsh	r3, [r3, r2]
 80007b2:	121b      	asrs	r3, r3, #8
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	183b      	adds	r3, r7, r0
 80007b8:	731a      	strb	r2, [r3, #12]
  hk_buf[13] = (i2c_values[2] & 0xFF);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3304      	adds	r3, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	5e9b      	ldrsh	r3, [r3, r2]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	735a      	strb	r2, [r3, #13]
  hk_buf[14] = ((i2c_values[3] & 0xFF00) >> 8);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3306      	adds	r3, #6
 80007cc:	2200      	movs	r2, #0
 80007ce:	5e9b      	ldrsh	r3, [r3, r2]
 80007d0:	121b      	asrs	r3, r3, #8
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	183b      	adds	r3, r7, r0
 80007d6:	739a      	strb	r2, [r3, #14]
  hk_buf[15] = (i2c_values[3] & 0xFF);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3306      	adds	r3, #6
 80007dc:	2200      	movs	r2, #0
 80007de:	5e9b      	ldrsh	r3, [r3, r2]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	73da      	strb	r2, [r3, #15]
  hk_buf[16] = ((hk_adc_results[2] & 0xFF00) >> 8);  // BUS_Vmon MSB			2 BUS_VMON PA1
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	3304      	adds	r3, #4
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	183b      	adds	r3, r7, r0
 80007f4:	741a      	strb	r2, [r3, #16]
  hk_buf[17] = (hk_adc_results[2] & 0xFF);           // BUS_Vmon LSB
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	3304      	adds	r3, #4
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	183b      	adds	r3, r7, r0
 8000800:	745a      	strb	r2, [r3, #17]
  hk_buf[18] = ((hk_adc_results[3] & 0xFF00) >> 8);  // BUS_Imon MSB			3 BUS_IMON PA2
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	3306      	adds	r3, #6
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2da      	uxtb	r2, r3
 800080e:	183b      	adds	r3, r7, r0
 8000810:	749a      	strb	r2, [r3, #18]
  hk_buf[19] = (hk_adc_results[3] & 0xFF);           // BUS_Imon LSB
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3306      	adds	r3, #6
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	183b      	adds	r3, r7, r0
 800081c:	74da      	strb	r2, [r3, #19]
  hk_buf[20] = ((hk_adc_results[4] & 0xFF00) >> 8);  // 2v5_mon MSB			7 2V5_MON PC0
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	3308      	adds	r3, #8
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	183b      	adds	r3, r7, r0
 800082c:	751a      	strb	r2, [r3, #20]
  hk_buf[21] = (hk_adc_results[4] & 0xFF);           // 2v5_mon LSB
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	3308      	adds	r3, #8
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	183b      	adds	r3, r7, r0
 8000838:	755a      	strb	r2, [r3, #21]
  hk_buf[22] = ((hk_adc_results[5] & 0xFF00) >> 8);  // 3v3_mon MSB			4 3v3_MON PA3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	330a      	adds	r3, #10
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	b2da      	uxtb	r2, r3
 8000846:	183b      	adds	r3, r7, r0
 8000848:	759a      	strb	r2, [r3, #22]
  hk_buf[23] = (hk_adc_results[5] & 0xFF);           // 3v3_mon LSB
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	330a      	adds	r3, #10
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	183b      	adds	r3, r7, r0
 8000854:	75da      	strb	r2, [r3, #23]
  hk_buf[24] = ((hk_adc_results[6]) >> 8);           // 5v_mon MSB			9 5V_MON PC2
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	330c      	adds	r3, #12
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	183b      	adds	r3, r7, r0
 8000864:	761a      	strb	r2, [r3, #24]
  hk_buf[25] = (hk_adc_results[6] & 0xFF);           // 5v_mon LSB
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	330c      	adds	r3, #12
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	183b      	adds	r3, r7, r0
 8000870:	765a      	strb	r2, [r3, #25]
  hk_buf[26] = ((hk_adc_results[7] & 0xFF00) >> 8);  // n3v3_mon MSB			10 N3V3_MON PC3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	330e      	adds	r3, #14
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b29b      	uxth	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	183b      	adds	r3, r7, r0
 8000880:	769a      	strb	r2, [r3, #26]
  hk_buf[27] = (hk_adc_results[7] & 0xFF);           // n3v3_mon LSB
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	330e      	adds	r3, #14
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	183b      	adds	r3, r7, r0
 800088c:	76da      	strb	r2, [r3, #27]
  hk_buf[28] = ((hk_adc_results[8] & 0xFF00) >> 8);  // n5v_mon MSB			8 N5V_MON PC1
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3310      	adds	r3, #16
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	183b      	adds	r3, r7, r0
 800089c:	771a      	strb	r2, [r3, #28]
  hk_buf[29] = (hk_adc_results[8] & 0xFF);           // n5v_mon LSB
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3310      	adds	r3, #16
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	183b      	adds	r3, r7, r0
 80008a8:	775a      	strb	r2, [r3, #29]
  hk_buf[30] = ((hk_adc_results[9] & 0xFF00) >> 8);  // 15v_mon MSB			12 15V_MON PC5
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	3312      	adds	r3, #18
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	183b      	adds	r3, r7, r0
 80008b8:	779a      	strb	r2, [r3, #30]
  hk_buf[31] = (hk_adc_results[9] & 0xFF);           // 15v_mon LSB
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	3312      	adds	r3, #18
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	77da      	strb	r2, [r3, #31]
  hk_buf[32] = ((hk_adc_results[10] & 0xFF00) >> 8); // 5vref_mon MSB		11 5VREF_MON PC4
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3314      	adds	r3, #20
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	b2d9      	uxtb	r1, r3
 80008d2:	183b      	adds	r3, r7, r0
 80008d4:	2220      	movs	r2, #32
 80008d6:	5499      	strb	r1, [r3, r2]
  hk_buf[33] = (hk_adc_results[10] & 0xFF);          // 5vref_mon LSB
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3314      	adds	r3, #20
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b2d9      	uxtb	r1, r3
 80008e0:	183b      	adds	r3, r7, r0
 80008e2:	2221      	movs	r2, #33	; 0x21
 80008e4:	5499      	strb	r1, [r3, r2]
  hk_buf[34] = ((hk_adc_results[11] & 0xFF00) >> 8); // n150v_mon MSB		5 N150V_MON PA5
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3316      	adds	r3, #22
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2d9      	uxtb	r1, r3
 80008f2:	183b      	adds	r3, r7, r0
 80008f4:	2222      	movs	r2, #34	; 0x22
 80008f6:	5499      	strb	r1, [r3, r2]
  hk_buf[35] = (hk_adc_results[11] & 0xFF);          // n150v_mon LSB
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	3316      	adds	r3, #22
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b2d9      	uxtb	r1, r3
 8000900:	183b      	adds	r3, r7, r0
 8000902:	2223      	movs	r2, #35	; 0x23
 8000904:	5499      	strb	r1, [r3, r2]
  hk_buf[36] = ((hk_adc_results[12] & 0xFF00) >> 8); // n800v_mon MSB		6 N800V_MON PA6
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	3318      	adds	r3, #24
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2d9      	uxtb	r1, r3
 8000912:	183b      	adds	r3, r7, r0
 8000914:	2224      	movs	r2, #36	; 0x24
 8000916:	5499      	strb	r1, [r3, r2]
  hk_buf[37] = (hk_adc_results[12] & 0xFF);          // n800v_mon LSB
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3318      	adds	r3, #24
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b2d9      	uxtb	r1, r3
 8000920:	183b      	adds	r3, r7, r0
 8000922:	2225      	movs	r2, #37	; 0x25
 8000924:	5499      	strb	r1, [r3, r2]

  HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000926:	1839      	adds	r1, r7, r0
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <send_hk_packet+0x240>)
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	2226      	movs	r2, #38	; 0x26
 800092e:	f005 ffa7 	bl	8006880 <HAL_UART_Transmit>
  hk_seq++;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <send_hk_packet+0x23c>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <send_hk_packet+0x23c>)
 800093c:	801a      	strh	r2, [r3, #0]
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b00c      	add	sp, #48	; 0x30
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000460 	.word	0x20000460
 800094c:	20000338 	.word	0x20000338

08000950 <send_pmt_packet>:
 * @brief sends pmt packet via UART
 *
 * @param pmt_spi raw pmt spi value
 */
void send_pmt_packet(uint16_t pmt_spi)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	1dbb      	adds	r3, r7, #6
 800095a:	801a      	strh	r2, [r3, #0]

  uint8_t pmt_buf[6];
  pmt_buf[0] = pmt_sync;
 800095c:	22bb      	movs	r2, #187	; 0xbb
 800095e:	2108      	movs	r1, #8
 8000960:	187b      	adds	r3, r7, r1
 8000962:	701a      	strb	r2, [r3, #0]
  pmt_buf[1] = pmt_sync;
 8000964:	22bb      	movs	r2, #187	; 0xbb
 8000966:	187b      	adds	r3, r7, r1
 8000968:	705a      	strb	r2, [r3, #1]
  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <send_pmt_packet+0x68>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	187b      	adds	r3, r7, r1
 8000976:	709a      	strb	r2, [r3, #2]
  pmt_buf[3] = (pmt_seq & 0xFF);
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <send_pmt_packet+0x68>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	187b      	adds	r3, r7, r1
 8000980:	70da      	strb	r2, [r3, #3]
  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <send_pmt_packet+0x6c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	121b      	asrs	r3, r3, #8
 8000988:	b2da      	uxtb	r2, r3
 800098a:	187b      	adds	r3, r7, r1
 800098c:	711a      	strb	r2, [r3, #4]
  pmt_buf[5] = (pmt_raw & 0xFF);
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <send_pmt_packet+0x6c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	187b      	adds	r3, r7, r1
 8000996:	715a      	strb	r2, [r3, #5]

  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000998:	1879      	adds	r1, r7, r1
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <send_pmt_packet+0x70>)
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	2206      	movs	r2, #6
 80009a0:	f005 ff6e 	bl	8006880 <HAL_UART_Transmit>
  pmt_seq++;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <send_pmt_packet+0x68>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <send_pmt_packet+0x68>)
 80009ae:	801a      	strh	r2, [r3, #0]
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b004      	add	sp, #16
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000045e 	.word	0x2000045e
 80009bc:	20000450 	.word	0x20000450
 80009c0:	20000338 	.word	0x20000338

080009c4 <HAL_TIM_OC_DelayElapsedCallback>:
 * performs necessary routines for given timer
 *
 * @param htim
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b09d      	sub	sp, #116	; 0x74
 80009c8:	af16      	add	r7, sp, #88	; 0x58
 80009ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d148      	bne.n	8000a66 <HAL_TIM_OC_DelayElapsedCallback+0xa2>
	{
		FACTOR_COUNTER++;
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80009dc:	601a      	str	r2, [r3, #0]
		if (FACTOR_COUNTER == SAMPLING_FACTOR)
 80009de:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d000      	beq.n	80009ec <HAL_TIM_OC_DelayElapsedCallback+0x28>
 80009ea:	e089      	b.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
		{
			FACTOR_COUNTER = 0;
 80009ec:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
			if (ERPA_ON)
 80009f2:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <HAL_TIM_OC_DelayElapsedCallback+0x38>
 80009fa:	e081      	b.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
			{
				while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	4a45      	ldr	r2, [pc, #276]	; (8000b18 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 8000a04:	0019      	movs	r1, r3
 8000a06:	0010      	movs	r0, r2
 8000a08:	f002 fcc4 	bl	8003394 <HAL_GPIO_ReadPin>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d1f6      	bne.n	80009fe <HAL_TIM_OC_DelayElapsedCallback+0x3a>

				erpa_raw = spi(hspi2);
 8000a10:	4c42      	ldr	r4, [pc, #264]	; (8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000a12:	466b      	mov	r3, sp
 8000a14:	0018      	movs	r0, r3
 8000a16:	0023      	movs	r3, r4
 8000a18:	3310      	adds	r3, #16
 8000a1a:	2254      	movs	r2, #84	; 0x54
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	f007 f9d7 	bl	8007dd0 <memcpy>
 8000a22:	6820      	ldr	r0, [r4, #0]
 8000a24:	6861      	ldr	r1, [r4, #4]
 8000a26:	68a2      	ldr	r2, [r4, #8]
 8000a28:	68e3      	ldr	r3, [r4, #12]
 8000a2a:	f7ff fdd1 	bl	80005d0 <spi>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	001a      	movs	r2, r3
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000a34:	601a      	str	r2, [r3, #0]
				uint16_t *erpa_adc_results = erpa_adc();
 8000a36:	f7ff fd4d 	bl	80004d4 <erpa_adc>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	60fb      	str	r3, [r7, #12]
				set_erpa_sweep();
 8000a3e:	f7ff fd89 	bl	8000554 <set_erpa_sweep>

				if (auto_sweep)
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_TIM_OC_DelayElapsedCallback+0x8a>
				{
					do_auto_sweep();
 8000a4a:	f7ff fd97 	bl	800057c <do_auto_sweep>
				}

				send_erpa_packet(erpa_raw, erpa_adc_results);
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fdec 	bl	8000634 <send_erpa_packet>
				free(erpa_adc_results);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f007 f9ac 	bl	8007dbc <free>
			send_hk_packet(i2c_values, hk_adc_results);
			free(i2c_values);
			free(hk_adc_results);
		}
	}
}
 8000a64:	e04c      	b.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
	} else if (htim == &htim1)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d128      	bne.n	8000ac0 <HAL_TIM_OC_DelayElapsedCallback+0xfc>
		if (PMT_ON)
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d044      	beq.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	005a      	lsls	r2, r3, #1
 8000a7c:	2390      	movs	r3, #144	; 0x90
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fc86 	bl	8003394 <HAL_GPIO_ReadPin>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d1f5      	bne.n	8000a78 <HAL_TIM_OC_DelayElapsedCallback+0xb4>
			pmt_raw = spi(hspi1);
 8000a8c:	4c28      	ldr	r4, [pc, #160]	; (8000b30 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000a8e:	466b      	mov	r3, sp
 8000a90:	0018      	movs	r0, r3
 8000a92:	0023      	movs	r3, r4
 8000a94:	3310      	adds	r3, #16
 8000a96:	2254      	movs	r2, #84	; 0x54
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f007 f999 	bl	8007dd0 <memcpy>
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	6861      	ldr	r1, [r4, #4]
 8000aa2:	68a2      	ldr	r2, [r4, #8]
 8000aa4:	68e3      	ldr	r3, [r4, #12]
 8000aa6:	f7ff fd93 	bl	80005d0 <spi>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	001a      	movs	r2, r3
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000ab0:	601a      	str	r2, [r3, #0]
			send_pmt_packet(pmt_raw);
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff49 	bl	8000950 <send_pmt_packet>
}
 8000abe:	e01f      	b.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
	} else if (htim == &htim3) {
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d11b      	bne.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
		if (HK_ON)
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d017      	beq.n	8000b00 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
			int16_t *i2c_values = i2c();
 8000ad0:	f7ff fc1a 	bl	8000308 <i2c>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	617b      	str	r3, [r7, #20]
			uint16_t *hk_adc_results = hk_adc(&hadc);
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fc56 	bl	800038c <hk_adc>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	613b      	str	r3, [r7, #16]
			send_hk_packet(i2c_values, hk_adc_results);
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fe0e 	bl	800070c <send_hk_packet>
			free(i2c_values);
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	0018      	movs	r0, r3
 8000af4:	f007 f962 	bl	8007dbc <free>
			free(hk_adc_results);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f007 f95e 	bl	8007dbc <free>
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b007      	add	sp, #28
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	200002a8 	.word	0x200002a8
 8000b0c:	20000458 	.word	0x20000458
 8000b10:	20000024 	.word	0x20000024
 8000b14:	20000463 	.word	0x20000463
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	200001fc 	.word	0x200001fc
 8000b20:	20000454 	.word	0x20000454
 8000b24:	2000044c 	.word	0x2000044c
 8000b28:	20000260 	.word	0x20000260
 8000b2c:	20000462 	.word	0x20000462
 8000b30:	20000198 	.word	0x20000198
 8000b34:	20000450 	.word	0x20000450
 8000b38:	200002f0 	.word	0x200002f0
 8000b3c:	20000464 	.word	0x20000464
 8000b40:	200000b4 	.word	0x200000b4

08000b44 <HAL_UART_RxCpltCallback>:
 * @brief UART rx interrupt function
 *
 * @param huart UART peripheral to receive from
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000b4c:	499d      	ldr	r1, [pc, #628]	; (8000dc4 <HAL_UART_RxCpltCallback+0x280>)
 8000b4e:	4b9e      	ldr	r3, [pc, #632]	; (8000dc8 <HAL_UART_RxCpltCallback+0x284>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	0018      	movs	r0, r3
 8000b54:	f005 ff3d 	bl	80069d2 <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000b58:	210f      	movs	r1, #15
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	4a99      	ldr	r2, [pc, #612]	; (8000dc4 <HAL_UART_RxCpltCallback+0x280>)
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	701a      	strb	r2, [r3, #0]

  switch (key)
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b25      	cmp	r3, #37	; 0x25
 8000b68:	d900      	bls.n	8000b6c <HAL_UART_RxCpltCallback+0x28>
 8000b6a:	e126      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
 8000b6c:	009a      	lsls	r2, r3, #2
 8000b6e:	4b97      	ldr	r3, [pc, #604]	; (8000dcc <HAL_UART_RxCpltCallback+0x288>)
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000b76:	4b96      	ldr	r3, [pc, #600]	; (8000dd0 <HAL_UART_RxCpltCallback+0x28c>)
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 fc26 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000b82:	e11a      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <HAL_UART_RxCpltCallback+0x28c>)
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f002 fc1f 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000b90:	e113      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000b92:	4b8f      	ldr	r3, [pc, #572]	; (8000dd0 <HAL_UART_RxCpltCallback+0x28c>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	2201      	movs	r2, #1
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 fc18 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000b9e:	e10c      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000ba0:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <HAL_UART_RxCpltCallback+0x28c>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f002 fc11 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000bac:	e105      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x1B:
  {
    if (step < 7)
 8000bae:	4b89      	ldr	r3, [pc, #548]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d900      	bls.n	8000bb8 <HAL_UART_RxCpltCallback+0x74>
 8000bb6:	e0f9      	b.n	8000dac <HAL_UART_RxCpltCallback+0x268>
    {
      step++;
 8000bb8:	4b86      	ldr	r3, [pc, #536]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bc2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000bc4:	e0f2      	b.n	8000dac <HAL_UART_RxCpltCallback+0x268>
  }
  case 0x1C:
  {
    if (step > 0)
 8000bc6:	4b83      	ldr	r3, [pc, #524]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d100      	bne.n	8000bd0 <HAL_UART_RxCpltCallback+0x8c>
 8000bce:	e0ef      	b.n	8000db0 <HAL_UART_RxCpltCallback+0x26c>
    {
      step--;
 8000bd0:	4b80      	ldr	r3, [pc, #512]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b7e      	ldr	r3, [pc, #504]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bda:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000bdc:	e0e8      	b.n	8000db0 <HAL_UART_RxCpltCallback+0x26c>
  }
  case 0x1D:
  {
    if (!auto_sweep)
 8000bde:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <HAL_UART_RxCpltCallback+0x294>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <HAL_UART_RxCpltCallback+0xb0>
    {
      auto_sweep = 1;
 8000be6:	4b7c      	ldr	r3, [pc, #496]	; (8000dd8 <HAL_UART_RxCpltCallback+0x294>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
      step = 0;
 8000bec:	4b79      	ldr	r3, [pc, #484]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e005      	b.n	8000c00 <HAL_UART_RxCpltCallback+0xbc>
    }
    else
    {
      auto_sweep = 0;
 8000bf4:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <HAL_UART_RxCpltCallback+0x294>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
      step = 0;
 8000bfa:	4b76      	ldr	r3, [pc, #472]	; (8000dd4 <HAL_UART_RxCpltCallback+0x290>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    }
  }
  case 0x24:
  {
    if (SAMPLING_FACTOR < 16)
 8000c00:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	dd00      	ble.n	8000c0a <HAL_UART_RxCpltCallback+0xc6>
 8000c08:	e0d4      	b.n	8000db4 <HAL_UART_RxCpltCallback+0x270>
    {
      SAMPLING_FACTOR *= 2;
 8000c0a:	4b74      	ldr	r3, [pc, #464]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	005a      	lsls	r2, r3, #1
 8000c10:	4b72      	ldr	r3, [pc, #456]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c12:	601a      	str	r2, [r3, #0]
      FACTOR_COUNTER = 0;
 8000c14:	4b72      	ldr	r3, [pc, #456]	; (8000de0 <HAL_UART_RxCpltCallback+0x29c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
    }
    break;
 8000c1a:	e0cb      	b.n	8000db4 <HAL_UART_RxCpltCallback+0x270>
  }
  case 0x25:
  {
    if (SAMPLING_FACTOR > 1)
 8000c1c:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	dc00      	bgt.n	8000c26 <HAL_UART_RxCpltCallback+0xe2>
 8000c24:	e0c8      	b.n	8000db8 <HAL_UART_RxCpltCallback+0x274>
    {
      SAMPLING_FACTOR /= 2;
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da00      	bge.n	8000c30 <HAL_UART_RxCpltCallback+0xec>
 8000c2e:	3301      	adds	r3, #1
 8000c30:	105b      	asrs	r3, r3, #1
 8000c32:	001a      	movs	r2, r3
 8000c34:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <HAL_UART_RxCpltCallback+0x298>)
 8000c36:	601a      	str	r2, [r3, #0]
      FACTOR_COUNTER = 0;
 8000c38:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <HAL_UART_RxCpltCallback+0x29c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
    }
    break;
 8000c3e:	e0bb      	b.n	8000db8 <HAL_UART_RxCpltCallback+0x274>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000c40:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000c42:	2120      	movs	r1, #32
 8000c44:	2201      	movs	r2, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fbc1 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c4c:	e0b5      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000c4e:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000c50:	2120      	movs	r1, #32
 8000c52:	2200      	movs	r2, #0
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 fbba 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c5a:	e0ae      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c5c:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	2201      	movs	r2, #1
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fbb3 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c68:	e0a7      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c6a:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f002 fbac 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c76:	e0a0      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000c78:	485b      	ldr	r0, [pc, #364]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	2201      	movs	r2, #1
 8000c80:	0019      	movs	r1, r3
 8000c82:	f002 fba4 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c86:	e098      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000c88:	4857      	ldr	r0, [pc, #348]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	0019      	movs	r1, r3
 8000c92:	f002 fb9c 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000c96:	e090      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c98:	4853      	ldr	r0, [pc, #332]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f002 fb94 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000ca6:	e088      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ca8:	484f      	ldr	r0, [pc, #316]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	2200      	movs	r2, #0
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	f002 fb8c 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000cb6:	e080      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f002 fb85 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000cc4:	e079      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	2200      	movs	r2, #0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f002 fb7e 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000cd2:	e072      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2201      	movs	r2, #1
 8000cdc:	0019      	movs	r1, r3
 8000cde:	f002 fb76 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000ce2:	e06a      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ce4:	4840      	ldr	r0, [pc, #256]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2200      	movs	r2, #0
 8000cec:	0019      	movs	r1, r3
 8000cee:	f002 fb6e 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000cf2:	e062      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000cf4:	483c      	ldr	r0, [pc, #240]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	f002 fb66 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000d02:	e05a      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000d04:	4838      	ldr	r0, [pc, #224]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	f002 fb5e 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000d12:	e052      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	2201      	movs	r2, #1
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f002 fb57 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000d20:	e04b      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	2200      	movs	r2, #0
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb50 	bl	80033ce <HAL_GPIO_WritePin>
    break;
 8000d2e:	e044      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x0C:
  {
    HAL_SuspendTick();
 8000d30:	f001 fa34 	bl	800219c <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000d34:	2101      	movs	r1, #1
 8000d36:	2001      	movs	r0, #1
 8000d38:	f003 f89c 	bl	8003e74 <HAL_PWR_EnterSTOPMode>
    NVIC_SystemReset();
 8000d3c:	f7ff fa70 	bl	8000220 <__NVIC_SystemReset>
    break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_UART_RxCpltCallback+0x2a8>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f004 fc52 	bl	80055f4 <HAL_TIM_PWM_Start_IT>
    break;
 8000d50:	e033      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_UART_RxCpltCallback+0x2a8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f004 fd49 	bl	80057f4 <HAL_TIM_PWM_Stop_IT>
    break;
 8000d62:	e02a      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d6c:	210c      	movs	r1, #12
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 fc40 	bl	80055f4 <HAL_TIM_PWM_Start_IT>
    break;
 8000d74:	e021      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d7e:	210c      	movs	r1, #12
 8000d80:	0018      	movs	r0, r3
 8000d82:	f004 fd37 	bl	80057f4 <HAL_TIM_PWM_Stop_IT>
    break;
 8000d86:	e018      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_UART_RxCpltCallback+0x2bc>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f004 fa12 	bl	80051bc <HAL_TIM_OC_Start_IT>
    break;
 8000d98:	e00f      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_RxCpltCallback+0x2b8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_UART_RxCpltCallback+0x2bc>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	0018      	movs	r0, r3
 8000da6:	f004 fb09 	bl	80053bc <HAL_TIM_OC_Stop_IT>
    break;
 8000daa:	e006      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
    break;
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	e004      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
    break;
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	e002      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
    break;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e000      	b.n	8000dba <HAL_UART_RxCpltCallback+0x276>
    break;
 8000db8:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	200003bc 	.word	0x200003bc
 8000dc8:	20000338 	.word	0x20000338
 8000dcc:	08008054 	.word	0x08008054
 8000dd0:	48001400 	.word	0x48001400
 8000dd4:	2000044a 	.word	0x2000044a
 8000dd8:	2000044c 	.word	0x2000044c
 8000ddc:	20000024 	.word	0x20000024
 8000de0:	20000458 	.word	0x20000458
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800
 8000dec:	20000462 	.word	0x20000462
 8000df0:	20000260 	.word	0x20000260
 8000df4:	20000463 	.word	0x20000463
 8000df8:	200002a8 	.word	0x200002a8
 8000dfc:	20000464 	.word	0x20000464
 8000e00:	200002f0 	.word	0x200002f0

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f001 f964 	bl	80020d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f860 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 fcd6 	bl	80017c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e14:	f000 fcb6 	bl	8001784 <MX_DMA_Init>
  MX_SPI2_Init();
 8000e18:	f000 faa2 	bl	8001360 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e1c:	f000 fae0 	bl	80013e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e20:	f000 fb94 	bl	800154c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000e24:	f000 fa5c 	bl	80012e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e28:	f000 fc6c 	bl	8001704 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000e2c:	f000 f9e6 	bl	80011fc <MX_DAC1_Init>
  MX_ADC_Init();
 8000e30:	f000 f8b8 	bl	8000fa4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000e34:	f000 fa14 	bl	8001260 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e38:	f000 fc08 	bl	800164c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <main+0xbc>)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 fee8 	bl	8002c16 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET)
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <main+0xc0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	69da      	ldr	r2, [r3, #28]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	401a      	ands	r2, r3
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	025b      	lsls	r3, r3, #9
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d0f5      	beq.n	8000e48 <main+0x44>
    ;
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET)
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <main+0xc0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	03db      	lsls	r3, r3, #15
 8000e68:	401a      	ands	r2, r3
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	03db      	lsls	r3, r3, #15
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d1f5      	bne.n	8000e5e <main+0x5a>
    ;

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <main+0xc4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <main+0xc4>)
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <main+0xc4>)
 8000e80:	225b      	movs	r2, #91	; 0x5b
 8000e82:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK)
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <main+0xc4>)
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <main+0xc0>)
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	f006 fea6 	bl	8007bdc <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <main+0x94>
  {
    Error_Handler();
 8000e94:	f000 fd2e 	bl	80018f4 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <main+0xc0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <main+0xc0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	03c9      	lsls	r1, r1, #15
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0xc0>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f006 fefb 	bl	8007ca8 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000eb2:	4906      	ldr	r1, [pc, #24]	; (8000ecc <main+0xc8>)
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <main+0xc0>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f005 fd8a 	bl	80069d2 <HAL_UART_Receive_IT>
 8000ebe:	e7f8      	b.n	8000eb2 <main+0xae>
 8000ec0:	20000138 	.word	0x20000138
 8000ec4:	20000338 	.word	0x20000338
 8000ec8:	20000420 	.word	0x20000420
 8000ecc:	200003bc 	.word	0x200003bc

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b097      	sub	sp, #92	; 0x5c
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	2428      	movs	r4, #40	; 0x28
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	0018      	movs	r0, r3
 8000edc:	2330      	movs	r3, #48	; 0x30
 8000ede:	001a      	movs	r2, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f006 ff7e 	bl	8007de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee6:	2318      	movs	r3, #24
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	0018      	movs	r0, r3
 8000eec:	2310      	movs	r3, #16
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f006 ff76 	bl	8007de2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2314      	movs	r3, #20
 8000efc:	001a      	movs	r2, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	f006 ff6f 	bl	8007de2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f04:	0021      	movs	r1, r4
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2212      	movs	r2, #18
 8000f0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2201      	movs	r2, #1
 8000f10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2201      	movs	r2, #1
 8000f16:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2210      	movs	r2, #16
 8000f22:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2202      	movs	r2, #2
 8000f28:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	22a0      	movs	r2, #160	; 0xa0
 8000f34:	0392      	lsls	r2, r2, #14
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 ffcb 	bl	8003edc <HAL_RCC_OscConfig>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f4a:	f000 fcd3 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	2118      	movs	r1, #24
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2207      	movs	r2, #7
 8000f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f003 facf 	bl	8004510 <HAL_RCC_ClockConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f76:	f000 fcbd 	bl	80018f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2221      	movs	r2, #33	; 0x21
 8000f7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2203      	movs	r2, #3
 8000f84:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fc10 	bl	80047b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f98:	f000 fcac 	bl	80018f4 <Error_Handler>
  }
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b017      	add	sp, #92	; 0x5c
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	0018      	movs	r0, r3
 8000fae:	230c      	movs	r3, #12
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f006 ff15 	bl	8007de2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fb8:	4b8e      	ldr	r3, [pc, #568]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fba:	4a8f      	ldr	r2, [pc, #572]	; (80011f8 <MX_ADC_Init+0x254>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fbe:	4b8d      	ldr	r3, [pc, #564]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc4:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000fd0:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b87      	ldr	r3, [pc, #540]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000fe2:	4b84      	ldr	r3, [pc, #528]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <MX_ADC_Init+0x250>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <MX_ADC_Init+0x250>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <MX_ADC_Init+0x250>)
 8000ff6:	22c2      	movs	r2, #194	; 0xc2
 8000ff8:	32ff      	adds	r2, #255	; 0xff
 8000ffa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffc:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <MX_ADC_Init+0x250>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001002:	4b7c      	ldr	r3, [pc, #496]	; (80011f4 <MX_ADC_Init+0x250>)
 8001004:	2224      	movs	r2, #36	; 0x24
 8001006:	2100      	movs	r1, #0
 8001008:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100a:	4b7a      	ldr	r3, [pc, #488]	; (80011f4 <MX_ADC_Init+0x250>)
 800100c:	2201      	movs	r2, #1
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001010:	4b78      	ldr	r3, [pc, #480]	; (80011f4 <MX_ADC_Init+0x250>)
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f8d0 	bl	80021b8 <HAL_ADC_Init>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 fc6a 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	0152      	lsls	r2, r2, #5
 800102c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	0552      	lsls	r2, r2, #21
 8001034:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <MX_ADC_Init+0x250>)
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fa95 	bl	800256c <HAL_ADC_ConfigChannel>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001046:	f000 fc55 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001050:	1d3a      	adds	r2, r7, #4
 8001052:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <MX_ADC_Init+0x250>)
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f001 fa88 	bl	800256c <HAL_ADC_ConfigChannel>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001060:	f000 fc48 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2202      	movs	r2, #2
 8001068:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800106a:	1d3a      	adds	r2, r7, #4
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <MX_ADC_Init+0x250>)
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f001 fa7b 	bl	800256c <HAL_ADC_ConfigChannel>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d001      	beq.n	800107e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800107a:	f000 fc3b 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2203      	movs	r2, #3
 8001082:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001084:	1d3a      	adds	r2, r7, #4
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <MX_ADC_Init+0x250>)
 8001088:	0011      	movs	r1, r2
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fa6e 	bl	800256c <HAL_ADC_ConfigChannel>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001094:	f000 fc2e 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2205      	movs	r2, #5
 800109c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <MX_ADC_Init+0x250>)
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fa61 	bl	800256c <HAL_ADC_ConfigChannel>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80010ae:	f000 fc21 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2206      	movs	r2, #6
 80010b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b8:	1d3a      	adds	r2, r7, #4
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_ADC_Init+0x250>)
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f001 fa54 	bl	800256c <HAL_ADC_ConfigChannel>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC_Init+0x128>
  {
    Error_Handler();
 80010c8:	f000 fc14 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2207      	movs	r2, #7
 80010d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010d2:	1d3a      	adds	r2, r7, #4
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <MX_ADC_Init+0x250>)
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f001 fa47 	bl	800256c <HAL_ADC_ConfigChannel>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80010e2:	f000 fc07 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2208      	movs	r2, #8
 80010ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <MX_ADC_Init+0x250>)
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 fa3a 	bl	800256c <HAL_ADC_ConfigChannel>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80010fc:	f000 fbfa 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2209      	movs	r2, #9
 8001104:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001106:	1d3a      	adds	r2, r7, #4
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <MX_ADC_Init+0x250>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f001 fa2d 	bl	800256c <HAL_ADC_ConfigChannel>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8001116:	f000 fbed 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	220a      	movs	r2, #10
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_ADC_Init+0x250>)
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f001 fa20 	bl	800256c <HAL_ADC_ConfigChannel>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001130:	f000 fbe0 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	220b      	movs	r2, #11
 8001138:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800113a:	1d3a      	adds	r2, r7, #4
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_ADC_Init+0x250>)
 800113e:	0011      	movs	r1, r2
 8001140:	0018      	movs	r0, r3
 8001142:	f001 fa13 	bl	800256c <HAL_ADC_ConfigChannel>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d001      	beq.n	800114e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800114a:	f000 fbd3 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	220c      	movs	r2, #12
 8001152:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001154:	1d3a      	adds	r2, r7, #4
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_ADC_Init+0x250>)
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f001 fa06 	bl	800256c <HAL_ADC_ConfigChannel>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8001164:	f000 fbc6 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	220d      	movs	r2, #13
 800116c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800116e:	1d3a      	adds	r2, r7, #4
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_ADC_Init+0x250>)
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f001 f9f9 	bl	800256c <HAL_ADC_ConfigChannel>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800117e:	f000 fbb9 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	220e      	movs	r2, #14
 8001186:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001188:	1d3a      	adds	r2, r7, #4
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_ADC_Init+0x250>)
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f001 f9ec 	bl	800256c <HAL_ADC_ConfigChannel>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8001198:	f000 fbac 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	220f      	movs	r2, #15
 80011a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011a2:	1d3a      	adds	r2, r7, #4
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_ADC_Init+0x250>)
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 f9df 	bl	800256c <HAL_ADC_ConfigChannel>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 80011b2:	f000 fb9f 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2210      	movs	r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011bc:	1d3a      	adds	r2, r7, #4
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_ADC_Init+0x250>)
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f001 f9d2 	bl	800256c <HAL_ADC_ConfigChannel>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 80011cc:	f000 fb92 	bl	80018f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2211      	movs	r2, #17
 80011d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_ADC_Init+0x250>)
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f001 f9c5 	bl	800256c <HAL_ADC_ConfigChannel>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80011e6:	f000 fb85 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	200000b4 	.word	0x200000b4
 80011f8:	40012400 	.word	0x40012400

080011fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_DAC1_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001208:	003b      	movs	r3, r7
 800120a:	0018      	movs	r0, r3
 800120c:	2308      	movs	r3, #8
 800120e:	001a      	movs	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	f006 fde6 	bl	8007de2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_DAC1_Init+0x5c>)
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <MX_DAC1_Init+0x60>)
 800121a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_DAC1_Init+0x5c>)
 800121e:	0018      	movs	r0, r3
 8001220:	f001 fc98 	bl	8002b54 <HAL_DAC_Init>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001228:	f000 fb64 	bl	80018f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001238:	0039      	movs	r1, r7
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_DAC1_Init+0x5c>)
 800123c:	2200      	movs	r2, #0
 800123e:	0018      	movs	r0, r3
 8001240:	f001 fcab 	bl	8002b9a <HAL_DAC_ConfigChannel>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001248:	f000 fb54 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000044a 	.word	0x2000044a
 8001258:	20000138 	.word	0x20000138
 800125c:	40007400 	.word	0x40007400

08001260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_I2C1_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_I2C1_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <MX_I2C1_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_I2C1_Init+0x74>)
 800129c:	0018      	movs	r0, r3
 800129e:	f002 f8b3 	bl	8003408 <HAL_I2C_Init>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a6:	f000 fb25 	bl	80018f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_I2C1_Init+0x74>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f002 fd48 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 fb1c 	bl	80018f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <MX_I2C1_Init+0x74>)
 80012be:	2100      	movs	r1, #0
 80012c0:	0018      	movs	r0, r3
 80012c2:	f002 fd8b 	bl	8003ddc <HAL_I2CEx_ConfigDigitalFilter>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 fb13 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000014c 	.word	0x2000014c
 80012d8:	40005400 	.word	0x40005400
 80012dc:	2000090e 	.word	0x2000090e

080012e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_SPI1_Init+0x78>)
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <MX_SPI1_Init+0x7c>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_SPI1_Init+0x78>)
 80012ec:	2282      	movs	r2, #130	; 0x82
 80012ee:	0052      	lsls	r2, r2, #1
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_SPI1_Init+0x78>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	00d2      	lsls	r2, r2, #3
 80012f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_SPI1_Init+0x78>)
 80012fc:	22f0      	movs	r2, #240	; 0xf0
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_SPI1_Init+0x78>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_SPI1_Init+0x78>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_SPI1_Init+0x78>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_SPI1_Init+0x78>)
 8001318:	2230      	movs	r2, #48	; 0x30
 800131a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI1_Init+0x78>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_SPI1_Init+0x78>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_SPI1_Init+0x78>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_SPI1_Init+0x78>)
 8001330:	2207      	movs	r2, #7
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_SPI1_Init+0x78>)
 8001336:	2200      	movs	r2, #0
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_SPI1_Init+0x78>)
 800133c:	2208      	movs	r2, #8
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <MX_SPI1_Init+0x78>)
 8001342:	0018      	movs	r0, r3
 8001344:	f003 fb14 	bl	8004970 <HAL_SPI_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 fad2 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000198 	.word	0x20000198
 800135c:	40013000 	.word	0x40013000

08001360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <MX_SPI2_Init+0x7c>)
 8001368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_SPI2_Init+0x78>)
 800136c:	2282      	movs	r2, #130	; 0x82
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	00d2      	lsls	r2, r2, #3
 8001378:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_SPI2_Init+0x78>)
 800137c:	22f0      	movs	r2, #240	; 0xf0
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_SPI2_Init+0x78>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_SPI2_Init+0x78>)
 8001398:	2230      	movs	r2, #48	; 0x30
 800139a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_SPI2_Init+0x78>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013bc:	2208      	movs	r2, #8
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <MX_SPI2_Init+0x78>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f003 fad4 	bl	8004970 <HAL_SPI_Init>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80013cc:	f000 fa92 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	200001fc 	.word	0x200001fc
 80013dc:	40003800 	.word	0x40003800

080013e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	; 0x58
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	2348      	movs	r3, #72	; 0x48
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	0018      	movs	r0, r3
 80013ec:	2310      	movs	r3, #16
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f006 fcf6 	bl	8007de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	0018      	movs	r0, r3
 80013fc:	2308      	movs	r3, #8
 80013fe:	001a      	movs	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	f006 fcee 	bl	8007de2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	2324      	movs	r3, #36	; 0x24
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	0018      	movs	r0, r3
 800140c:	231c      	movs	r3, #28
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f006 fce6 	bl	8007de2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	0018      	movs	r0, r3
 800141a:	2320      	movs	r3, #32
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f006 fcdf 	bl	8007de2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <MX_TIM1_Init+0x160>)
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <MX_TIM1_Init+0x164>)
 8001428:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <MX_TIM1_Init+0x160>)
 800142c:	2263      	movs	r2, #99	; 0x63
 800142e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <MX_TIM1_Init+0x160>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <MX_TIM1_Init+0x160>)
 8001438:	4a43      	ldr	r2, [pc, #268]	; (8001548 <MX_TIM1_Init+0x168>)
 800143a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <MX_TIM1_Init+0x160>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <MX_TIM1_Init+0x160>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_TIM1_Init+0x160>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <MX_TIM1_Init+0x160>)
 8001450:	0018      	movs	r0, r3
 8001452:	f003 fe13 	bl	800507c <HAL_TIM_Base_Init>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800145a:	f000 fa4b 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	2148      	movs	r1, #72	; 0x48
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2280      	movs	r2, #128	; 0x80
 8001464:	0152      	lsls	r2, r2, #5
 8001466:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001468:	187a      	adds	r2, r7, r1
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <MX_TIM1_Init+0x160>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f004 fcb8 	bl	8005de4 <HAL_TIM_ConfigClockSource>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001478:	f000 fa3c 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <MX_TIM1_Init+0x160>)
 800147e:	0018      	movs	r0, r3
 8001480:	f004 f860 	bl	8005544 <HAL_TIM_PWM_Init>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001488:	f000 fa34 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	187a      	adds	r2, r7, r1
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_TIM1_Init+0x160>)
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f005 f8cd 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80014aa:	f000 fa23 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2124      	movs	r1, #36	; 0x24
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2260      	movs	r2, #96	; 0x60
 80014b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	22e0      	movs	r2, #224	; 0xe0
 80014ba:	32ff      	adds	r2, #255	; 0xff
 80014bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014dc:	1879      	adds	r1, r7, r1
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM1_Init+0x160>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 fbb8 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014ec:	f000 fa02 	bl	80018f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	0192      	lsls	r2, r2, #6
 8001514:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800151c:	1d3a      	adds	r2, r7, #4
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_TIM1_Init+0x160>)
 8001520:	0011      	movs	r1, r2
 8001522:	0018      	movs	r0, r3
 8001524:	f005 f8ea 	bl	80066fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800152c:	f000 f9e2 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <MX_TIM1_Init+0x160>)
 8001532:	0018      	movs	r0, r3
 8001534:	f000 fc44 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b016      	add	sp, #88	; 0x58
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000260 	.word	0x20000260
 8001544:	40012c00 	.word	0x40012c00
 8001548:	0000bb7f 	.word	0x0000bb7f

0800154c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	; 0x38
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	2328      	movs	r3, #40	; 0x28
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	0018      	movs	r0, r3
 8001558:	2310      	movs	r3, #16
 800155a:	001a      	movs	r2, r3
 800155c:	2100      	movs	r1, #0
 800155e:	f006 fc40 	bl	8007de2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	2320      	movs	r3, #32
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	0018      	movs	r0, r3
 8001568:	2308      	movs	r3, #8
 800156a:	001a      	movs	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	f006 fc38 	bl	8007de2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	0018      	movs	r0, r3
 8001576:	231c      	movs	r3, #28
 8001578:	001a      	movs	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	f006 fc31 	bl	8007de2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_TIM2_Init+0xf8>)
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	05d2      	lsls	r2, r2, #23
 8001586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000 - 1;
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_TIM2_Init+0xf8>)
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <MX_TIM2_Init+0xfc>)
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_TIM2_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_TIM2_Init+0xf8>)
 8001596:	222c      	movs	r2, #44	; 0x2c
 8001598:	32ff      	adds	r2, #255	; 0xff
 800159a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_TIM2_Init+0xf8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_TIM2_Init+0xf8>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_TIM2_Init+0xf8>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f003 fd66 	bl	800507c <HAL_TIM_Base_Init>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80015b4:	f000 f99e 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	2128      	movs	r1, #40	; 0x28
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0152      	lsls	r2, r2, #5
 80015c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c2:	187a      	adds	r2, r7, r1
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM2_Init+0xf8>)
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f004 fc0b 	bl	8005de4 <HAL_TIM_ConfigClockSource>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80015d2:	f000 f98f 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM2_Init+0xf8>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f003 ffb3 	bl	8005544 <HAL_TIM_PWM_Init>
 80015de:	1e03      	subs	r3, r0, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015e2:	f000 f987 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2120      	movs	r1, #32
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f4:	187a      	adds	r2, r7, r1
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_TIM2_Init+0xf8>)
 80015f8:	0011      	movs	r1, r2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f005 f820 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001604:	f000 f976 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2260      	movs	r2, #96	; 0x60
 800160c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30 - 1;
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	221d      	movs	r2, #29
 8001612:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001620:	1d39      	adds	r1, r7, #4
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_TIM2_Init+0xf8>)
 8001624:	220c      	movs	r2, #12
 8001626:	0018      	movs	r0, r3
 8001628:	f004 fb16 	bl	8005c58 <HAL_TIM_PWM_ConfigChannel>
 800162c:	1e03      	subs	r3, r0, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001630:	f000 f960 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <MX_TIM2_Init+0xf8>)
 8001636:	0018      	movs	r0, r3
 8001638:	f000 fbc2 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b00e      	add	sp, #56	; 0x38
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200002a8 	.word	0x200002a8
 8001648:	000003e7 	.word	0x000003e7

0800164c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001652:	2320      	movs	r3, #32
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	0018      	movs	r0, r3
 8001658:	2308      	movs	r3, #8
 800165a:	001a      	movs	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	f006 fbc0 	bl	8007de2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	0018      	movs	r0, r3
 8001666:	231c      	movs	r3, #28
 8001668:	001a      	movs	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	f006 fbb9 	bl	8007de2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_TIM3_Init+0xb0>)
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <MX_TIM3_Init+0xb4>)
 8001674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_TIM3_Init+0xb0>)
 8001678:	2263      	movs	r2, #99	; 0x63
 800167a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_TIM3_Init+0xb0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480 - 1;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_TIM3_Init+0xb0>)
 8001684:	22e0      	movs	r2, #224	; 0xe0
 8001686:	32ff      	adds	r2, #255	; 0xff
 8001688:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_TIM3_Init+0xb0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_TIM3_Init+0xb0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_TIM3_Init+0xb0>)
 8001698:	0018      	movs	r0, r3
 800169a:	f003 fd3f 	bl	800511c <HAL_TIM_OC_Init>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016a2:	f000 f927 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2120      	movs	r1, #32
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	187a      	adds	r2, r7, r1
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_TIM3_Init+0xb0>)
 80016b8:	0011      	movs	r1, r2
 80016ba:	0018      	movs	r0, r3
 80016bc:	f004 ffc0 	bl	8006640 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016c4:	f000 f916 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e0:	1d39      	adds	r1, r7, #4
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_TIM3_Init+0xb0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	0018      	movs	r0, r3
 80016e8:	f004 fa5e 	bl	8005ba8 <HAL_TIM_OC_ConfigChannel>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80016f0:	f000 f900 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b00a      	add	sp, #40	; 0x28
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002f0 	.word	0x200002f0
 8001700:	40000400 	.word	0x40000400

08001704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_USART1_UART_Init+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_USART1_UART_Init+0x70>)
 8001710:	2200      	movs	r2, #0
 8001712:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_USART1_UART_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_USART1_UART_Init+0x78>)
 800171c:	4a18      	ldr	r2, [pc, #96]	; (8001780 <MX_USART1_UART_Init+0x7c>)
 800171e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001722:	22e1      	movs	r2, #225	; 0xe1
 8001724:	0212      	lsls	r2, r2, #8
 8001726:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USART1_UART_Init+0x78>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <MX_USART1_UART_Init+0x78>)
 800173c:	220c      	movs	r2, #12
 800173e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USART1_UART_Init+0x78>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_USART1_UART_Init+0x78>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USART1_UART_Init+0x78>)
 800175a:	0018      	movs	r0, r3
 800175c:	f005 f83c 	bl	80067d8 <HAL_UART_Init>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001764:	f000 f8c6 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	2000045c 	.word	0x2000045c
 8001774:	2000045e 	.word	0x2000045e
 8001778:	20000460 	.word	0x20000460
 800177c:	20000338 	.word	0x20000338
 8001780:	40013800 	.word	0x40013800

08001784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_DMA_Init+0x38>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_DMA_Init+0x38>)
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_DMA_Init+0x38>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2201      	movs	r2, #1
 800179c:	4013      	ands	r3, r2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2009      	movs	r0, #9
 80017a8:	f001 f9a2 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017ac:	2009      	movs	r0, #9
 80017ae:	f001 f9b4 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b08b      	sub	sp, #44	; 0x2c
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	2414      	movs	r4, #20
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	0018      	movs	r0, r3
 80017cc:	2314      	movs	r3, #20
 80017ce:	001a      	movs	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f006 fb06 	bl	8007de2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <MX_GPIO_Init+0x124>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <MX_GPIO_Init+0x124>)
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	0309      	lsls	r1, r1, #12
 80017e0:	430a      	orrs	r2, r1
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <MX_GPIO_Init+0x124>)
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	031b      	lsls	r3, r3, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <MX_GPIO_Init+0x124>)
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <MX_GPIO_Init+0x124>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	03c9      	lsls	r1, r1, #15
 80017fc:	430a      	orrs	r2, r1
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <MX_GPIO_Init+0x124>)
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	03db      	lsls	r3, r3, #15
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <MX_GPIO_Init+0x124>)
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <MX_GPIO_Init+0x124>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0289      	lsls	r1, r1, #10
 8001818:	430a      	orrs	r2, r1
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <MX_GPIO_Init+0x124>)
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <MX_GPIO_Init+0x124>)
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_GPIO_Init+0x124>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	02c9      	lsls	r1, r1, #11
 8001834:	430a      	orrs	r2, r1
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_GPIO_Init+0x124>)
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	02db      	lsls	r3, r3, #11
 8001840:	4013      	ands	r3, r2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001846:	239f      	movs	r3, #159	; 0x9f
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	4827      	ldr	r0, [pc, #156]	; (80018e8 <MX_GPIO_Init+0x128>)
 800184c:	2200      	movs	r2, #0
 800184e:	0019      	movs	r1, r3
 8001850:	f001 fdbd 	bl	80033ce <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <MX_GPIO_Init+0x12c>)
 8001856:	2200      	movs	r2, #0
 8001858:	21c0      	movs	r1, #192	; 0xc0
 800185a:	0018      	movs	r0, r3
 800185c:	f001 fdb7 	bl	80033ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_GPIO_Init+0x130>)
 8001862:	2200      	movs	r2, #0
 8001864:	2160      	movs	r1, #96	; 0x60
 8001866:	0018      	movs	r0, r3
 8001868:	f001 fdb1 	bl	80033ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800186c:	193b      	adds	r3, r7, r4
 800186e:	229f      	movs	r2, #159	; 0x9f
 8001870:	0192      	lsls	r2, r2, #6
 8001872:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2201      	movs	r2, #1
 8001878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	193b      	adds	r3, r7, r4
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MX_GPIO_Init+0x128>)
 800188a:	0019      	movs	r1, r3
 800188c:	0010      	movs	r0, r2
 800188e:	f001 fc11 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	2201      	movs	r2, #1
 800189c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <MX_GPIO_Init+0x12c>)
 80018ae:	0019      	movs	r1, r3
 80018b0:	0010      	movs	r0, r2
 80018b2:	f001 fbff 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018b6:	0021      	movs	r1, r4
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2260      	movs	r2, #96	; 0x60
 80018bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2201      	movs	r2, #1
 80018c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <MX_GPIO_Init+0x130>)
 80018d4:	0019      	movs	r1, r3
 80018d6:	0010      	movs	r0, r2
 80018d8:	f001 fbec 	bl	80030b4 <HAL_GPIO_Init>

}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b00b      	add	sp, #44	; 0x2c
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48001400 	.word	0x48001400
 80018f0:	48000400 	.word	0x48000400

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x44>)
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_MspInit+0x44>)
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x44>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2201      	movs	r2, #1
 8001918:	4013      	ands	r3, r2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x44>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_MspInit+0x44>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0549      	lsls	r1, r1, #21
 8001928:	430a      	orrs	r2, r1
 800192a:	61da      	str	r2, [r3, #28]
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_MspInit+0x44>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	055b      	lsls	r3, r3, #21
 8001934:	4013      	ands	r3, r2
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08d      	sub	sp, #52	; 0x34
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	241c      	movs	r4, #28
 8001952:	193b      	adds	r3, r7, r4
 8001954:	0018      	movs	r0, r3
 8001956:	2314      	movs	r3, #20
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f006 fa41 	bl	8007de2 <memset>
  if(hadc->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_ADC_MspInit+0x148>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d000      	beq.n	800196c <HAL_ADC_MspInit+0x24>
 800196a:	e08d      	b.n	8001a88 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800196c:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0089      	lsls	r1, r1, #2
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0309      	lsls	r1, r1, #12
 8001992:	430a      	orrs	r2, r1
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	4013      	ands	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0289      	lsls	r1, r1, #10
 80019ae:	430a      	orrs	r2, r1
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	02c9      	lsls	r1, r1, #11
 80019ca:	430a      	orrs	r2, r1
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_ADC_MspInit+0x14c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	02db      	lsls	r3, r3, #11
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	223f      	movs	r2, #63	; 0x3f
 80019e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	2203      	movs	r2, #3
 80019e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_ADC_MspInit+0x150>)
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f001 fb5d 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	22ef      	movs	r2, #239	; 0xef
 80019fe:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	2203      	movs	r2, #3
 8001a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	193a      	adds	r2, r7, r4
 8001a0e:	2390      	movs	r3, #144	; 0x90
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 fb4d 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	2203      	movs	r2, #3
 8001a24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_ADC_MspInit+0x154>)
 8001a30:	0019      	movs	r1, r3
 8001a32:	0010      	movs	r0, r2
 8001a34:	f001 fb3e 	bl	80030b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_ADC_MspInit+0x15c>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	0052      	lsls	r2, r2, #1
 8001a56:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	00d2      	lsls	r2, r2, #3
 8001a5e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f001 f90a 	bl	8002c88 <HAL_DMA_Init>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001a78:	f7ff ff3c 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_ADC_MspInit+0x158>)
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b00d      	add	sp, #52	; 0x34
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	40012400 	.word	0x40012400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000800 	.word	0x48000800
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	200000f4 	.word	0x200000f4
 8001aa4:	40020008 	.word	0x40020008

08001aa8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	2414      	movs	r4, #20
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	2314      	movs	r3, #20
 8001ab8:	001a      	movs	r2, r3
 8001aba:	2100      	movs	r1, #0
 8001abc:	f006 f991 	bl	8007de2 <memset>
  if(hdac->Instance==DAC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_DAC_MspInit+0x84>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12b      	bne.n	8001b22 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0589      	lsls	r1, r1, #22
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	059b      	lsls	r3, r3, #22
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0289      	lsls	r1, r1, #10
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_DAC_MspInit+0x88>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2210      	movs	r2, #16
 8001b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	193a      	adds	r2, r7, r4
 8001b16:	2390      	movs	r3, #144	; 0x90
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f001 fac9 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b00b      	add	sp, #44	; 0x2c
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40007400 	.word	0x40007400
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	2414      	movs	r4, #20
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f006 f94b 	bl	8007de2 <memset>
  if(hi2c->Instance==I2C1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_I2C_MspInit+0x90>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d132      	bne.n	8001bbc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	02c9      	lsls	r1, r1, #11
 8001b60:	430a      	orrs	r2, r1
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	02db      	lsls	r3, r3, #11
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	22c0      	movs	r2, #192	; 0xc0
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7a:	0021      	movs	r1, r4
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	2212      	movs	r2, #18
 8001b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2201      	movs	r2, #1
 8001b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_I2C_MspInit+0x98>)
 8001b98:	0019      	movs	r1, r3
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	f001 fa8a 	bl	80030b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	0389      	lsls	r1, r1, #14
 8001baa:	430a      	orrs	r2, r1
 8001bac:	61da      	str	r2, [r3, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0x94>)
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	039b      	lsls	r3, r3, #14
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b00b      	add	sp, #44	; 0x2c
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b08d      	sub	sp, #52	; 0x34
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	241c      	movs	r4, #28
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	0018      	movs	r0, r3
 8001bde:	2314      	movs	r3, #20
 8001be0:	001a      	movs	r2, r3
 8001be2:	2100      	movs	r1, #0
 8001be4:	f006 f8fd 	bl	8007de2 <memset>
  if(hspi->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <HAL_SPI_MspInit+0x100>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d132      	bne.n	8001c58 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0149      	lsls	r1, r1, #5
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	015b      	lsls	r3, r3, #5
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	02c9      	lsls	r1, r1, #11
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	02db      	lsls	r3, r3, #11
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c2a:	0021      	movs	r1, r4
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2218      	movs	r2, #24
 8001c30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2202      	movs	r2, #2
 8001c36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2203      	movs	r2, #3
 8001c42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_SPI_MspInit+0x108>)
 8001c4e:	0019      	movs	r1, r3
 8001c50:	0010      	movs	r0, r2
 8001c52:	f001 fa2f 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c56:	e037      	b.n	8001cc8 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_SPI_MspInit+0x10c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d132      	bne.n	8001cc8 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	01c9      	lsls	r1, r1, #7
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	61da      	str	r2, [r3, #28]
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	02c9      	lsls	r1, r1, #11
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_SPI_MspInit+0x104>)
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	02db      	lsls	r3, r3, #11
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c9a:	211c      	movs	r1, #28
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	22c0      	movs	r2, #192	; 0xc0
 8001ca0:	01d2      	lsls	r2, r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_SPI_MspInit+0x108>)
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	f001 f9f6 	bl	80030b4 <HAL_GPIO_Init>
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b00d      	add	sp, #52	; 0x34
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	40013000 	.word	0x40013000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	40003800 	.word	0x40003800

08001ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <HAL_TIM_Base_MspInit+0x8c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11e      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0109      	lsls	r1, r1, #4
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2101      	movs	r1, #1
 8001d12:	200d      	movs	r0, #13
 8001d14:	f000 feec 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001d18:	200d      	movs	r0, #13
 8001d1a:	f000 fefe 	bl	8002b1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2101      	movs	r1, #1
 8001d22:	200e      	movs	r0, #14
 8001d24:	f000 fee4 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d28:	200e      	movs	r0, #14
 8001d2a:	f000 fef6 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d2e:	e019      	b.n	8001d64 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	05db      	lsls	r3, r3, #23
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d113      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_TIM_Base_MspInit+0x90>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	200f      	movs	r0, #15
 8001d5a:	f000 fec9 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 fedb 	bl	8002b1a <HAL_NVIC_EnableIRQ>
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b004      	add	sp, #16
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <HAL_TIM_OC_MspInit+0x44>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d113      	bne.n	8001dae <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_TIM_OC_MspInit+0x48>)
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_TIM_OC_MspInit+0x48>)
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_TIM_OC_MspInit+0x48>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2010      	movs	r0, #16
 8001da4:	f000 fea4 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f000 feb6 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b004      	add	sp, #16
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	2414      	movs	r4, #20
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	0018      	movs	r0, r3
 8001dce:	2314      	movs	r3, #20
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f006 f805 	bl	8007de2 <memset>
  if(htim->Instance==TIM1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <HAL_TIM_MspPostInit+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d126      	bne.n	8001e30 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	0289      	lsls	r1, r1, #10
 8001dec:	430a      	orrs	r2, r1
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	0052      	lsls	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	0021      	movs	r1, r4
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	187a      	adds	r2, r7, r1
 8001e22:	2390      	movs	r3, #144	; 0x90
 8001e24:	05db      	lsls	r3, r3, #23
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f001 f943 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e2e:	e02a      	b.n	8001e86 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	05db      	lsls	r3, r3, #23
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d124      	bne.n	8001e86 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	02c9      	lsls	r1, r1, #11
 8001e46:	430a      	orrs	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_TIM_MspPostInit+0xd4>)
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	02db      	lsls	r3, r3, #11
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e58:	2114      	movs	r1, #20
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2202      	movs	r2, #2
 8001e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2202      	movs	r2, #2
 8001e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_TIM_MspPostInit+0xd8>)
 8001e7e:	0019      	movs	r1, r3
 8001e80:	0010      	movs	r0, r2
 8001e82:	f001 f917 	bl	80030b4 <HAL_GPIO_Init>
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b00b      	add	sp, #44	; 0x2c
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	2414      	movs	r4, #20
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	2314      	movs	r3, #20
 8001eac:	001a      	movs	r2, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f005 ff97 	bl	8007de2 <memset>
  if(huart->Instance==USART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <HAL_UART_MspInit+0xa4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d13b      	bne.n	8001f36 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	01c9      	lsls	r1, r1, #7
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0289      	lsls	r1, r1, #10
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_UART_MspInit+0xa8>)
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	22c0      	movs	r2, #192	; 0xc0
 8001efa:	00d2      	lsls	r2, r2, #3
 8001efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	0021      	movs	r1, r4
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2202      	movs	r2, #2
 8001f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2201      	movs	r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	187a      	adds	r2, r7, r1
 8001f1a:	2390      	movs	r3, #144	; 0x90
 8001f1c:	05db      	lsls	r3, r3, #23
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f001 f8c7 	bl	80030b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201b      	movs	r0, #27
 8001f2c:	f000 fde0 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f30:	201b      	movs	r0, #27
 8001f32:	f000 fdf2 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b00b      	add	sp, #44	; 0x2c
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40021000 	.word	0x40021000

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f8fa 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <DMA1_Channel1_IRQHandler+0x14>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 ffad 	bl	8002ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	200000f4 	.word	0x200000f4

08001f90 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f003 fcf0 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000260 	.word	0x20000260

08001fa8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <TIM1_CC_IRQHandler+0x14>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f003 fce4 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000260 	.word	0x20000260

08001fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <TIM2_IRQHandler+0x14>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f003 fcd8 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	200002a8 	.word	0x200002a8

08001fd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <TIM3_IRQHandler+0x14>)
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f003 fccc 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	200002f0 	.word	0x200002f0

08001ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <USART1_IRQHandler+0x14>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f004 fd4c 	bl	8006a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	20000338 	.word	0x20000338

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	18d3      	adds	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f005 fe8c 	bl	8007d54 <__errno>
 800203c:	0003      	movs	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	2301      	movs	r3, #1
 8002044:	425b      	negs	r3, r3
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	18d2      	adds	r2, r2, r3
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b006      	add	sp, #24
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20002000 	.word	0x20002000
 8002068:	00000400 	.word	0x00000400
 800206c:	20000468 	.word	0x20000468
 8002070:	20000480 	.word	0x20000480

08002074 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <Reset_Handler>:
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopForever+0x2>)
 8002082:	4685      	mov	sp, r0
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopForever+0x6>)
 8002086:	490e      	ldr	r1, [pc, #56]	; (80020c0 <LoopForever+0xa>)
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <LoopForever+0xe>)
 800208a:	2300      	movs	r3, #0
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:
 800208e:	58d4      	ldr	r4, [r2, r3]
 8002090:	50c4      	str	r4, [r0, r3]
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:
 8002094:	18c4      	adds	r4, r0, r3
 8002096:	428c      	cmp	r4, r1
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopForever+0x12>)
 800209c:	4c0b      	ldr	r4, [pc, #44]	; (80020cc <LoopForever+0x16>)
 800209e:	2300      	movs	r3, #0
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:
 80020a6:	42a2      	cmp	r2, r4
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>
 80020aa:	f7ff ffe3 	bl	8002074 <SystemInit>
 80020ae:	f005 fe57 	bl	8007d60 <__libc_init_array>
 80020b2:	f7fe fea7 	bl	8000e04 <main>

080020b6 <LoopForever>:
 80020b6:	e7fe      	b.n	80020b6 <LoopForever>
 80020b8:	20002000 	.word	0x20002000
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000098 	.word	0x20000098
 80020c4:	0800810c 	.word	0x0800810c
 80020c8:	20000098 	.word	0x20000098
 80020cc:	20000480 	.word	0x20000480

080020d0 <ADC1_COMP_IRQHandler>:
 80020d0:	e7fe      	b.n	80020d0 <ADC1_COMP_IRQHandler>
	...

080020d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_Init+0x24>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_Init+0x24>)
 80020de:	2110      	movs	r1, #16
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f809 	bl	80020fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ea:	f7ff fc09 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_InitTick+0x5c>)
 8002106:	681c      	ldr	r4, [r3, #0]
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_InitTick+0x60>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	0019      	movs	r1, r3
 800210e:	23fa      	movs	r3, #250	; 0xfa
 8002110:	0098      	lsls	r0, r3, #2
 8002112:	f7fd fff9 	bl	8000108 <__udivsi3>
 8002116:	0003      	movs	r3, r0
 8002118:	0019      	movs	r1, r3
 800211a:	0020      	movs	r0, r4
 800211c:	f7fd fff4 	bl	8000108 <__udivsi3>
 8002120:	0003      	movs	r3, r0
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fd09 	bl	8002b3a <HAL_SYSTICK_Config>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d001      	beq.n	8002130 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e00f      	b.n	8002150 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d80b      	bhi.n	800214e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	2301      	movs	r3, #1
 800213a:	425b      	negs	r3, r3
 800213c:	2200      	movs	r2, #0
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fcd6 	bl	8002af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_InitTick+0x64>)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b003      	add	sp, #12
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	20000028 	.word	0x20000028
 800215c:	20000030 	.word	0x20000030
 8002160:	2000002c 	.word	0x2000002c

08002164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x1c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	001a      	movs	r2, r3
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	18d2      	adds	r2, r2, r3
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_IncTick+0x20>)
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	20000030 	.word	0x20000030
 8002184:	2000046c 	.word	0x2000046c

08002188 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_GetTick+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	2000046c 	.word	0x2000046c

0800219c <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_SuspendTick+0x18>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_SuspendTick+0x18>)
 80021a6:	2102      	movs	r1, #2
 80021a8:	438a      	bics	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e125      	b.n	8002422 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2234      	movs	r2, #52	; 0x34
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7ff fbaa 	bl	8001948 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	2210      	movs	r2, #16
 80021fa:	4013      	ands	r3, r2
 80021fc:	d000      	beq.n	8002200 <HAL_ADC_Init+0x48>
 80021fe:	e103      	b.n	8002408 <HAL_ADC_Init+0x250>
 8002200:	230f      	movs	r3, #15
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d000      	beq.n	800220c <HAL_ADC_Init+0x54>
 800220a:	e0fd      	b.n	8002408 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002216:	d000      	beq.n	800221a <HAL_ADC_Init+0x62>
 8002218:	e0f6      	b.n	8002408 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	4a83      	ldr	r2, [pc, #524]	; (800242c <HAL_ADC_Init+0x274>)
 8002220:	4013      	ands	r3, r2
 8002222:	2202      	movs	r2, #2
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
 8002234:	2b01      	cmp	r3, #1
 8002236:	d112      	bne.n	800225e <HAL_ADC_Init+0xa6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	2b01      	cmp	r3, #1
 8002244:	d009      	beq.n	800225a <HAL_ADC_Init+0xa2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	401a      	ands	r2, r3
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	429a      	cmp	r2, r3
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0xa6>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_ADC_Init+0xa8>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2218      	movs	r2, #24
 800226c:	4393      	bics	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	0899      	lsrs	r1, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4964      	ldr	r1, [pc, #400]	; (8002430 <HAL_ADC_Init+0x278>)
 800229e:	400a      	ands	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7e1b      	ldrb	r3, [r3, #24]
 80022a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e5b      	ldrb	r3, [r3, #25]
 80022ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7e9b      	ldrb	r3, [r3, #26]
 80022b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80022b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d002      	beq.n	80022c6 <HAL_ADC_Init+0x10e>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	e000      	b.n	80022c8 <HAL_ADC_Init+0x110>
 80022c6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80022ce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_Init+0x124>
 80022d8:	2304      	movs	r3, #4
 80022da:	e000      	b.n	80022de <HAL_ADC_Init+0x126>
 80022dc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80022de:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2124      	movs	r1, #36	; 0x24
 80022e4:	5c5b      	ldrb	r3, [r3, r1]
 80022e6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022e8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7edb      	ldrb	r3, [r3, #27]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d115      	bne.n	8002324 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e9b      	ldrb	r3, [r3, #26]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	0252      	lsls	r2, r2, #9
 8002306:	4313      	orrs	r3, r2
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	e00b      	b.n	8002324 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	2220      	movs	r2, #32
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	2201      	movs	r2, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	23c2      	movs	r3, #194	; 0xc2
 800232a:	33ff      	adds	r3, #255	; 0xff
 800232c:	429a      	cmp	r2, r3
 800232e:	d007      	beq.n	8002340 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002338:	4313      	orrs	r3, r2
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	4313      	orrs	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68d9      	ldr	r1, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	055b      	lsls	r3, r3, #21
 8002358:	429a      	cmp	r2, r3
 800235a:	d01b      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d017      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2b02      	cmp	r3, #2
 800236a:	d013      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	2b03      	cmp	r3, #3
 8002372:	d00f      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	2b04      	cmp	r3, #4
 800237a:	d00b      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2b05      	cmp	r3, #5
 8002382:	d007      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	2b06      	cmp	r3, #6
 800238a:	d003      	beq.n	8002394 <HAL_ADC_Init+0x1dc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b07      	cmp	r3, #7
 8002392:	d112      	bne.n	80023ba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2107      	movs	r1, #7
 80023a0:	438a      	bics	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6959      	ldr	r1, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	2207      	movs	r2, #7
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_ADC_Init+0x27c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d10b      	bne.n	80023e2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	2203      	movs	r2, #3
 80023d6:	4393      	bics	r3, r2
 80023d8:	2201      	movs	r2, #1
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023e0:	e01c      	b.n	800241c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	2212      	movs	r2, #18
 80023e8:	4393      	bics	r3, r2
 80023ea:	2210      	movs	r2, #16
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2201      	movs	r2, #1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80023fe:	230f      	movs	r3, #15
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002406:	e009      	b.n	800241c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2210      	movs	r2, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002414:	230f      	movs	r3, #15
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800241c:	230f      	movs	r3, #15
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	781b      	ldrb	r3, [r3, #0]
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	fffffefd 	.word	0xfffffefd
 8002430:	fffe0219 	.word	0xfffe0219
 8002434:	833fffe7 	.word	0x833fffe7

08002438 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2317      	movs	r3, #23
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2204      	movs	r2, #4
 8002454:	4013      	ands	r3, r2
 8002456:	d15e      	bne.n	8002516 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2234      	movs	r2, #52	; 0x34
 800245c:	5c9b      	ldrb	r3, [r3, r2]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Start_DMA+0x2e>
 8002462:	2302      	movs	r3, #2
 8002464:	e05e      	b.n	8002524 <HAL_ADC_Start_DMA+0xec>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2234      	movs	r2, #52	; 0x34
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	7e5b      	ldrb	r3, [r3, #25]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d007      	beq.n	8002486 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002476:	2317      	movs	r3, #23
 8002478:	18fc      	adds	r4, r7, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 f983 	bl	8002788 <ADC_Enable>
 8002482:	0003      	movs	r3, r0
 8002484:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002486:	2317      	movs	r3, #23
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d146      	bne.n	800251e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_ADC_Start_DMA+0xf4>)
 8002496:	4013      	ands	r3, r2
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0052      	lsls	r2, r2, #1
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2234      	movs	r2, #52	; 0x34
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_ADC_Start_DMA+0xf8>)
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_ADC_Start_DMA+0xfc>)
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_ADC_Start_DMA+0x100>)
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	221c      	movs	r2, #28
 80024ce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2110      	movs	r1, #16
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3340      	adds	r3, #64	; 0x40
 80024fa:	0019      	movs	r1, r3
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f000 fc0a 	bl	8002d18 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2104      	movs	r1, #4
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e003      	b.n	800251e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002516:	2317      	movs	r3, #23
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800251e:	2317      	movs	r3, #23
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b007      	add	sp, #28
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	fffff0fe 	.word	0xfffff0fe
 8002530:	08002891 	.word	0x08002891
 8002534:	08002945 	.word	0x08002945
 8002538:	08002963 	.word	0x08002963

0800253c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002576:	230f      	movs	r3, #15
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	429a      	cmp	r2, r3
 800258c:	d011      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x46>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d00d      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x46>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b02      	cmp	r3, #2
 800259c:	d009      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x46>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d005      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x46>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d001      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x46>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2234      	movs	r2, #52	; 0x34
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x54>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0d0      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1f6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2234      	movs	r2, #52	; 0x34
 80025c4:	2101      	movs	r1, #1
 80025c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d000      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x6a>
 80025d4:	e0b4      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a64      	ldr	r2, [pc, #400]	; (800276c <HAL_ADC_ConfigChannel+0x200>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d100      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x76>
 80025e0:	e082      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	429a      	cmp	r2, r3
 8002602:	d037      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d033      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2b02      	cmp	r3, #2
 8002612:	d02f      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2b03      	cmp	r3, #3
 800261a:	d02b      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2b04      	cmp	r3, #4
 8002622:	d027      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b05      	cmp	r3, #5
 800262a:	d023      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2b06      	cmp	r3, #6
 8002632:	d01f      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b07      	cmp	r3, #7
 800263a:	d01b      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2107      	movs	r1, #7
 8002648:	400b      	ands	r3, r1
 800264a:	429a      	cmp	r2, r3
 800264c:	d012      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2107      	movs	r1, #7
 800265a:	438a      	bics	r2, r1
 800265c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6959      	ldr	r1, [r3, #20]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2207      	movs	r2, #7
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b10      	cmp	r3, #16
 800267a:	d007      	beq.n	800268c <HAL_ADC_ConfigChannel+0x120>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b11      	cmp	r3, #17
 8002682:	d003      	beq.n	800268c <HAL_ADC_ConfigChannel+0x120>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b12      	cmp	r3, #18
 800268a:	d163      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_ADC_ConfigChannel+0x204>)
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b10      	cmp	r3, #16
 8002696:	d009      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x140>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b11      	cmp	r3, #17
 800269e:	d102      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x13a>
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	03db      	lsls	r3, r3, #15
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x144>
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	045b      	lsls	r3, r3, #17
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x144>
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <HAL_ADC_ConfigChannel+0x204>)
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d14a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_ADC_ConfigChannel+0x208>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	492d      	ldr	r1, [pc, #180]	; (8002778 <HAL_ADC_ConfigChannel+0x20c>)
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fd fd1f 	bl	8000108 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	001a      	movs	r2, r3
 80026ce:	0013      	movs	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f9      	bne.n	80026da <HAL_ADC_ConfigChannel+0x16e>
 80026e6:	e035      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	4099      	lsls	r1, r3
 80026f6:	000b      	movs	r3, r1
 80026f8:	43d9      	mvns	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b10      	cmp	r3, #16
 8002708:	d007      	beq.n	800271a <HAL_ADC_ConfigChannel+0x1ae>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b11      	cmp	r3, #17
 8002710:	d003      	beq.n	800271a <HAL_ADC_ConfigChannel+0x1ae>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b12      	cmp	r3, #18
 8002718:	d11c      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_ADC_ConfigChannel+0x204>)
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d007      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x1ca>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b11      	cmp	r3, #17
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x1c6>
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_ADC_ConfigChannel+0x210>)
 8002730:	e002      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1cc>
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_ADC_ConfigChannel+0x214>)
 8002734:	e000      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1cc>
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_ADC_ConfigChannel+0x218>)
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_ADC_ConfigChannel+0x204>)
 800273a:	400b      	ands	r3, r1
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e009      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	2220      	movs	r2, #32
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800274c:	230f      	movs	r3, #15
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2234      	movs	r2, #52	; 0x34
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	00001001 	.word	0x00001001
 8002770:	40012708 	.word	0x40012708
 8002774:	20000028 	.word	0x20000028
 8002778:	000f4240 	.word	0x000f4240
 800277c:	ffbfffff 	.word	0xffbfffff
 8002780:	feffffff 	.word	0xfeffffff
 8002784:	ff7fffff 	.word	0xff7fffff

08002788 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2203      	movs	r2, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d112      	bne.n	80027cc <ADC_Enable+0x44>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d009      	beq.n	80027c8 <ADC_Enable+0x40>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	401a      	ands	r2, r3
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d101      	bne.n	80027cc <ADC_Enable+0x44>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <ADC_Enable+0x46>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d152      	bne.n	8002878 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <ADC_Enable+0xfc>)
 80027da:	4013      	ands	r3, r2
 80027dc:	d00d      	beq.n	80027fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2210      	movs	r2, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2201      	movs	r2, #1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e03f      	b.n	800287a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <ADC_Enable+0x100>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	491f      	ldr	r1, [pc, #124]	; (800288c <ADC_Enable+0x104>)
 8002810:	0018      	movs	r0, r3
 8002812:	f7fd fc79 	bl	8000108 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800281a:	e002      	b.n	8002822 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3b01      	subs	r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002828:	f7ff fcae 	bl	8002188 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002830:	e01b      	b.n	800286a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002832:	f7ff fca9 	bl	8002188 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d914      	bls.n	800286a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00d      	beq.n	800286a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2210      	movs	r2, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2201      	movs	r2, #1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	2b01      	cmp	r3, #1
 8002876:	d1dc      	bne.n	8002832 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	80000017 	.word	0x80000017
 8002888:	20000028 	.word	0x20000028
 800288c:	000f4240 	.word	0x000f4240

08002890 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	2250      	movs	r2, #80	; 0x50
 80028a4:	4013      	ands	r3, r2
 80028a6:	d140      	bne.n	800292a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d12d      	bne.n	8002920 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d129      	bne.n	8002920 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d122      	bne.n	8002920 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2204      	movs	r2, #4
 80028e2:	4013      	ands	r3, r2
 80028e4:	d110      	bne.n	8002908 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	210c      	movs	r1, #12
 80028f2:	438a      	bics	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <ADC_DMAConvCplt+0xb0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	2201      	movs	r2, #1
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
 8002906:	e00b      	b.n	8002920 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	2220      	movs	r2, #32
 800290e:	431a      	orrs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	2201      	movs	r2, #1
 800291a:	431a      	orrs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0018      	movs	r0, r3
 8002924:	f7ff fe0a 	bl	800253c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002928:	e005      	b.n	8002936 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	0010      	movs	r0, r2
 8002934:	4798      	blx	r3
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	fffffefe 	.word	0xfffffefe

08002944 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff fdf9 	bl	800254c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}

08002962 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	2240      	movs	r2, #64	; 0x40
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2204      	movs	r2, #4
 8002982:	431a      	orrs	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff fde6 	bl	800255c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}

08002998 <__NVIC_EnableIRQ>:
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	0002      	movs	r2, r0
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b7f      	cmp	r3, #127	; 0x7f
 80029aa:	d809      	bhi.n	80029c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	001a      	movs	r2, r3
 80029b2:	231f      	movs	r3, #31
 80029b4:	401a      	ands	r2, r3
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <__NVIC_EnableIRQ+0x30>)
 80029b8:	2101      	movs	r1, #1
 80029ba:	4091      	lsls	r1, r2
 80029bc:	000a      	movs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	0002      	movs	r2, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b7f      	cmp	r3, #127	; 0x7f
 80029e0:	d828      	bhi.n	8002a34 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	33c0      	adds	r3, #192	; 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	589b      	ldr	r3, [r3, r2]
 80029f2:	1dfa      	adds	r2, r7, #7
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	0011      	movs	r1, r2
 80029f8:	2203      	movs	r2, #3
 80029fa:	400a      	ands	r2, r1
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	21ff      	movs	r1, #255	; 0xff
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	401a      	ands	r2, r3
 8002a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	401a      	ands	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	481f      	ldr	r0, [pc, #124]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	33c0      	adds	r3, #192	; 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	501a      	str	r2, [r3, r0]
}
 8002a32:	e031      	b.n	8002a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	3b08      	subs	r3, #8
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3306      	adds	r3, #6
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1dfa      	adds	r2, r7, #7
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	0011      	movs	r1, r2
 8002a54:	2203      	movs	r2, #3
 8002a56:	400a      	ands	r2, r1
 8002a58:	00d2      	lsls	r2, r2, #3
 8002a5a:	21ff      	movs	r1, #255	; 0xff
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	43d2      	mvns	r2, r2
 8002a62:	401a      	ands	r2, r3
 8002a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	22ff      	movs	r2, #255	; 0xff
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	0018      	movs	r0, r3
 8002a74:	2303      	movs	r3, #3
 8002a76:	4003      	ands	r3, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001c      	movs	r4, r3
 8002a84:	230f      	movs	r3, #15
 8002a86:	4023      	ands	r3, r4
 8002a88:	3b08      	subs	r3, #8
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	3306      	adds	r3, #6
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18c3      	adds	r3, r0, r3
 8002a94:	3304      	adds	r3, #4
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d301      	bcc.n	8002ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abc:	2301      	movs	r3, #1
 8002abe:	e010      	b.n	8002ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <SysTick_Config+0x44>)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	425b      	negs	r3, r3
 8002acc:	2103      	movs	r1, #3
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff7c 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x44>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x44>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	210f      	movs	r1, #15
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	1c02      	adds	r2, r0, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	0002      	movs	r2, r0
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff33 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff ffaf 	bl	8002aa8 <SysTick_Config>
 8002b4a:	0003      	movs	r3, r0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e015      	b.n	8002b92 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7fe ff95 	bl	8001aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_DAC_ConfigChannel+0x20>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e029      	b.n	8002c0e <HAL_DAC_ConfigChannel+0x74>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002bce:	223e      	movs	r2, #62	; 0x3e
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	795b      	ldrb	r3, [r3, #5]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_DAC_Start+0x16>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e028      	b.n	8002c7e <HAL_DAC_Start+0x68>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	409a      	lsls	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	223c      	movs	r2, #60	; 0x3c
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b3c      	cmp	r3, #60	; 0x3c
 8002c5e:	d107      	bne.n	8002c70 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e036      	b.n	8002d0c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2221      	movs	r2, #33	; 0x21
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_DMA_Init+0x8c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f9c4 	bl	800307c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	2100      	movs	r1, #0
 8002d08:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}  
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffffc00f 	.word	0xffffc00f

08002d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2317      	movs	r3, #23
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Start_IT+0x24>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e04f      	b.n	8002ddc <HAL_DMA_Start_IT+0xc4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	2101      	movs	r1, #1
 8002d42:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d13a      	bne.n	8002dc6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2221      	movs	r2, #33	; 0x21
 8002d54:	2102      	movs	r1, #2
 8002d56:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	438a      	bics	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f954 	bl	8003022 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	210e      	movs	r1, #14
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e00f      	b.n	8002db4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	210a      	movs	r1, #10
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2104      	movs	r1, #4
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e007      	b.n	8002dd6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002dce:	2317      	movs	r3, #23
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002dd6:	2317      	movs	r3, #23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
} 
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b006      	add	sp, #24
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2221      	movs	r2, #33	; 0x21
 8002df0:	5c9b      	ldrb	r3, [r3, r2]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d008      	beq.n	8002e0a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e020      	b.n	8002e4c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	210e      	movs	r1, #14
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	438a      	bics	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2101      	movs	r1, #1
 8002e34:	4091      	lsls	r1, r2
 8002e36:	000a      	movs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2221      	movs	r2, #33	; 0x21
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2221      	movs	r2, #33	; 0x21
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d006      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e028      	b.n	8002ed0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	210e      	movs	r1, #14
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4091      	lsls	r1, r2
 8002eaa:	000a      	movs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	0010      	movs	r0, r2
 8002ece:	4798      	blx	r3
    } 
  }
  return status;
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2204      	movs	r2, #4
 8002efc:	409a      	lsls	r2, r3
 8002efe:	0013      	movs	r3, r2
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	d024      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x72>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d020      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2220      	movs	r2, #32
 8002f16:	4013      	ands	r3, r2
 8002f18:	d107      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2104      	movs	r1, #4
 8002f26:	438a      	bics	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2104      	movs	r1, #4
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d100      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x66>
 8002f42:	e06a      	b.n	800301a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f4e:	e064      	b.n	800301a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2202      	movs	r2, #2
 8002f56:	409a      	lsls	r2, r3
 8002f58:	0013      	movs	r3, r2
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d02b      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xda>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d027      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	4013      	ands	r3, r2
 8002f72:	d10b      	bne.n	8002f8c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	210a      	movs	r1, #10
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2221      	movs	r2, #33	; 0x21
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2102      	movs	r1, #2
 8002f96:	4091      	lsls	r1, r2
 8002f98:	000a      	movs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d036      	beq.n	800301a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	0010      	movs	r0, r2
 8002fb4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002fb6:	e030      	b.n	800301a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d028      	beq.n	800301a <HAL_DMA_IRQHandler+0x13c>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d024      	beq.n	800301a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	210e      	movs	r1, #14
 8002fdc:	438a      	bics	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4091      	lsls	r1, r2
 8002fec:	000a      	movs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	0010      	movs	r0, r2
 8003016:	4798      	blx	r3
    }
   }
}  
 8003018:	e7ff      	b.n	800301a <HAL_DMA_IRQHandler+0x13c>
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}

08003022 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2101      	movs	r1, #1
 800303a:	4091      	lsls	r1, r2
 800303c:	000a      	movs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d108      	bne.n	8003062 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003060:	e007      	b.n	8003072 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	60da      	str	r2, [r3, #12]
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a08      	ldr	r2, [pc, #32]	; (80030ac <DMA_CalcBaseAndBitshift+0x30>)
 800308a:	4694      	mov	ip, r2
 800308c:	4463      	add	r3, ip
 800308e:	2114      	movs	r1, #20
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd f839 	bl	8000108 <__udivsi3>
 8003096:	0003      	movs	r3, r0
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <DMA_CalcBaseAndBitshift+0x34>)
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	bffdfff8 	.word	0xbffdfff8
 80030b0:	40020000 	.word	0x40020000

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c2:	e14f      	b.n	8003364 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4091      	lsls	r1, r2
 80030ce:	000a      	movs	r2, r1
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d100      	bne.n	80030dc <HAL_GPIO_Init+0x28>
 80030da:	e140      	b.n	800335e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d005      	beq.n	80030f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2203      	movs	r2, #3
 80030ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d130      	bne.n	8003156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	409a      	lsls	r2, r3
 8003102:	0013      	movs	r3, r2
 8003104:	43da      	mvns	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	409a      	lsls	r2, r3
 8003116:	0013      	movs	r3, r2
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312a:	2201      	movs	r2, #1
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
 8003130:	0013      	movs	r3, r2
 8003132:	43da      	mvns	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	2201      	movs	r2, #1
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
 8003148:	0013      	movs	r3, r2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2203      	movs	r2, #3
 800315c:	4013      	ands	r3, r2
 800315e:	2b03      	cmp	r3, #3
 8003160:	d017      	beq.n	8003192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	409a      	lsls	r2, r3
 8003170:	0013      	movs	r3, r2
 8003172:	43da      	mvns	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2203      	movs	r2, #3
 8003198:	4013      	ands	r3, r2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d123      	bne.n	80031e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	58d3      	ldr	r3, [r2, r3]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2207      	movs	r2, #7
 80031b0:	4013      	ands	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	43da      	mvns	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2107      	movs	r1, #7
 80031ca:	400b      	ands	r3, r1
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	409a      	lsls	r2, r3
 80031d0:	0013      	movs	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	6939      	ldr	r1, [r7, #16]
 80031e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	409a      	lsls	r2, r3
 80031f4:	0013      	movs	r3, r2
 80031f6:	43da      	mvns	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	401a      	ands	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	23c0      	movs	r3, #192	; 0xc0
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	4013      	ands	r3, r2
 8003224:	d100      	bne.n	8003228 <HAL_GPIO_Init+0x174>
 8003226:	e09a      	b.n	800335e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003228:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_GPIO_Init+0x2c8>)
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_GPIO_Init+0x2c8>)
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	619a      	str	r2, [r3, #24]
 8003234:	4b51      	ldr	r3, [pc, #324]	; (800337c <HAL_GPIO_Init+0x2c8>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003240:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_GPIO_Init+0x2cc>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	589b      	ldr	r3, [r3, r2]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2203      	movs	r2, #3
 8003252:	4013      	ands	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	409a      	lsls	r2, r3
 800325a:	0013      	movs	r3, r2
 800325c:	43da      	mvns	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	2390      	movs	r3, #144	; 0x90
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	429a      	cmp	r2, r3
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0x1e2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a44      	ldr	r2, [pc, #272]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_Init+0x1de>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a43      	ldr	r2, [pc, #268]	; (8003388 <HAL_GPIO_Init+0x2d4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_Init+0x1da>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_GPIO_Init+0x2d8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_Init+0x1d6>
 8003286:	2303      	movs	r3, #3
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 800328a:	2305      	movs	r3, #5
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003296:	2300      	movs	r3, #0
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	2103      	movs	r1, #3
 800329c:	400a      	ands	r2, r1
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032a8:	4935      	ldr	r1, [pc, #212]	; (8003380 <HAL_GPIO_Init+0x2cc>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43da      	mvns	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	025b      	lsls	r3, r3, #9
 80032ce:	4013      	ands	r3, r2
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	029b      	lsls	r3, r3, #10
 80032f8:	4013      	ands	r3, r2
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43da      	mvns	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	035b      	lsls	r3, r3, #13
 8003322:	4013      	ands	r3, r2
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43da      	mvns	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	039b      	lsls	r3, r3, #14
 800334c:	4013      	ands	r3, r2
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	40da      	lsrs	r2, r3
 800336c:	1e13      	subs	r3, r2, #0
 800336e:	d000      	beq.n	8003372 <HAL_GPIO_Init+0x2be>
 8003370:	e6a8      	b.n	80030c4 <HAL_GPIO_Init+0x10>
  } 
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40010000 	.word	0x40010000
 8003384:	48000400 	.word	0x48000400
 8003388:	48000800 	.word	0x48000800
 800338c:	48000c00 	.word	0x48000c00
 8003390:	40010400 	.word	0x40010400

08003394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	000a      	movs	r2, r1
 800339e:	1cbb      	adds	r3, r7, #2
 80033a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	1cba      	adds	r2, r7, #2
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	4013      	ands	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80033ae:	230f      	movs	r3, #15
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e003      	b.n	80033c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033c0:	230f      	movs	r3, #15
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	781b      	ldrb	r3, [r3, #0]
  }
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	0008      	movs	r0, r1
 80033d8:	0011      	movs	r1, r2
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	1c02      	adds	r2, r0, #0
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	1c7b      	adds	r3, r7, #1
 80033e2:	1c0a      	adds	r2, r1, #0
 80033e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e6:	1c7b      	adds	r3, r7, #1
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ee:	1cbb      	adds	r3, r7, #2
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f6:	e003      	b.n	8003400 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033f8:	1cbb      	adds	r3, r7, #2
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e082      	b.n	8003520 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2241      	movs	r2, #65	; 0x41
 800341e:	5c9b      	ldrb	r3, [r3, r2]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f7fe fb7f 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2241      	movs	r2, #65	; 0x41
 800343a:	2124      	movs	r1, #36	; 0x24
 800343c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4934      	ldr	r1, [pc, #208]	; (8003528 <HAL_I2C_Init+0x120>)
 8003458:	400a      	ands	r2, r1
 800345a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4931      	ldr	r1, [pc, #196]	; (800352c <HAL_I2C_Init+0x124>)
 8003468:	400a      	ands	r2, r1
 800346a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d108      	bne.n	8003486 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	0209      	lsls	r1, r1, #8
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e007      	b.n	8003496 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2184      	movs	r1, #132	; 0x84
 8003490:	0209      	lsls	r1, r1, #8
 8003492:	430a      	orrs	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d104      	bne.n	80034a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	491f      	ldr	r1, [pc, #124]	; (8003530 <HAL_I2C_Init+0x128>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	491a      	ldr	r1, [pc, #104]	; (800352c <HAL_I2C_Init+0x124>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69d9      	ldr	r1, [r3, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2241      	movs	r2, #65	; 0x41
 800350c:	2120      	movs	r1, #32
 800350e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2242      	movs	r2, #66	; 0x42
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	f0ffffff 	.word	0xf0ffffff
 800352c:	ffff7fff 	.word	0xffff7fff
 8003530:	02008000 	.word	0x02008000

08003534 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	0008      	movs	r0, r1
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	0019      	movs	r1, r3
 8003542:	230a      	movs	r3, #10
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	1c02      	adds	r2, r0, #0
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	2308      	movs	r3, #8
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	1c0a      	adds	r2, r1, #0
 8003550:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2241      	movs	r2, #65	; 0x41
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	d000      	beq.n	8003560 <HAL_I2C_Master_Transmit+0x2c>
 800355e:	e0e7      	b.n	8003730 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	5c9b      	ldrb	r3, [r3, r2]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2C_Master_Transmit+0x3a>
 800356a:	2302      	movs	r3, #2
 800356c:	e0e1      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003576:	f7fe fe07 	bl	8002188 <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	0219      	lsls	r1, r3, #8
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	f000 fa04 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2241      	movs	r2, #65	; 0x41
 800359c:	2121      	movs	r1, #33	; 0x21
 800359e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2242      	movs	r2, #66	; 0x42
 80035a4:	2110      	movs	r1, #16
 80035a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2208      	movs	r2, #8
 80035b8:	18ba      	adds	r2, r7, r2
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2bff      	cmp	r3, #255	; 0xff
 80035cc:	d911      	bls.n	80035f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	045c      	lsls	r4, r3, #17
 80035de:	230a      	movs	r3, #10
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	8819      	ldrh	r1, [r3, #0]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	4b55      	ldr	r3, [pc, #340]	; (800373c <HAL_I2C_Master_Transmit+0x208>)
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	0023      	movs	r3, r4
 80035ec:	f000 fb74 	bl	8003cd8 <I2C_TransferConfig>
 80035f0:	e075      	b.n	80036de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	b2da      	uxtb	r2, r3
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	049c      	lsls	r4, r3, #18
 8003606:	230a      	movs	r3, #10
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	8819      	ldrh	r1, [r3, #0]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_I2C_Master_Transmit+0x208>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	0023      	movs	r3, r4
 8003614:	f000 fb60 	bl	8003cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003618:	e061      	b.n	80036de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 f9f8 	bl	8003a16 <I2C_WaitOnTXISFlagUntilTimeout>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03a      	beq.n	80036de <HAL_I2C_Master_Transmit+0x1aa>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d136      	bne.n	80036de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0013      	movs	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	f000 f98b 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e053      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2bff      	cmp	r3, #255	; 0xff
 8003692:	d911      	bls.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	045c      	lsls	r4, r3, #17
 80036a4:	230a      	movs	r3, #10
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	8819      	ldrh	r1, [r3, #0]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	0023      	movs	r3, r4
 80036b2:	f000 fb11 	bl	8003cd8 <I2C_TransferConfig>
 80036b6:	e012      	b.n	80036de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	049c      	lsls	r4, r3, #18
 80036cc:	230a      	movs	r3, #10
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	8819      	ldrh	r1, [r3, #0]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	0023      	movs	r3, r4
 80036da:	f000 fafd 	bl	8003cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d198      	bne.n	800361a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f9d0 	bl	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e01a      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2220      	movs	r2, #32
 8003702:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	490c      	ldr	r1, [pc, #48]	; (8003740 <HAL_I2C_Master_Transmit+0x20c>)
 8003710:	400a      	ands	r2, r1
 8003712:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2241      	movs	r2, #65	; 0x41
 8003718:	2120      	movs	r1, #32
 800371a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2242      	movs	r2, #66	; 0x42
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b007      	add	sp, #28
 8003738:	bd90      	pop	{r4, r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	80002000 	.word	0x80002000
 8003740:	fe00e800 	.word	0xfe00e800

08003744 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	0008      	movs	r0, r1
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	0019      	movs	r1, r3
 8003752:	230a      	movs	r3, #10
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	1c02      	adds	r2, r0, #0
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	2308      	movs	r3, #8
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	1c0a      	adds	r2, r1, #0
 8003760:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2241      	movs	r2, #65	; 0x41
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d000      	beq.n	8003770 <HAL_I2C_Master_Receive+0x2c>
 800376e:	e0e8      	b.n	8003942 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_I2C_Master_Receive+0x3a>
 800377a:	2302      	movs	r3, #2
 800377c:	e0e2      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2240      	movs	r2, #64	; 0x40
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003786:	f7fe fcff 	bl	8002188 <HAL_GetTick>
 800378a:	0003      	movs	r3, r0
 800378c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	0219      	lsls	r1, r3, #8
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2319      	movs	r3, #25
 800379a:	2201      	movs	r2, #1
 800379c:	f000 f8fc 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cd      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2241      	movs	r2, #65	; 0x41
 80037ac:	2122      	movs	r1, #34	; 0x22
 80037ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2242      	movs	r2, #66	; 0x42
 80037b4:	2110      	movs	r1, #16
 80037b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2208      	movs	r2, #8
 80037c8:	18ba      	adds	r2, r7, r2
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2bff      	cmp	r3, #255	; 0xff
 80037dc:	d911      	bls.n	8003802 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	045c      	lsls	r4, r3, #17
 80037ee:	230a      	movs	r3, #10
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	8819      	ldrh	r1, [r3, #0]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_I2C_Master_Receive+0x208>)
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	0023      	movs	r3, r4
 80037fc:	f000 fa6c 	bl	8003cd8 <I2C_TransferConfig>
 8003800:	e076      	b.n	80038f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	049c      	lsls	r4, r3, #18
 8003816:	230a      	movs	r3, #10
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	8819      	ldrh	r1, [r3, #0]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_I2C_Master_Receive+0x208>)
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	0023      	movs	r3, r4
 8003824:	f000 fa58 	bl	8003cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003828:	e062      	b.n	80038f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 f96b 	bl	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e082      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d03a      	beq.n	80038f0 <HAL_I2C_Master_Receive+0x1ac>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b00      	cmp	r3, #0
 8003880:	d136      	bne.n	80038f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	0013      	movs	r3, r2
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	f000 f882 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e053      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d911      	bls.n	80038ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	045c      	lsls	r4, r3, #17
 80038b6:	230a      	movs	r3, #10
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	8819      	ldrh	r1, [r3, #0]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	2300      	movs	r3, #0
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	0023      	movs	r3, r4
 80038c4:	f000 fa08 	bl	8003cd8 <I2C_TransferConfig>
 80038c8:	e012      	b.n	80038f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	049c      	lsls	r4, r3, #18
 80038de:	230a      	movs	r3, #10
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	8819      	ldrh	r1, [r3, #0]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	0023      	movs	r3, r4
 80038ec:	f000 f9f4 	bl	8003cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d197      	bne.n	800382a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0018      	movs	r0, r3
 8003902:	f000 f8c7 	bl	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e01a      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2220      	movs	r2, #32
 8003914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	490b      	ldr	r1, [pc, #44]	; (8003950 <HAL_I2C_Master_Receive+0x20c>)
 8003922:	400a      	ands	r2, r1
 8003924:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2241      	movs	r2, #65	; 0x41
 800392a:	2120      	movs	r1, #32
 800392c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2242      	movs	r2, #66	; 0x42
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2240      	movs	r2, #64	; 0x40
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b007      	add	sp, #28
 800394a:	bd90      	pop	{r4, r7, pc}
 800394c:	80002400 	.word	0x80002400
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2202      	movs	r2, #2
 8003964:	4013      	ands	r3, r2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d103      	bne.n	8003972 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2201      	movs	r2, #1
 800397a:	4013      	ands	r3, r2
 800397c:	2b01      	cmp	r3, #1
 800397e:	d007      	beq.n	8003990 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	430a      	orrs	r2, r1
 800398e:	619a      	str	r2, [r3, #24]
  }
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	1dfb      	adds	r3, r7, #7
 80039a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a8:	e021      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	d01e      	beq.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fe fbea 	bl	8002188 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d113      	bne.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	2220      	movs	r2, #32
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2241      	movs	r2, #65	; 0x41
 80039d6:	2120      	movs	r1, #32
 80039d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2242      	movs	r2, #66	; 0x42
 80039de:	2100      	movs	r1, #0
 80039e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	425a      	negs	r2, r3
 80039fe:	4153      	adcs	r3, r2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	001a      	movs	r2, r3
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d0ce      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a22:	e02b      	b.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 f8da 	bl	8003be4 <I2C_IsAcknowledgeFailed>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d001      	beq.n	8003a38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e029      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	d01e      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fba3 	bl	8002188 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d113      	bne.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	2220      	movs	r2, #32
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2241      	movs	r2, #65	; 0x41
 8003a64:	2120      	movs	r1, #32
 8003a66:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2242      	movs	r2, #66	; 0x42
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e007      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2202      	movs	r2, #2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d1cc      	bne.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	e028      	b.n	8003af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f89b 	bl	8003be4 <I2C_IsAcknowledgeFailed>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e026      	b.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fe fb67 	bl	8002188 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d113      	bne.n	8003af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2241      	movs	r2, #65	; 0x41
 8003adc:	2120      	movs	r1, #32
 8003ade:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2242      	movs	r2, #66	; 0x42
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d1cf      	bne.n	8003aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b18:	e055      	b.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f85f 	bl	8003be4 <I2C_IsAcknowledgeFailed>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e053      	b.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d129      	bne.n	8003b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2204      	movs	r2, #4
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d105      	bne.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e03f      	b.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	491d      	ldr	r1, [pc, #116]	; (8003be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2241      	movs	r2, #65	; 0x41
 8003b78:	2120      	movs	r1, #32
 8003b7a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2242      	movs	r2, #66	; 0x42
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e022      	b.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fe fafa 	bl	8002188 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	2220      	movs	r2, #32
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2241      	movs	r2, #65	; 0x41
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2240      	movs	r2, #64	; 0x40
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d1a2      	bne.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	fe00e800 	.word	0xfe00e800

08003be4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d164      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	049b      	lsls	r3, r3, #18
 8003c08:	401a      	ands	r2, r3
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	049b      	lsls	r3, r3, #18
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d02b      	beq.n	8003c6a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	01c9      	lsls	r1, r1, #7
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c24:	e021      	b.n	8003c6a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	d01e      	beq.n	8003c6a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fe faac 	bl	8002188 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <I2C_IsAcknowledgeFailed+0x5e>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d113      	bne.n	8003c6a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	2220      	movs	r2, #32
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2241      	movs	r2, #65	; 0x41
 8003c52:	2120      	movs	r1, #32
 8003c54:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2242      	movs	r2, #66	; 0x42
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e02f      	b.n	8003cca <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2220      	movs	r2, #32
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d1d6      	bne.n	8003c26 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2220      	movs	r2, #32
 8003c86:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff fe62 	bl	8003954 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <I2C_IsAcknowledgeFailed+0xf0>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2242      	movs	r2, #66	; 0x42
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	240a      	movs	r4, #10
 8003ce8:	193b      	adds	r3, r7, r4
 8003cea:	1c02      	adds	r2, r0, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	2009      	movs	r0, #9
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	1c0a      	adds	r2, r1, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	0d51      	lsrs	r1, r2, #21
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	00d2      	lsls	r2, r2, #3
 8003d04:	400a      	ands	r2, r1
 8003d06:	490e      	ldr	r1, [pc, #56]	; (8003d40 <I2C_TransferConfig+0x68>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	43d2      	mvns	r2, r2
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	0011      	movs	r1, r2
 8003d10:	193b      	adds	r3, r7, r4
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	059b      	lsls	r3, r3, #22
 8003d16:	0d9a      	lsrs	r2, r3, #22
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	0418      	lsls	r0, r3, #16
 8003d1e:	23ff      	movs	r3, #255	; 0xff
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	4003      	ands	r3, r0
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b005      	add	sp, #20
 8003d3c:	bd90      	pop	{r4, r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	03ff63ff 	.word	0x03ff63ff

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2241      	movs	r2, #65	; 0x41
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2240      	movs	r2, #64	; 0x40
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2240      	movs	r2, #64	; 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2241      	movs	r2, #65	; 0x41
 8003d74:	2124      	movs	r1, #36	; 0x24
 8003d76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4911      	ldr	r1, [pc, #68]	; (8003dd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2101      	movs	r1, #1
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2241      	movs	r2, #65	; 0x41
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	ffffefff 	.word	0xffffefff

08003ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2241      	movs	r2, #65	; 0x41
 8003dea:	5c9b      	ldrb	r3, [r3, r2]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d139      	bne.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2240      	movs	r2, #64	; 0x40
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e033      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2241      	movs	r2, #65	; 0x41
 8003e0c:	2124      	movs	r1, #36	; 0x24
 8003e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2241      	movs	r2, #65	; 0x41
 8003e56:	2120      	movs	r1, #32
 8003e58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b004      	add	sp, #16
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fffff0ff 	.word	0xfffff0ff

08003e74 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	000a      	movs	r2, r1
 8003e7e:	1cfb      	adds	r3, r7, #3
 8003e80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_PWR_EnterSTOPMode+0x60>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4393      	bics	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <HAL_PWR_EnterSTOPMode+0x60>)
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_PWR_EnterSTOPMode+0x64>)
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_PWR_EnterSTOPMode+0x64>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003eae:	1cfb      	adds	r3, r7, #3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003eb6:	bf30      	wfi
 8003eb8:	e002      	b.n	8003ec0 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003eba:	bf40      	sev
    __WFE();
 8003ebc:	bf20      	wfe
    __WFE();
 8003ebe:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_PWR_EnterSTOPMode+0x64>)
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_PWR_EnterSTOPMode+0x64>)
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	438a      	bics	r2, r1
 8003eca:	611a      	str	r2, [r3, #16]
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e301      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d100      	bne.n	8003efa <HAL_RCC_OscConfig+0x1e>
 8003ef8:	e08d      	b.n	8004016 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003efa:	4bc3      	ldr	r3, [pc, #780]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	220c      	movs	r2, #12
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00e      	beq.n	8003f24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f06:	4bc0      	ldr	r3, [pc, #768]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d116      	bne.n	8003f40 <HAL_RCC_OscConfig+0x64>
 8003f12:	4bbd      	ldr	r3, [pc, #756]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4bb8      	ldr	r3, [pc, #736]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	029b      	lsls	r3, r3, #10
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d100      	bne.n	8003f32 <HAL_RCC_OscConfig+0x56>
 8003f30:	e070      	b.n	8004014 <HAL_RCC_OscConfig+0x138>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <HAL_RCC_OscConfig+0x60>
 8003f3a:	e06b      	b.n	8004014 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e2d8      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x7c>
 8003f48:	4baf      	ldr	r3, [pc, #700]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4bae      	ldr	r3, [pc, #696]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0249      	lsls	r1, r1, #9
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e02f      	b.n	8003fb8 <HAL_RCC_OscConfig+0xdc>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCC_OscConfig+0x9e>
 8003f60:	4ba9      	ldr	r3, [pc, #676]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4ba8      	ldr	r3, [pc, #672]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f66:	49a9      	ldr	r1, [pc, #676]	; (800420c <HAL_RCC_OscConfig+0x330>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4ba6      	ldr	r3, [pc, #664]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4ba5      	ldr	r3, [pc, #660]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	49a7      	ldr	r1, [pc, #668]	; (8004210 <HAL_RCC_OscConfig+0x334>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e01e      	b.n	8003fb8 <HAL_RCC_OscConfig+0xdc>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10e      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xc4>
 8003f82:	4ba1      	ldr	r3, [pc, #644]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4ba0      	ldr	r3, [pc, #640]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	02c9      	lsls	r1, r1, #11
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	4b9d      	ldr	r3, [pc, #628]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b9c      	ldr	r3, [pc, #624]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	0249      	lsls	r1, r1, #9
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xdc>
 8003fa0:	4b99      	ldr	r3, [pc, #612]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b98      	ldr	r3, [pc, #608]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	4999      	ldr	r1, [pc, #612]	; (800420c <HAL_RCC_OscConfig+0x330>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b95      	ldr	r3, [pc, #596]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	4997      	ldr	r1, [pc, #604]	; (8004210 <HAL_RCC_OscConfig+0x334>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d014      	beq.n	8003fea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe f8e2 	bl	8002188 <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fca:	f7fe f8dd 	bl	8002188 <HAL_GetTick>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	; 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e28a      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fdc:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0xee>
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fe f8cd 	bl	8002188 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe f8c8 	bl	8002188 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e275      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b80      	ldr	r3, [pc, #512]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x118>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x146>
 8004020:	e069      	b.n	80040f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004022:	4b79      	ldr	r3, [pc, #484]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	220c      	movs	r2, #12
 8004028:	4013      	ands	r3, r2
 800402a:	d00b      	beq.n	8004044 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800402c:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	220c      	movs	r2, #12
 8004032:	4013      	ands	r3, r2
 8004034:	2b08      	cmp	r3, #8
 8004036:	d11c      	bne.n	8004072 <HAL_RCC_OscConfig+0x196>
 8004038:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	025b      	lsls	r3, r3, #9
 8004040:	4013      	ands	r3, r2
 8004042:	d116      	bne.n	8004072 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004044:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2202      	movs	r2, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x17e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e24b      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b6b      	ldr	r3, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	22f8      	movs	r2, #248	; 0xf8
 8004060:	4393      	bics	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	00da      	lsls	r2, r3, #3
 800406a:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004070:	e041      	b.n	80040f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b62      	ldr	r3, [pc, #392]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004080:	2101      	movs	r1, #1
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fe f87f 	bl	8002188 <HAL_GetTick>
 800408a:	0003      	movs	r3, r0
 800408c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7fe f87a 	bl	8002188 <HAL_GetTick>
 8004094:	0002      	movs	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e227      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2202      	movs	r2, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	d0f1      	beq.n	8004090 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	22f8      	movs	r2, #248	; 0xf8
 80040b2:	4393      	bics	r3, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00da      	lsls	r2, r3, #3
 80040bc:	4b52      	ldr	r3, [pc, #328]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e018      	b.n	80040f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	438a      	bics	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe f85a 	bl	8002188 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040da:	f7fe f855 	bl	8002188 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e202      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ec:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2202      	movs	r2, #2
 80040f2:	4013      	ands	r3, r2
 80040f4:	d1f1      	bne.n	80040da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2208      	movs	r2, #8
 80040fc:	4013      	ands	r3, r2
 80040fe:	d036      	beq.n	800416e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d019      	beq.n	800413c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800410a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800410e:	2101      	movs	r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004114:	f7fe f838 	bl	8002188 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe f833 	bl	8002188 <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1e0      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	4013      	ands	r3, r2
 8004138:	d0f1      	beq.n	800411e <HAL_RCC_OscConfig+0x242>
 800413a:	e018      	b.n	800416e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800413e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004142:	2101      	movs	r1, #1
 8004144:	438a      	bics	r2, r1
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004148:	f7fe f81e 	bl	8002188 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004152:	f7fe f819 	bl	8002188 <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1c6      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2202      	movs	r2, #2
 800416a:	4013      	ands	r3, r2
 800416c:	d1f1      	bne.n	8004152 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2204      	movs	r2, #4
 8004174:	4013      	ands	r3, r2
 8004176:	d100      	bne.n	800417a <HAL_RCC_OscConfig+0x29e>
 8004178:	e0b4      	b.n	80042e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	201f      	movs	r0, #31
 800417c:	183b      	adds	r3, r7, r0
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	055b      	lsls	r3, r3, #21
 800418a:	4013      	ands	r3, r2
 800418c:	d110      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	0549      	lsls	r1, r1, #21
 8004198:	430a      	orrs	r2, r1
 800419a:	61da      	str	r2, [r3, #28]
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	055b      	lsls	r3, r3, #21
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041aa:	183b      	adds	r3, r7, r0
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_RCC_OscConfig+0x338>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d11a      	bne.n	80041f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_RCC_OscConfig+0x338>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <HAL_RCC_OscConfig+0x338>)
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	0049      	lsls	r1, r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ca:	f7fd ffdd 	bl	8002188 <HAL_GetTick>
 80041ce:	0003      	movs	r3, r0
 80041d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd ffd8 	bl	8002188 <HAL_GetTick>
 80041d8:	0002      	movs	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e185      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_OscConfig+0x338>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10e      	bne.n	8004218 <HAL_RCC_OscConfig+0x33c>
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	4b02      	ldr	r3, [pc, #8]	; (8004208 <HAL_RCC_OscConfig+0x32c>)
 8004200:	2101      	movs	r1, #1
 8004202:	430a      	orrs	r2, r1
 8004204:	621a      	str	r2, [r3, #32]
 8004206:	e035      	b.n	8004274 <HAL_RCC_OscConfig+0x398>
 8004208:	40021000 	.word	0x40021000
 800420c:	fffeffff 	.word	0xfffeffff
 8004210:	fffbffff 	.word	0xfffbffff
 8004214:	40007000 	.word	0x40007000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10c      	bne.n	800423a <HAL_RCC_OscConfig+0x35e>
 8004220:	4bb6      	ldr	r3, [pc, #728]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	4bb5      	ldr	r3, [pc, #724]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	621a      	str	r2, [r3, #32]
 800422c:	4bb3      	ldr	r3, [pc, #716]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	4bb2      	ldr	r3, [pc, #712]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004232:	2104      	movs	r1, #4
 8004234:	438a      	bics	r2, r1
 8004236:	621a      	str	r2, [r3, #32]
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x398>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x380>
 8004242:	4bae      	ldr	r3, [pc, #696]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	4bad      	ldr	r3, [pc, #692]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004248:	2104      	movs	r1, #4
 800424a:	430a      	orrs	r2, r1
 800424c:	621a      	str	r2, [r3, #32]
 800424e:	4bab      	ldr	r3, [pc, #684]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	4baa      	ldr	r3, [pc, #680]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004254:	2101      	movs	r1, #1
 8004256:	430a      	orrs	r2, r1
 8004258:	621a      	str	r2, [r3, #32]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x398>
 800425c:	4ba7      	ldr	r3, [pc, #668]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	4ba6      	ldr	r3, [pc, #664]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004262:	2101      	movs	r1, #1
 8004264:	438a      	bics	r2, r1
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	4ba4      	ldr	r3, [pc, #656]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	4ba3      	ldr	r3, [pc, #652]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800426e:	2104      	movs	r1, #4
 8004270:	438a      	bics	r2, r1
 8004272:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d014      	beq.n	80042a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427c:	f7fd ff84 	bl	8002188 <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e009      	b.n	800429a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd ff7f 	bl	8002188 <HAL_GetTick>
 800428a:	0002      	movs	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	4a9b      	ldr	r2, [pc, #620]	; (8004500 <HAL_RCC_OscConfig+0x624>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e12b      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b98      	ldr	r3, [pc, #608]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	2202      	movs	r2, #2
 80042a0:	4013      	ands	r3, r2
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x3aa>
 80042a4:	e013      	b.n	80042ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fd ff6f 	bl	8002188 <HAL_GetTick>
 80042aa:	0003      	movs	r3, r0
 80042ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e009      	b.n	80042c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd ff6a 	bl	8002188 <HAL_GetTick>
 80042b4:	0002      	movs	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	4a91      	ldr	r2, [pc, #580]	; (8004500 <HAL_RCC_OscConfig+0x624>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e116      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c4:	4b8d      	ldr	r3, [pc, #564]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	2202      	movs	r2, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042ce:	231f      	movs	r3, #31
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	4b87      	ldr	r3, [pc, #540]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80042de:	4989      	ldr	r1, [pc, #548]	; (8004504 <HAL_RCC_OscConfig+0x628>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	4013      	ands	r3, r2
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d12a      	bne.n	800434c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042f6:	4b81      	ldr	r3, [pc, #516]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	4b80      	ldr	r3, [pc, #512]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80042fc:	2104      	movs	r1, #4
 80042fe:	430a      	orrs	r2, r1
 8004300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004302:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	4b7d      	ldr	r3, [pc, #500]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004308:	2101      	movs	r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7fd ff3b 	bl	8002188 <HAL_GetTick>
 8004312:	0003      	movs	r3, r0
 8004314:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004318:	f7fd ff36 	bl	8002188 <HAL_GetTick>
 800431c:	0002      	movs	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0e3      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800432a:	4b74      	ldr	r3, [pc, #464]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	2202      	movs	r2, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d0f1      	beq.n	8004318 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004334:	4b71      	ldr	r3, [pc, #452]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	22f8      	movs	r2, #248	; 0xf8
 800433a:	4393      	bics	r3, r2
 800433c:	0019      	movs	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	00da      	lsls	r2, r3, #3
 8004344:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004346:	430a      	orrs	r2, r1
 8004348:	635a      	str	r2, [r3, #52]	; 0x34
 800434a:	e034      	b.n	80043b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	3305      	adds	r3, #5
 8004352:	d111      	bne.n	8004378 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800435a:	2104      	movs	r1, #4
 800435c:	438a      	bics	r2, r1
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	22f8      	movs	r2, #248	; 0xf8
 8004366:	4393      	bics	r3, r2
 8004368:	0019      	movs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	00da      	lsls	r2, r3, #3
 8004370:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004372:	430a      	orrs	r2, r1
 8004374:	635a      	str	r2, [r3, #52]	; 0x34
 8004376:	e01e      	b.n	80043b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004378:	4b60      	ldr	r3, [pc, #384]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800437a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437c:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800437e:	2104      	movs	r1, #4
 8004380:	430a      	orrs	r2, r1
 8004382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004384:	4b5d      	ldr	r3, [pc, #372]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004388:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800438a:	2101      	movs	r1, #1
 800438c:	438a      	bics	r2, r1
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fd fefa 	bl	8002188 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800439a:	f7fd fef5 	bl	8002188 <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0a2      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d1f1      	bne.n	800439a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d100      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4e4>
 80043be:	e097      	b.n	80044f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	220c      	movs	r2, #12
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d100      	bne.n	80043ce <HAL_RCC_OscConfig+0x4f2>
 80043cc:	e06b      	b.n	80044a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d14c      	bne.n	8004470 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b49      	ldr	r3, [pc, #292]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80043dc:	494a      	ldr	r1, [pc, #296]	; (8004508 <HAL_RCC_OscConfig+0x62c>)
 80043de:	400a      	ands	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fd fed1 	bl	8002188 <HAL_GetTick>
 80043e6:	0003      	movs	r3, r0
 80043e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd fecc 	bl	8002188 <HAL_GetTick>
 80043f0:	0002      	movs	r2, r0
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e079      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	049b      	lsls	r3, r3, #18
 8004406:	4013      	ands	r3, r2
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800440a:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	220f      	movs	r2, #15
 8004410:	4393      	bics	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4b38      	ldr	r3, [pc, #224]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800441a:	430a      	orrs	r2, r1
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4a3a      	ldr	r2, [pc, #232]	; (800450c <HAL_RCC_OscConfig+0x630>)
 8004424:	4013      	ands	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	431a      	orrs	r2, r3
 8004432:	4b32      	ldr	r3, [pc, #200]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	0449      	lsls	r1, r1, #17
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fd fe9f 	bl	8002188 <HAL_GetTick>
 800444a:	0003      	movs	r3, r0
 800444c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fd fe9a 	bl	8002188 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e047      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	049b      	lsls	r3, r3, #18
 800446a:	4013      	ands	r3, r2
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x574>
 800446e:	e03f      	b.n	80044f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004470:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 8004476:	4924      	ldr	r1, [pc, #144]	; (8004508 <HAL_RCC_OscConfig+0x62c>)
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fe84 	bl	8002188 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fd fe7f 	bl	8002188 <HAL_GetTick>
 800448a:	0002      	movs	r2, r0
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e02c      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	049b      	lsls	r3, r3, #18
 80044a0:	4013      	ands	r3, r2
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x5aa>
 80044a4:	e024      	b.n	80044f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e01f      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_RCC_OscConfig+0x620>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	025b      	lsls	r3, r3, #9
 80044c4:	401a      	ands	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d10e      	bne.n	80044ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	220f      	movs	r2, #15
 80044d2:	401a      	ands	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	23f0      	movs	r3, #240	; 0xf0
 80044e0:	039b      	lsls	r3, r3, #14
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b008      	add	sp, #32
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	40021000 	.word	0x40021000
 8004500:	00001388 	.word	0x00001388
 8004504:	efffffff 	.word	0xefffffff
 8004508:	feffffff 	.word	0xfeffffff
 800450c:	ffc2ffff 	.word	0xffc2ffff

08004510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b3      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	4013      	ands	r3, r2
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d911      	bls.n	8004556 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b58      	ldr	r3, [pc, #352]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2201      	movs	r2, #1
 8004538:	4393      	bics	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	4b55      	ldr	r3, [pc, #340]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2201      	movs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e09a      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2202      	movs	r2, #2
 800455c:	4013      	ands	r3, r2
 800455e:	d015      	beq.n	800458c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2204      	movs	r2, #4
 8004566:	4013      	ands	r3, r2
 8004568:	d006      	beq.n	8004578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800456a:	4b4b      	ldr	r3, [pc, #300]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004570:	21e0      	movs	r1, #224	; 0xe0
 8004572:	00c9      	lsls	r1, r1, #3
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	22f0      	movs	r2, #240	; 0xf0
 800457e:	4393      	bics	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	4b44      	ldr	r3, [pc, #272]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d040      	beq.n	8004618 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	4013      	ands	r3, r2
 80045a8:	d114      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06e      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	049b      	lsls	r3, r3, #18
 80045be:	4013      	ands	r3, r2
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e062      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c6:	4b34      	ldr	r3, [pc, #208]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e05b      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b30      	ldr	r3, [pc, #192]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2203      	movs	r2, #3
 80045da:	4393      	bics	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e8:	f7fd fdce 	bl	8002188 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f0:	e009      	b.n	8004606 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fd fdc9 	bl	8002188 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <HAL_RCC_ClockConfig+0x18c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e042      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	220c      	movs	r2, #12
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	429a      	cmp	r2, r3
 8004616:	d1ec      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004618:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	4013      	ands	r3, r2
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d211      	bcs.n	800464a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4393      	bics	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_RCC_ClockConfig+0x184>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e020      	b.n	800468c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2204      	movs	r2, #4
 8004650:	4013      	ands	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <HAL_RCC_ClockConfig+0x190>)
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004668:	f000 f820 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800466c:	0001      	movs	r1, r0
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x188>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	220f      	movs	r2, #15
 8004676:	4013      	ands	r3, r2
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <HAL_RCC_ClockConfig+0x194>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	000a      	movs	r2, r1
 800467e:	40da      	lsrs	r2, r3
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_RCC_ClockConfig+0x198>)
 8004682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004684:	2003      	movs	r0, #3
 8004686:	f7fd fd39 	bl	80020fc <HAL_InitTick>
  
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40022000 	.word	0x40022000
 8004698:	40021000 	.word	0x40021000
 800469c:	00001388 	.word	0x00001388
 80046a0:	fffff8ff 	.word	0xfffff8ff
 80046a4:	080080ec 	.word	0x080080ec
 80046a8:	20000028 	.word	0x20000028

080046ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b08f      	sub	sp, #60	; 0x3c
 80046b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80046b2:	2314      	movs	r3, #20
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046ba:	c313      	stmia	r3!, {r0, r1, r4}
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	4a29      	ldr	r2, [pc, #164]	; (8004768 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046c6:	c313      	stmia	r3!, {r0, r1, r4}
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	2300      	movs	r3, #0
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d4:	2300      	movs	r3, #0
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	220c      	movs	r2, #12
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d002      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d003      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x50>
 80046f4:	e02d      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046fa:	e02d      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	220f      	movs	r2, #15
 8004702:	4013      	ands	r3, r2
 8004704:	2214      	movs	r2, #20
 8004706:	18ba      	adds	r2, r7, r2
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCC_GetSysClockFreq+0xc0>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	220f      	movs	r2, #15
 8004712:	4013      	ands	r3, r2
 8004714:	1d3a      	adds	r2, r7, #4
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800471a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	025b      	lsls	r3, r3, #9
 8004720:	4013      	ands	r3, r2
 8004722:	d009      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004726:	4812      	ldr	r0, [pc, #72]	; (8004770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004728:	f7fb fcee 	bl	8000108 <__udivsi3>
 800472c:	0003      	movs	r3, r0
 800472e:	001a      	movs	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	4353      	muls	r3, r2
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
 8004736:	e009      	b.n	800474c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800473a:	000a      	movs	r2, r1
 800473c:	0152      	lsls	r2, r2, #5
 800473e:	1a52      	subs	r2, r2, r1
 8004740:	0193      	lsls	r3, r2, #6
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	185b      	adds	r3, r3, r1
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004750:	e002      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004756:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b00f      	add	sp, #60	; 0x3c
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	08008030 	.word	0x08008030
 8004768:	08008040 	.word	0x08008040
 800476c:	40021000 	.word	0x40021000
 8004770:	007a1200 	.word	0x007a1200

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004778:	4b02      	ldr	r3, [pc, #8]	; (8004784 <HAL_RCC_GetHCLKFreq+0x10>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000028 	.word	0x20000028

08004788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800478c:	f7ff fff2 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004790:	0001      	movs	r1, r0
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	2207      	movs	r2, #7
 800479a:	4013      	ands	r3, r2
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	40d9      	lsrs	r1, r3
 80047a2:	000b      	movs	r3, r1
}    
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	40021000 	.word	0x40021000
 80047b0:	080080fc 	.word	0x080080fc

080047b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	025b      	lsls	r3, r3, #9
 80047cc:	4013      	ands	r3, r2
 80047ce:	d100      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047d0:	e08e      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047d2:	2017      	movs	r0, #23
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	055b      	lsls	r3, r3, #21
 80047e2:	4013      	ands	r3, r2
 80047e4:	d110      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	0549      	lsls	r1, r1, #21
 80047f0:	430a      	orrs	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
 80047f4:	4b58      	ldr	r3, [pc, #352]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	055b      	lsls	r3, r3, #21
 80047fc:	4013      	ands	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	183b      	adds	r3, r7, r0
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	4b54      	ldr	r3, [pc, #336]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4013      	ands	r3, r2
 8004812:	d11a      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004814:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b50      	ldr	r3, [pc, #320]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	0049      	lsls	r1, r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fd fcb1 	bl	8002188 <HAL_GetTick>
 8004826:	0003      	movs	r3, r0
 8004828:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482a:	e008      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fd fcac 	bl	8002188 <HAL_GetTick>
 8004830:	0002      	movs	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e087      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4013      	ands	r3, r2
 8004848:	d0f0      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	23c0      	movs	r3, #192	; 0xc0
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4013      	ands	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d034      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	23c0      	movs	r3, #192	; 0xc0
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4013      	ands	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d02c      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800486c:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004876:	4b38      	ldr	r3, [pc, #224]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0249      	lsls	r1, r1, #9
 8004880:	430a      	orrs	r2, r1
 8004882:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800488a:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800488c:	400a      	ands	r2, r1
 800488e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004890:	4b31      	ldr	r3, [pc, #196]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	4013      	ands	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd fc73 	bl	8002188 <HAL_GetTick>
 80048a2:	0003      	movs	r3, r0
 80048a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	e009      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fd fc6e 	bl	8002188 <HAL_GetTick>
 80048ac:	0002      	movs	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e048      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a25      	ldr	r2, [pc, #148]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048da:	2317      	movs	r3, #23
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ea:	4920      	ldr	r1, [pc, #128]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ec:	400a      	ands	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	4013      	ands	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2203      	movs	r2, #3
 8004900:	4393      	bics	r3, r2
 8004902:	0019      	movs	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800490a:	430a      	orrs	r2, r1
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2220      	movs	r2, #32
 8004914:	4013      	ands	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	2210      	movs	r2, #16
 800491e:	4393      	bics	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004928:	430a      	orrs	r2, r1
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4013      	ands	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4393      	bics	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004948:	430a      	orrs	r2, r1
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
 8004960:	fffffcff 	.word	0xfffffcff
 8004964:	fffeffff 	.word	0xfffeffff
 8004968:	00001388 	.word	0x00001388
 800496c:	efffffff 	.word	0xefffffff

08004970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a8      	b.n	8004ad4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	2382      	movs	r3, #130	; 0x82
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	429a      	cmp	r2, r3
 8004994:	d009      	beq.n	80049aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	61da      	str	r2, [r3, #28]
 800499c:	e005      	b.n	80049aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	225d      	movs	r2, #93	; 0x5d
 80049b4:	5c9b      	ldrb	r3, [r3, r2]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	225c      	movs	r2, #92	; 0x5c
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fd f902 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	225d      	movs	r2, #93	; 0x5d
 80049d0:	2102      	movs	r1, #2
 80049d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2140      	movs	r1, #64	; 0x40
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	23e0      	movs	r3, #224	; 0xe0
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d902      	bls.n	80049f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e002      	b.n	80049fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	015b      	lsls	r3, r3, #5
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	23f0      	movs	r3, #240	; 0xf0
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d008      	beq.n	8004a1a <HAL_SPI_Init+0xaa>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	23e0      	movs	r3, #224	; 0xe0
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	2382      	movs	r3, #130	; 0x82
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	401a      	ands	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6899      	ldr	r1, [r3, #8]
 8004a28:	2384      	movs	r3, #132	; 0x84
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2102      	movs	r1, #2
 8004a36:	400b      	ands	r3, r1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	400b      	ands	r3, r1
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6999      	ldr	r1, [r3, #24]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	400b      	ands	r3, r1
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	2138      	movs	r1, #56	; 0x38
 8004a56:	400b      	ands	r3, r1
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	400b      	ands	r3, r1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	0011      	movs	r1, r2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	401a      	ands	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	2204      	movs	r2, #4
 8004a80:	401a      	ands	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2110      	movs	r1, #16
 8004a88:	400b      	ands	r3, r1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	2108      	movs	r1, #8
 8004a92:	400b      	ands	r3, r1
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68d9      	ldr	r1, [r3, #12]
 8004a9a:	23f0      	movs	r3, #240	; 0xf0
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	015b      	lsls	r3, r3, #5
 8004aaa:	401a      	ands	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4907      	ldr	r1, [pc, #28]	; (8004adc <HAL_SPI_Init+0x16c>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	225d      	movs	r2, #93	; 0x5d
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b004      	add	sp, #16
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	fffff7ff 	.word	0xfffff7ff

08004ae0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	1dbb      	adds	r3, r7, #6
 8004aee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af0:	231f      	movs	r3, #31
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	225c      	movs	r2, #92	; 0x5c
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_Transmit+0x26>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e140      	b.n	8004d88 <HAL_SPI_Transmit+0x2a8>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	225c      	movs	r2, #92	; 0x5c
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fd fb3b 	bl	8002188 <HAL_GetTick>
 8004b12:	0003      	movs	r3, r0
 8004b14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b16:	2316      	movs	r3, #22
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	1dba      	adds	r2, r7, #6
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	225d      	movs	r2, #93	; 0x5d
 8004b24:	5c9b      	ldrb	r3, [r3, r2]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d004      	beq.n	8004b36 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004b2c:	231f      	movs	r3, #31
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2202      	movs	r2, #2
 8004b32:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b34:	e11d      	b.n	8004d72 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_SPI_Transmit+0x64>
 8004b3c:	1dbb      	adds	r3, r7, #6
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004b44:	231f      	movs	r3, #31
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b4c:	e111      	b.n	8004d72 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	225d      	movs	r2, #93	; 0x5d
 8004b52:	2103      	movs	r1, #3
 8004b54:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1dba      	adds	r2, r7, #6
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1dba      	adds	r2, r7, #6
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2244      	movs	r2, #68	; 0x44
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2246      	movs	r2, #70	; 0x46
 8004b84:	2100      	movs	r1, #0
 8004b86:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d110      	bne.n	8004bc2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2140      	movs	r1, #64	; 0x40
 8004bac:	438a      	bics	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	01c9      	lsls	r1, r1, #7
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d007      	beq.n	8004be0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2140      	movs	r1, #64	; 0x40
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	23e0      	movs	r3, #224	; 0xe0
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d94e      	bls.n	8004c8a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_SPI_Transmit+0x11e>
 8004bf4:	2316      	movs	r3, #22
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d13f      	bne.n	8004c7e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	1c9a      	adds	r2, r3, #2
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c22:	e02c      	b.n	8004c7e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d112      	bne.n	8004c58 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	881a      	ldrh	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c56:	e012      	b.n	8004c7e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c58:	f7fd fa96 	bl	8002188 <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d802      	bhi.n	8004c6e <HAL_SPI_Transmit+0x18e>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Transmit+0x194>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004c74:	231f      	movs	r3, #31
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	2203      	movs	r2, #3
 8004c7a:	701a      	strb	r2, [r3, #0]
          goto error;
 8004c7c:	e079      	b.n	8004d72 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1cd      	bne.n	8004c24 <HAL_SPI_Transmit+0x144>
 8004c88:	e04f      	b.n	8004d2a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <HAL_SPI_Transmit+0x1bc>
 8004c92:	2316      	movs	r3, #22
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d141      	bne.n	8004d20 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004cc2:	e02d      	b.n	8004d20 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d113      	bne.n	8004cfa <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf8:	e012      	b.n	8004d20 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfa:	f7fd fa45 	bl	8002188 <HAL_GetTick>
 8004cfe:	0002      	movs	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d802      	bhi.n	8004d10 <HAL_SPI_Transmit+0x230>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	d102      	bne.n	8004d16 <HAL_SPI_Transmit+0x236>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004d16:	231f      	movs	r3, #31
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d1e:	e028      	b.n	8004d72 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1cc      	bne.n	8004cc4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f000 f95d 	bl	8004ff0 <SPI_EndRxTxTransaction>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004d66:	231f      	movs	r3, #31
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e000      	b.n	8004d72 <HAL_SPI_Transmit+0x292>
  }

error:
 8004d70:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	225d      	movs	r2, #93	; 0x5d
 8004d76:	2101      	movs	r1, #1
 8004d78:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	225c      	movs	r2, #92	; 0x5c
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004d82:	231f      	movs	r3, #31
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b008      	add	sp, #32
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004da0:	f7fd f9f2 	bl	8002188 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	18d3      	adds	r3, r2, r3
 8004dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004db0:	f7fd f9ea 	bl	8002188 <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004db8:	4b3a      	ldr	r3, [pc, #232]	; (8004ea4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	015b      	lsls	r3, r3, #5
 8004dbe:	0d1b      	lsrs	r3, r3, #20
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	4353      	muls	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc6:	e058      	b.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	d055      	beq.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dce:	f7fd f9db 	bl	8002188 <HAL_GetTick>
 8004dd2:	0002      	movs	r2, r0
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d902      	bls.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d142      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	21e0      	movs	r1, #224	; 0xe0
 8004df0:	438a      	bics	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	2382      	movs	r3, #130	; 0x82
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d113      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d005      	beq.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d107      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	438a      	bics	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	019b      	lsls	r3, r3, #6
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d110      	bne.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	491a      	ldr	r1, [pc, #104]	; (8004ea8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	0189      	lsls	r1, r1, #6
 8004e52:	430a      	orrs	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	225d      	movs	r2, #93	; 0x5d
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	225c      	movs	r2, #92	; 0x5c
 8004e62:	2100      	movs	r1, #0
 8004e64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e017      	b.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	4013      	ands	r3, r2
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	425a      	negs	r2, r3
 8004e8a:	4153      	adcs	r3, r2
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	001a      	movs	r2, r3
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d197      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b008      	add	sp, #32
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000028 	.word	0x20000028
 8004ea8:	ffffdfff 	.word	0xffffdfff

08004eac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eba:	2317      	movs	r3, #23
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ec2:	f7fd f961 	bl	8002188 <HAL_GetTick>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ed2:	f7fd f959 	bl	8002188 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	00da      	lsls	r2, r3, #3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	0d1b      	lsrs	r3, r3, #20
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	4353      	muls	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ef8:	e068      	b.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	23c0      	movs	r3, #192	; 0xc0
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d10a      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	2117      	movs	r1, #23
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d055      	beq.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f20:	f7fd f932 	bl	8002188 <HAL_GetTick>
 8004f24:	0002      	movs	r2, r0
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d902      	bls.n	8004f36 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d142      	bne.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	21e0      	movs	r1, #224	; 0xe0
 8004f42:	438a      	bics	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	2382      	movs	r3, #130	; 0x82
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d113      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d005      	beq.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d107      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	438a      	bics	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d110      	bne.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	0189      	lsls	r1, r1, #6
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	225d      	movs	r2, #93	; 0x5d
 8004fac:	2101      	movs	r1, #1
 8004fae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	225c      	movs	r2, #92	; 0x5c
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e010      	b.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d18e      	bne.n	8004efa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b00a      	add	sp, #40	; 0x28
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	20000028 	.word	0x20000028
 8004fec:	ffffdfff 	.word	0xffffdfff

08004ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	23c0      	movs	r3, #192	; 0xc0
 8005000:	0159      	lsls	r1, r3, #5
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0013      	movs	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	f7ff ff4e 	bl	8004eac <SPI_WaitFifoStateUntilTimeout>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d007      	beq.n	8005024 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005018:	2220      	movs	r2, #32
 800501a:	431a      	orrs	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e027      	b.n	8005074 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	0013      	movs	r3, r2
 800502e:	2200      	movs	r2, #0
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	f7ff fead 	bl	8004d90 <SPI_WaitFlagStateUntilTimeout>
 8005036:	1e03      	subs	r3, r0, #0
 8005038:	d007      	beq.n	800504a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	2220      	movs	r2, #32
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e014      	b.n	8005074 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	23c0      	movs	r3, #192	; 0xc0
 800504e:	00d9      	lsls	r1, r3, #3
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	0013      	movs	r3, r2
 8005058:	2200      	movs	r2, #0
 800505a:	f7ff ff27 	bl	8004eac <SPI_WaitFifoStateUntilTimeout>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d007      	beq.n	8005072 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	2220      	movs	r2, #32
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e000      	b.n	8005074 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e042      	b.n	8005114 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	223d      	movs	r2, #61	; 0x3d
 8005092:	5c9b      	ldrb	r3, [r3, r2]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d107      	bne.n	80050aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	223c      	movs	r2, #60	; 0x3c
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fc fe1b 	bl	8001ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	223d      	movs	r2, #61	; 0x3d
 80050ae:	2102      	movs	r1, #2
 80050b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	0019      	movs	r1, r3
 80050bc:	0010      	movs	r0, r2
 80050be:	f000 ff85 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2246      	movs	r2, #70	; 0x46
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	223e      	movs	r2, #62	; 0x3e
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223f      	movs	r2, #63	; 0x3f
 80050d6:	2101      	movs	r1, #1
 80050d8:	5499      	strb	r1, [r3, r2]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2240      	movs	r2, #64	; 0x40
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2241      	movs	r2, #65	; 0x41
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2242      	movs	r2, #66	; 0x42
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2243      	movs	r2, #67	; 0x43
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2244      	movs	r2, #68	; 0x44
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2245      	movs	r2, #69	; 0x45
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	223d      	movs	r2, #61	; 0x3d
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e042      	b.n	80051b4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	223d      	movs	r2, #61	; 0x3d
 8005132:	5c9b      	ldrb	r3, [r3, r2]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223c      	movs	r2, #60	; 0x3c
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0018      	movs	r0, r3
 8005146:	f7fc fe15 	bl	8001d74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	223d      	movs	r2, #61	; 0x3d
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	0019      	movs	r1, r3
 800515c:	0010      	movs	r0, r2
 800515e:	f000 ff35 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2246      	movs	r2, #70	; 0x46
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	223e      	movs	r2, #62	; 0x3e
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	223f      	movs	r2, #63	; 0x3f
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2241      	movs	r2, #65	; 0x41
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2242      	movs	r2, #66	; 0x42
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2243      	movs	r2, #67	; 0x43
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2244      	movs	r2, #68	; 0x44
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2245      	movs	r2, #69	; 0x45
 80051a6:	2101      	movs	r1, #1
 80051a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	223d      	movs	r2, #61	; 0x3d
 80051ae:	2101      	movs	r1, #1
 80051b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	230f      	movs	r3, #15
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <HAL_TIM_OC_Start_IT+0x2a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	223e      	movs	r2, #62	; 0x3e
 80051d8:	5c9b      	ldrb	r3, [r3, r2]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	1e5a      	subs	r2, r3, #1
 80051e0:	4193      	sbcs	r3, r2
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e01f      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x6a>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d108      	bne.n	80051fe <HAL_TIM_OC_Start_IT+0x42>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	223f      	movs	r2, #63	; 0x3f
 80051f0:	5c9b      	ldrb	r3, [r3, r2]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	4193      	sbcs	r3, r2
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e013      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x6a>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d108      	bne.n	8005216 <HAL_TIM_OC_Start_IT+0x5a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	5c9b      	ldrb	r3, [r3, r2]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	1e5a      	subs	r2, r3, #1
 8005210:	4193      	sbcs	r3, r2
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e007      	b.n	8005226 <HAL_TIM_OC_Start_IT+0x6a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2241      	movs	r2, #65	; 0x41
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	4193      	sbcs	r3, r2
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0b7      	b.n	800539e <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_TIM_OC_Start_IT+0x82>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	223e      	movs	r2, #62	; 0x3e
 8005238:	2102      	movs	r1, #2
 800523a:	5499      	strb	r1, [r3, r2]
 800523c:	e013      	b.n	8005266 <HAL_TIM_OC_Start_IT+0xaa>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d104      	bne.n	800524e <HAL_TIM_OC_Start_IT+0x92>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	223f      	movs	r2, #63	; 0x3f
 8005248:	2102      	movs	r1, #2
 800524a:	5499      	strb	r1, [r3, r2]
 800524c:	e00b      	b.n	8005266 <HAL_TIM_OC_Start_IT+0xaa>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d104      	bne.n	800525e <HAL_TIM_OC_Start_IT+0xa2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2240      	movs	r2, #64	; 0x40
 8005258:	2102      	movs	r1, #2
 800525a:	5499      	strb	r1, [r3, r2]
 800525c:	e003      	b.n	8005266 <HAL_TIM_OC_Start_IT+0xaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2241      	movs	r2, #65	; 0x41
 8005262:	2102      	movs	r1, #2
 8005264:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d02a      	beq.n	80052c2 <HAL_TIM_OC_Start_IT+0x106>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d830      	bhi.n	80052d4 <HAL_TIM_OC_Start_IT+0x118>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d01b      	beq.n	80052b0 <HAL_TIM_OC_Start_IT+0xf4>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d82a      	bhi.n	80052d4 <HAL_TIM_OC_Start_IT+0x118>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_OC_Start_IT+0xd0>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d009      	beq.n	800529e <HAL_TIM_OC_Start_IT+0xe2>
 800528a:	e023      	b.n	80052d4 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2102      	movs	r1, #2
 8005298:	430a      	orrs	r2, r1
 800529a:	60da      	str	r2, [r3, #12]
      break;
 800529c:	e01f      	b.n	80052de <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2104      	movs	r1, #4
 80052aa:	430a      	orrs	r2, r1
 80052ac:	60da      	str	r2, [r3, #12]
      break;
 80052ae:	e016      	b.n	80052de <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2108      	movs	r1, #8
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]
      break;
 80052c0:	e00d      	b.n	80052de <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2110      	movs	r1, #16
 80052ce:	430a      	orrs	r2, r1
 80052d0:	60da      	str	r2, [r3, #12]
      break;
 80052d2:	e004      	b.n	80052de <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
      break;
 80052dc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80052de:	230f      	movs	r3, #15
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	2201      	movs	r2, #1
 80052f0:	0018      	movs	r0, r3
 80052f2:	f001 f981 	bl	80065f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <HAL_TIM_OC_Start_IT+0x1ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_TIM_OC_Start_IT+0x162>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a29      	ldr	r2, [pc, #164]	; (80053ac <HAL_TIM_OC_Start_IT+0x1f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_TIM_OC_Start_IT+0x162>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a28      	ldr	r2, [pc, #160]	; (80053b0 <HAL_TIM_OC_Start_IT+0x1f4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIM_OC_Start_IT+0x162>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <HAL_TIM_OC_Start_IT+0x1f8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_TIM_OC_Start_IT+0x166>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_TIM_OC_Start_IT+0x168>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2180      	movs	r1, #128	; 0x80
 8005334:	0209      	lsls	r1, r1, #8
 8005336:	430a      	orrs	r2, r1
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <HAL_TIM_OC_Start_IT+0x1a8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	429a      	cmp	r2, r3
 800534e:	d009      	beq.n	8005364 <HAL_TIM_OC_Start_IT+0x1a8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_OC_Start_IT+0x1fc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_OC_Start_IT+0x1a8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <HAL_TIM_OC_Start_IT+0x1f0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d111      	bne.n	8005388 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2207      	movs	r2, #7
 800536c:	4013      	ands	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d010      	beq.n	8005398 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2101      	movs	r1, #1
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	e007      	b.n	8005398 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2101      	movs	r1, #1
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005398:	230f      	movs	r3, #15
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	781b      	ldrb	r3, [r3, #0]
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800
 80053b8:	40000400 	.word	0x40000400

080053bc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	230f      	movs	r3, #15
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d02a      	beq.n	800542a <HAL_TIM_OC_Stop_IT+0x6e>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d830      	bhi.n	800543c <HAL_TIM_OC_Stop_IT+0x80>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_OC_Stop_IT+0x5c>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d82a      	bhi.n	800543c <HAL_TIM_OC_Stop_IT+0x80>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_TIM_OC_Stop_IT+0x38>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d009      	beq.n	8005406 <HAL_TIM_OC_Stop_IT+0x4a>
 80053f2:	e023      	b.n	800543c <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2102      	movs	r1, #2
 8005400:	438a      	bics	r2, r1
 8005402:	60da      	str	r2, [r3, #12]
      break;
 8005404:	e01f      	b.n	8005446 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2104      	movs	r1, #4
 8005412:	438a      	bics	r2, r1
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e016      	b.n	8005446 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2108      	movs	r1, #8
 8005424:	438a      	bics	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
      break;
 8005428:	e00d      	b.n	8005446 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2110      	movs	r1, #16
 8005436:	438a      	bics	r2, r1
 8005438:	60da      	str	r2, [r3, #12]
      break;
 800543a:	e004      	b.n	8005446 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800543c:	230f      	movs	r3, #15
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
      break;
 8005444:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005446:	230f      	movs	r3, #15
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d000      	beq.n	8005452 <HAL_TIM_OC_Stop_IT+0x96>
 8005450:	e063      	b.n	800551a <HAL_TIM_OC_Stop_IT+0x15e>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	0018      	movs	r0, r3
 800545c:	f001 f8cc 	bl	80065f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a30      	ldr	r2, [pc, #192]	; (8005528 <HAL_TIM_OC_Stop_IT+0x16c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_OC_Stop_IT+0xcc>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2f      	ldr	r2, [pc, #188]	; (800552c <HAL_TIM_OC_Stop_IT+0x170>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_OC_Stop_IT+0xcc>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2d      	ldr	r2, [pc, #180]	; (8005530 <HAL_TIM_OC_Stop_IT+0x174>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_OC_Stop_IT+0xcc>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <HAL_TIM_OC_Stop_IT+0x178>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_TIM_OC_Stop_IT+0xd0>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_TIM_OC_Stop_IT+0xd2>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d013      	beq.n	80054ba <HAL_TIM_OC_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	4a27      	ldr	r2, [pc, #156]	; (8005538 <HAL_TIM_OC_Stop_IT+0x17c>)
 800549a:	4013      	ands	r3, r2
 800549c:	d10d      	bne.n	80054ba <HAL_TIM_OC_Stop_IT+0xfe>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <HAL_TIM_OC_Stop_IT+0x180>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_OC_Stop_IT+0xfe>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4922      	ldr	r1, [pc, #136]	; (8005540 <HAL_TIM_OC_Stop_IT+0x184>)
 80054b6:	400a      	ands	r2, r1
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <HAL_TIM_OC_Stop_IT+0x17c>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	d10d      	bne.n	80054e2 <HAL_TIM_OC_Stop_IT+0x126>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_TIM_OC_Stop_IT+0x180>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	d107      	bne.n	80054e2 <HAL_TIM_OC_Stop_IT+0x126>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2101      	movs	r1, #1
 80054de:	438a      	bics	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_OC_Stop_IT+0x136>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	223e      	movs	r2, #62	; 0x3e
 80054ec:	2101      	movs	r1, #1
 80054ee:	5499      	strb	r1, [r3, r2]
 80054f0:	e013      	b.n	800551a <HAL_TIM_OC_Stop_IT+0x15e>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_OC_Stop_IT+0x146>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	223f      	movs	r2, #63	; 0x3f
 80054fc:	2101      	movs	r1, #1
 80054fe:	5499      	strb	r1, [r3, r2]
 8005500:	e00b      	b.n	800551a <HAL_TIM_OC_Stop_IT+0x15e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d104      	bne.n	8005512 <HAL_TIM_OC_Stop_IT+0x156>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	2101      	movs	r1, #1
 800550e:	5499      	strb	r1, [r3, r2]
 8005510:	e003      	b.n	800551a <HAL_TIM_OC_Stop_IT+0x15e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800551a:	230f      	movs	r3, #15
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	781b      	ldrb	r3, [r3, #0]
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b004      	add	sp, #16
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800
 8005538:	00001111 	.word	0x00001111
 800553c:	00000444 	.word	0x00000444
 8005540:	ffff7fff 	.word	0xffff7fff

08005544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e042      	b.n	80055dc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	223d      	movs	r2, #61	; 0x3d
 800555a:	5c9b      	ldrb	r3, [r3, r2]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223c      	movs	r2, #60	; 0x3c
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f000 f839 	bl	80055e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	223d      	movs	r2, #61	; 0x3d
 8005576:	2102      	movs	r1, #2
 8005578:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	0019      	movs	r1, r3
 8005584:	0010      	movs	r0, r2
 8005586:	f000 fd21 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2246      	movs	r2, #70	; 0x46
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	223e      	movs	r2, #62	; 0x3e
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	223f      	movs	r2, #63	; 0x3f
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2240      	movs	r2, #64	; 0x40
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2241      	movs	r2, #65	; 0x41
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2242      	movs	r2, #66	; 0x42
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2243      	movs	r2, #67	; 0x43
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2244      	movs	r2, #68	; 0x44
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2245      	movs	r2, #69	; 0x45
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	223d      	movs	r2, #61	; 0x3d
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055fe:	230f      	movs	r3, #15
 8005600:	18fb      	adds	r3, r7, r3
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d108      	bne.n	800561e <HAL_TIM_PWM_Start_IT+0x2a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	223e      	movs	r2, #62	; 0x3e
 8005610:	5c9b      	ldrb	r3, [r3, r2]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	4193      	sbcs	r3, r2
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e01f      	b.n	800565e <HAL_TIM_PWM_Start_IT+0x6a>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b04      	cmp	r3, #4
 8005622:	d108      	bne.n	8005636 <HAL_TIM_PWM_Start_IT+0x42>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	223f      	movs	r2, #63	; 0x3f
 8005628:	5c9b      	ldrb	r3, [r3, r2]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	4193      	sbcs	r3, r2
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e013      	b.n	800565e <HAL_TIM_PWM_Start_IT+0x6a>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d108      	bne.n	800564e <HAL_TIM_PWM_Start_IT+0x5a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2240      	movs	r2, #64	; 0x40
 8005640:	5c9b      	ldrb	r3, [r3, r2]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	1e5a      	subs	r2, r3, #1
 8005648:	4193      	sbcs	r3, r2
 800564a:	b2db      	uxtb	r3, r3
 800564c:	e007      	b.n	800565e <HAL_TIM_PWM_Start_IT+0x6a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2241      	movs	r2, #65	; 0x41
 8005652:	5c9b      	ldrb	r3, [r3, r2]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	4193      	sbcs	r3, r2
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0b7      	b.n	80057d6 <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start_IT+0x82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	223e      	movs	r2, #62	; 0x3e
 8005670:	2102      	movs	r1, #2
 8005672:	5499      	strb	r1, [r3, r2]
 8005674:	e013      	b.n	800569e <HAL_TIM_PWM_Start_IT+0xaa>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start_IT+0x92>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	223f      	movs	r2, #63	; 0x3f
 8005680:	2102      	movs	r1, #2
 8005682:	5499      	strb	r1, [r3, r2]
 8005684:	e00b      	b.n	800569e <HAL_TIM_PWM_Start_IT+0xaa>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start_IT+0xa2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	2102      	movs	r1, #2
 8005692:	5499      	strb	r1, [r3, r2]
 8005694:	e003      	b.n	800569e <HAL_TIM_PWM_Start_IT+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2241      	movs	r2, #65	; 0x41
 800569a:	2102      	movs	r1, #2
 800569c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d02a      	beq.n	80056fa <HAL_TIM_PWM_Start_IT+0x106>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d830      	bhi.n	800570c <HAL_TIM_PWM_Start_IT+0x118>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_PWM_Start_IT+0xf4>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d82a      	bhi.n	800570c <HAL_TIM_PWM_Start_IT+0x118>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_TIM_PWM_Start_IT+0xd0>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d009      	beq.n	80056d6 <HAL_TIM_PWM_Start_IT+0xe2>
 80056c2:	e023      	b.n	800570c <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2102      	movs	r1, #2
 80056d0:	430a      	orrs	r2, r1
 80056d2:	60da      	str	r2, [r3, #12]
      break;
 80056d4:	e01f      	b.n	8005716 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2104      	movs	r1, #4
 80056e2:	430a      	orrs	r2, r1
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e016      	b.n	8005716 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2108      	movs	r1, #8
 80056f4:	430a      	orrs	r2, r1
 80056f6:	60da      	str	r2, [r3, #12]
      break;
 80056f8:	e00d      	b.n	8005716 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2110      	movs	r1, #16
 8005706:	430a      	orrs	r2, r1
 8005708:	60da      	str	r2, [r3, #12]
      break;
 800570a:	e004      	b.n	8005716 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800570c:	230f      	movs	r3, #15
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
      break;
 8005714:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005716:	230f      	movs	r3, #15
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d157      	bne.n	80057d0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	0018      	movs	r0, r3
 800572a:	f000 ff65 	bl	80065f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <HAL_TIM_PWM_Start_IT+0x162>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_TIM_PWM_Start_IT+0x162>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <HAL_TIM_PWM_Start_IT+0x162>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <HAL_TIM_PWM_Start_IT+0x166>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <HAL_TIM_PWM_Start_IT+0x168>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	0209      	lsls	r1, r1, #8
 800576e:	430a      	orrs	r2, r1
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <HAL_TIM_PWM_Start_IT+0x1a8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	429a      	cmp	r2, r3
 8005786:	d009      	beq.n	800579c <HAL_TIM_PWM_Start_IT+0x1a8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIM_PWM_Start_IT+0x1a8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d111      	bne.n	80057c0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2207      	movs	r2, #7
 80057a4:	4013      	ands	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d010      	beq.n	80057d0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2101      	movs	r1, #1
 80057ba:	430a      	orrs	r2, r1
 80057bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e007      	b.n	80057d0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80057d0:	230f      	movs	r3, #15
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	781b      	ldrb	r3, [r3, #0]
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b004      	add	sp, #16
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800
 80057f0:	40000400 	.word	0x40000400

080057f4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	230f      	movs	r3, #15
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b0c      	cmp	r3, #12
 800580a:	d02a      	beq.n	8005862 <HAL_TIM_PWM_Stop_IT+0x6e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d830      	bhi.n	8005874 <HAL_TIM_PWM_Stop_IT+0x80>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d01b      	beq.n	8005850 <HAL_TIM_PWM_Stop_IT+0x5c>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d82a      	bhi.n	8005874 <HAL_TIM_PWM_Stop_IT+0x80>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_TIM_PWM_Stop_IT+0x38>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d009      	beq.n	800583e <HAL_TIM_PWM_Stop_IT+0x4a>
 800582a:	e023      	b.n	8005874 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2102      	movs	r1, #2
 8005838:	438a      	bics	r2, r1
 800583a:	60da      	str	r2, [r3, #12]
      break;
 800583c:	e01f      	b.n	800587e <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2104      	movs	r1, #4
 800584a:	438a      	bics	r2, r1
 800584c:	60da      	str	r2, [r3, #12]
      break;
 800584e:	e016      	b.n	800587e <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2108      	movs	r1, #8
 800585c:	438a      	bics	r2, r1
 800585e:	60da      	str	r2, [r3, #12]
      break;
 8005860:	e00d      	b.n	800587e <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2110      	movs	r1, #16
 800586e:	438a      	bics	r2, r1
 8005870:	60da      	str	r2, [r3, #12]
      break;
 8005872:	e004      	b.n	800587e <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8005874:	230f      	movs	r3, #15
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
      break;
 800587c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800587e:	230f      	movs	r3, #15
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d000      	beq.n	800588a <HAL_TIM_PWM_Stop_IT+0x96>
 8005888:	e063      	b.n	8005952 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	2200      	movs	r2, #0
 8005892:	0018      	movs	r0, r3
 8005894:	f000 feb0 	bl	80065f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a30      	ldr	r2, [pc, #192]	; (8005960 <HAL_TIM_PWM_Stop_IT+0x16c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIM_PWM_Stop_IT+0xcc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2f      	ldr	r2, [pc, #188]	; (8005964 <HAL_TIM_PWM_Stop_IT+0x170>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIM_PWM_Stop_IT+0xcc>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2d      	ldr	r2, [pc, #180]	; (8005968 <HAL_TIM_PWM_Stop_IT+0x174>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIM_PWM_Stop_IT+0xcc>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2c      	ldr	r2, [pc, #176]	; (800596c <HAL_TIM_PWM_Stop_IT+0x178>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_PWM_Stop_IT+0xd0>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_TIM_PWM_Stop_IT+0xd2>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d013      	beq.n	80058f2 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <HAL_TIM_PWM_Stop_IT+0x17c>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	d10d      	bne.n	80058f2 <HAL_TIM_PWM_Stop_IT+0xfe>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <HAL_TIM_PWM_Stop_IT+0x180>)
 80058de:	4013      	ands	r3, r2
 80058e0:	d107      	bne.n	80058f2 <HAL_TIM_PWM_Stop_IT+0xfe>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4922      	ldr	r1, [pc, #136]	; (8005978 <HAL_TIM_PWM_Stop_IT+0x184>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_TIM_PWM_Stop_IT+0x17c>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	d10d      	bne.n	800591a <HAL_TIM_PWM_Stop_IT+0x126>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <HAL_TIM_PWM_Stop_IT+0x180>)
 8005906:	4013      	ands	r3, r2
 8005908:	d107      	bne.n	800591a <HAL_TIM_PWM_Stop_IT+0x126>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	438a      	bics	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Stop_IT+0x136>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	223e      	movs	r2, #62	; 0x3e
 8005924:	2101      	movs	r1, #1
 8005926:	5499      	strb	r1, [r3, r2]
 8005928:	e013      	b.n	8005952 <HAL_TIM_PWM_Stop_IT+0x15e>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Stop_IT+0x146>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	223f      	movs	r2, #63	; 0x3f
 8005934:	2101      	movs	r1, #1
 8005936:	5499      	strb	r1, [r3, r2]
 8005938:	e00b      	b.n	8005952 <HAL_TIM_PWM_Stop_IT+0x15e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Stop_IT+0x156>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	2101      	movs	r1, #1
 8005946:	5499      	strb	r1, [r3, r2]
 8005948:	e003      	b.n	8005952 <HAL_TIM_PWM_Stop_IT+0x15e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2241      	movs	r2, #65	; 0x41
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8005952:	230f      	movs	r3, #15
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	781b      	ldrb	r3, [r3, #0]
}
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b004      	add	sp, #16
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800
 8005970:	00001111 	.word	0x00001111
 8005974:	00000444 	.word	0x00000444
 8005978:	ffff7fff 	.word	0xffff7fff

0800597c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2202      	movs	r2, #2
 800598c:	4013      	ands	r3, r2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d124      	bne.n	80059dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2202      	movs	r2, #2
 800599a:	4013      	ands	r3, r2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11d      	bne.n	80059dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2203      	movs	r2, #3
 80059a6:	4252      	negs	r2, r2
 80059a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2203      	movs	r2, #3
 80059b8:	4013      	ands	r3, r2
 80059ba:	d004      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 faec 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 80059c4:	e007      	b.n	80059d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7fa fffb 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 faeb 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2204      	movs	r2, #4
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d125      	bne.n	8005a36 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2204      	movs	r2, #4
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d11e      	bne.n	8005a36 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2205      	movs	r2, #5
 80059fe:	4252      	negs	r2, r2
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	23c0      	movs	r3, #192	; 0xc0
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4013      	ands	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 fabf 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005a1e:	e007      	b.n	8005a30 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fa ffce 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 fabe 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d124      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d11d      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2209      	movs	r2, #9
 8005a58:	4252      	negs	r2, r2
 8005a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2204      	movs	r2, #4
 8005a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f000 fa93 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005a76:	e007      	b.n	8005a88 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7fa ffa2 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 fa92 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2210      	movs	r2, #16
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d125      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d11e      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2211      	movs	r2, #17
 8005ab0:	4252      	negs	r2, r2
 8005ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	23c0      	movs	r3, #192	; 0xc0
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 fa66 	bl	8005f9c <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e007      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7fa ff75 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 fa65 	bl	8005fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2201      	movs	r2, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10f      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d108      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	4252      	negs	r2, r2
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fa3b 	bl	8005f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d10f      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d108      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2281      	movs	r2, #129	; 0x81
 8005b38:	4252      	negs	r2, r2
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 fe42 	bl	80067c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d10f      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	2240      	movs	r2, #64	; 0x40
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d108      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2241      	movs	r2, #65	; 0x41
 8005b66:	4252      	negs	r2, r2
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fa25 	bl	8005fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d108      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2221      	movs	r2, #33	; 0x21
 8005b94:	4252      	negs	r2, r2
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f000 fe0c 	bl	80067b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	46c0      	nop			; (mov r8, r8)
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2317      	movs	r3, #23
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	223c      	movs	r2, #60	; 0x3c
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_OC_ConfigChannel+0x22>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e042      	b.n	8005c50 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	223c      	movs	r2, #60	; 0x3c
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d027      	beq.n	8005c28 <HAL_TIM_OC_ConfigChannel+0x80>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d82c      	bhi.n	8005c38 <HAL_TIM_OC_ConfigChannel+0x90>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d019      	beq.n	8005c18 <HAL_TIM_OC_ConfigChannel+0x70>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d826      	bhi.n	8005c38 <HAL_TIM_OC_ConfigChannel+0x90>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_OC_ConfigChannel+0x50>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d008      	beq.n	8005c08 <HAL_TIM_OC_ConfigChannel+0x60>
 8005bf6:	e01f      	b.n	8005c38 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	0011      	movs	r1, r2
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 fa63 	bl	80060cc <TIM_OC1_SetConfig>
      break;
 8005c06:	e01c      	b.n	8005c42 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 fae3 	bl	80061dc <TIM_OC2_SetConfig>
      break;
 8005c16:	e014      	b.n	8005c42 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 fb5f 	bl	80062e4 <TIM_OC3_SetConfig>
      break;
 8005c26:	e00c      	b.n	8005c42 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 fbdd 	bl	80063f0 <TIM_OC4_SetConfig>
      break;
 8005c36:	e004      	b.n	8005c42 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005c38:	2317      	movs	r3, #23
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
      break;
 8005c40:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	223c      	movs	r2, #60	; 0x3c
 8005c46:	2100      	movs	r1, #0
 8005c48:	5499      	strb	r1, [r3, r2]

  return status;
 8005c4a:	2317      	movs	r3, #23
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	781b      	ldrb	r3, [r3, #0]
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c64:	2317      	movs	r3, #23
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	223c      	movs	r2, #60	; 0x3c
 8005c70:	5c9b      	ldrb	r3, [r3, r2]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e0ad      	b.n	8005dd6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	223c      	movs	r2, #60	; 0x3c
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d100      	bne.n	8005c8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005c88:	e076      	b.n	8005d78 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b0c      	cmp	r3, #12
 8005c8e:	d900      	bls.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005c90:	e095      	b.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d04e      	beq.n	8005d36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d900      	bls.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005c9e:	e08e      	b.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x56>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d021      	beq.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005cac:	e087      	b.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	0011      	movs	r1, r2
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 fa08 	bl	80060cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2108      	movs	r1, #8
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	438a      	bics	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	619a      	str	r2, [r3, #24]
      break;
 8005cee:	e06b      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 fa6f 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	0109      	lsls	r1, r1, #4
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4931      	ldr	r1, [pc, #196]	; (8005de0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6999      	ldr	r1, [r3, #24]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	619a      	str	r2, [r3, #24]
      break;
 8005d34:	e048      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fad0 	bl	80062e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2108      	movs	r1, #8
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2104      	movs	r1, #4
 8005d60:	438a      	bics	r2, r1
 8005d62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69d9      	ldr	r1, [r3, #28]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	61da      	str	r2, [r3, #28]
      break;
 8005d76:	e027      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	0011      	movs	r1, r2
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 fb35 	bl	80063f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2180      	movs	r1, #128	; 0x80
 8005d92:	0109      	lsls	r1, r1, #4
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	490f      	ldr	r1, [pc, #60]	; (8005de0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005da4:	400a      	ands	r2, r1
 8005da6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69d9      	ldr	r1, [r3, #28]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]
      break;
 8005dbc:	e004      	b.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005dbe:	2317      	movs	r3, #23
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
      break;
 8005dc6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	223c      	movs	r2, #60	; 0x3c
 8005dcc:	2100      	movs	r1, #0
 8005dce:	5499      	strb	r1, [r3, r2]

  return status;
 8005dd0:	2317      	movs	r3, #23
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	781b      	ldrb	r3, [r3, #0]
}
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b006      	add	sp, #24
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	fffffbff 	.word	0xfffffbff

08005de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	230f      	movs	r3, #15
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	223c      	movs	r2, #60	; 0x3c
 8005dfa:	5c9b      	ldrb	r3, [r3, r2]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_ConfigClockSource+0x20>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e0bc      	b.n	8005f7e <HAL_TIM_ConfigClockSource+0x19a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	223c      	movs	r2, #60	; 0x3c
 8005e08:	2101      	movs	r1, #1
 8005e0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	223d      	movs	r2, #61	; 0x3d
 8005e10:	2102      	movs	r1, #2
 8005e12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2277      	movs	r2, #119	; 0x77
 8005e20:	4393      	bics	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a58      	ldr	r2, [pc, #352]	; (8005f88 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	0192      	lsls	r2, r2, #6
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d040      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xde>
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	0192      	lsls	r2, r2, #6
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d900      	bls.n	8005e4a <HAL_TIM_ConfigClockSource+0x66>
 8005e48:	e088      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	0152      	lsls	r2, r2, #5
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d100      	bne.n	8005e54 <HAL_TIM_ConfigClockSource+0x70>
 8005e52:	e088      	b.n	8005f66 <HAL_TIM_ConfigClockSource+0x182>
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	0152      	lsls	r2, r2, #5
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d900      	bls.n	8005e5e <HAL_TIM_ConfigClockSource+0x7a>
 8005e5c:	e07e      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e5e:	2b70      	cmp	r3, #112	; 0x70
 8005e60:	d018      	beq.n	8005e94 <HAL_TIM_ConfigClockSource+0xb0>
 8005e62:	d900      	bls.n	8005e66 <HAL_TIM_ConfigClockSource+0x82>
 8005e64:	e07a      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e66:	2b60      	cmp	r3, #96	; 0x60
 8005e68:	d04f      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x126>
 8005e6a:	d900      	bls.n	8005e6e <HAL_TIM_ConfigClockSource+0x8a>
 8005e6c:	e076      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e6e:	2b50      	cmp	r3, #80	; 0x50
 8005e70:	d03b      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x106>
 8005e72:	d900      	bls.n	8005e76 <HAL_TIM_ConfigClockSource+0x92>
 8005e74:	e072      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d057      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x146>
 8005e7a:	d900      	bls.n	8005e7e <HAL_TIM_ConfigClockSource+0x9a>
 8005e7c:	e06e      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e7e:	2b30      	cmp	r3, #48	; 0x30
 8005e80:	d063      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x166>
 8005e82:	d86b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d060      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x166>
 8005e88:	d868      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d05d      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x166>
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d05b      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x166>
 8005e92:	e063      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6899      	ldr	r1, [r3, #8]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f000 fb88 	bl	80065b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2277      	movs	r2, #119	; 0x77
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
      break;
 8005ec0:	e052      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f000 fb71 	bl	80065b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	01c9      	lsls	r1, r1, #7
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e03e      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	f000 fae4 	bl	80064c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2150      	movs	r1, #80	; 0x50
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fb3e 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005f08:	e02e      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	001a      	movs	r2, r3
 8005f18:	f000 fb02 	bl	8006520 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2160      	movs	r1, #96	; 0x60
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 fb2e 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005f28:	e01e      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	001a      	movs	r2, r3
 8005f38:	f000 fac4 	bl	80064c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2140      	movs	r1, #64	; 0x40
 8005f42:	0018      	movs	r0, r3
 8005f44:	f000 fb1e 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005f48:	e00e      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	0019      	movs	r1, r3
 8005f54:	0010      	movs	r0, r2
 8005f56:	f000 fb15 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005f5a:	e005      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005f5c:	230f      	movs	r3, #15
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
      break;
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005f66:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	223d      	movs	r2, #61	; 0x3d
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	223c      	movs	r2, #60	; 0x3c
 8005f74:	2100      	movs	r1, #0
 8005f76:	5499      	strb	r1, [r3, r2]

  return status;
 8005f78:	230f      	movs	r3, #15
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b004      	add	sp, #16
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	ffff00ff 	.word	0xffff00ff

08005f8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b002      	add	sp, #8
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d008      	beq.n	8005ff6 <TIM_Base_SetConfig+0x2a>
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	05db      	lsls	r3, r3, #23
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d003      	beq.n	8005ff6 <TIM_Base_SetConfig+0x2a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d108      	bne.n	8006008 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2270      	movs	r2, #112	; 0x70
 8005ffa:	4393      	bics	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d018      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	05db      	lsls	r3, r3, #23
 8006016:	429a      	cmp	r2, r3
 8006018:	d013      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00f      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a24      	ldr	r2, [pc, #144]	; (80060b8 <TIM_Base_SetConfig+0xec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00b      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d007      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <TIM_Base_SetConfig+0xf4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <TIM_Base_SetConfig+0x76>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <TIM_Base_SetConfig+0xf8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <TIM_Base_SetConfig+0xfc>)
 8006046:	4013      	ands	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	4393      	bics	r3, r2
 800605a:	001a      	movs	r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_Base_SetConfig+0xce>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_Base_SetConfig+0xce>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <TIM_Base_SetConfig+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_Base_SetConfig+0xce>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a0b      	ldr	r2, [pc, #44]	; (80060c4 <TIM_Base_SetConfig+0xf8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d103      	bne.n	80060a2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	615a      	str	r2, [r3, #20]
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b004      	add	sp, #16
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40002000 	.word	0x40002000
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	fffffcff 	.word	0xfffffcff

080060cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2201      	movs	r2, #1
 80060dc:	4393      	bics	r3, r2
 80060de:	001a      	movs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2270      	movs	r2, #112	; 0x70
 80060fa:	4393      	bics	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2203      	movs	r2, #3
 8006102:	4393      	bics	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2202      	movs	r2, #2
 8006114:	4393      	bics	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a27      	ldr	r2, [pc, #156]	; (80061c4 <TIM_OC1_SetConfig+0xf8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00b      	beq.n	8006142 <TIM_OC1_SetConfig+0x76>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <TIM_OC1_SetConfig+0xfc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d007      	beq.n	8006142 <TIM_OC1_SetConfig+0x76>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <TIM_OC1_SetConfig+0x100>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_OC1_SetConfig+0x76>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <TIM_OC1_SetConfig+0x104>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10c      	bne.n	800615c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2208      	movs	r2, #8
 8006146:	4393      	bics	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2204      	movs	r2, #4
 8006158:	4393      	bics	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <TIM_OC1_SetConfig+0xf8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC1_SetConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <TIM_OC1_SetConfig+0xfc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC1_SetConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a17      	ldr	r2, [pc, #92]	; (80061cc <TIM_OC1_SetConfig+0x100>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC1_SetConfig+0xb0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <TIM_OC1_SetConfig+0x104>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d111      	bne.n	80061a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <TIM_OC1_SetConfig+0x108>)
 8006180:	4013      	ands	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <TIM_OC1_SetConfig+0x10c>)
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	fffffeff 	.word	0xfffffeff
 80061d8:	fffffdff 	.word	0xfffffdff

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	2210      	movs	r2, #16
 80061ec:	4393      	bics	r3, r2
 80061ee:	001a      	movs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <TIM_OC2_SetConfig+0xe8>)
 800620a:	4013      	ands	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <TIM_OC2_SetConfig+0xec>)
 8006212:	4013      	ands	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2220      	movs	r2, #32
 8006226:	4393      	bics	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a24      	ldr	r2, [pc, #144]	; (80062cc <TIM_OC2_SetConfig+0xf0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10d      	bne.n	800625a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2280      	movs	r2, #128	; 0x80
 8006242:	4393      	bics	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	4393      	bics	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <TIM_OC2_SetConfig+0xf0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_OC2_SetConfig+0x9e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1a      	ldr	r2, [pc, #104]	; (80062d0 <TIM_OC2_SetConfig+0xf4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_OC2_SetConfig+0x9e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <TIM_OC2_SetConfig+0xf8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC2_SetConfig+0x9e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <TIM_OC2_SetConfig+0xfc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d113      	bne.n	80062a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <TIM_OC2_SetConfig+0x100>)
 800627e:	4013      	ands	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <TIM_OC2_SetConfig+0x104>)
 8006286:	4013      	ands	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b006      	add	sp, #24
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	ffff8fff 	.word	0xffff8fff
 80062c8:	fffffcff 	.word	0xfffffcff
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800
 80062dc:	fffffbff 	.word	0xfffffbff
 80062e0:	fffff7ff 	.word	0xfffff7ff

080062e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4a35      	ldr	r2, [pc, #212]	; (80063c8 <TIM_OC3_SetConfig+0xe4>)
 80062f4:	401a      	ands	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2270      	movs	r2, #112	; 0x70
 8006310:	4393      	bics	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2203      	movs	r2, #3
 8006318:	4393      	bics	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4a28      	ldr	r2, [pc, #160]	; (80063cc <TIM_OC3_SetConfig+0xe8>)
 800632a:	4013      	ands	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <TIM_OC3_SetConfig+0xec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10d      	bne.n	800635e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <TIM_OC3_SetConfig+0xf0>)
 8006346:	4013      	ands	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <TIM_OC3_SetConfig+0xf4>)
 800635a:	4013      	ands	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <TIM_OC3_SetConfig+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_OC3_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <TIM_OC3_SetConfig+0xf8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_OC3_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <TIM_OC3_SetConfig+0xfc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC3_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <TIM_OC3_SetConfig+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d113      	bne.n	80063a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <TIM_OC3_SetConfig+0x104>)
 8006382:	4013      	ands	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4a18      	ldr	r2, [pc, #96]	; (80063ec <TIM_OC3_SetConfig+0x108>)
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b006      	add	sp, #24
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	fffffeff 	.word	0xfffffeff
 80063cc:	fffffdff 	.word	0xfffffdff
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	fffff7ff 	.word	0xfffff7ff
 80063d8:	fffffbff 	.word	0xfffffbff
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40014400 	.word	0x40014400
 80063e4:	40014800 	.word	0x40014800
 80063e8:	ffffefff 	.word	0xffffefff
 80063ec:	ffffdfff 	.word	0xffffdfff

080063f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <TIM_OC4_SetConfig+0xb0>)
 8006400:	401a      	ands	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <TIM_OC4_SetConfig+0xb4>)
 800641c:	4013      	ands	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <TIM_OC4_SetConfig+0xb8>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <TIM_OC4_SetConfig+0xbc>)
 8006438:	4013      	ands	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	031b      	lsls	r3, r3, #12
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <TIM_OC4_SetConfig+0xc0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_OC4_SetConfig+0x78>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <TIM_OC4_SetConfig+0xc4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_OC4_SetConfig+0x78>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <TIM_OC4_SetConfig+0xc8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC4_SetConfig+0x78>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a16      	ldr	r2, [pc, #88]	; (80064bc <TIM_OC4_SetConfig+0xcc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d109      	bne.n	800647c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <TIM_OC4_SetConfig+0xd0>)
 800646c:	4013      	ands	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	019b      	lsls	r3, r3, #6
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	46bd      	mov	sp, r7
 800649a:	b006      	add	sp, #24
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	ffffefff 	.word	0xffffefff
 80064a4:	ffff8fff 	.word	0xffff8fff
 80064a8:	fffffcff 	.word	0xfffffcff
 80064ac:	ffffdfff 	.word	0xffffdfff
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800
 80064c0:	ffffbfff 	.word	0xffffbfff

080064c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	2201      	movs	r2, #1
 80064dc:	4393      	bics	r3, r2
 80064de:	001a      	movs	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	22f0      	movs	r2, #240	; 0xf0
 80064ee:	4393      	bics	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	220a      	movs	r2, #10
 8006500:	4393      	bics	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b006      	add	sp, #24
 800651e:	bd80      	pop	{r7, pc}

08006520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	2210      	movs	r2, #16
 8006532:	4393      	bics	r3, r2
 8006534:	001a      	movs	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <TIM_TI2_ConfigInputStage+0x60>)
 800654a:	4013      	ands	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	031b      	lsls	r3, r3, #12
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	22a0      	movs	r2, #160	; 0xa0
 800655c:	4393      	bics	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	b006      	add	sp, #24
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	ffff0fff 	.word	0xffff0fff

08006584 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2270      	movs	r2, #112	; 0x70
 8006598:	4393      	bics	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	2207      	movs	r2, #7
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	609a      	str	r2, [r3, #8]
}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b004      	add	sp, #16
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <TIM_ETR_SetConfig+0x3c>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	431a      	orrs	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b006      	add	sp, #24
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	ffff00ff 	.word	0xffff00ff

080065f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	221f      	movs	r2, #31
 8006608:	4013      	ands	r3, r2
 800660a:	2201      	movs	r2, #1
 800660c:	409a      	lsls	r2, r3
 800660e:	0013      	movs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	43d2      	mvns	r2, r2
 800661a:	401a      	ands	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	211f      	movs	r1, #31
 8006628:	400b      	ands	r3, r1
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4099      	lsls	r1, r3
 800662e:	000b      	movs	r3, r1
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	46bd      	mov	sp, r7
 800663a:	b006      	add	sp, #24
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	223c      	movs	r2, #60	; 0x3c
 800664e:	5c9b      	ldrb	r3, [r3, r2]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e047      	b.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	223c      	movs	r2, #60	; 0x3c
 800665c:	2101      	movs	r1, #1
 800665e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	223d      	movs	r2, #61	; 0x3d
 8006664:	2102      	movs	r1, #2
 8006666:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2270      	movs	r2, #112	; 0x70
 800667c:	4393      	bics	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00f      	beq.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	05db      	lsls	r3, r3, #23
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d009      	beq.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10c      	bne.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2280      	movs	r2, #128	; 0x80
 80066c0:	4393      	bics	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	223d      	movs	r2, #61	; 0x3d
 80066da:	2101      	movs	r1, #1
 80066dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	223c      	movs	r2, #60	; 0x3c
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b004      	add	sp, #16
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40014000 	.word	0x40014000

080066fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	223c      	movs	r2, #60	; 0x3c
 800670e:	5c9b      	ldrb	r3, [r3, r2]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006714:	2302      	movs	r3, #2
 8006716:	e03e      	b.n	8006796 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	223c      	movs	r2, #60	; 0x3c
 800671c:	2101      	movs	r1, #1
 800671e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	22ff      	movs	r2, #255	; 0xff
 8006724:	4393      	bics	r3, r2
 8006726:	001a      	movs	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006734:	401a      	ands	r2, r3
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006742:	401a      	ands	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006750:	401a      	ands	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800675e:	401a      	ands	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a11      	ldr	r2, [pc, #68]	; (80067b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800676c:	401a      	ands	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a0e      	ldr	r2, [pc, #56]	; (80067b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800677a:	401a      	ands	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	223c      	movs	r2, #60	; 0x3c
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	fffffcff 	.word	0xfffffcff
 80067a4:	fffffbff 	.word	0xfffffbff
 80067a8:	fffff7ff 	.word	0xfffff7ff
 80067ac:	ffffefff 	.word	0xffffefff
 80067b0:	ffffdfff 	.word	0xffffdfff
 80067b4:	ffffbfff 	.word	0xffffbfff

080067b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067c0:	46c0      	nop			; (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b002      	add	sp, #8
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b002      	add	sp, #8
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e044      	b.n	8006874 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2274      	movs	r2, #116	; 0x74
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7fb fb4d 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2224      	movs	r2, #36	; 0x24
 8006806:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	438a      	bics	r2, r1
 8006816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f000 fc2e 	bl	800707c <UART_SetConfig>
 8006820:	0003      	movs	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e024      	b.n	8006874 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fd61 	bl	80072fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	490d      	ldr	r1, [pc, #52]	; (800687c <HAL_UART_Init+0xa4>)
 8006846:	400a      	ands	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	212a      	movs	r1, #42	; 0x2a
 8006856:	438a      	bics	r2, r1
 8006858:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f000 fdf9 	bl	8007464 <UART_CheckIdleState>
 8006872:	0003      	movs	r3, r0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}
 800687c:	ffffb7ff 	.word	0xffffb7ff

08006880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	1dbb      	adds	r3, r7, #6
 800688e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006894:	2b20      	cmp	r3, #32
 8006896:	d000      	beq.n	800689a <HAL_UART_Transmit+0x1a>
 8006898:	e096      	b.n	80069c8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_UART_Transmit+0x28>
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e08e      	b.n	80069ca <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	015b      	lsls	r3, r3, #5
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d109      	bne.n	80068cc <HAL_UART_Transmit+0x4c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2201      	movs	r2, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	d001      	beq.n	80068cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e07e      	b.n	80069ca <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2274      	movs	r2, #116	; 0x74
 80068d0:	5c9b      	ldrb	r3, [r3, r2]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit+0x5a>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e077      	b.n	80069ca <HAL_UART_Transmit+0x14a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2274      	movs	r2, #116	; 0x74
 80068de:	2101      	movs	r1, #1
 80068e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2280      	movs	r2, #128	; 0x80
 80068e6:	2100      	movs	r1, #0
 80068e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f0:	f7fb fc4a 	bl	8002188 <HAL_GetTick>
 80068f4:	0003      	movs	r3, r0
 80068f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	1dba      	adds	r2, r7, #6
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1dba      	adds	r2, r7, #6
 8006906:	2152      	movs	r1, #82	; 0x52
 8006908:	8812      	ldrh	r2, [r2, #0]
 800690a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	015b      	lsls	r3, r3, #5
 8006914:	429a      	cmp	r2, r3
 8006916:	d108      	bne.n	800692a <HAL_UART_Transmit+0xaa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e003      	b.n	8006932 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2274      	movs	r2, #116	; 0x74
 8006936:	2100      	movs	r1, #0
 8006938:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800693a:	e02d      	b.n	8006998 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	0013      	movs	r3, r2
 8006946:	2200      	movs	r2, #0
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	f000 fdd3 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d001      	beq.n	8006956 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e039      	b.n	80069ca <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	05d2      	lsls	r2, r2, #23
 8006966:	0dd2      	lsrs	r2, r2, #23
 8006968:	b292      	uxth	r2, r2
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	3302      	adds	r3, #2
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e008      	b.n	8006986 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	b292      	uxth	r2, r2
 800697e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2252      	movs	r2, #82	; 0x52
 800698a:	5a9b      	ldrh	r3, [r3, r2]
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b299      	uxth	r1, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2252      	movs	r2, #82	; 0x52
 8006996:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2252      	movs	r2, #82	; 0x52
 800699c:	5a9b      	ldrh	r3, [r3, r2]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1cb      	bne.n	800693c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	0013      	movs	r3, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	2140      	movs	r1, #64	; 0x40
 80069b2:	f000 fd9f 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80069b6:	1e03      	subs	r3, r0, #0
 80069b8:	d001      	beq.n	80069be <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e005      	b.n	80069ca <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b008      	add	sp, #32
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	1dbb      	adds	r3, r7, #6
 80069de:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d150      	bne.n	8006a8a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_UART_Receive_IT+0x24>
 80069ee:	1dbb      	adds	r3, r7, #6
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e048      	b.n	8006a8c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	2380      	movs	r3, #128	; 0x80
 8006a00:	015b      	lsls	r3, r3, #5
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d109      	bne.n	8006a1a <HAL_UART_Receive_IT+0x48>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2201      	movs	r2, #1
 8006a12:	4013      	ands	r3, r2
 8006a14:	d001      	beq.n	8006a1a <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e038      	b.n	8006a8c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2274      	movs	r2, #116	; 0x74
 8006a1e:	5c9b      	ldrb	r3, [r3, r2]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Receive_IT+0x56>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e031      	b.n	8006a8c <HAL_UART_Receive_IT+0xba>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2274      	movs	r2, #116	; 0x74
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	4013      	ands	r3, r2
 8006a42:	d019      	beq.n	8006a78 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a44:	f3ef 8310 	mrs	r3, PRIMASK
 8006a48:	613b      	str	r3, [r7, #16]
  return(result);
 8006a4a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	2301      	movs	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	46c0      	nop			; (mov r8, r8)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	04c9      	lsls	r1, r1, #19
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f383 8810 	msr	PRIMASK, r3
}
 8006a76:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a78:	1dbb      	adds	r3, r7, #6
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 fdfb 	bl	800767c <UART_Start_Receive_IT>
 8006a86:	0003      	movs	r3, r0
 8006a88:	e000      	b.n	8006a8c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b008      	add	sp, #32
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a94:	b590      	push	{r4, r7, lr}
 8006a96:	b0ab      	sub	sp, #172	; 0xac
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	22a4      	movs	r2, #164	; 0xa4
 8006aa4:	18b9      	adds	r1, r7, r2
 8006aa6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	20a0      	movs	r0, #160	; 0xa0
 8006ab0:	1839      	adds	r1, r7, r0
 8006ab2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	219c      	movs	r1, #156	; 0x9c
 8006abc:	1879      	adds	r1, r7, r1
 8006abe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ac0:	0011      	movs	r1, r2
 8006ac2:	18bb      	adds	r3, r7, r2
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a99      	ldr	r2, [pc, #612]	; (8006d2c <HAL_UART_IRQHandler+0x298>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2298      	movs	r2, #152	; 0x98
 8006acc:	18bc      	adds	r4, r7, r2
 8006ace:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006ad0:	18bb      	adds	r3, r7, r2
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d114      	bne.n	8006b02 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2220      	movs	r2, #32
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d00f      	beq.n	8006b02 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae2:	183b      	adds	r3, r7, r0
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d00a      	beq.n	8006b02 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d100      	bne.n	8006af6 <HAL_UART_IRQHandler+0x62>
 8006af4:	e296      	b.n	8007024 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	0010      	movs	r0, r2
 8006afe:	4798      	blx	r3
      }
      return;
 8006b00:	e290      	b.n	8007024 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b02:	2398      	movs	r3, #152	; 0x98
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d100      	bne.n	8006b0e <HAL_UART_IRQHandler+0x7a>
 8006b0c:	e114      	b.n	8006d38 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b0e:	239c      	movs	r3, #156	; 0x9c
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	4013      	ands	r3, r2
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b1a:	23a0      	movs	r3, #160	; 0xa0
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a83      	ldr	r2, [pc, #524]	; (8006d30 <HAL_UART_IRQHandler+0x29c>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	d100      	bne.n	8006b28 <HAL_UART_IRQHandler+0x94>
 8006b26:	e107      	b.n	8006d38 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b28:	23a4      	movs	r3, #164	; 0xa4
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4013      	ands	r3, r2
 8006b32:	d012      	beq.n	8006b5a <HAL_UART_IRQHandler+0xc6>
 8006b34:	23a0      	movs	r3, #160	; 0xa0
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d00b      	beq.n	8006b5a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2280      	movs	r2, #128	; 0x80
 8006b4e:	589b      	ldr	r3, [r3, r2]
 8006b50:	2201      	movs	r2, #1
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2180      	movs	r1, #128	; 0x80
 8006b58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5a:	23a4      	movs	r3, #164	; 0xa4
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2202      	movs	r2, #2
 8006b62:	4013      	ands	r3, r2
 8006b64:	d011      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
 8006b66:	239c      	movs	r3, #156	; 0x9c
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2202      	movs	r2, #2
 8006b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	589b      	ldr	r3, [r3, r2]
 8006b80:	2204      	movs	r2, #4
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8a:	23a4      	movs	r3, #164	; 0xa4
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2204      	movs	r2, #4
 8006b92:	4013      	ands	r3, r2
 8006b94:	d011      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
 8006b96:	239c      	movs	r3, #156	; 0x9c
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	589b      	ldr	r3, [r3, r2]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bba:	23a4      	movs	r3, #164	; 0xa4
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d017      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc6:	23a0      	movs	r3, #160	; 0xa0
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d105      	bne.n	8006bde <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bd2:	239c      	movs	r3, #156	; 0x9c
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2208      	movs	r2, #8
 8006be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2280      	movs	r2, #128	; 0x80
 8006bea:	589b      	ldr	r3, [r3, r2]
 8006bec:	2208      	movs	r2, #8
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf6:	23a4      	movs	r3, #164	; 0xa4
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	4013      	ands	r3, r2
 8006c02:	d013      	beq.n	8006c2c <HAL_UART_IRQHandler+0x198>
 8006c04:	23a0      	movs	r3, #160	; 0xa0
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	04db      	lsls	r3, r3, #19
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d00c      	beq.n	8006c2c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	0112      	lsls	r2, r2, #4
 8006c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	589b      	ldr	r3, [r3, r2]
 8006c22:	2220      	movs	r2, #32
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2280      	movs	r2, #128	; 0x80
 8006c30:	589b      	ldr	r3, [r3, r2]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d100      	bne.n	8006c38 <HAL_UART_IRQHandler+0x1a4>
 8006c36:	e1f7      	b.n	8007028 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c38:	23a4      	movs	r3, #164	; 0xa4
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	4013      	ands	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c44:	23a0      	movs	r3, #160	; 0xa0
 8006c46:	18fb      	adds	r3, r7, r3
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d008      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	0010      	movs	r0, r2
 8006c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2280      	movs	r2, #128	; 0x80
 8006c66:	589b      	ldr	r3, [r3, r2]
 8006c68:	2194      	movs	r1, #148	; 0x94
 8006c6a:	187a      	adds	r2, r7, r1
 8006c6c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2240      	movs	r2, #64	; 0x40
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d004      	beq.n	8006c86 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c7c:	187b      	adds	r3, r7, r1
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2228      	movs	r2, #40	; 0x28
 8006c82:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c84:	d047      	beq.n	8006d16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f000 fd93 	bl	80077b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2240      	movs	r2, #64	; 0x40
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d137      	bne.n	8006d0c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca4:	2090      	movs	r0, #144	; 0x90
 8006ca6:	183a      	adds	r2, r7, r0
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	2301      	movs	r3, #1
 8006cac:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb0:	f383 8810 	msr	PRIMASK, r3
}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2140      	movs	r1, #64	; 0x40
 8006cc2:	438a      	bics	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	183b      	adds	r3, r7, r0
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cce:	f383 8810 	msr	PRIMASK, r3
}
 8006cd2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d012      	beq.n	8006d02 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce0:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <HAL_UART_IRQHandler+0x2a0>)
 8006ce2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fc f8b3 	bl	8002e54 <HAL_DMA_Abort_IT>
 8006cee:	1e03      	subs	r3, r0, #0
 8006cf0:	d01a      	beq.n	8006d28 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d00:	e012      	b.n	8006d28 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 f9a5 	bl	8007054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0a:	e00d      	b.n	8006d28 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 f9a0 	bl	8007054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	e008      	b.n	8006d28 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f99b 	bl	8007054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2280      	movs	r2, #128	; 0x80
 8006d22:	2100      	movs	r1, #0
 8006d24:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006d26:	e17f      	b.n	8007028 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	46c0      	nop			; (mov r8, r8)
    return;
 8006d2a:	e17d      	b.n	8007028 <HAL_UART_IRQHandler+0x594>
 8006d2c:	0000080f 	.word	0x0000080f
 8006d30:	04000120 	.word	0x04000120
 8006d34:	08007879 	.word	0x08007879

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d000      	beq.n	8006d42 <HAL_UART_IRQHandler+0x2ae>
 8006d40:	e131      	b.n	8006fa6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d42:	23a4      	movs	r3, #164	; 0xa4
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2210      	movs	r2, #16
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d100      	bne.n	8006d50 <HAL_UART_IRQHandler+0x2bc>
 8006d4e:	e12a      	b.n	8006fa6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d50:	23a0      	movs	r3, #160	; 0xa0
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2210      	movs	r2, #16
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <HAL_UART_IRQHandler+0x2ca>
 8006d5c:	e123      	b.n	8006fa6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2210      	movs	r2, #16
 8006d64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2240      	movs	r2, #64	; 0x40
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d000      	beq.n	8006d76 <HAL_UART_IRQHandler+0x2e2>
 8006d74:	e09b      	b.n	8006eae <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	217e      	movs	r1, #126	; 0x7e
 8006d80:	187b      	adds	r3, r7, r1
 8006d82:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006d84:	187b      	adds	r3, r7, r1
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d100      	bne.n	8006d8e <HAL_UART_IRQHandler+0x2fa>
 8006d8c:	e14e      	b.n	800702c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2258      	movs	r2, #88	; 0x58
 8006d92:	5a9b      	ldrh	r3, [r3, r2]
 8006d94:	187a      	adds	r2, r7, r1
 8006d96:	8812      	ldrh	r2, [r2, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d300      	bcc.n	8006d9e <HAL_UART_IRQHandler+0x30a>
 8006d9c:	e146      	b.n	800702c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	187a      	adds	r2, r7, r1
 8006da2:	215a      	movs	r1, #90	; 0x5a
 8006da4:	8812      	ldrh	r2, [r2, #0]
 8006da6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d06e      	beq.n	8006e90 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db2:	f3ef 8310 	mrs	r3, PRIMASK
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	f383 8810 	msr	PRIMASK, r3
}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	499a      	ldr	r1, [pc, #616]	; (800703c <HAL_UART_IRQHandler+0x5a8>)
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f383 8810 	msr	PRIMASK, r3
}
 8006de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de4:	f3ef 8310 	mrs	r3, PRIMASK
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	677b      	str	r3, [r7, #116]	; 0x74
 8006dee:	2301      	movs	r3, #1
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	f383 8810 	msr	PRIMASK, r3
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2101      	movs	r1, #1
 8006e06:	438a      	bics	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	f383 8810 	msr	PRIMASK, r3
}
 8006e14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e16:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e20:	2301      	movs	r3, #1
 8006e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e26:	f383 8810 	msr	PRIMASK, r3
}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2140      	movs	r1, #64	; 0x40
 8006e38:	438a      	bics	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e3e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e42:	f383 8810 	msr	PRIMASK, r3
}
 8006e46:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e54:	f3ef 8310 	mrs	r3, PRIMASK
 8006e58:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e5e:	2301      	movs	r3, #1
 8006e60:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e64:	f383 8810 	msr	PRIMASK, r3
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2110      	movs	r1, #16
 8006e76:	438a      	bics	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e80:	f383 8810 	msr	PRIMASK, r3
}
 8006e84:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7fb ffaa 	bl	8002de4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2258      	movs	r2, #88	; 0x58
 8006e94:	5a9a      	ldrh	r2, [r3, r2]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	215a      	movs	r1, #90	; 0x5a
 8006e9a:	5a5b      	ldrh	r3, [r3, r1]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f000 f8dc 	bl	8007064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eac:	e0be      	b.n	800702c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2258      	movs	r2, #88	; 0x58
 8006eb2:	5a99      	ldrh	r1, [r3, r2]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	225a      	movs	r2, #90	; 0x5a
 8006eb8:	5a9b      	ldrh	r3, [r3, r2]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	208e      	movs	r0, #142	; 0x8e
 8006ebe:	183b      	adds	r3, r7, r0
 8006ec0:	1a8a      	subs	r2, r1, r2
 8006ec2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	225a      	movs	r2, #90	; 0x5a
 8006ec8:	5a9b      	ldrh	r3, [r3, r2]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d100      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x43e>
 8006ed0:	e0ae      	b.n	8007030 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006ed2:	183b      	adds	r3, r7, r0
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d100      	bne.n	8006edc <HAL_UART_IRQHandler+0x448>
 8006eda:	e0a9      	b.n	8007030 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006edc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee4:	2488      	movs	r4, #136	; 0x88
 8006ee6:	193a      	adds	r2, r7, r4
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	2301      	movs	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f383 8810 	msr	PRIMASK, r3
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	494f      	ldr	r1, [pc, #316]	; (8007040 <HAL_UART_IRQHandler+0x5ac>)
 8006f02:	400a      	ands	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	193b      	adds	r3, r7, r4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f383 8810 	msr	PRIMASK, r3
}
 8006f12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f14:	f3ef 8310 	mrs	r3, PRIMASK
 8006f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f1a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1c:	2484      	movs	r4, #132	; 0x84
 8006f1e:	193a      	adds	r2, r7, r4
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	2301      	movs	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f383 8810 	msr	PRIMASK, r3
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2101      	movs	r1, #1
 8006f3a:	438a      	bics	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
 8006f3e:	193b      	adds	r3, r7, r4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f383 8810 	msr	PRIMASK, r3
}
 8006f4a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f66:	2480      	movs	r4, #128	; 0x80
 8006f68:	193a      	adds	r2, r7, r4
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f383 8810 	msr	PRIMASK, r3
}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2110      	movs	r1, #16
 8006f84:	438a      	bics	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f96:	183b      	adds	r3, r7, r0
 8006f98:	881a      	ldrh	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 f860 	bl	8007064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fa4:	e044      	b.n	8007030 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fa6:	23a4      	movs	r3, #164	; 0xa4
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	035b      	lsls	r3, r3, #13
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d010      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x542>
 8006fb4:	239c      	movs	r3, #156	; 0x9c
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	03db      	lsls	r3, r3, #15
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2280      	movs	r2, #128	; 0x80
 8006fc8:	0352      	lsls	r2, r2, #13
 8006fca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 fdfc 	bl	8007bcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fd4:	e02f      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fd6:	23a4      	movs	r3, #164	; 0xa4
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2280      	movs	r2, #128	; 0x80
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d00f      	beq.n	8007002 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fe2:	23a0      	movs	r3, #160	; 0xa0
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2280      	movs	r2, #128	; 0x80
 8006fea:	4013      	ands	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01e      	beq.n	8007034 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	0010      	movs	r0, r2
 8006ffe:	4798      	blx	r3
    }
    return;
 8007000:	e018      	b.n	8007034 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007002:	23a4      	movs	r3, #164	; 0xa4
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	4013      	ands	r3, r2
 800700c:	d013      	beq.n	8007036 <HAL_UART_IRQHandler+0x5a2>
 800700e:	23a0      	movs	r3, #160	; 0xa0
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2240      	movs	r2, #64	; 0x40
 8007016:	4013      	ands	r3, r2
 8007018:	d00d      	beq.n	8007036 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fc42 	bl	80078a6 <UART_EndTransmit_IT>
    return;
 8007022:	e008      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007024:	46c0      	nop			; (mov r8, r8)
 8007026:	e006      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	e004      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
      return;
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	e002      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007030:	46c0      	nop			; (mov r8, r8)
 8007032:	e000      	b.n	8007036 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007034:	46c0      	nop			; (mov r8, r8)
  }

}
 8007036:	46bd      	mov	sp, r7
 8007038:	b02b      	add	sp, #172	; 0xac
 800703a:	bd90      	pop	{r4, r7, pc}
 800703c:	fffffeff 	.word	0xfffffeff
 8007040:	fffffedf 	.word	0xfffffedf

08007044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800705c:	46c0      	nop			; (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b002      	add	sp, #8
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	000a      	movs	r2, r1
 800706e:	1cbb      	adds	r3, r7, #2
 8007070:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	46bd      	mov	sp, r7
 8007076:	b002      	add	sp, #8
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007084:	231e      	movs	r3, #30
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a8d      	ldr	r2, [pc, #564]	; (80072e0 <UART_SetConfig+0x264>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	0019      	movs	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	4a88      	ldr	r2, [pc, #544]	; (80072e4 <UART_SetConfig+0x268>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	0019      	movs	r1, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4a7f      	ldr	r2, [pc, #508]	; (80072e8 <UART_SetConfig+0x26c>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	0019      	movs	r1, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a7b      	ldr	r2, [pc, #492]	; (80072ec <UART_SetConfig+0x270>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d127      	bne.n	8007152 <UART_SetConfig+0xd6>
 8007102:	4b7b      	ldr	r3, [pc, #492]	; (80072f0 <UART_SetConfig+0x274>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	2203      	movs	r2, #3
 8007108:	4013      	ands	r3, r2
 800710a:	2b03      	cmp	r3, #3
 800710c:	d00d      	beq.n	800712a <UART_SetConfig+0xae>
 800710e:	d81b      	bhi.n	8007148 <UART_SetConfig+0xcc>
 8007110:	2b02      	cmp	r3, #2
 8007112:	d014      	beq.n	800713e <UART_SetConfig+0xc2>
 8007114:	d818      	bhi.n	8007148 <UART_SetConfig+0xcc>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <UART_SetConfig+0xa4>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d00a      	beq.n	8007134 <UART_SetConfig+0xb8>
 800711e:	e013      	b.n	8007148 <UART_SetConfig+0xcc>
 8007120:	231f      	movs	r3, #31
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e021      	b.n	800716e <UART_SetConfig+0xf2>
 800712a:	231f      	movs	r3, #31
 800712c:	18fb      	adds	r3, r7, r3
 800712e:	2202      	movs	r2, #2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e01c      	b.n	800716e <UART_SetConfig+0xf2>
 8007134:	231f      	movs	r3, #31
 8007136:	18fb      	adds	r3, r7, r3
 8007138:	2204      	movs	r2, #4
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	e017      	b.n	800716e <UART_SetConfig+0xf2>
 800713e:	231f      	movs	r3, #31
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	2208      	movs	r2, #8
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e012      	b.n	800716e <UART_SetConfig+0xf2>
 8007148:	231f      	movs	r3, #31
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	2210      	movs	r2, #16
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	e00d      	b.n	800716e <UART_SetConfig+0xf2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a67      	ldr	r2, [pc, #412]	; (80072f4 <UART_SetConfig+0x278>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d104      	bne.n	8007166 <UART_SetConfig+0xea>
 800715c:	231f      	movs	r3, #31
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e003      	b.n	800716e <UART_SetConfig+0xf2>
 8007166:	231f      	movs	r3, #31
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	2210      	movs	r2, #16
 800716c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	2380      	movs	r3, #128	; 0x80
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	429a      	cmp	r2, r3
 8007178:	d15d      	bne.n	8007236 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800717a:	231f      	movs	r3, #31
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d015      	beq.n	80071b0 <UART_SetConfig+0x134>
 8007184:	dc18      	bgt.n	80071b8 <UART_SetConfig+0x13c>
 8007186:	2b04      	cmp	r3, #4
 8007188:	d00d      	beq.n	80071a6 <UART_SetConfig+0x12a>
 800718a:	dc15      	bgt.n	80071b8 <UART_SetConfig+0x13c>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <UART_SetConfig+0x11a>
 8007190:	2b02      	cmp	r3, #2
 8007192:	d005      	beq.n	80071a0 <UART_SetConfig+0x124>
 8007194:	e010      	b.n	80071b8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007196:	f7fd faf7 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 800719a:	0003      	movs	r3, r0
 800719c:	61bb      	str	r3, [r7, #24]
        break;
 800719e:	e012      	b.n	80071c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a0:	4b55      	ldr	r3, [pc, #340]	; (80072f8 <UART_SetConfig+0x27c>)
 80071a2:	61bb      	str	r3, [r7, #24]
        break;
 80071a4:	e00f      	b.n	80071c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a6:	f7fd fa81 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 80071aa:	0003      	movs	r3, r0
 80071ac:	61bb      	str	r3, [r7, #24]
        break;
 80071ae:	e00a      	b.n	80071c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b0:	2380      	movs	r3, #128	; 0x80
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	61bb      	str	r3, [r7, #24]
        break;
 80071b6:	e006      	b.n	80071c6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071bc:	231e      	movs	r3, #30
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	2201      	movs	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
        break;
 80071c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d100      	bne.n	80071ce <UART_SetConfig+0x152>
 80071cc:	e07b      	b.n	80072c6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	005a      	lsls	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	18d2      	adds	r2, r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	0019      	movs	r1, r3
 80071e0:	0010      	movs	r0, r2
 80071e2:	f7f8 ff91 	bl	8000108 <__udivsi3>
 80071e6:	0003      	movs	r3, r0
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d91c      	bls.n	800722c <UART_SetConfig+0x1b0>
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	025b      	lsls	r3, r3, #9
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d217      	bcs.n	800722c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	200e      	movs	r0, #14
 8007202:	183b      	adds	r3, r7, r0
 8007204:	210f      	movs	r1, #15
 8007206:	438a      	bics	r2, r1
 8007208:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	b29b      	uxth	r3, r3
 8007210:	2207      	movs	r2, #7
 8007212:	4013      	ands	r3, r2
 8007214:	b299      	uxth	r1, r3
 8007216:	183b      	adds	r3, r7, r0
 8007218:	183a      	adds	r2, r7, r0
 800721a:	8812      	ldrh	r2, [r2, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	183a      	adds	r2, r7, r0
 8007226:	8812      	ldrh	r2, [r2, #0]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	e04c      	b.n	80072c6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800722c:	231e      	movs	r3, #30
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	2201      	movs	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e047      	b.n	80072c6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007236:	231f      	movs	r3, #31
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d015      	beq.n	800726c <UART_SetConfig+0x1f0>
 8007240:	dc18      	bgt.n	8007274 <UART_SetConfig+0x1f8>
 8007242:	2b04      	cmp	r3, #4
 8007244:	d00d      	beq.n	8007262 <UART_SetConfig+0x1e6>
 8007246:	dc15      	bgt.n	8007274 <UART_SetConfig+0x1f8>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <UART_SetConfig+0x1d6>
 800724c:	2b02      	cmp	r3, #2
 800724e:	d005      	beq.n	800725c <UART_SetConfig+0x1e0>
 8007250:	e010      	b.n	8007274 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007252:	f7fd fa99 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8007256:	0003      	movs	r3, r0
 8007258:	61bb      	str	r3, [r7, #24]
        break;
 800725a:	e012      	b.n	8007282 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800725c:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <UART_SetConfig+0x27c>)
 800725e:	61bb      	str	r3, [r7, #24]
        break;
 8007260:	e00f      	b.n	8007282 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007262:	f7fd fa23 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8007266:	0003      	movs	r3, r0
 8007268:	61bb      	str	r3, [r7, #24]
        break;
 800726a:	e00a      	b.n	8007282 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	61bb      	str	r3, [r7, #24]
        break;
 8007272:	e006      	b.n	8007282 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007278:	231e      	movs	r3, #30
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	2201      	movs	r2, #1
 800727e:	701a      	strb	r2, [r3, #0]
        break;
 8007280:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01e      	beq.n	80072c6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	085a      	lsrs	r2, r3, #1
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	18d2      	adds	r2, r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	0019      	movs	r1, r3
 8007298:	0010      	movs	r0, r2
 800729a:	f7f8 ff35 	bl	8000108 <__udivsi3>
 800729e:	0003      	movs	r3, r0
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d909      	bls.n	80072be <UART_SetConfig+0x242>
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	025b      	lsls	r3, r3, #9
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d204      	bcs.n	80072be <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	60da      	str	r2, [r3, #12]
 80072bc:	e003      	b.n	80072c6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80072be:	231e      	movs	r3, #30
 80072c0:	18fb      	adds	r3, r7, r3
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072d2:	231e      	movs	r3, #30
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	781b      	ldrb	r3, [r3, #0]
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b008      	add	sp, #32
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	ffff69f3 	.word	0xffff69f3
 80072e4:	ffffcfff 	.word	0xffffcfff
 80072e8:	fffff4ff 	.word	0xfffff4ff
 80072ec:	40013800 	.word	0x40013800
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40004400 	.word	0x40004400
 80072f8:	007a1200 	.word	0x007a1200

080072fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2201      	movs	r2, #1
 800730a:	4013      	ands	r3, r2
 800730c:	d00b      	beq.n	8007326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	4a4a      	ldr	r2, [pc, #296]	; (8007440 <UART_AdvFeatureConfig+0x144>)
 8007316:	4013      	ands	r3, r2
 8007318:	0019      	movs	r1, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2202      	movs	r2, #2
 800732c:	4013      	ands	r3, r2
 800732e:	d00b      	beq.n	8007348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	4a43      	ldr	r2, [pc, #268]	; (8007444 <UART_AdvFeatureConfig+0x148>)
 8007338:	4013      	ands	r3, r2
 800733a:	0019      	movs	r1, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2204      	movs	r2, #4
 800734e:	4013      	ands	r3, r2
 8007350:	d00b      	beq.n	800736a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <UART_AdvFeatureConfig+0x14c>)
 800735a:	4013      	ands	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2208      	movs	r2, #8
 8007370:	4013      	ands	r3, r2
 8007372:	d00b      	beq.n	800738c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4a34      	ldr	r2, [pc, #208]	; (800744c <UART_AdvFeatureConfig+0x150>)
 800737c:	4013      	ands	r3, r2
 800737e:	0019      	movs	r1, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2210      	movs	r2, #16
 8007392:	4013      	ands	r3, r2
 8007394:	d00b      	beq.n	80073ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <UART_AdvFeatureConfig+0x154>)
 800739e:	4013      	ands	r3, r2
 80073a0:	0019      	movs	r1, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	2220      	movs	r2, #32
 80073b4:	4013      	ands	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	4a25      	ldr	r2, [pc, #148]	; (8007454 <UART_AdvFeatureConfig+0x158>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	0019      	movs	r1, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2240      	movs	r2, #64	; 0x40
 80073d6:	4013      	ands	r3, r2
 80073d8:	d01d      	beq.n	8007416 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <UART_AdvFeatureConfig+0x15c>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	0019      	movs	r1, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	035b      	lsls	r3, r3, #13
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d10b      	bne.n	8007416 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <UART_AdvFeatureConfig+0x160>)
 8007406:	4013      	ands	r3, r2
 8007408:	0019      	movs	r1, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2280      	movs	r2, #128	; 0x80
 800741c:	4013      	ands	r3, r2
 800741e:	d00b      	beq.n	8007438 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	4a0e      	ldr	r2, [pc, #56]	; (8007460 <UART_AdvFeatureConfig+0x164>)
 8007428:	4013      	ands	r3, r2
 800742a:	0019      	movs	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}
 8007440:	fffdffff 	.word	0xfffdffff
 8007444:	fffeffff 	.word	0xfffeffff
 8007448:	fffbffff 	.word	0xfffbffff
 800744c:	ffff7fff 	.word	0xffff7fff
 8007450:	ffffefff 	.word	0xffffefff
 8007454:	ffffdfff 	.word	0xffffdfff
 8007458:	ffefffff 	.word	0xffefffff
 800745c:	ff9fffff 	.word	0xff9fffff
 8007460:	fff7ffff 	.word	0xfff7ffff

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	2100      	movs	r1, #0
 8007472:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7fa fe88 	bl	8002188 <HAL_GetTick>
 8007478:	0003      	movs	r3, r0
 800747a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2208      	movs	r2, #8
 8007484:	4013      	ands	r3, r2
 8007486:	2b08      	cmp	r3, #8
 8007488:	d10c      	bne.n	80074a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2280      	movs	r2, #128	; 0x80
 800748e:	0391      	lsls	r1, r2, #14
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <UART_CheckIdleState+0x8c>)
 8007494:	9200      	str	r2, [sp, #0]
 8007496:	2200      	movs	r2, #0
 8007498:	f000 f82c 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 800749c:	1e03      	subs	r3, r0, #0
 800749e:	d001      	beq.n	80074a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e021      	b.n	80074e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2204      	movs	r2, #4
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d10c      	bne.n	80074cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2280      	movs	r2, #128	; 0x80
 80074b6:	03d1      	lsls	r1, r2, #15
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <UART_CheckIdleState+0x8c>)
 80074bc:	9200      	str	r2, [sp, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	f000 f818 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80074c4:	1e03      	subs	r3, r0, #0
 80074c6:	d001      	beq.n	80074cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e00d      	b.n	80074e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2274      	movs	r2, #116	; 0x74
 80074e2:	2100      	movs	r1, #0
 80074e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b004      	add	sp, #16
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	01ffffff 	.word	0x01ffffff

080074f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b094      	sub	sp, #80	; 0x50
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	1dfb      	adds	r3, r7, #7
 8007502:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007504:	e0a3      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007508:	3301      	adds	r3, #1
 800750a:	d100      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x1a>
 800750c:	e09f      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7fa fe3b 	bl	8002188 <HAL_GetTick>
 8007512:	0002      	movs	r2, r0
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <UART_WaitOnFlagUntilTimeout+0x30>
 800751e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007520:	2b00      	cmp	r3, #0
 8007522:	d13d      	bne.n	80075a0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007524:	f3ef 8310 	mrs	r3, PRIMASK
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800752c:	647b      	str	r3, [r7, #68]	; 0x44
 800752e:	2301      	movs	r3, #1
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	f383 8810 	msr	PRIMASK, r3
}
 8007538:	46c0      	nop			; (mov r8, r8)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	494c      	ldr	r1, [pc, #304]	; (8007678 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007546:	400a      	ands	r2, r1
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	f383 8810 	msr	PRIMASK, r3
}
 8007554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	643b      	str	r3, [r7, #64]	; 0x40
 8007560:	2301      	movs	r3, #1
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f383 8810 	msr	PRIMASK, r3
}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2101      	movs	r1, #1
 8007578:	438a      	bics	r2, r1
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2220      	movs	r2, #32
 8007592:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2274      	movs	r2, #116	; 0x74
 8007598:	2100      	movs	r1, #0
 800759a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e067      	b.n	8007670 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	4013      	ands	r3, r2
 80075aa:	d050      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	2380      	movs	r3, #128	; 0x80
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	401a      	ands	r2, r3
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	429a      	cmp	r2, r3
 80075be:	d146      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2280      	movs	r2, #128	; 0x80
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	613b      	str	r3, [r7, #16]
  return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f383 8810 	msr	PRIMASK, r3
}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4923      	ldr	r1, [pc, #140]	; (8007678 <UART_WaitOnFlagUntilTimeout+0x184>)
 80075ec:	400a      	ands	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007600:	61fb      	str	r3, [r7, #28]
  return(result);
 8007602:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007604:	64bb      	str	r3, [r7, #72]	; 0x48
 8007606:	2301      	movs	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f383 8810 	msr	PRIMASK, r3
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2101      	movs	r1, #1
 800761e:	438a      	bics	r2, r1
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	f383 8810 	msr	PRIMASK, r3
}
 800762c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	2120      	movs	r1, #32
 8007640:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2274      	movs	r2, #116	; 0x74
 8007646:	2100      	movs	r1, #0
 8007648:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e010      	b.n	8007670 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	4013      	ands	r3, r2
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	425a      	negs	r2, r3
 800765e:	4153      	adcs	r3, r2
 8007660:	b2db      	uxtb	r3, r3
 8007662:	001a      	movs	r2, r3
 8007664:	1dfb      	adds	r3, r7, #7
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d100      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0x17a>
 800766c:	e74b      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b014      	add	sp, #80	; 0x50
 8007676:	bd80      	pop	{r7, pc}
 8007678:	fffffe5f 	.word	0xfffffe5f

0800767c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	1dbb      	adds	r3, r7, #6
 8007688:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	1dba      	adds	r2, r7, #6
 8007694:	2158      	movs	r1, #88	; 0x58
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1dba      	adds	r2, r7, #6
 800769e:	215a      	movs	r1, #90	; 0x5a
 80076a0:	8812      	ldrh	r2, [r2, #0]
 80076a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	2380      	movs	r3, #128	; 0x80
 80076b0:	015b      	lsls	r3, r3, #5
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d10d      	bne.n	80076d2 <UART_Start_Receive_IT+0x56>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <UART_Start_Receive_IT+0x4c>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	225c      	movs	r2, #92	; 0x5c
 80076c2:	4939      	ldr	r1, [pc, #228]	; (80077a8 <UART_Start_Receive_IT+0x12c>)
 80076c4:	5299      	strh	r1, [r3, r2]
 80076c6:	e01a      	b.n	80076fe <UART_Start_Receive_IT+0x82>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	225c      	movs	r2, #92	; 0x5c
 80076cc:	21ff      	movs	r1, #255	; 0xff
 80076ce:	5299      	strh	r1, [r3, r2]
 80076d0:	e015      	b.n	80076fe <UART_Start_Receive_IT+0x82>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <UART_Start_Receive_IT+0x7a>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <UART_Start_Receive_IT+0x70>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	225c      	movs	r2, #92	; 0x5c
 80076e6:	21ff      	movs	r1, #255	; 0xff
 80076e8:	5299      	strh	r1, [r3, r2]
 80076ea:	e008      	b.n	80076fe <UART_Start_Receive_IT+0x82>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	225c      	movs	r2, #92	; 0x5c
 80076f0:	217f      	movs	r1, #127	; 0x7f
 80076f2:	5299      	strh	r1, [r3, r2]
 80076f4:	e003      	b.n	80076fe <UART_Start_Receive_IT+0x82>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	225c      	movs	r2, #92	; 0x5c
 80076fa:	2100      	movs	r1, #0
 80076fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	2100      	movs	r1, #0
 8007704:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2222      	movs	r2, #34	; 0x22
 800770a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770c:	f3ef 8310 	mrs	r3, PRIMASK
 8007710:	61fb      	str	r3, [r7, #28]
  return(result);
 8007712:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007716:	2301      	movs	r3, #1
 8007718:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f383 8810 	msr	PRIMASK, r3
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2101      	movs	r1, #1
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	2380      	movs	r3, #128	; 0x80
 8007744:	015b      	lsls	r3, r3, #5
 8007746:	429a      	cmp	r2, r3
 8007748:	d107      	bne.n	800775a <UART_Start_Receive_IT+0xde>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <UART_Start_Receive_IT+0x130>)
 8007756:	665a      	str	r2, [r3, #100]	; 0x64
 8007758:	e002      	b.n	8007760 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <UART_Start_Receive_IT+0x134>)
 800775e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2274      	movs	r2, #116	; 0x74
 8007764:	2100      	movs	r1, #0
 8007766:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8310 	mrs	r3, PRIMASK
 800776c:	613b      	str	r3, [r7, #16]
  return(result);
 800776e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
 8007772:	2301      	movs	r3, #1
 8007774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f383 8810 	msr	PRIMASK, r3
}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2190      	movs	r1, #144	; 0x90
 800778a:	0049      	lsls	r1, r1, #1
 800778c:	430a      	orrs	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b00c      	add	sp, #48	; 0x30
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	000001ff 	.word	0x000001ff
 80077ac:	08007a65 	.word	0x08007a65
 80077b0:	080078fd 	.word	0x080078fd

080077b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077bc:	f3ef 8310 	mrs	r3, PRIMASK
 80077c0:	617b      	str	r3, [r7, #20]
  return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
 80077c6:	2301      	movs	r3, #1
 80077c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	46c0      	nop			; (mov r8, r8)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4925      	ldr	r1, [pc, #148]	; (8007874 <UART_EndRxTransfer+0xc0>)
 80077de:	400a      	ands	r2, r1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f383 8810 	msr	PRIMASK, r3
}
 80077ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ee:	f3ef 8310 	mrs	r3, PRIMASK
 80077f2:	623b      	str	r3, [r7, #32]
  return(result);
 80077f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
 80077f8:	2301      	movs	r3, #1
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	f383 8810 	msr	PRIMASK, r3
}
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2101      	movs	r1, #1
 8007810:	438a      	bics	r2, r1
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	f383 8810 	msr	PRIMASK, r3
}
 800781e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	2b01      	cmp	r3, #1
 8007826:	d118      	bne.n	800785a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007828:	f3ef 8310 	mrs	r3, PRIMASK
 800782c:	60bb      	str	r3, [r7, #8]
  return(result);
 800782e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007832:	2301      	movs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f383 8810 	msr	PRIMASK, r3
}
 800783c:	46c0      	nop			; (mov r8, r8)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2110      	movs	r1, #16
 800784a:	438a      	bics	r2, r1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f383 8810 	msr	PRIMASK, r3
}
 8007858:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b00e      	add	sp, #56	; 0x38
 8007872:	bd80      	pop	{r7, pc}
 8007874:	fffffedf 	.word	0xfffffedf

08007878 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	225a      	movs	r2, #90	; 0x5a
 800788a:	2100      	movs	r1, #0
 800788c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2252      	movs	r2, #82	; 0x52
 8007892:	2100      	movs	r1, #0
 8007894:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	0018      	movs	r0, r3
 800789a:	f7ff fbdb 	bl	8007054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b004      	add	sp, #16
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ae:	f3ef 8310 	mrs	r3, PRIMASK
 80078b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80078b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	2301      	movs	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f383 8810 	msr	PRIMASK, r3
}
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2140      	movs	r1, #64	; 0x40
 80078d0:	438a      	bics	r2, r1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f383 8810 	msr	PRIMASK, r3
}
 80078de:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f7ff fba8 	bl	8007044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b006      	add	sp, #24
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b090      	sub	sp, #64	; 0x40
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007904:	203e      	movs	r0, #62	; 0x3e
 8007906:	183b      	adds	r3, r7, r0
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	215c      	movs	r1, #92	; 0x5c
 800790c:	5a52      	ldrh	r2, [r2, r1]
 800790e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007914:	2b22      	cmp	r3, #34	; 0x22
 8007916:	d000      	beq.n	800791a <UART_RxISR_8BIT+0x1e>
 8007918:	e095      	b.n	8007a46 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	213c      	movs	r1, #60	; 0x3c
 8007920:	187b      	adds	r3, r7, r1
 8007922:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007924:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007926:	187b      	adds	r3, r7, r1
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	183b      	adds	r3, r7, r0
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b2d9      	uxtb	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	400a      	ands	r2, r1
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	225a      	movs	r2, #90	; 0x5a
 800794a:	5a9b      	ldrh	r3, [r3, r2]
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b299      	uxth	r1, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	225a      	movs	r2, #90	; 0x5a
 8007956:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	225a      	movs	r2, #90	; 0x5a
 800795c:	5a9b      	ldrh	r3, [r3, r2]
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d178      	bne.n	8007a56 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	61bb      	str	r3, [r7, #24]
  return(result);
 800796a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
 800796e:	2301      	movs	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4936      	ldr	r1, [pc, #216]	; (8007a60 <UART_RxISR_8BIT+0x164>)
 8007986:	400a      	ands	r2, r1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f383 8810 	msr	PRIMASK, r3
}
 8007994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
 80079a0:	2301      	movs	r3, #1
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2101      	movs	r1, #1
 80079b8:	438a      	bics	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d12f      	bne.n	8007a3c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e2:	f3ef 8310 	mrs	r3, PRIMASK
 80079e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80079e8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
 80079ec:	2301      	movs	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2110      	movs	r1, #16
 8007a04:	438a      	bics	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d103      	bne.n	8007a2a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2210      	movs	r2, #16
 8007a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2258      	movs	r2, #88	; 0x58
 8007a2e:	5a9a      	ldrh	r2, [r3, r2]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	0011      	movs	r1, r2
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7ff fb15 	bl	8007064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a3a:	e00c      	b.n	8007a56 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7f9 f880 	bl	8000b44 <HAL_UART_RxCpltCallback>
}
 8007a44:	e007      	b.n	8007a56 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2108      	movs	r1, #8
 8007a52:	430a      	orrs	r2, r1
 8007a54:	619a      	str	r2, [r3, #24]
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b010      	add	sp, #64	; 0x40
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	fffffedf 	.word	0xfffffedf

08007a64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b090      	sub	sp, #64	; 0x40
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a6c:	203e      	movs	r0, #62	; 0x3e
 8007a6e:	183b      	adds	r3, r7, r0
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	215c      	movs	r1, #92	; 0x5c
 8007a74:	5a52      	ldrh	r2, [r2, r1]
 8007a76:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a7c:	2b22      	cmp	r3, #34	; 0x22
 8007a7e:	d000      	beq.n	8007a82 <UART_RxISR_16BIT+0x1e>
 8007a80:	e095      	b.n	8007bae <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	213c      	movs	r1, #60	; 0x3c
 8007a88:	187b      	adds	r3, r7, r1
 8007a8a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007a8c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	183a      	adds	r2, r7, r0
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	8812      	ldrh	r2, [r2, #0]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	225a      	movs	r2, #90	; 0x5a
 8007ab2:	5a9b      	ldrh	r3, [r3, r2]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b299      	uxth	r1, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	225a      	movs	r2, #90	; 0x5a
 8007abe:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	225a      	movs	r2, #90	; 0x5a
 8007ac4:	5a9b      	ldrh	r3, [r3, r2]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d178      	bne.n	8007bbe <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007acc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ad2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f383 8810 	msr	PRIMASK, r3
}
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4936      	ldr	r1, [pc, #216]	; (8007bc8 <UART_RxISR_16BIT+0x164>)
 8007aee:	400a      	ands	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	f383 8810 	msr	PRIMASK, r3
}
 8007afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afe:	f3ef 8310 	mrs	r3, PRIMASK
 8007b02:	623b      	str	r3, [r7, #32]
  return(result);
 8007b04:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	633b      	str	r3, [r7, #48]	; 0x30
 8007b08:	2301      	movs	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	f383 8810 	msr	PRIMASK, r3
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2101      	movs	r1, #1
 8007b20:	438a      	bics	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d12f      	bne.n	8007ba4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b50:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b54:	2301      	movs	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f383 8810 	msr	PRIMASK, r3
}
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2110      	movs	r1, #16
 8007b6c:	438a      	bics	r2, r1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f383 8810 	msr	PRIMASK, r3
}
 8007b7a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2210      	movs	r2, #16
 8007b84:	4013      	ands	r3, r2
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d103      	bne.n	8007b92 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2210      	movs	r2, #16
 8007b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2258      	movs	r2, #88	; 0x58
 8007b96:	5a9a      	ldrh	r2, [r3, r2]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	0011      	movs	r1, r2
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7ff fa61 	bl	8007064 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba2:	e00c      	b.n	8007bbe <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7f8 ffcc 	bl	8000b44 <HAL_UART_RxCpltCallback>
}
 8007bac:	e007      	b.n	8007bbe <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	619a      	str	r2, [r3, #24]
}
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b010      	add	sp, #64	; 0x40
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	fffffedf 	.word	0xfffffedf

08007bcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	6019      	str	r1, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2317      	movs	r3, #23
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2274      	movs	r2, #116	; 0x74
 8007bf6:	5c9b      	ldrb	r3, [r3, r2]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e04a      	b.n	8007c96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2274      	movs	r2, #116	; 0x74
 8007c04:	2101      	movs	r1, #1
 8007c06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2101      	movs	r1, #1
 8007c1a:	438a      	bics	r2, r1
 8007c1c:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a1e      	ldr	r2, [pc, #120]	; (8007ca0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007c26:	4013      	ands	r3, r2
 8007c28:	0019      	movs	r1, r3
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007c36:	1d3b      	adds	r3, r7, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	f000 f860 	bl	8007d0a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2101      	movs	r1, #1
 8007c56:	430a      	orrs	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c5a:	f7fa fa95 	bl	8002188 <HAL_GetTick>
 8007c5e:	0003      	movs	r3, r0
 8007c60:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	03d1      	lsls	r1, r2, #15
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ca4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007c6c:	9200      	str	r2, [sp, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f7ff fc40 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 8007c74:	1e03      	subs	r3, r0, #0
 8007c76:	d004      	beq.n	8007c82 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007c78:	2317      	movs	r3, #23
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	e002      	b.n	8007c88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2220      	movs	r2, #32
 8007c86:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2274      	movs	r2, #116	; 0x74
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	5499      	strb	r1, [r3, r2]

  return status;
 8007c90:	2317      	movs	r3, #23
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	781b      	ldrb	r3, [r3, #0]
}
 8007c96:	0018      	movs	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b006      	add	sp, #24
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	ffcfffff 	.word	0xffcfffff
 8007ca4:	01ffffff 	.word	0x01ffffff

08007ca8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2274      	movs	r2, #116	; 0x74
 8007cb4:	5c9b      	ldrb	r3, [r3, r2]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_UARTEx_EnableStopMode+0x16>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e021      	b.n	8007d02 <HAL_UARTEx_EnableStopMode+0x5a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2274      	movs	r2, #116	; 0x74
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f383 8810 	msr	PRIMASK, r3
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f383 8810 	msr	PRIMASK, r3
}
 8007cf6:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2274      	movs	r2, #116	; 0x74
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b006      	add	sp, #24
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	1d3b      	adds	r3, r7, #4
 8007d14:	6019      	str	r1, [r3, #0]
 8007d16:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2210      	movs	r2, #16
 8007d20:	4393      	bics	r3, r2
 8007d22:	001a      	movs	r2, r3
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	889b      	ldrh	r3, [r3, #4]
 8007d28:	0019      	movs	r1, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	0a19      	lsrs	r1, r3, #8
 8007d3c:	1d3b      	adds	r3, r7, #4
 8007d3e:	799b      	ldrb	r3, [r3, #6]
 8007d40:	061a      	lsls	r2, r3, #24
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b004      	add	sp, #16
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <__errno>:
 8007d54:	4b01      	ldr	r3, [pc, #4]	; (8007d5c <__errno+0x8>)
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	4770      	bx	lr
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	20000034 	.word	0x20000034

08007d60 <__libc_init_array>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	2600      	movs	r6, #0
 8007d64:	4d0c      	ldr	r5, [pc, #48]	; (8007d98 <__libc_init_array+0x38>)
 8007d66:	4c0d      	ldr	r4, [pc, #52]	; (8007d9c <__libc_init_array+0x3c>)
 8007d68:	1b64      	subs	r4, r4, r5
 8007d6a:	10a4      	asrs	r4, r4, #2
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	d109      	bne.n	8007d84 <__libc_init_array+0x24>
 8007d70:	2600      	movs	r6, #0
 8007d72:	f000 f945 	bl	8008000 <_init>
 8007d76:	4d0a      	ldr	r5, [pc, #40]	; (8007da0 <__libc_init_array+0x40>)
 8007d78:	4c0a      	ldr	r4, [pc, #40]	; (8007da4 <__libc_init_array+0x44>)
 8007d7a:	1b64      	subs	r4, r4, r5
 8007d7c:	10a4      	asrs	r4, r4, #2
 8007d7e:	42a6      	cmp	r6, r4
 8007d80:	d105      	bne.n	8007d8e <__libc_init_array+0x2e>
 8007d82:	bd70      	pop	{r4, r5, r6, pc}
 8007d84:	00b3      	lsls	r3, r6, #2
 8007d86:	58eb      	ldr	r3, [r5, r3]
 8007d88:	4798      	blx	r3
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	e7ee      	b.n	8007d6c <__libc_init_array+0xc>
 8007d8e:	00b3      	lsls	r3, r6, #2
 8007d90:	58eb      	ldr	r3, [r5, r3]
 8007d92:	4798      	blx	r3
 8007d94:	3601      	adds	r6, #1
 8007d96:	e7f2      	b.n	8007d7e <__libc_init_array+0x1e>
 8007d98:	08008104 	.word	0x08008104
 8007d9c:	08008104 	.word	0x08008104
 8007da0:	08008104 	.word	0x08008104
 8007da4:	08008108 	.word	0x08008108

08007da8 <malloc>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <malloc+0x10>)
 8007dac:	0001      	movs	r1, r0
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	f000 f88c 	bl	8007ecc <_malloc_r>
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	20000034 	.word	0x20000034

08007dbc <free>:
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <free+0x10>)
 8007dc0:	0001      	movs	r1, r0
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	f000 f816 	bl	8007df4 <_free_r>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	20000034 	.word	0x20000034

08007dd0 <memcpy>:
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d100      	bne.n	8007dda <memcpy+0xa>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	5ccc      	ldrb	r4, [r1, r3]
 8007ddc:	54c4      	strb	r4, [r0, r3]
 8007dde:	3301      	adds	r3, #1
 8007de0:	e7f8      	b.n	8007dd4 <memcpy+0x4>

08007de2 <memset>:
 8007de2:	0003      	movs	r3, r0
 8007de4:	1882      	adds	r2, r0, r2
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d100      	bne.n	8007dec <memset+0xa>
 8007dea:	4770      	bx	lr
 8007dec:	7019      	strb	r1, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	e7f9      	b.n	8007de6 <memset+0x4>
	...

08007df4 <_free_r>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	0005      	movs	r5, r0
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	d010      	beq.n	8007e1e <_free_r+0x2a>
 8007dfc:	1f0c      	subs	r4, r1, #4
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	da00      	bge.n	8007e06 <_free_r+0x12>
 8007e04:	18e4      	adds	r4, r4, r3
 8007e06:	0028      	movs	r0, r5
 8007e08:	f000 f8e8 	bl	8007fdc <__malloc_lock>
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <_free_r+0x90>)
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <_free_r+0x2c>
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	6014      	str	r4, [r2, #0]
 8007e18:	0028      	movs	r0, r5
 8007e1a:	f000 f8e7 	bl	8007fec <__malloc_unlock>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d908      	bls.n	8007e36 <_free_r+0x42>
 8007e24:	6821      	ldr	r1, [r4, #0]
 8007e26:	1860      	adds	r0, r4, r1
 8007e28:	4283      	cmp	r3, r0
 8007e2a:	d1f3      	bne.n	8007e14 <_free_r+0x20>
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	1841      	adds	r1, r0, r1
 8007e32:	6021      	str	r1, [r4, #0]
 8007e34:	e7ee      	b.n	8007e14 <_free_r+0x20>
 8007e36:	001a      	movs	r2, r3
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <_free_r+0x4e>
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	d9f9      	bls.n	8007e36 <_free_r+0x42>
 8007e42:	6811      	ldr	r1, [r2, #0]
 8007e44:	1850      	adds	r0, r2, r1
 8007e46:	42a0      	cmp	r0, r4
 8007e48:	d10b      	bne.n	8007e62 <_free_r+0x6e>
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	1809      	adds	r1, r1, r0
 8007e4e:	1850      	adds	r0, r2, r1
 8007e50:	6011      	str	r1, [r2, #0]
 8007e52:	4283      	cmp	r3, r0
 8007e54:	d1e0      	bne.n	8007e18 <_free_r+0x24>
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	1841      	adds	r1, r0, r1
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	6053      	str	r3, [r2, #4]
 8007e60:	e7da      	b.n	8007e18 <_free_r+0x24>
 8007e62:	42a0      	cmp	r0, r4
 8007e64:	d902      	bls.n	8007e6c <_free_r+0x78>
 8007e66:	230c      	movs	r3, #12
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	e7d5      	b.n	8007e18 <_free_r+0x24>
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	1860      	adds	r0, r4, r1
 8007e70:	4283      	cmp	r3, r0
 8007e72:	d103      	bne.n	8007e7c <_free_r+0x88>
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	1841      	adds	r1, r0, r1
 8007e7a:	6021      	str	r1, [r4, #0]
 8007e7c:	6063      	str	r3, [r4, #4]
 8007e7e:	6054      	str	r4, [r2, #4]
 8007e80:	e7ca      	b.n	8007e18 <_free_r+0x24>
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	20000470 	.word	0x20000470

08007e88 <sbrk_aligned>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	4e0f      	ldr	r6, [pc, #60]	; (8007ec8 <sbrk_aligned+0x40>)
 8007e8c:	000d      	movs	r5, r1
 8007e8e:	6831      	ldr	r1, [r6, #0]
 8007e90:	0004      	movs	r4, r0
 8007e92:	2900      	cmp	r1, #0
 8007e94:	d102      	bne.n	8007e9c <sbrk_aligned+0x14>
 8007e96:	f000 f88f 	bl	8007fb8 <_sbrk_r>
 8007e9a:	6030      	str	r0, [r6, #0]
 8007e9c:	0029      	movs	r1, r5
 8007e9e:	0020      	movs	r0, r4
 8007ea0:	f000 f88a 	bl	8007fb8 <_sbrk_r>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d00a      	beq.n	8007ebe <sbrk_aligned+0x36>
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	1cc5      	adds	r5, r0, #3
 8007eac:	439d      	bics	r5, r3
 8007eae:	42a8      	cmp	r0, r5
 8007eb0:	d007      	beq.n	8007ec2 <sbrk_aligned+0x3a>
 8007eb2:	1a29      	subs	r1, r5, r0
 8007eb4:	0020      	movs	r0, r4
 8007eb6:	f000 f87f 	bl	8007fb8 <_sbrk_r>
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	d101      	bne.n	8007ec2 <sbrk_aligned+0x3a>
 8007ebe:	2501      	movs	r5, #1
 8007ec0:	426d      	negs	r5, r5
 8007ec2:	0028      	movs	r0, r5
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	20000474 	.word	0x20000474

08007ecc <_malloc_r>:
 8007ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ece:	2203      	movs	r2, #3
 8007ed0:	1ccb      	adds	r3, r1, #3
 8007ed2:	4393      	bics	r3, r2
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	0006      	movs	r6, r0
 8007ed8:	001f      	movs	r7, r3
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d232      	bcs.n	8007f44 <_malloc_r+0x78>
 8007ede:	270c      	movs	r7, #12
 8007ee0:	42b9      	cmp	r1, r7
 8007ee2:	d831      	bhi.n	8007f48 <_malloc_r+0x7c>
 8007ee4:	0030      	movs	r0, r6
 8007ee6:	f000 f879 	bl	8007fdc <__malloc_lock>
 8007eea:	4d32      	ldr	r5, [pc, #200]	; (8007fb4 <_malloc_r+0xe8>)
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	001c      	movs	r4, r3
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	d12e      	bne.n	8007f52 <_malloc_r+0x86>
 8007ef4:	0039      	movs	r1, r7
 8007ef6:	0030      	movs	r0, r6
 8007ef8:	f7ff ffc6 	bl	8007e88 <sbrk_aligned>
 8007efc:	0004      	movs	r4, r0
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	d11e      	bne.n	8007f40 <_malloc_r+0x74>
 8007f02:	682c      	ldr	r4, [r5, #0]
 8007f04:	0025      	movs	r5, r4
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	d14a      	bne.n	8007fa0 <_malloc_r+0xd4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0029      	movs	r1, r5
 8007f0e:	18e3      	adds	r3, r4, r3
 8007f10:	0030      	movs	r0, r6
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	f000 f850 	bl	8007fb8 <_sbrk_r>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	d143      	bne.n	8007fa6 <_malloc_r+0xda>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	3703      	adds	r7, #3
 8007f22:	1aff      	subs	r7, r7, r3
 8007f24:	2303      	movs	r3, #3
 8007f26:	439f      	bics	r7, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	2f0c      	cmp	r7, #12
 8007f2c:	d200      	bcs.n	8007f30 <_malloc_r+0x64>
 8007f2e:	270c      	movs	r7, #12
 8007f30:	0039      	movs	r1, r7
 8007f32:	0030      	movs	r0, r6
 8007f34:	f7ff ffa8 	bl	8007e88 <sbrk_aligned>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d034      	beq.n	8007fa6 <_malloc_r+0xda>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	19df      	adds	r7, r3, r7
 8007f40:	6027      	str	r7, [r4, #0]
 8007f42:	e013      	b.n	8007f6c <_malloc_r+0xa0>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dacb      	bge.n	8007ee0 <_malloc_r+0x14>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	6033      	str	r3, [r6, #0]
 8007f4e:	0028      	movs	r0, r5
 8007f50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	1bd1      	subs	r1, r2, r7
 8007f56:	d420      	bmi.n	8007f9a <_malloc_r+0xce>
 8007f58:	290b      	cmp	r1, #11
 8007f5a:	d917      	bls.n	8007f8c <_malloc_r+0xc0>
 8007f5c:	19e2      	adds	r2, r4, r7
 8007f5e:	6027      	str	r7, [r4, #0]
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d111      	bne.n	8007f88 <_malloc_r+0xbc>
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	6053      	str	r3, [r2, #4]
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	0025      	movs	r5, r4
 8007f70:	f000 f83c 	bl	8007fec <__malloc_unlock>
 8007f74:	2207      	movs	r2, #7
 8007f76:	350b      	adds	r5, #11
 8007f78:	1d23      	adds	r3, r4, #4
 8007f7a:	4395      	bics	r5, r2
 8007f7c:	1aea      	subs	r2, r5, r3
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	d0e5      	beq.n	8007f4e <_malloc_r+0x82>
 8007f82:	1b5b      	subs	r3, r3, r5
 8007f84:	50a3      	str	r3, [r4, r2]
 8007f86:	e7e2      	b.n	8007f4e <_malloc_r+0x82>
 8007f88:	605a      	str	r2, [r3, #4]
 8007f8a:	e7ec      	b.n	8007f66 <_malloc_r+0x9a>
 8007f8c:	6862      	ldr	r2, [r4, #4]
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	d101      	bne.n	8007f96 <_malloc_r+0xca>
 8007f92:	602a      	str	r2, [r5, #0]
 8007f94:	e7ea      	b.n	8007f6c <_malloc_r+0xa0>
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	e7e8      	b.n	8007f6c <_malloc_r+0xa0>
 8007f9a:	0023      	movs	r3, r4
 8007f9c:	6864      	ldr	r4, [r4, #4]
 8007f9e:	e7a7      	b.n	8007ef0 <_malloc_r+0x24>
 8007fa0:	002c      	movs	r4, r5
 8007fa2:	686d      	ldr	r5, [r5, #4]
 8007fa4:	e7af      	b.n	8007f06 <_malloc_r+0x3a>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	0030      	movs	r0, r6
 8007faa:	6033      	str	r3, [r6, #0]
 8007fac:	f000 f81e 	bl	8007fec <__malloc_unlock>
 8007fb0:	e7cd      	b.n	8007f4e <_malloc_r+0x82>
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	20000470 	.word	0x20000470

08007fb8 <_sbrk_r>:
 8007fb8:	2300      	movs	r3, #0
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_sbrk_r+0x20>)
 8007fbe:	0004      	movs	r4, r0
 8007fc0:	0008      	movs	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7fa f820 	bl	8002008 <_sbrk>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d103      	bne.n	8007fd4 <_sbrk_r+0x1c>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d000      	beq.n	8007fd4 <_sbrk_r+0x1c>
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	20000478 	.word	0x20000478

08007fdc <__malloc_lock>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4802      	ldr	r0, [pc, #8]	; (8007fe8 <__malloc_lock+0xc>)
 8007fe0:	f000 f80c 	bl	8007ffc <__retarget_lock_acquire_recursive>
 8007fe4:	bd10      	pop	{r4, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	2000047c 	.word	0x2000047c

08007fec <__malloc_unlock>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4802      	ldr	r0, [pc, #8]	; (8007ff8 <__malloc_unlock+0xc>)
 8007ff0:	f000 f805 	bl	8007ffe <__retarget_lock_release_recursive>
 8007ff4:	bd10      	pop	{r4, pc}
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	2000047c 	.word	0x2000047c

08007ffc <__retarget_lock_acquire_recursive>:
 8007ffc:	4770      	bx	lr

08007ffe <__retarget_lock_release_recursive>:
 8007ffe:	4770      	bx	lr

08008000 <_init>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr

0800800c <_fini>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr
