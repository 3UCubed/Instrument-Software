
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800607c  0800607c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800607c  0800607c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000030  080060b4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080060b4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e7b  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b40  00000000  00000000  00035ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00039d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133c5  00000000  00000000  0003b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c21  00000000  00000000  0004e3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074cbf  00000000  00000000  00065ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dacbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000dad10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006028 	.word	0x08006028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08006028 	.word	0x08006028

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_OC_DelayElapsedCallback>:
 * Timer interrupt function
 * This is where packets are sent
 * Function should be called every 125ms for PMT and 100ms for ERPA
 * HK will send every 50 ERPA packets or every 5 seconds
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4bce      	ldr	r3, [pc, #824]	; (8000564 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d000      	beq.n	8000232 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000230:	e14b      	b.n	80004ca <HAL_TIM_OC_DelayElapsedCallback+0x2aa>
        while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	4acb      	ldr	r2, [pc, #812]	; (8000568 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800023a:	0019      	movs	r1, r3
 800023c:	0010      	movs	r0, r2
 800023e:	f002 fbb7 	bl	80029b0 <HAL_GPIO_ReadPin>
 8000242:	1e03      	subs	r3, r0, #0
 8000244:	d1f6      	bne.n	8000234 <HAL_TIM_OC_DelayElapsedCallback+0x14>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		 */

		/* Write to SPI (begin transfer?) */
        HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000246:	49c9      	ldr	r1, [pc, #804]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 8000248:	48c9      	ldr	r0, [pc, #804]	; (8000570 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800024a:	2301      	movs	r3, #1
 800024c:	2201      	movs	r2, #1
 800024e:	f003 fb19 	bl	8003884 <HAL_SPI_Transmit>
		while (!(SPI2->SR));
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	4bc7      	ldr	r3, [pc, #796]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0fb      	beq.n	8000254 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		raw = SPI2->DR;
 800025c:	4bc5      	ldr	r3, [pc, #788]	; (8000574 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	001a      	movs	r2, r3
 8000262:	4bc5      	ldr	r3, [pc, #788]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000264:	601a      	str	r2, [r3, #0]

		DAC->DHR12R1 = DAC_OUT[step];
 8000266:	4bc5      	ldr	r3, [pc, #788]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0019      	movs	r1, r3
 800026c:	4bc4      	ldr	r3, [pc, #784]	; (8000580 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 800026e:	4ac5      	ldr	r2, [pc, #788]	; (8000584 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 8000270:	0089      	lsls	r1, r1, #2
 8000272:	588a      	ldr	r2, [r1, r2]
 8000274:	609a      	str	r2, [r3, #8]

		HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8000276:	2311      	movs	r3, #17
 8000278:	001a      	movs	r2, r3
 800027a:	49c3      	ldr	r1, [pc, #780]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800027c:	4bc3      	ldr	r3, [pc, #780]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fbe8 	bl	8001a54 <HAL_ADC_Start_DMA>
		uint16_t PA0 = adcResultsDMA[0]; //ADC_IN0, END_mon: entrance/collimator monitor
 8000284:	2326      	movs	r3, #38	; 0x26
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	4abf      	ldr	r2, [pc, #764]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800028a:	8812      	ldrh	r2, [r2, #0]
 800028c:	801a      	strh	r2, [r3, #0]
		uint16_t PA7 = adcResultsDMA[4]; //ADC_IN7, SWP_mon: Sweep voltage monitor
 800028e:	2324      	movs	r3, #36	; 0x24
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	4abd      	ldr	r2, [pc, #756]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000294:	8912      	ldrh	r2, [r2, #8]
 8000296:	801a      	strh	r2, [r3, #0]
		uint16_t PB0 = adcResultsDMA[5]; //ADC_IN8, TMP 1: Sweep temperature
 8000298:	2322      	movs	r3, #34	; 0x22
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	4aba      	ldr	r2, [pc, #744]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800029e:	8952      	ldrh	r2, [r2, #10]
 80002a0:	801a      	strh	r2, [r3, #0]
		uint16_t PB1 = adcResultsDMA[6]; //ADC_IN9, TMP 2: feedbacks
 80002a2:	2320      	movs	r3, #32
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	4ab8      	ldr	r2, [pc, #736]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 80002a8:	8992      	ldrh	r2, [r2, #12]
 80002aa:	801a      	strh	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);

		if (step == 5) {
 80002ac:	4bb3      	ldr	r3, [pc, #716]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	d103      	bne.n	80002bc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
			up = 0;
 80002b4:	4bb6      	ldr	r3, [pc, #728]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e006      	b.n	80002ca <HAL_TIM_OC_DelayElapsedCallback+0xaa>
		} else if (step == 0) {
 80002bc:	4baf      	ldr	r3, [pc, #700]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <HAL_TIM_OC_DelayElapsedCallback+0xaa>
			up = 1;
 80002c4:	4bb2      	ldr	r3, [pc, #712]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
		}

		up == 1 ? step++ : step--;
 80002ca:	4bb1      	ldr	r3, [pc, #708]	; (8000590 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d106      	bne.n	80002e0 <HAL_TIM_OC_DelayElapsedCallback+0xc0>
 80002d2:	4baa      	ldr	r3, [pc, #680]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4ba8      	ldr	r3, [pc, #672]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	e005      	b.n	80002ec <HAL_TIM_OC_DelayElapsedCallback+0xcc>
 80002e0:	4ba6      	ldr	r3, [pc, #664]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4ba4      	ldr	r3, [pc, #656]	; (800057c <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 80002ea:	701a      	strb	r2, [r3, #0]

		if (hk_counter == 50) {
 80002ec:	4ba9      	ldr	r3, [pc, #676]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b32      	cmp	r3, #50	; 0x32
 80002f2:	d000      	beq.n	80002f6 <HAL_TIM_OC_DelayElapsedCallback+0xd6>
 80002f4:	e0e3      	b.n	80004be <HAL_TIM_OC_DelayElapsedCallback+0x29e>
			HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 80002f6:	2311      	movs	r3, #17
 80002f8:	001a      	movs	r2, r3
 80002fa:	49a3      	ldr	r1, [pc, #652]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 80002fc:	4ba3      	ldr	r3, [pc, #652]	; (800058c <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fba8 	bl	8001a54 <HAL_ADC_Start_DMA>

			uint16_t PA1 = adcResultsDMA[1]; //ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 8000304:	211e      	movs	r1, #30
 8000306:	187b      	adds	r3, r7, r1
 8000308:	4a9f      	ldr	r2, [pc, #636]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800030a:	8852      	ldrh	r2, [r2, #2]
 800030c:	801a      	strh	r2, [r3, #0]
			uint16_t PA2 = adcResultsDMA[2]; //ADC_IN2, BUS_Imon: instrument bus current monitor
 800030e:	201c      	movs	r0, #28
 8000310:	183b      	adds	r3, r7, r0
 8000312:	4a9d      	ldr	r2, [pc, #628]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000314:	8892      	ldrh	r2, [r2, #4]
 8000316:	801a      	strh	r2, [r3, #0]
			uint16_t PA3 = adcResultsDMA[3]; //ADC_IN3, 5vref_mon: Accurate 5V for ADC monitor
 8000318:	241a      	movs	r4, #26
 800031a:	193b      	adds	r3, r7, r4
 800031c:	4a9a      	ldr	r2, [pc, #616]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800031e:	88d2      	ldrh	r2, [r2, #6]
 8000320:	801a      	strh	r2, [r3, #0]
			uint16_t PC0 = adcResultsDMA[7]; //ADC_IN10, 2v5_mon: power monitor
 8000322:	2518      	movs	r5, #24
 8000324:	197b      	adds	r3, r7, r5
 8000326:	4a98      	ldr	r2, [pc, #608]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000328:	89d2      	ldrh	r2, [r2, #14]
 800032a:	801a      	strh	r2, [r3, #0]
			uint16_t PC1 = adcResultsDMA[8]; //ADC_IN11, 3v3_mon: power monitor
 800032c:	2616      	movs	r6, #22
 800032e:	19bb      	adds	r3, r7, r6
 8000330:	4a95      	ldr	r2, [pc, #596]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000332:	8a12      	ldrh	r2, [r2, #16]
 8000334:	801a      	strh	r2, [r3, #0]
			uint16_t PC2 = adcResultsDMA[9]; //ADC_IN12, 5v_mon: power monitor
 8000336:	2314      	movs	r3, #20
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	4a93      	ldr	r2, [pc, #588]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800033c:	8a52      	ldrh	r2, [r2, #18]
 800033e:	801a      	strh	r2, [r3, #0]
			uint16_t PC3 = adcResultsDMA[10]; //ADC_IN13, n3v3_mon: power monitor
 8000340:	2212      	movs	r2, #18
 8000342:	18bb      	adds	r3, r7, r2
 8000344:	4a90      	ldr	r2, [pc, #576]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000346:	8a92      	ldrh	r2, [r2, #20]
 8000348:	801a      	strh	r2, [r3, #0]
			uint16_t PC4 = adcResultsDMA[11]; //ADC_IN14, n5v_mon: power monitor
 800034a:	2310      	movs	r3, #16
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	4a8e      	ldr	r2, [pc, #568]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000350:	8ad2      	ldrh	r2, [r2, #22]
 8000352:	801a      	strh	r2, [r3, #0]
			uint16_t PC5 = adcResultsDMA[12]; //ADC_IN15, 15v_mon: power monitor
 8000354:	220e      	movs	r2, #14
 8000356:	18bb      	adds	r3, r7, r2
 8000358:	4a8b      	ldr	r2, [pc, #556]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800035a:	8b12      	ldrh	r2, [r2, #24]
 800035c:	801a      	strh	r2, [r3, #0]
			uint16_t MCU_TEMP = adcResultsDMA[13]; //(internally connected) ADC_IN16, VSENSE
 800035e:	230c      	movs	r3, #12
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	4a89      	ldr	r2, [pc, #548]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000364:	8b52      	ldrh	r2, [r2, #26]
 8000366:	801a      	strh	r2, [r3, #0]
			uint16_t MCU_VREF = adcResultsDMA[14]; //(internally connected) ADC_IN17, VREFINT
 8000368:	220a      	movs	r2, #10
 800036a:	18bb      	adds	r3, r7, r2
 800036c:	4a86      	ldr	r2, [pc, #536]	; (8000588 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800036e:	8b92      	ldrh	r2, [r2, #28]
 8000370:	801a      	strh	r2, [r3, #0]

			hk_buf[0] = hk_sync; // HK SYNC 0xCC MSB
 8000372:	22cc      	movs	r2, #204	; 0xcc
 8000374:	4b88      	ldr	r3, [pc, #544]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000376:	701a      	strb	r2, [r3, #0]
			hk_buf[1] = hk_sync; // HK SYNC 0xCC LSB
 8000378:	22cc      	movs	r2, #204	; 0xcc
 800037a:	4b87      	ldr	r3, [pc, #540]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800037c:	705a      	strb	r2, [r3, #1]
			hk_buf[2] = ((hk_seq & 0xFF00) >> 8); // HK SEQ # MSB
 800037e:	4b87      	ldr	r3, [pc, #540]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	b29b      	uxth	r3, r3
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b83      	ldr	r3, [pc, #524]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800038a:	709a      	strb	r2, [r3, #2]
			hk_buf[3] = (hk_seq & 0xFF); // HK SEQ # LSB
 800038c:	4b83      	ldr	r3, [pc, #524]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b81      	ldr	r3, [pc, #516]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000394:	70da      	strb	r2, [r3, #3]
			hk_buf[4] = ((PA1 & 0xFF00) >> 8); // BUS_Vmon MSB
 8000396:	187b      	adds	r3, r7, r1
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b29b      	uxth	r3, r3
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4b7d      	ldr	r3, [pc, #500]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003a2:	711a      	strb	r2, [r3, #4]
			hk_buf[5] = (PA1 & 0xFF); // BUS_Vmon LSB
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b7b      	ldr	r3, [pc, #492]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003ac:	715a      	strb	r2, [r3, #5]
			hk_buf[6] = ((PA2 & 0xFF00) >> 8); // BUS_Imon MSB
 80003ae:	183b      	adds	r3, r7, r0
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b77      	ldr	r3, [pc, #476]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003ba:	719a      	strb	r2, [r3, #6]
			hk_buf[7] = (PA2 & 0xFF); // BUS_Imon LSB
 80003bc:	183b      	adds	r3, r7, r0
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b75      	ldr	r3, [pc, #468]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003c4:	71da      	strb	r2, [r3, #7]
			hk_buf[8] = ((PC0 & 0xFF00) >> 8); // 2.5v_mon MSB
 80003c6:	197b      	adds	r3, r7, r5
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	0a1b      	lsrs	r3, r3, #8
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b71      	ldr	r3, [pc, #452]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003d2:	721a      	strb	r2, [r3, #8]
			hk_buf[9] = (PC0 & 0xFF); // 2.5v_mon LSB
 80003d4:	197b      	adds	r3, r7, r5
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b6f      	ldr	r3, [pc, #444]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003dc:	725a      	strb	r2, [r3, #9]
			hk_buf[10] = ((PC1 & 0xFF00) >> 8); // 3v3_mon MSB
 80003de:	19bb      	adds	r3, r7, r6
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	0a1b      	lsrs	r3, r3, #8
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b6b      	ldr	r3, [pc, #428]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003ea:	729a      	strb	r2, [r3, #10]
			hk_buf[11] = (PC1 & 0xFF); // 3v3_mon LSB
 80003ec:	19bb      	adds	r3, r7, r6
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b69      	ldr	r3, [pc, #420]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80003f4:	72da      	strb	r2, [r3, #11]
			hk_buf[12] = ((PC2 & 0xFF00) >> 8); // 5v_mon MSB
 80003f6:	2114      	movs	r1, #20
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	0a1b      	lsrs	r3, r3, #8
 80003fe:	b29b      	uxth	r3, r3
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b65      	ldr	r3, [pc, #404]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000404:	731a      	strb	r2, [r3, #12]
			hk_buf[13] = (PC2 & 0xFF); // 5v_mon LSB
 8000406:	187b      	adds	r3, r7, r1
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b62      	ldr	r3, [pc, #392]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800040e:	735a      	strb	r2, [r3, #13]
			hk_buf[14] = ((PA3 & 0xFF00) >> 8); // 5vref_mon MSB
 8000410:	193b      	adds	r3, r7, r4
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	0a1b      	lsrs	r3, r3, #8
 8000416:	b29b      	uxth	r3, r3
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b5f      	ldr	r3, [pc, #380]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800041c:	739a      	strb	r2, [r3, #14]
			hk_buf[15] = (PA3 & 0xFF); // 5vref_mon LSB
 800041e:	193b      	adds	r3, r7, r4
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b5c      	ldr	r3, [pc, #368]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000426:	73da      	strb	r2, [r3, #15]
			hk_buf[16] = ((PC5 & 0xFF00) >> 8); // 15v_mon MSB
 8000428:	200e      	movs	r0, #14
 800042a:	183b      	adds	r3, r7, r0
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b58      	ldr	r3, [pc, #352]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000436:	741a      	strb	r2, [r3, #16]
			hk_buf[17] = (PC5 & 0xFF); // 15v_mon LSB
 8000438:	183b      	adds	r3, r7, r0
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b56      	ldr	r3, [pc, #344]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000440:	745a      	strb	r2, [r3, #17]
			hk_buf[18] = ((PC3 & 0xFF00) >> 8); // n3v3_mon MSB
 8000442:	2112      	movs	r1, #18
 8000444:	187b      	adds	r3, r7, r1
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	0a1b      	lsrs	r3, r3, #8
 800044a:	b29b      	uxth	r3, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b52      	ldr	r3, [pc, #328]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000450:	749a      	strb	r2, [r3, #18]
			hk_buf[19] = (PC3 & 0xFF); // n3v3_mon LSB
 8000452:	187b      	adds	r3, r7, r1
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800045a:	74da      	strb	r2, [r3, #19]
			hk_buf[20] = ((PC4 & 0xFF00) >> 8); // n5v_mon MSB
 800045c:	2110      	movs	r1, #16
 800045e:	187b      	adds	r3, r7, r1
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	b29b      	uxth	r3, r3
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b4b      	ldr	r3, [pc, #300]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800046a:	751a      	strb	r2, [r3, #20]
			hk_buf[21] = (PC4 & 0xFF); // n5v_mon LSB
 800046c:	187b      	adds	r3, r7, r1
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b49      	ldr	r3, [pc, #292]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000474:	755a      	strb	r2, [r3, #21]
			hk_buf[22] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB
 8000476:	210c      	movs	r1, #12
 8000478:	187b      	adds	r3, r7, r1
 800047a:	881b      	ldrh	r3, [r3, #0]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b29b      	uxth	r3, r3
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b45      	ldr	r3, [pc, #276]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000484:	759a      	strb	r2, [r3, #22]
			hk_buf[23] = (MCU_TEMP & 0xFF); // VSENSE LSB
 8000486:	187b      	adds	r3, r7, r1
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b42      	ldr	r3, [pc, #264]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800048e:	75da      	strb	r2, [r3, #23]
			hk_buf[24] = ((MCU_VREF & 0xFF00) >> 8); // VREFINT MSB
 8000490:	210a      	movs	r1, #10
 8000492:	187b      	adds	r3, r7, r1
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	0a1b      	lsrs	r3, r3, #8
 8000498:	b29b      	uxth	r3, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b3e      	ldr	r3, [pc, #248]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800049e:	761a      	strb	r2, [r3, #24]
			hk_buf[25] = (MCU_VREF & 0xFF); // VREFINT LSB
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b3c      	ldr	r3, [pc, #240]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80004a8:	765a      	strb	r2, [r3, #25]

			//HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);

			hk_counter = 1;
 80004aa:	4b3a      	ldr	r3, [pc, #232]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	601a      	str	r2, [r3, #0]

			hk_seq++;
 80004b0:	4b3a      	ldr	r3, [pc, #232]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	4b38      	ldr	r3, [pc, #224]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80004ba:	801a      	strh	r2, [r3, #0]

		pmt_seq++;

		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
    }
}
 80004bc:	e04d      	b.n	800055a <HAL_TIM_OC_DelayElapsedCallback+0x33a>
			hk_counter++;
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80004c6:	601a      	str	r2, [r3, #0]
}
 80004c8:	e047      	b.n	800055a <HAL_TIM_OC_DelayElapsedCallback+0x33a>
    } else if (htim == &htim1) {
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d143      	bne.n	800055a <HAL_TIM_OC_DelayElapsedCallback+0x33a>
        while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	005a      	lsls	r2, r3, #1
 80004d8:	2390      	movs	r3, #144	; 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fa66 	bl	80029b0 <HAL_GPIO_ReadPin>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d1f5      	bne.n	80004d4 <HAL_TIM_OC_DelayElapsedCallback+0x2b4>
        HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 80004e8:	4920      	ldr	r1, [pc, #128]	; (800056c <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 80004ea:	482e      	ldr	r0, [pc, #184]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80004ec:	2301      	movs	r3, #1
 80004ee:	2201      	movs	r2, #1
 80004f0:	f003 f9c8 	bl	8003884 <HAL_SPI_Transmit>
		while (!(SPI1->SR));
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0fb      	beq.n	80004f6 <HAL_TIM_OC_DelayElapsedCallback+0x2d6>
		raw = SPI1->DR;
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	001a      	movs	r2, r3
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000506:	601a      	str	r2, [r3, #0]
		pmt_buf[0] = pmt_sync;
 8000508:	22bb      	movs	r2, #187	; 0xbb
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800050c:	701a      	strb	r2, [r3, #0]
		pmt_buf[1] = pmt_sync;
 800050e:	22bb      	movs	r2, #187	; 0xbb
 8000510:	4b26      	ldr	r3, [pc, #152]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000512:	705a      	strb	r2, [r3, #1]
		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000520:	709a      	strb	r2, [r3, #2]
		pmt_buf[3] = (pmt_seq & 0xFF);;
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800052a:	70da      	strb	r2, [r3, #3]
		pmt_buf[4] = ((raw & 0xFF00) >> 8);
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	121b      	asrs	r3, r3, #8
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000536:	711a      	strb	r2, [r3, #4]
		pmt_buf[5] = (raw & 0xFF);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000540:	715a      	strb	r2, [r3, #5]
		pmt_seq++;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	b29a      	uxth	r2, r3
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800054c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 800054e:	4917      	ldr	r1, [pc, #92]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000550:	4818      	ldr	r0, [pc, #96]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	2206      	movs	r2, #6
 8000556:	f004 fd35 	bl	8004fc4 <HAL_UART_Transmit>
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b00b      	add	sp, #44	; 0x2c
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000240 	.word	0x20000240
 8000568:	48000400 	.word	0x48000400
 800056c:	08006060 	.word	0x08006060
 8000570:	20000194 	.word	0x20000194
 8000574:	40003800 	.word	0x40003800
 8000578:	20000338 	.word	0x20000338
 800057c:	20000336 	.word	0x20000336
 8000580:	40007400 	.word	0x40007400
 8000584:	20000000 	.word	0x20000000
 8000588:	20000314 	.word	0x20000314
 800058c:	2000004c 	.word	0x2000004c
 8000590:	20000020 	.word	0x20000020
 8000594:	20000370 	.word	0x20000370
 8000598:	20000348 	.word	0x20000348
 800059c:	2000036e 	.word	0x2000036e
 80005a0:	200001f8 	.word	0x200001f8
 80005a4:	20000130 	.word	0x20000130
 80005a8:	40013000 	.word	0x40013000
 80005ac:	20000340 	.word	0x20000340
 80005b0:	20000346 	.word	0x20000346
 80005b4:	20000288 	.word	0x20000288

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f001 f8a5 	bl	800170c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f865 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fc7f 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ca:	f000 fc5f 	bl	8000e8c <MX_DMA_Init>
  MX_SPI2_Init();
 80005ce:	f000 faa7 	bl	8000b20 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005d2:	f000 fae5 	bl	8000ba0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d6:	f000 fb99 	bl	8000d0c <MX_TIM2_Init>
  MX_SPI1_Init();
 80005da:	f000 fa61 	bl	8000aa0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005de:	f000 fc15 	bl	8000e0c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80005e2:	f000 f9eb 	bl	80009bc <MX_DAC1_Init>
  MX_ADC_Init();
 80005e6:	f000 f8bd 	bl	8000764 <MX_ADC_Init>
  MX_I2C1_Init();
 80005ea:	f000 fa19 	bl	8000a20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <main+0xc4>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fe1d 	bl	8002232 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <main+0xc8>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f003 fc5f 	bl	8003ec0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <main+0xcc>)
 8000604:	210c      	movs	r1, #12
 8000606:	0018      	movs	r0, r3
 8000608:	f003 fc5a 	bl	8003ec0 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <main+0xd0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	025b      	lsls	r3, r3, #9
 8000618:	401a      	ands	r2, r3
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	429a      	cmp	r2, r3
 8000620:	d0f5      	beq.n	800060e <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	03db      	lsls	r3, r3, #15
 800062e:	401a      	ands	r2, r3
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	03db      	lsls	r3, r3, #15
 8000634:	429a      	cmp	r2, r3
 8000636:	d1f5      	bne.n	8000624 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <main+0xd4>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <main+0xd4>)
 8000640:	2210      	movs	r2, #16
 8000642:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0xd4>)
 8000646:	2223      	movs	r2, #35	; 0x23
 8000648:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <main+0xd4>)
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <main+0xd0>)
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	f005 fc01 	bl	8005e58 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <main+0xa6>
      Error_Handler();
 800065a:	f000 fccf 	bl	8000ffc <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0xd0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <main+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	03c9      	lsls	r1, r1, #15
 800066c:	430a      	orrs	r2, r1
 800066e:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0xd0>)
 8000672:	0018      	movs	r0, r3
 8000674:	f005 fc56 	bl	8005f24 <HAL_UARTEx_EnableStopMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0xc0>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	200000d0 	.word	0x200000d0
 8000680:	200001f8 	.word	0x200001f8
 8000684:	20000240 	.word	0x20000240
 8000688:	20000288 	.word	0x20000288
 800068c:	2000030c 	.word	0x2000030c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b097      	sub	sp, #92	; 0x5c
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2428      	movs	r4, #40	; 0x28
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2330      	movs	r3, #48	; 0x30
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f005 fcb9 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	2318      	movs	r3, #24
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	0018      	movs	r0, r3
 80006ac:	2310      	movs	r3, #16
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f005 fcb1 	bl	8006018 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f005 fcaa 	bl	8006018 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2212      	movs	r2, #18
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2210      	movs	r2, #16
 80006dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2210      	movs	r2, #16
 80006e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	22a0      	movs	r2, #160	; 0xa0
 80006f4:	0392      	lsls	r2, r2, #14
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	0018      	movs	r0, r3
 8000702:	f002 fabd 	bl	8002c80 <HAL_RCC_OscConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800070a:	f000 fc77 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	2118      	movs	r1, #24
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2207      	movs	r2, #7
 8000714:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2202      	movs	r2, #2
 800071a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2101      	movs	r1, #1
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fdc1 	bl	80032b4 <HAL_RCC_ClockConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000736:	f000 fc61 	bl	8000ffc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2221      	movs	r2, #33	; 0x21
 800073e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2203      	movs	r2, #3
 8000744:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	0018      	movs	r0, r3
 8000750:	f002 ff02 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000758:	f000 fc50 	bl	8000ffc <Error_Handler>
  }
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b017      	add	sp, #92	; 0x5c
 8000762:	bd90      	pop	{r4, r7, pc}

08000764 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0018      	movs	r0, r3
 800076e:	230c      	movs	r3, #12
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f005 fc50 	bl	8006018 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000778:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <MX_ADC_Init+0x250>)
 800077a:	4a8f      	ldr	r2, [pc, #572]	; (80009b8 <MX_ADC_Init+0x254>)
 800077c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800077e:	4b8d      	ldr	r3, [pc, #564]	; (80009b4 <MX_ADC_Init+0x250>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b8b      	ldr	r3, [pc, #556]	; (80009b4 <MX_ADC_Init+0x250>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <MX_ADC_Init+0x250>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000790:	4b88      	ldr	r3, [pc, #544]	; (80009b4 <MX_ADC_Init+0x250>)
 8000792:	2201      	movs	r2, #1
 8000794:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b87      	ldr	r3, [pc, #540]	; (80009b4 <MX_ADC_Init+0x250>)
 8000798:	2204      	movs	r2, #4
 800079a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800079c:	4b85      	ldr	r3, [pc, #532]	; (80009b4 <MX_ADC_Init+0x250>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007a2:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <MX_ADC_Init+0x250>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007a8:	4b82      	ldr	r3, [pc, #520]	; (80009b4 <MX_ADC_Init+0x250>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <MX_ADC_Init+0x250>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <MX_ADC_Init+0x250>)
 80007b6:	22c2      	movs	r2, #194	; 0xc2
 80007b8:	32ff      	adds	r2, #255	; 0xff
 80007ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007bc:	4b7d      	ldr	r3, [pc, #500]	; (80009b4 <MX_ADC_Init+0x250>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007c2:	4b7c      	ldr	r3, [pc, #496]	; (80009b4 <MX_ADC_Init+0x250>)
 80007c4:	2224      	movs	r2, #36	; 0x24
 80007c6:	2100      	movs	r1, #0
 80007c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ca:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <MX_ADC_Init+0x250>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007d0:	4b78      	ldr	r3, [pc, #480]	; (80009b4 <MX_ADC_Init+0x250>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fffe 	bl	80017d4 <HAL_ADC_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007dc:	f000 fc0e 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	0152      	lsls	r2, r2, #5
 80007ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0552      	lsls	r2, r2, #21
 80007f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	4b6e      	ldr	r3, [pc, #440]	; (80009b4 <MX_ADC_Init+0x250>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f9c3 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000806:	f000 fbf9 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <MX_ADC_Init+0x250>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f001 f9b6 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000820:	f000 fbec 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2202      	movs	r2, #2
 8000828:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <MX_ADC_Init+0x250>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f9a9 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800083a:	f000 fbdf 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2203      	movs	r2, #3
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <MX_ADC_Init+0x250>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 f99c 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000854:	f000 fbd2 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2205      	movs	r2, #5
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <MX_ADC_Init+0x250>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f98f 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800086e:	f000 fbc5 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2206      	movs	r2, #6
 8000876:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000878:	1d3a      	adds	r2, r7, #4
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <MX_ADC_Init+0x250>)
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f001 f982 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000888:	f000 fbb8 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2207      	movs	r2, #7
 8000890:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000892:	1d3a      	adds	r2, r7, #4
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <MX_ADC_Init+0x250>)
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 f975 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 80008a2:	f000 fbab 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2208      	movs	r2, #8
 80008aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ac:	1d3a      	adds	r2, r7, #4
 80008ae:	4b41      	ldr	r3, [pc, #260]	; (80009b4 <MX_ADC_Init+0x250>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f968 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80008bc:	f000 fb9e 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2209      	movs	r2, #9
 80008c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008c6:	1d3a      	adds	r2, r7, #4
 80008c8:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <MX_ADC_Init+0x250>)
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f95b 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80008d6:	f000 fb91 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	220a      	movs	r2, #10
 80008de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_ADC_Init+0x250>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 f94e 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80008f0:	f000 fb84 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	220b      	movs	r2, #11
 80008f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fa:	1d3a      	adds	r2, r7, #4
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_ADC_Init+0x250>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 f941 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800090a:	f000 fb77 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	220c      	movs	r2, #12
 8000912:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000914:	1d3a      	adds	r2, r7, #4
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_ADC_Init+0x250>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f001 f934 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000924:	f000 fb6a 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	220d      	movs	r2, #13
 800092c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800092e:	1d3a      	adds	r2, r7, #4
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_ADC_Init+0x250>)
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f001 f927 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800093e:	f000 fb5d 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	220e      	movs	r2, #14
 8000946:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ADC_Init+0x250>)
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f001 f91a 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000958:	f000 fb50 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	220f      	movs	r2, #15
 8000960:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_ADC_Init+0x250>)
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f001 f90d 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000972:	f000 fb43 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2210      	movs	r2, #16
 800097a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_ADC_Init+0x250>)
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f900 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 800098c:	f000 fb36 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2211      	movs	r2, #17
 8000994:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_ADC_Init+0x250>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f8f3 	bl	8001b88 <HAL_ADC_ConfigChannel>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80009a6:	f000 fb29 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b004      	add	sp, #16
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000004c 	.word	0x2000004c
 80009b8:	40012400 	.word	0x40012400

080009bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_DAC1_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009c8:	003b      	movs	r3, r7
 80009ca:	0018      	movs	r0, r3
 80009cc:	2308      	movs	r3, #8
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f005 fb21 	bl	8006018 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_DAC1_Init+0x5c>)
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_DAC1_Init+0x60>)
 80009da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_DAC1_Init+0x5c>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fbc6 	bl	8002170 <HAL_DAC_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 80009e8:	f000 fb08 	bl	8000ffc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009ec:	003b      	movs	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009f2:	003b      	movs	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009f8:	0039      	movs	r1, r7
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_DAC1_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fbd9 	bl	80021b6 <HAL_DAC_ConfigChannel>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8000a08:	f000 faf8 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000336 	.word	0x20000336
 8000a18:	200000d0 	.word	0x200000d0
 8000a1c:	40007400 	.word	0x40007400

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C1_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 ffe1 	bl	8002a24 <HAL_I2C_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 fac9 	bl	8000ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 f86e 	bl	8002b50 <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 fac0 	bl	8000ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 f8b1 	bl	8002be8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 fab7 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e4 	.word	0x200000e4
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	2000090e 	.word	0x2000090e

08000aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_SPI1_Init+0x7c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aac:	2282      	movs	r2, #130	; 0x82
 8000aae:	0052      	lsls	r2, r2, #1
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	0212      	lsls	r2, r2, #8
 8000ab8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000abc:	22f0      	movs	r2, #240	; 0xf0
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ad8:	2230      	movs	r2, #48	; 0x30
 8000ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000afc:	2208      	movs	r2, #8
 8000afe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f002 fe06 	bl	8003714 <HAL_SPI_Init>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b0c:	f000 fa76 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	20000130 	.word	0x20000130
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <MX_SPI2_Init+0x7c>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b2c:	2282      	movs	r2, #130	; 0x82
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b3c:	22f0      	movs	r2, #240	; 0xf0
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b58:	2230      	movs	r2, #48	; 0x30
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MX_SPI2_Init+0x78>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fdc6 	bl	8003714 <HAL_SPI_Init>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000b8c:	f000 fa36 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000194 	.word	0x20000194
 8000b9c:	40003800 	.word	0x40003800

08000ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b096      	sub	sp, #88	; 0x58
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	2348      	movs	r3, #72	; 0x48
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	2310      	movs	r3, #16
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f005 fa31 	bl	8006018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f005 fa29 	bl	8006018 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	2324      	movs	r3, #36	; 0x24
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	231c      	movs	r3, #28
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f005 fa21 	bl	8006018 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	2320      	movs	r3, #32
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f005 fa1a 	bl	8006018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000be6:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <MX_TIM1_Init+0x164>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8000bea:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000bec:	2263      	movs	r2, #99	; 0x63
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000 - 1;
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000bf8:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <MX_TIM1_Init+0x168>)
 8000bfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f003 f905 	bl	8003e20 <HAL_TIM_Base_Init>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000c1a:	f000 f9ef 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	2148      	movs	r1, #72	; 0x48
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0152      	lsls	r2, r2, #5
 8000c26:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c28:	187a      	adds	r2, r7, r1
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f003 fc7a 	bl	8004528 <HAL_TIM_ConfigClockSource>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c38:	f000 f9e0 	bl	8000ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f003 fa3e 	bl	80040c0 <HAL_TIM_PWM_Init>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000c48:	f000 f9d8 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	187a      	adds	r2, r7, r1
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f004 f88f 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000c6a:	f000 f9c7 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6e:	2124      	movs	r1, #36	; 0x24
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2260      	movs	r2, #96	; 0x60
 8000c74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 -1;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	22e0      	movs	r2, #224	; 0xe0
 8000c7a:	32ff      	adds	r2, #255	; 0xff
 8000c7c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 fb7a 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000cac:	f000 f9a6 	bl	8000ffc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0192      	lsls	r2, r2, #6
 8000cd4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cdc:	1d3a      	adds	r2, r7, #4
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f004 f8ac 	bl	8004e40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000cec:	f000 f986 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <MX_TIM1_Init+0x160>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fbc2 	bl	800147c <HAL_TIM_MspPostInit>

}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b016      	add	sp, #88	; 0x58
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	0000bb7f 	.word	0x0000bb7f

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	2328      	movs	r3, #40	; 0x28
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	0018      	movs	r0, r3
 8000d18:	2310      	movs	r3, #16
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f005 f97b 	bl	8006018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d22:	2320      	movs	r3, #32
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	0018      	movs	r0, r3
 8000d28:	2308      	movs	r3, #8
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f005 f973 	bl	8006018 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	0018      	movs	r0, r3
 8000d36:	231c      	movs	r3, #28
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f005 f96c 	bl	8006018 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	05d2      	lsls	r2, r2, #23
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d4a:	2263      	movs	r2, #99	; 0x63
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000 - 1;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d56:	4a2c      	ldr	r2, [pc, #176]	; (8000e08 <MX_TIM2_Init+0xfc>)
 8000d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f003 f859 	bl	8003e20 <HAL_TIM_Base_Init>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f943 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	2128      	movs	r1, #40	; 0x28
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0152      	lsls	r2, r2, #5
 8000d7e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d80:	187a      	adds	r2, r7, r1
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f003 fbce 	bl	8004528 <HAL_TIM_ConfigClockSource>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d90:	f000 f934 	bl	8000ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f003 f992 	bl	80040c0 <HAL_TIM_PWM_Init>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000da0:	f000 f92c 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2120      	movs	r1, #32
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db2:	187a      	adds	r2, r7, r1
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f003 ffe3 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000dc2:	f000 f91b 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2260      	movs	r2, #96	; 0x60
 8000dca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 480 - 1;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	22e0      	movs	r2, #224	; 0xe0
 8000dd0:	32ff      	adds	r2, #255	; 0xff
 8000dd2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000de0:	1d39      	adds	r1, r7, #4
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000de4:	220c      	movs	r2, #12
 8000de6:	0018      	movs	r0, r3
 8000de8:	f003 fad8 	bl	800439c <HAL_TIM_PWM_ConfigChannel>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000df0:	f000 f904 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <MX_TIM2_Init+0xf8>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fb40 	bl	800147c <HAL_TIM_MspPostInit>

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b00e      	add	sp, #56	; 0x38
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000240 	.word	0x20000240
 8000e08:	0000ea5f 	.word	0x0000ea5f

08000e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_USART1_UART_Init+0x6c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_USART1_UART_Init+0x70>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_USART1_UART_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_USART1_UART_Init+0x7c>)
 8000e26:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e2a:	22e1      	movs	r2, #225	; 0xe1
 8000e2c:	0212      	lsls	r2, r2, #8
 8000e2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e44:	220c      	movs	r2, #12
 8000e46:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART1_UART_Init+0x78>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f004 f85a 	bl	8004f1c <HAL_UART_Init>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e6c:	f000 f8c6 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	2000033c 	.word	0x2000033c
 8000e7c:	20000346 	.word	0x20000346
 8000e80:	2000036e 	.word	0x2000036e
 8000e84:	20000288 	.word	0x20000288
 8000e88:	40013800 	.word	0x40013800

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2009      	movs	r0, #9
 8000eb0:	f001 f92c 	bl	800210c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eb4:	2009      	movs	r0, #9
 8000eb6:	f001 f93e 	bl	8002136 <HAL_NVIC_EnableIRQ>

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	2414      	movs	r4, #20
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2314      	movs	r3, #20
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f005 f89d 	bl	8006018 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <MX_GPIO_Init+0x124>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <MX_GPIO_Init+0x124>)
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0309      	lsls	r1, r1, #12
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_GPIO_Init+0x124>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	031b      	lsls	r3, r3, #12
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_GPIO_Init+0x124>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	03c9      	lsls	r1, r1, #15
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	03db      	lsls	r3, r3, #15
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	02c9      	lsls	r1, r1, #11
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_GPIO_Init+0x124>)
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	02db      	lsls	r3, r3, #11
 8000f48:	4013      	ands	r3, r2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000f4e:	239f      	movs	r3, #159	; 0x9f
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <MX_GPIO_Init+0x128>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	0019      	movs	r1, r3
 8000f58:	f001 fd47 	bl	80029ea <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0x12c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	21c0      	movs	r1, #192	; 0xc0
 8000f62:	0018      	movs	r0, r3
 8000f64:	f001 fd41 	bl	80029ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <MX_GPIO_Init+0x130>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 fd3b 	bl	80029ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	229f      	movs	r2, #159	; 0x9f
 8000f78:	0192      	lsls	r2, r2, #6
 8000f7a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_GPIO_Init+0x128>)
 8000f92:	0019      	movs	r1, r3
 8000f94:	0010      	movs	r0, r2
 8000f96:	f001 fb9b 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	22c0      	movs	r2, #192	; 0xc0
 8000f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <MX_GPIO_Init+0x12c>)
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	0010      	movs	r0, r2
 8000fba:	f001 fb89 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fbe:	0021      	movs	r1, r4
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2240      	movs	r2, #64	; 0x40
 8000fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <MX_GPIO_Init+0x130>)
 8000fdc:	0019      	movs	r1, r3
 8000fde:	0010      	movs	r0, r2
 8000fe0:	f001 fb76 	bl	80026d0 <HAL_GPIO_Init>

}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b00b      	add	sp, #44	; 0x2c
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48001400 	.word	0x48001400
 8000ff8:	48000400 	.word	0x48000400

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>
	...

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x44>)
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_MspInit+0x44>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_MspInit+0x44>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2201      	movs	r2, #1
 8001020:	4013      	ands	r3, r2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_MspInit+0x44>)
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_MspInit+0x44>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0549      	lsls	r1, r1, #21
 8001030:	430a      	orrs	r2, r1
 8001032:	61da      	str	r2, [r3, #28]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_MspInit+0x44>)
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	055b      	lsls	r3, r3, #21
 800103c:	4013      	ands	r3, r2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	; 0x34
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	241c      	movs	r4, #28
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f004 ffd8 	bl	8006018 <memset>
  if(hadc->Instance==ADC1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_ADC_MspInit+0x148>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d000      	beq.n	8001074 <HAL_ADC_MspInit+0x24>
 8001072:	e08d      	b.n	8001190 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_ADC_MspInit+0x14c>)
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_ADC_MspInit+0x14c>)
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0089      	lsls	r1, r1, #2
 800107e:	430a      	orrs	r2, r1
 8001080:	619a      	str	r2, [r3, #24]
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_ADC_MspInit+0x14c>)
 8001084:	699a      	ldr	r2, [r3, #24]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <HAL_ADC_MspInit+0x14c>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_ADC_MspInit+0x14c>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0309      	lsls	r1, r1, #12
 800109a:	430a      	orrs	r2, r1
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	031b      	lsls	r3, r3, #12
 80010a6:	4013      	ands	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0289      	lsls	r1, r1, #10
 80010b6:	430a      	orrs	r2, r1
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	02c9      	lsls	r1, r1, #11
 80010d2:	430a      	orrs	r2, r1
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_ADC_MspInit+0x14c>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	02db      	lsls	r3, r3, #11
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	223f      	movs	r2, #63	; 0x3f
 80010e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2203      	movs	r2, #3
 80010ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_ADC_MspInit+0x150>)
 80010fa:	0019      	movs	r1, r3
 80010fc:	0010      	movs	r0, r2
 80010fe:	f001 fae7 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001102:	193b      	adds	r3, r7, r4
 8001104:	22ef      	movs	r2, #239	; 0xef
 8001106:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2203      	movs	r2, #3
 800110c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	193a      	adds	r2, r7, r4
 8001116:	2390      	movs	r3, #144	; 0x90
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f001 fad7 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2203      	movs	r2, #3
 8001126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2203      	movs	r2, #3
 800112c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	193b      	adds	r3, r7, r4
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_ADC_MspInit+0x154>)
 8001138:	0019      	movs	r1, r3
 800113a:	0010      	movs	r0, r2
 800113c:	f001 fac8 	bl	80026d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_ADC_MspInit+0x15c>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	0052      	lsls	r2, r2, #1
 800115e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	00d2      	lsls	r2, r2, #3
 8001166:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001176:	0018      	movs	r0, r3
 8001178:	f001 f894 	bl	80022a4 <HAL_DMA_Init>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d001      	beq.n	8001184 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001180:	f7ff ff3c 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_ADC_MspInit+0x158>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b00d      	add	sp, #52	; 0x34
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	40012400 	.word	0x40012400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000800 	.word	0x48000800
 80011a4:	48000400 	.word	0x48000400
 80011a8:	2000008c 	.word	0x2000008c
 80011ac:	40020008 	.word	0x40020008

080011b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	2414      	movs	r4, #20
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	0018      	movs	r0, r3
 80011be:	2314      	movs	r3, #20
 80011c0:	001a      	movs	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	f004 ff28 	bl	8006018 <memset>
  if(hdac->Instance==DAC)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_DAC_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12b      	bne.n	800122a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0589      	lsls	r1, r1, #22
 80011dc:	430a      	orrs	r2, r1
 80011de:	61da      	str	r2, [r3, #28]
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	059b      	lsls	r3, r3, #22
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	0289      	lsls	r1, r1, #10
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_DAC_MspInit+0x88>)
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2210      	movs	r2, #16
 800120e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	193b      	adds	r3, r7, r4
 8001212:	2203      	movs	r2, #3
 8001214:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	193a      	adds	r2, r7, r4
 800121e:	2390      	movs	r3, #144	; 0x90
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f001 fa53 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b00b      	add	sp, #44	; 0x2c
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40007400 	.word	0x40007400
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b08b      	sub	sp, #44	; 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	2414      	movs	r4, #20
 8001246:	193b      	adds	r3, r7, r4
 8001248:	0018      	movs	r0, r3
 800124a:	2314      	movs	r3, #20
 800124c:	001a      	movs	r2, r3
 800124e:	2100      	movs	r1, #0
 8001250:	f004 fee2 	bl	8006018 <memset>
  if(hi2c->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_I2C_MspInit+0x90>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d132      	bne.n	80012c4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	02c9      	lsls	r1, r1, #11
 8001268:	430a      	orrs	r2, r1
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	02db      	lsls	r3, r3, #11
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	22c0      	movs	r2, #192	; 0xc0
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	0021      	movs	r1, r4
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2212      	movs	r2, #18
 8001288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2203      	movs	r2, #3
 8001294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2201      	movs	r2, #1
 800129a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	187b      	adds	r3, r7, r1
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_I2C_MspInit+0x98>)
 80012a0:	0019      	movs	r1, r3
 80012a2:	0010      	movs	r0, r2
 80012a4:	f001 fa14 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0389      	lsls	r1, r1, #14
 80012b2:	430a      	orrs	r2, r1
 80012b4:	61da      	str	r2, [r3, #28]
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	039b      	lsls	r3, r3, #14
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b00b      	add	sp, #44	; 0x2c
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48000400 	.word	0x48000400

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b08d      	sub	sp, #52	; 0x34
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	241c      	movs	r4, #28
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	0018      	movs	r0, r3
 80012e6:	2314      	movs	r3, #20
 80012e8:	001a      	movs	r2, r3
 80012ea:	2100      	movs	r1, #0
 80012ec:	f004 fe94 	bl	8006018 <memset>
  if(hspi->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_SPI_MspInit+0x100>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d132      	bne.n	8001360 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_SPI_MspInit+0x104>)
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0149      	lsls	r1, r1, #5
 8001304:	430a      	orrs	r2, r1
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <HAL_SPI_MspInit+0x104>)
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_SPI_MspInit+0x104>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	02c9      	lsls	r1, r1, #11
 8001320:	430a      	orrs	r2, r1
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	02db      	lsls	r3, r3, #11
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001332:	0021      	movs	r1, r4
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2228      	movs	r2, #40	; 0x28
 8001338:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2202      	movs	r2, #2
 800133e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2203      	movs	r2, #3
 800134a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	187b      	adds	r3, r7, r1
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_SPI_MspInit+0x108>)
 8001356:	0019      	movs	r1, r3
 8001358:	0010      	movs	r0, r2
 800135a:	f001 f9b9 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800135e:	e037      	b.n	80013d0 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_SPI_MspInit+0x10c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d132      	bne.n	80013d0 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_SPI_MspInit+0x104>)
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	01c9      	lsls	r1, r1, #7
 8001374:	430a      	orrs	r2, r1
 8001376:	61da      	str	r2, [r3, #28]
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_SPI_MspInit+0x104>)
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_SPI_MspInit+0x104>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	02c9      	lsls	r1, r1, #11
 8001390:	430a      	orrs	r2, r1
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_SPI_MspInit+0x104>)
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	02db      	lsls	r3, r3, #11
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80013a2:	211c      	movs	r1, #28
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	22c0      	movs	r2, #192	; 0xc0
 80013a8:	01d2      	lsls	r2, r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2202      	movs	r2, #2
 80013b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2203      	movs	r2, #3
 80013bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_SPI_MspInit+0x108>)
 80013c8:	0019      	movs	r1, r3
 80013ca:	0010      	movs	r0, r2
 80013cc:	f001 f980 	bl	80026d0 <HAL_GPIO_Init>
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b00d      	add	sp, #52	; 0x34
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	40003800 	.word	0x40003800

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_TIM_Base_MspInit+0x8c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11e      	bne.n	8001438 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	0109      	lsls	r1, r1, #4
 8001404:	430a      	orrs	r2, r1
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2101      	movs	r1, #1
 800141a:	200d      	movs	r0, #13
 800141c:	f000 fe76 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001420:	200d      	movs	r0, #13
 8001422:	f000 fe88 	bl	8002136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	200e      	movs	r0, #14
 800142c:	f000 fe6e 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001430:	200e      	movs	r0, #14
 8001432:	f000 fe80 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001436:	e019      	b.n	800146c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	429a      	cmp	r2, r3
 8001442:	d113      	bne.n	800146c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x90>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	200f      	movs	r0, #15
 8001462:	f000 fe53 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 fe65 	bl	8002136 <HAL_NVIC_EnableIRQ>
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40012c00 	.word	0x40012c00
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	2414      	movs	r4, #20
 8001486:	193b      	adds	r3, r7, r4
 8001488:	0018      	movs	r0, r3
 800148a:	2314      	movs	r3, #20
 800148c:	001a      	movs	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	f004 fdc2 	bl	8006018 <memset>
  if(htim->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2c      	ldr	r2, [pc, #176]	; (800154c <HAL_TIM_MspPostInit+0xd0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d126      	bne.n	80014ec <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0289      	lsls	r1, r1, #10
 80014a8:	430a      	orrs	r2, r1
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	0052      	lsls	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	0021      	movs	r1, r4
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2202      	movs	r2, #2
 80014c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2202      	movs	r2, #2
 80014da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	187a      	adds	r2, r7, r1
 80014de:	2390      	movs	r3, #144	; 0x90
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f001 f8f3 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ea:	e02a      	b.n	8001542 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	05db      	lsls	r3, r3, #23
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d124      	bne.n	8001542 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	02c9      	lsls	r1, r1, #11
 8001502:	430a      	orrs	r2, r1
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_TIM_MspPostInit+0xd4>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	02db      	lsls	r3, r3, #11
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001514:	2114      	movs	r1, #20
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2202      	movs	r2, #2
 8001522:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2202      	movs	r2, #2
 8001534:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	187b      	adds	r3, r7, r1
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_TIM_MspPostInit+0xd8>)
 800153a:	0019      	movs	r1, r3
 800153c:	0010      	movs	r0, r2
 800153e:	f001 f8c7 	bl	80026d0 <HAL_GPIO_Init>
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b00b      	add	sp, #44	; 0x2c
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2414      	movs	r4, #20
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2314      	movs	r3, #20
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f004 fd54 	bl	8006018 <memset>
  if(huart->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_UART_MspInit+0xa4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d13b      	bne.n	80015f2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_UART_MspInit+0xa8>)
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_UART_MspInit+0xa8>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	01c9      	lsls	r1, r1, #7
 8001584:	430a      	orrs	r2, r1
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_UART_MspInit+0xa8>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_UART_MspInit+0xa8>)
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0xa8>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0289      	lsls	r1, r1, #10
 80015a0:	430a      	orrs	r2, r1
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_UART_MspInit+0xa8>)
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	22c0      	movs	r2, #192	; 0xc0
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	0021      	movs	r1, r4
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2202      	movs	r2, #2
 80015c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2203      	movs	r2, #3
 80015cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2201      	movs	r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	187a      	adds	r2, r7, r1
 80015d6:	2390      	movs	r3, #144	; 0x90
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f001 f877 	bl	80026d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	201b      	movs	r0, #27
 80015e8:	f000 fd90 	bl	800210c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ec:	201b      	movs	r0, #27
 80015ee:	f000 fda2 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b00b      	add	sp, #44	; 0x2c
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40013800 	.word	0x40013800
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f8b8 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <DMA1_Channel1_IRQHandler+0x14>)
 800163a:	0018      	movs	r0, r3
 800163c:	f000 ff5d 	bl	80024fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	2000008c 	.word	0x2000008c

0800164c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001652:	0018      	movs	r0, r3
 8001654:	f002 fd8c 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	200001f8 	.word	0x200001f8

08001664 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <TIM1_CC_IRQHandler+0x14>)
 800166a:	0018      	movs	r0, r3
 800166c:	f002 fd80 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	200001f8 	.word	0x200001f8

0800167c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <TIM2_IRQHandler+0x14>)
 8001682:	0018      	movs	r0, r3
 8001684:	f002 fd74 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	20000240 	.word	0x20000240

08001694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <USART1_IRQHandler+0x14>)
 800169a:	0018      	movs	r0, r3
 800169c:	f003 fd3c 	bl	8005118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000288 	.word	0x20000288

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016e2:	f7ff ffe3 	bl	80016ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80016e6:	f004 fc73 	bl	8005fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ea:	f7fe ff65 	bl	80005b8 <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   r0, =_estack
 80016f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80016fc:	08006084 	.word	0x08006084
  ldr r2, =_sbss
 8001700:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001704:	20000378 	.word	0x20000378

08001708 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_COMP_IRQHandler>
	...

0800170c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_Init+0x24>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_Init+0x24>)
 8001716:	2110      	movs	r1, #16
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f809 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001722:	f7ff fc71 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	40022000 	.word	0x40022000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_InitTick+0x5c>)
 800173e:	681c      	ldr	r4, [r3, #0]
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_InitTick+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	0019      	movs	r1, r3
 8001746:	23fa      	movs	r3, #250	; 0xfa
 8001748:	0098      	lsls	r0, r3, #2
 800174a:	f7fe fcdd 	bl	8000108 <__udivsi3>
 800174e:	0003      	movs	r3, r0
 8001750:	0019      	movs	r1, r3
 8001752:	0020      	movs	r0, r4
 8001754:	f7fe fcd8 	bl	8000108 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fcfb 	bl	8002156 <HAL_SYSTICK_Config>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e00f      	b.n	8001788 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d80b      	bhi.n	8001786 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	2301      	movs	r3, #1
 8001772:	425b      	negs	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	0018      	movs	r0, r3
 8001778:	f000 fcc8 	bl	800210c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_InitTick+0x64>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b003      	add	sp, #12
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	20000024 	.word	0x20000024
 8001794:	2000002c 	.word	0x2000002c
 8001798:	20000028 	.word	0x20000028

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	001a      	movs	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	18d2      	adds	r2, r2, r3
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_IncTick+0x20>)
 80017ae:	601a      	str	r2, [r3, #0]
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	2000002c 	.word	0x2000002c
 80017bc:	20000374 	.word	0x20000374

080017c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000374 	.word	0x20000374

080017d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	230f      	movs	r3, #15
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e125      	b.n	8001a3e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2234      	movs	r2, #52	; 0x34
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f7ff fc20 	bl	8001050 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	2210      	movs	r2, #16
 8001816:	4013      	ands	r3, r2
 8001818:	d000      	beq.n	800181c <HAL_ADC_Init+0x48>
 800181a:	e103      	b.n	8001a24 <HAL_ADC_Init+0x250>
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d000      	beq.n	8001828 <HAL_ADC_Init+0x54>
 8001826:	e0fd      	b.n	8001a24 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2204      	movs	r2, #4
 8001830:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001832:	d000      	beq.n	8001836 <HAL_ADC_Init+0x62>
 8001834:	e0f6      	b.n	8001a24 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	4a83      	ldr	r2, [pc, #524]	; (8001a48 <HAL_ADC_Init+0x274>)
 800183c:	4013      	ands	r3, r2
 800183e:	2202      	movs	r2, #2
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	2b01      	cmp	r3, #1
 8001852:	d112      	bne.n	800187a <HAL_ADC_Init+0xa6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	2b01      	cmp	r3, #1
 8001860:	d009      	beq.n	8001876 <HAL_ADC_Init+0xa2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	401a      	ands	r2, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	429a      	cmp	r2, r3
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0xa6>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_ADC_Init+0xa8>
 800187a:	2300      	movs	r3, #0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d116      	bne.n	80018ae <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2218      	movs	r2, #24
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	0899      	lsrs	r1, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4964      	ldr	r1, [pc, #400]	; (8001a4c <HAL_ADC_Init+0x278>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
 80018c2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e5b      	ldrb	r3, [r3, #25]
 80018c8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7e9b      	ldrb	r3, [r3, #26]
 80018d0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_Init+0x10e>
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	015b      	lsls	r3, r3, #5
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_Init+0x110>
 80018e2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018e4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018ea:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_Init+0x124>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e000      	b.n	80018fa <HAL_ADC_Init+0x126>
 80018f8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80018fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2124      	movs	r1, #36	; 0x24
 8001900:	5c5b      	ldrb	r3, [r3, r1]
 8001902:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001904:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	4313      	orrs	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7edb      	ldrb	r3, [r3, #27]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d115      	bne.n	8001940 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e9b      	ldrb	r3, [r3, #26]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	0252      	lsls	r2, r2, #9
 8001922:	4313      	orrs	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	e00b      	b.n	8001940 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	2220      	movs	r2, #32
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	2201      	movs	r2, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	23c2      	movs	r3, #194	; 0xc2
 8001946:	33ff      	adds	r3, #255	; 0xff
 8001948:	429a      	cmp	r2, r3
 800194a:	d007      	beq.n	800195c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001954:	4313      	orrs	r3, r2
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	055b      	lsls	r3, r3, #21
 8001974:	429a      	cmp	r2, r3
 8001976:	d01b      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d017      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b02      	cmp	r3, #2
 8001986:	d013      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	2b03      	cmp	r3, #3
 800198e:	d00f      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2b04      	cmp	r3, #4
 8001996:	d00b      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2b05      	cmp	r3, #5
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	d003      	beq.n	80019b0 <HAL_ADC_Init+0x1dc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d112      	bne.n	80019d6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2107      	movs	r1, #7
 80019bc:	438a      	bics	r2, r1
 80019be:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6959      	ldr	r1, [r3, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	2207      	movs	r2, #7
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_ADC_Init+0x27c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10b      	bne.n	80019fe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	2203      	movs	r2, #3
 80019f2:	4393      	bics	r3, r2
 80019f4:	2201      	movs	r2, #1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019fc:	e01c      	b.n	8001a38 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	2212      	movs	r2, #18
 8001a04:	4393      	bics	r3, r2
 8001a06:	2210      	movs	r2, #16
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	2201      	movs	r2, #1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a22:	e009      	b.n	8001a38 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	2210      	movs	r2, #16
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	fffffefd 	.word	0xfffffefd
 8001a4c:	fffe0219 	.word	0xfffe0219
 8001a50:	833fffe7 	.word	0x833fffe7

08001a54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2317      	movs	r3, #23
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d15e      	bne.n	8001b32 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2234      	movs	r2, #52	; 0x34
 8001a78:	5c9b      	ldrb	r3, [r3, r2]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Start_DMA+0x2e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e05e      	b.n	8001b40 <HAL_ADC_Start_DMA+0xec>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2234      	movs	r2, #52	; 0x34
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	7e5b      	ldrb	r3, [r3, #25]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d007      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a92:	2317      	movs	r3, #23
 8001a94:	18fc      	adds	r4, r7, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f983 	bl	8001da4 <ADC_Enable>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aa2:	2317      	movs	r3, #23
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d146      	bne.n	8001b3a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_ADC_Start_DMA+0xf4>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2234      	movs	r2, #52	; 0x34
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_ADC_Start_DMA+0xf8>)
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_ADC_Start_DMA+0xfc>)
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_ADC_Start_DMA+0x100>)
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	221c      	movs	r2, #28
 8001aea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2110      	movs	r1, #16
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	0019      	movs	r1, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f000 fc0a 	bl	8002334 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e003      	b.n	8001b3a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b32:	2317      	movs	r3, #23
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	2317      	movs	r3, #23
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b007      	add	sp, #28
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	fffff0fe 	.word	0xfffff0fe
 8001b4c:	08001ead 	.word	0x08001ead
 8001b50:	08001f61 	.word	0x08001f61
 8001b54:	08001f7f 	.word	0x08001f7f

08001b58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b002      	add	sp, #8
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	230f      	movs	r3, #15
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	055b      	lsls	r3, r3, #21
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d011      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00d      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d009      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d005      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d001      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2234      	movs	r2, #52	; 0x34
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x54>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e0d0      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1f6>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2234      	movs	r2, #52	; 0x34
 8001be0:	2101      	movs	r1, #1
 8001be2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	d000      	beq.n	8001bf2 <HAL_ADC_ConfigChannel+0x6a>
 8001bf0:	e0b4      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a64      	ldr	r2, [pc, #400]	; (8001d88 <HAL_ADC_ConfigChannel+0x200>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x76>
 8001bfc:	e082      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d037      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d033      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d02f      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d02b      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d027      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d023      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d01f      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d01b      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2107      	movs	r1, #7
 8001c64:	400b      	ands	r3, r1
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d012      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2107      	movs	r1, #7
 8001c76:	438a      	bics	r2, r1
 8001c78:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6959      	ldr	r1, [r3, #20]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2207      	movs	r2, #7
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d007      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x120>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d003      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x120>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d163      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_ADC_ConfigChannel+0x204>)
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d009      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x140>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b11      	cmp	r3, #17
 8001cba:	d102      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x13a>
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	03db      	lsls	r3, r3, #15
 8001cc0:	e004      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x144>
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	045b      	lsls	r3, r3, #17
 8001cc6:	e001      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x144>
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_ADC_ConfigChannel+0x204>)
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d14a      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_ADC_ConfigChannel+0x208>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	492d      	ldr	r1, [pc, #180]	; (8001d94 <HAL_ADC_ConfigChannel+0x20c>)
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fa11 	bl	8000108 <__udivsi3>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	001a      	movs	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x16e>
 8001d02:	e035      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4099      	lsls	r1, r3
 8001d12:	000b      	movs	r3, r1
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d007      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x1ae>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d003      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x1ae>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d11c      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_ADC_ConfigChannel+0x204>)
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d007      	beq.n	8001d52 <HAL_ADC_ConfigChannel+0x1ca>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x1c6>
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_ADC_ConfigChannel+0x210>)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1cc>
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_ADC_ConfigChannel+0x214>)
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1cc>
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_ADC_ConfigChannel+0x218>)
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_ADC_ConfigChannel+0x204>)
 8001d56:	400b      	ands	r3, r1
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e009      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	2220      	movs	r2, #32
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2234      	movs	r2, #52	; 0x34
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	00001001 	.word	0x00001001
 8001d8c:	40012708 	.word	0x40012708
 8001d90:	20000024 	.word	0x20000024
 8001d94:	000f4240 	.word	0x000f4240
 8001d98:	ffbfffff 	.word	0xffbfffff
 8001d9c:	feffffff 	.word	0xfeffffff
 8001da0:	ff7fffff 	.word	0xff7fffff

08001da4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d112      	bne.n	8001de8 <ADC_Enable+0x44>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d009      	beq.n	8001de4 <ADC_Enable+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d101      	bne.n	8001de8 <ADC_Enable+0x44>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <ADC_Enable+0x46>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d152      	bne.n	8001e94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <ADC_Enable+0xfc>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	2210      	movs	r2, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03f      	b.n	8001e96 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <ADC_Enable+0x100>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	491f      	ldr	r1, [pc, #124]	; (8001ea8 <ADC_Enable+0x104>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe f96b 	bl	8000108 <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e36:	e002      	b.n	8001e3e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f9      	bne.n	8001e38 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e44:	f7ff fcbc 	bl	80017c0 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e4c:	e01b      	b.n	8001e86 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e4e:	f7ff fcb7 	bl	80017c0 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d914      	bls.n	8001e86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d00d      	beq.n	8001e86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	2210      	movs	r2, #16
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e007      	b.n	8001e96 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d1dc      	bne.n	8001e4e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	80000017 	.word	0x80000017
 8001ea4:	20000024 	.word	0x20000024
 8001ea8:	000f4240 	.word	0x000f4240

08001eac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	2250      	movs	r2, #80	; 0x50
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d140      	bne.n	8001f46 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4013      	ands	r3, r2
 8001ede:	d12d      	bne.n	8001f3c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d129      	bne.n	8001f3c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d122      	bne.n	8001f3c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2204      	movs	r2, #4
 8001efe:	4013      	ands	r3, r2
 8001f00:	d110      	bne.n	8001f24 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	210c      	movs	r1, #12
 8001f0e:	438a      	bics	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <ADC_DMAConvCplt+0xb0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
 8001f22:	e00b      	b.n	8001f3c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	2220      	movs	r2, #32
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	2201      	movs	r2, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff fe0a 	bl	8001b58 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001f44:	e005      	b.n	8001f52 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	0010      	movs	r0, r2
 8001f50:	4798      	blx	r3
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	fffffefe 	.word	0xfffffefe

08001f60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fdf9 	bl	8001b68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	431a      	orrs	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fde6 	bl	8001b78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0002      	movs	r2, r0
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc6:	d809      	bhi.n	8001fdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	001a      	movs	r2, r3
 8001fce:	231f      	movs	r3, #31
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_EnableIRQ+0x30>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4091      	lsls	r1, r2
 8001fd8:	000a      	movs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
  }
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8001ffc:	d828      	bhi.n	8002050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <__NVIC_SetPriority+0xd4>)
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	33c0      	adds	r3, #192	; 0xc0
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	589b      	ldr	r3, [r3, r2]
 800200e:	1dfa      	adds	r2, r7, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	0011      	movs	r1, r2
 8002014:	2203      	movs	r2, #3
 8002016:	400a      	ands	r2, r1
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	21ff      	movs	r1, #255	; 0xff
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	401a      	ands	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	2303      	movs	r3, #3
 8002036:	4003      	ands	r3, r0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203c:	481f      	ldr	r0, [pc, #124]	; (80020bc <__NVIC_SetPriority+0xd4>)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	430a      	orrs	r2, r1
 8002048:	33c0      	adds	r3, #192	; 0xc0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800204e:	e031      	b.n	80020b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <__NVIC_SetPriority+0xd8>)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0019      	movs	r1, r3
 8002058:	230f      	movs	r3, #15
 800205a:	400b      	ands	r3, r1
 800205c:	3b08      	subs	r3, #8
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3306      	adds	r3, #6
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	3304      	adds	r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <__NVIC_SetPriority+0xd8>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	001c      	movs	r4, r3
 80020a0:	230f      	movs	r3, #15
 80020a2:	4023      	ands	r3, r4
 80020a4:	3b08      	subs	r3, #8
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	430a      	orrs	r2, r1
 80020aa:	3306      	adds	r3, #6
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	18c3      	adds	r3, r0, r3
 80020b0:	3304      	adds	r3, #4
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b003      	add	sp, #12
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	045b      	lsls	r3, r3, #17
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d301      	bcc.n	80020dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d8:	2301      	movs	r3, #1
 80020da:	e010      	b.n	80020fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <SysTick_Config+0x44>)
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	3a01      	subs	r2, #1
 80020e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e4:	2301      	movs	r3, #1
 80020e6:	425b      	negs	r3, r3
 80020e8:	2103      	movs	r1, #3
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff ff7c 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x44>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x44>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	210f      	movs	r1, #15
 8002118:	187b      	adds	r3, r7, r1
 800211a:	1c02      	adds	r2, r0, #0
 800211c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	187b      	adds	r3, r7, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	0002      	movs	r2, r0
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff33 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ffaf 	bl	80020c4 <SysTick_Config>
 8002166:	0003      	movs	r3, r0
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e015      	b.n	80021ae <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	791b      	ldrb	r3, [r3, #4]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff f80b 	bl	80011b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_DAC_ConfigChannel+0x20>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e029      	b.n	800222a <HAL_DAC_ConfigChannel+0x74>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2202      	movs	r2, #2
 80021e0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80021ea:	223e      	movs	r2, #62	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	43da      	mvns	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4013      	ands	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b006      	add	sp, #24
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	795b      	ldrb	r3, [r3, #5]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_DAC_Start+0x16>
 8002244:	2302      	movs	r3, #2
 8002246:	e028      	b.n	800229a <HAL_DAC_Start+0x68>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	409a      	lsls	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	223c      	movs	r2, #60	; 0x3c
 8002276:	4013      	ands	r3, r2
 8002278:	2b3c      	cmp	r3, #60	; 0x3c
 800227a:	d107      	bne.n	800228c <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e036      	b.n	8002328 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2221      	movs	r2, #33	; 0x21
 80022be:	2102      	movs	r1, #2
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_DMA_Init+0x8c>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f9c4 	bl	8002698 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2221      	movs	r2, #33	; 0x21
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}  
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	ffffc00f 	.word	0xffffc00f

08002334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002342:	2317      	movs	r3, #23
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Start_IT+0x24>
 8002354:	2302      	movs	r3, #2
 8002356:	e04f      	b.n	80023f8 <HAL_DMA_Start_IT+0xc4>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d13a      	bne.n	80023e2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	; 0x21
 8002370:	2102      	movs	r1, #2
 8002372:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2101      	movs	r1, #1
 8002386:	438a      	bics	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f954 	bl	800263e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	210e      	movs	r1, #14
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e00f      	b.n	80023d0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	210a      	movs	r1, #10
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2104      	movs	r1, #4
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e007      	b.n	80023f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80023ea:	2317      	movs	r3, #23
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80023f2:	2317      	movs	r3, #23
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	781b      	ldrb	r3, [r3, #0]
} 
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b006      	add	sp, #24
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2221      	movs	r2, #33	; 0x21
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d008      	beq.n	8002426 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e020      	b.n	8002468 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	210e      	movs	r1, #14
 8002432:	438a      	bics	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	438a      	bics	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	2101      	movs	r1, #1
 8002450:	4091      	lsls	r1, r2
 8002452:	000a      	movs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	210f      	movs	r1, #15
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2221      	movs	r2, #33	; 0x21
 8002484:	5c9b      	ldrb	r3, [r3, r2]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d006      	beq.n	800249a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2204      	movs	r2, #4
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e028      	b.n	80024ec <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	210e      	movs	r1, #14
 80024a6:	438a      	bics	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	438a      	bics	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	4091      	lsls	r1, r2
 80024c6:	000a      	movs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	0010      	movs	r0, r2
 80024ea:	4798      	blx	r3
    } 
  }
  return status;
 80024ec:	230f      	movs	r3, #15
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b004      	add	sp, #16
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	0013      	movs	r3, r2
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	d024      	beq.n	800256c <HAL_DMA_IRQHandler+0x72>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d020      	beq.n	800256c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	4013      	ands	r3, r2
 8002534:	d107      	bne.n	8002546 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2104      	movs	r1, #4
 8002542:	438a      	bics	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	2104      	movs	r1, #4
 8002550:	4091      	lsls	r1, r2
 8002552:	000a      	movs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <HAL_DMA_IRQHandler+0x66>
 800255e:	e06a      	b.n	8002636 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	0010      	movs	r0, r2
 8002568:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800256a:	e064      	b.n	8002636 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2202      	movs	r2, #2
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	d02b      	beq.n	80025d4 <HAL_DMA_IRQHandler+0xda>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d027      	beq.n	80025d4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d10b      	bne.n	80025a8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	210a      	movs	r1, #10
 800259c:	438a      	bics	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2221      	movs	r2, #33	; 0x21
 80025a4:	2101      	movs	r1, #1
 80025a6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	2102      	movs	r1, #2
 80025b2:	4091      	lsls	r1, r2
 80025b4:	000a      	movs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	0010      	movs	r0, r2
 80025d0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025d2:	e030      	b.n	8002636 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4013      	ands	r3, r2
 80025e2:	d028      	beq.n	8002636 <HAL_DMA_IRQHandler+0x13c>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2208      	movs	r2, #8
 80025e8:	4013      	ands	r3, r2
 80025ea:	d024      	beq.n	8002636 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	210e      	movs	r1, #14
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	2101      	movs	r1, #1
 8002606:	4091      	lsls	r1, r2
 8002608:	000a      	movs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	0010      	movs	r0, r2
 8002632:	4798      	blx	r3
    }
   }
}  
 8002634:	e7ff      	b.n	8002636 <HAL_DMA_IRQHandler+0x13c>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}

0800263e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	4091      	lsls	r1, r2
 8002658:	000a      	movs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b10      	cmp	r3, #16
 800266a:	d108      	bne.n	800267e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800267c:	e007      	b.n	800268e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	60da      	str	r2, [r3, #12]
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <DMA_CalcBaseAndBitshift+0x30>)
 80026a6:	4694      	mov	ip, r2
 80026a8:	4463      	add	r3, ip
 80026aa:	2114      	movs	r1, #20
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fd fd2b 	bl	8000108 <__udivsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <DMA_CalcBaseAndBitshift+0x34>)
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	bffdfff8 	.word	0xbffdfff8
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026de:	e14f      	b.n	8002980 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4091      	lsls	r1, r2
 80026ea:	000a      	movs	r2, r1
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d100      	bne.n	80026f8 <HAL_GPIO_Init+0x28>
 80026f6:	e140      	b.n	800297a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2203      	movs	r2, #3
 80026fe:	4013      	ands	r3, r2
 8002700:	2b01      	cmp	r3, #1
 8002702:	d005      	beq.n	8002710 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800270c:	2b02      	cmp	r3, #2
 800270e:	d130      	bne.n	8002772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002746:	2201      	movs	r2, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	2201      	movs	r2, #1
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2203      	movs	r2, #3
 8002778:	4013      	ands	r3, r2
 800277a:	2b03      	cmp	r3, #3
 800277c:	d017      	beq.n	80027ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	43da      	mvns	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	0013      	movs	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d123      	bne.n	8002802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	58d3      	ldr	r3, [r2, r3]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2207      	movs	r2, #7
 80027cc:	4013      	ands	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	43da      	mvns	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2107      	movs	r1, #7
 80027e6:	400b      	ands	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	6939      	ldr	r1, [r7, #16]
 8002800:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	43da      	mvns	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	401a      	ands	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	409a      	lsls	r2, r3
 8002828:	0013      	movs	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	23c0      	movs	r3, #192	; 0xc0
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	d100      	bne.n	8002844 <HAL_GPIO_Init+0x174>
 8002842:	e09a      	b.n	800297a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002844:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800285c:	4a4f      	ldr	r2, [pc, #316]	; (800299c <HAL_GPIO_Init+0x2cc>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	589b      	ldr	r3, [r3, r2]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2203      	movs	r2, #3
 800286e:	4013      	ands	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	409a      	lsls	r2, r3
 8002876:	0013      	movs	r3, r2
 8002878:	43da      	mvns	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	2390      	movs	r3, #144	; 0x90
 8002884:	05db      	lsls	r3, r3, #23
 8002886:	429a      	cmp	r2, r3
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x1e2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a44      	ldr	r2, [pc, #272]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x1de>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a43      	ldr	r2, [pc, #268]	; (80029a4 <HAL_GPIO_Init+0x2d4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x1da>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_GPIO_Init+0x2d8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x1d6>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028b2:	2300      	movs	r3, #0
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	2103      	movs	r1, #3
 80028b8:	400a      	ands	r2, r1
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_GPIO_Init+0x2cc>)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43da      	mvns	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	4013      	ands	r3, r2
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43da      	mvns	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	4013      	ands	r3, r2
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43da      	mvns	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	035b      	lsls	r3, r3, #13
 800293e:	4013      	ands	r3, r2
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43da      	mvns	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	039b      	lsls	r3, r3, #14
 8002968:	4013      	ands	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	40da      	lsrs	r2, r3
 8002988:	1e13      	subs	r3, r2, #0
 800298a:	d000      	beq.n	800298e <HAL_GPIO_Init+0x2be>
 800298c:	e6a8      	b.n	80026e0 <HAL_GPIO_Init+0x10>
  } 
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b006      	add	sp, #24
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	000a      	movs	r2, r1
 80029ba:	1cbb      	adds	r3, r7, #2
 80029bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	1cba      	adds	r2, r7, #2
 80029c4:	8812      	ldrh	r2, [r2, #0]
 80029c6:	4013      	ands	r3, r2
 80029c8:	d004      	beq.n	80029d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029ca:	230f      	movs	r3, #15
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e003      	b.n	80029dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d4:	230f      	movs	r3, #15
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029dc:	230f      	movs	r3, #15
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	781b      	ldrb	r3, [r3, #0]
  }
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	0008      	movs	r0, r1
 80029f4:	0011      	movs	r1, r2
 80029f6:	1cbb      	adds	r3, r7, #2
 80029f8:	1c02      	adds	r2, r0, #0
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	1c7b      	adds	r3, r7, #1
 80029fe:	1c0a      	adds	r2, r1, #0
 8002a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a02:	1c7b      	adds	r3, r7, #1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0a:	1cbb      	adds	r3, r7, #2
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a12:	e003      	b.n	8002a1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a14:	1cbb      	adds	r3, r7, #2
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e082      	b.n	8002b3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2241      	movs	r2, #65	; 0x41
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe fbf5 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	; 0x41
 8002a56:	2124      	movs	r1, #36	; 0x24
 8002a58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	438a      	bics	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_I2C_Init+0x120>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4931      	ldr	r1, [pc, #196]	; (8002b48 <HAL_I2C_Init+0x124>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d108      	bne.n	8002aa2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0209      	lsls	r1, r1, #8
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e007      	b.n	8002ab2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2184      	movs	r1, #132	; 0x84
 8002aac:	0209      	lsls	r1, r1, #8
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d104      	bne.n	8002ac4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	491f      	ldr	r1, [pc, #124]	; (8002b4c <HAL_I2C_Init+0x128>)
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	491a      	ldr	r1, [pc, #104]	; (8002b48 <HAL_I2C_Init+0x124>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69d9      	ldr	r1, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2241      	movs	r2, #65	; 0x41
 8002b28:	2120      	movs	r1, #32
 8002b2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2242      	movs	r2, #66	; 0x42
 8002b36:	2100      	movs	r1, #0
 8002b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	f0ffffff 	.word	0xf0ffffff
 8002b48:	ffff7fff 	.word	0xffff7fff
 8002b4c:	02008000 	.word	0x02008000

08002b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d138      	bne.n	8002bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e032      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4911      	ldr	r1, [pc, #68]	; (8002be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2241      	movs	r2, #65	; 0x41
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	ffffefff 	.word	0xffffefff

08002be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	; 0x41
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d139      	bne.n	8002c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e033      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2241      	movs	r2, #65	; 0x41
 8002c18:	2124      	movs	r1, #36	; 0x24
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	; 0x41
 8002c62:	2120      	movs	r1, #32
 8002c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffff0ff 	.word	0xfffff0ff

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e301      	b.n	8003296 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x1e>
 8002c9c:	e08d      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c9e:	4bc3      	ldr	r3, [pc, #780]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002caa:	4bc0      	ldr	r3, [pc, #768]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	220c      	movs	r2, #12
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x64>
 8002cb6:	4bbd      	ldr	r3, [pc, #756]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	025b      	lsls	r3, r3, #9
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	025b      	lsls	r3, r3, #9
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4bb8      	ldr	r3, [pc, #736]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x56>
 8002cd4:	e070      	b.n	8002db8 <HAL_RCC_OscConfig+0x138>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d000      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x60>
 8002cde:	e06b      	b.n	8002db8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2d8      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x7c>
 8002cec:	4baf      	ldr	r3, [pc, #700]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4bae      	ldr	r3, [pc, #696]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0249      	lsls	r1, r1, #9
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e02f      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x9e>
 8002d04:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4ba8      	ldr	r3, [pc, #672]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d0a:	49a9      	ldr	r1, [pc, #676]	; (8002fb0 <HAL_RCC_OscConfig+0x330>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4ba5      	ldr	r3, [pc, #660]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d16:	49a7      	ldr	r1, [pc, #668]	; (8002fb4 <HAL_RCC_OscConfig+0x334>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e01e      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10e      	bne.n	8002d44 <HAL_RCC_OscConfig+0xc4>
 8002d26:	4ba1      	ldr	r3, [pc, #644]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	02c9      	lsls	r1, r1, #11
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b9d      	ldr	r3, [pc, #628]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b9c      	ldr	r3, [pc, #624]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0249      	lsls	r1, r1, #9
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xdc>
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b98      	ldr	r3, [pc, #608]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	4999      	ldr	r1, [pc, #612]	; (8002fb0 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b95      	ldr	r3, [pc, #596]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d56:	4997      	ldr	r1, [pc, #604]	; (8002fb4 <HAL_RCC_OscConfig+0x334>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d014      	beq.n	8002d8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd2c 	bl	80017c0 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fd27 	bl	80017c0 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e28a      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0xee>
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fd17 	bl	80017c0 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe fd12 	bl	80017c0 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e275      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b80      	ldr	r3, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	4013      	ands	r3, r2
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x118>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x146>
 8002dc4:	e069      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dc6:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	220c      	movs	r2, #12
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dd0:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	220c      	movs	r2, #12
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d11c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	025b      	lsls	r3, r3, #9
 8002de4:	4013      	ands	r3, r2
 8002de6:	d116      	bne.n	8002e16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e24b      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b6b      	ldr	r3, [pc, #428]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	22f8      	movs	r2, #248	; 0xf8
 8002e04:	4393      	bics	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00da      	lsls	r2, r3, #3
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	e041      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1e:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fcc9 	bl	80017c0 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe fcc4 	bl	80017c0 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e227      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0f1      	beq.n	8002e34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	22f8      	movs	r2, #248	; 0xf8
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00da      	lsls	r2, r3, #3
 8002e60:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e018      	b.n	8002e9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e6e:	2101      	movs	r1, #1
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fca4 	bl	80017c0 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc9f 	bl	80017c0 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e202      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d1f1      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d036      	beq.n	8002f12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d019      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fc82 	bl	80017c0 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fc7d 	bl	80017c0 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1e0      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f1      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x242>
 8002ede:	e018      	b.n	8002f12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe fc68 	bl	80017c0 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe fc63 	bl	80017c0 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1c6      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d1f1      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x29e>
 8002f1c:	e0b4      	b.n	8003088 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	201f      	movs	r0, #31
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	055b      	lsls	r3, r3, #21
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d110      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0549      	lsls	r1, r1, #21
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	055b      	lsls	r3, r3, #21
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d11a      	bne.n	8002f96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0049      	lsls	r1, r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fc27 	bl	80017c0 <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fc22 	bl	80017c0 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e185      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x338>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10e      	bne.n	8002fbc <HAL_RCC_OscConfig+0x33c>
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e035      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	fffeffff 	.word	0xfffeffff
 8002fb4:	fffbffff 	.word	0xfffbffff
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x35e>
 8002fc4:	4bb6      	ldr	r3, [pc, #728]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	4bb5      	ldr	r3, [pc, #724]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	438a      	bics	r2, r1
 8002fce:	621a      	str	r2, [r3, #32]
 8002fd0:	4bb3      	ldr	r3, [pc, #716]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fd2:	6a1a      	ldr	r2, [r3, #32]
 8002fd4:	4bb2      	ldr	r3, [pc, #712]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	438a      	bics	r2, r1
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x380>
 8002fe6:	4bae      	ldr	r3, [pc, #696]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	4bad      	ldr	r3, [pc, #692]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002fec:	2104      	movs	r1, #4
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	621a      	str	r2, [r3, #32]
 8002ff2:	4bab      	ldr	r3, [pc, #684]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	4baa      	ldr	r3, [pc, #680]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	621a      	str	r2, [r3, #32]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x398>
 8003000:	4ba7      	ldr	r3, [pc, #668]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4ba6      	ldr	r3, [pc, #664]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	4ba4      	ldr	r3, [pc, #656]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003012:	2104      	movs	r1, #4
 8003014:	438a      	bics	r2, r1
 8003016:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe fbce 	bl	80017c0 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e009      	b.n	800303e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fbc9 	bl	80017c0 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a9b      	ldr	r2, [pc, #620]	; (80032a4 <HAL_RCC_OscConfig+0x624>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e12b      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	4b98      	ldr	r3, [pc, #608]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x3aa>
 8003048:	e013      	b.n	8003072 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fbb9 	bl	80017c0 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	e009      	b.n	8003068 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fbb4 	bl	80017c0 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a91      	ldr	r2, [pc, #580]	; (80032a4 <HAL_RCC_OscConfig+0x624>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e116      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003082:	4989      	ldr	r1, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0x628>)
 8003084:	400a      	ands	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030a0:	2104      	movs	r1, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030a6:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fb85 	bl	80017c0 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030bc:	f7fe fb80 	bl	80017c0 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0e3      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ce:	4b74      	ldr	r3, [pc, #464]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d0f1      	beq.n	80030bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030d8:	4b71      	ldr	r3, [pc, #452]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	22f8      	movs	r2, #248	; 0xf8
 80030de:	4393      	bics	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	00da      	lsls	r2, r3, #3
 80030e8:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
 80030ee:	e034      	b.n	800315a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	3305      	adds	r3, #5
 80030f6:	d111      	bne.n	800311c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030f8:	4b69      	ldr	r3, [pc, #420]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80030fe:	2104      	movs	r1, #4
 8003100:	438a      	bics	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	22f8      	movs	r2, #248	; 0xf8
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	00da      	lsls	r2, r3, #3
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003116:	430a      	orrs	r2, r1
 8003118:	635a      	str	r2, [r3, #52]	; 0x34
 800311a:	e01e      	b.n	800315a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800311e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003122:	2104      	movs	r1, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fe fb44 	bl	80017c0 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800313e:	f7fe fb3f 	bl	80017c0 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0a2      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d1f1      	bne.n	800313e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d100      	bne.n	8003164 <HAL_RCC_OscConfig+0x4e4>
 8003162:	e097      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003164:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	220c      	movs	r2, #12
 800316a:	4013      	ands	r3, r2
 800316c:	2b08      	cmp	r3, #8
 800316e:	d100      	bne.n	8003172 <HAL_RCC_OscConfig+0x4f2>
 8003170:	e06b      	b.n	800324a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d14c      	bne.n	8003214 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003180:	494a      	ldr	r1, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x62c>)
 8003182:	400a      	ands	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fb1b 	bl	80017c0 <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fb16 	bl	80017c0 <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e079      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	049b      	lsls	r3, r3, #18
 80031aa:	4013      	ands	r3, r2
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	220f      	movs	r2, #15
 80031b4:	4393      	bics	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <HAL_RCC_OscConfig+0x630>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	0449      	lsls	r1, r1, #17
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fae9 	bl	80017c0 <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fae4 	bl	80017c0 <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e047      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	049b      	lsls	r3, r3, #18
 800320e:	4013      	ands	r3, r2
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x574>
 8003212:	e03f      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800321a:	4924      	ldr	r1, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x62c>)
 800321c:	400a      	ands	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe face 	bl	80017c0 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322a:	f7fe fac9 	bl	80017c0 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e02c      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	049b      	lsls	r3, r3, #18
 8003244:	4013      	ands	r3, r2
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x5aa>
 8003248:	e024      	b.n	8003294 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e01f      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x620>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	025b      	lsls	r3, r3, #9
 8003268:	401a      	ands	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d10e      	bne.n	8003290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	220f      	movs	r2, #15
 8003276:	401a      	ands	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	23f0      	movs	r3, #240	; 0xf0
 8003284:	039b      	lsls	r3, r3, #14
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b008      	add	sp, #32
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	00001388 	.word	0x00001388
 80032a8:	efffffff 	.word	0xefffffff
 80032ac:	feffffff 	.word	0xfeffffff
 80032b0:	ffc2ffff 	.word	0xffc2ffff

080032b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b3      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d911      	bls.n	80032fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e09a      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d015      	beq.n	8003330 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2204      	movs	r2, #4
 800330a:	4013      	ands	r3, r2
 800330c:	d006      	beq.n	800331c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800330e:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003314:	21e0      	movs	r1, #224	; 0xe0
 8003316:	00c9      	lsls	r1, r1, #3
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	22f0      	movs	r2, #240	; 0xf0
 8003322:	4393      	bics	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	4013      	ands	r3, r2
 800334c:	d114      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06e      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	049b      	lsls	r3, r3, #18
 8003362:	4013      	ands	r3, r2
 8003364:	d108      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e062      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e05b      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	4393      	bics	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe fa18 	bl	80017c0 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fe fa13 	bl	80017c0 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_RCC_ClockConfig+0x18c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e042      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	220c      	movs	r2, #12
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1ec      	bne.n	8003396 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d211      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x184>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_RCC_ClockConfig+0x190>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340c:	f000 f820 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8003410:	0001      	movs	r1, r0
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x188>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	220f      	movs	r2, #15
 800341a:	4013      	ands	r3, r2
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x194>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	000a      	movs	r2, r1
 8003422:	40da      	lsrs	r2, r3
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x198>)
 8003426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003428:	2003      	movs	r0, #3
 800342a:	f7fe f983 	bl	8001734 <HAL_InitTick>
  
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
 8003440:	00001388 	.word	0x00001388
 8003444:	fffff8ff 	.word	0xfffff8ff
 8003448:	08006064 	.word	0x08006064
 800344c:	20000024 	.word	0x20000024

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08f      	sub	sp, #60	; 0x3c
 8003454:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003456:	2314      	movs	r3, #20
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800345e:	c313      	stmia	r3!, {r0, r1, r4}
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003468:	ca13      	ldmia	r2!, {r0, r1, r4}
 800346a:	c313      	stmia	r3!, {r0, r1, r4}
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	220c      	movs	r2, #12
 800348e:	4013      	ands	r3, r2
 8003490:	2b04      	cmp	r3, #4
 8003492:	d002      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x4a>
 8003494:	2b08      	cmp	r3, #8
 8003496:	d003      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x50>
 8003498:	e02d      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349e:	e02d      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	220f      	movs	r2, #15
 80034a6:	4013      	ands	r3, r2
 80034a8:	2214      	movs	r2, #20
 80034aa:	18ba      	adds	r2, r7, r2
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	220f      	movs	r2, #15
 80034b6:	4013      	ands	r3, r2
 80034b8:	1d3a      	adds	r2, r7, #4
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	025b      	lsls	r3, r3, #9
 80034c4:	4013      	ands	r3, r2
 80034c6:	d009      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034cc:	f7fc fe1c 	bl	8000108 <__udivsi3>
 80034d0:	0003      	movs	r3, r0
 80034d2:	001a      	movs	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	4353      	muls	r3, r2
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e009      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	000a      	movs	r2, r1
 80034e0:	0152      	lsls	r2, r2, #5
 80034e2:	1a52      	subs	r2, r2, r1
 80034e4:	0193      	lsls	r3, r2, #6
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	185b      	adds	r3, r3, r1
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b00f      	add	sp, #60	; 0x3c
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	08006040 	.word	0x08006040
 800350c:	08006050 	.word	0x08006050
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b02      	ldr	r3, [pc, #8]	; (8003528 <HAL_RCC_GetHCLKFreq+0x10>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000024 	.word	0x20000024

0800352c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003530:	f7ff fff2 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003534:	0001      	movs	r1, r0
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	2207      	movs	r2, #7
 800353e:	4013      	ands	r3, r2
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	40d9      	lsrs	r1, r3
 8003546:	000b      	movs	r3, r1
}    
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40021000 	.word	0x40021000
 8003554:	08006074 	.word	0x08006074

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	025b      	lsls	r3, r3, #9
 8003570:	4013      	ands	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003574:	e08e      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2017      	movs	r0, #23
 8003578:	183b      	adds	r3, r7, r0
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	055b      	lsls	r3, r3, #21
 8003586:	4013      	ands	r3, r2
 8003588:	d110      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	4b5b      	ldr	r3, [pc, #364]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0549      	lsls	r1, r1, #21
 8003594:	430a      	orrs	r2, r1
 8003596:	61da      	str	r2, [r3, #28]
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d11a      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0049      	lsls	r1, r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe f8fb 	bl	80017c0 <HAL_GetTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	e008      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe f8f6 	bl	80017c0 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e087      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	23c0      	movs	r3, #192	; 0xc0
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d034      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	23c0      	movs	r3, #192	; 0xc0
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4013      	ands	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	429a      	cmp	r2, r3
 800360e:	d02c      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0249      	lsls	r1, r1, #9
 8003624:	430a      	orrs	r2, r1
 8003626:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	4b33      	ldr	r3, [pc, #204]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800362e:	4936      	ldr	r1, [pc, #216]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003630:	400a      	ands	r2, r1
 8003632:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003634:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe f8bd 	bl	80017c0 <HAL_GetTick>
 8003646:	0003      	movs	r3, r0
 8003648:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe f8b8 	bl	80017c0 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e048      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d0f0      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003670:	4013      	ands	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4b20      	ldr	r3, [pc, #128]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800367a:	430a      	orrs	r2, r1
 800367c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800367e:	2317      	movs	r3, #23
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800368e:	4920      	ldr	r1, [pc, #128]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003690:	400a      	ands	r2, r1
 8003692:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	2203      	movs	r2, #3
 80036a4:	4393      	bics	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2220      	movs	r2, #32
 80036b8:	4013      	ands	r3, r2
 80036ba:	d009      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2210      	movs	r2, #16
 80036c2:	4393      	bics	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036cc:	430a      	orrs	r2, r1
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2240      	movs	r2, #64	; 0x40
 80036e2:	4393      	bics	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b006      	add	sp, #24
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	fffffcff 	.word	0xfffffcff
 8003708:	fffeffff 	.word	0xfffeffff
 800370c:	00001388 	.word	0x00001388
 8003710:	efffffff 	.word	0xefffffff

08003714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0a8      	b.n	8003878 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	2382      	movs	r3, #130	; 0x82
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	429a      	cmp	r2, r3
 8003738:	d009      	beq.n	800374e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	61da      	str	r2, [r3, #28]
 8003740:	e005      	b.n	800374e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	225d      	movs	r2, #93	; 0x5d
 8003758:	5c9b      	ldrb	r3, [r3, r2]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	225c      	movs	r2, #92	; 0x5c
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	0018      	movs	r0, r3
 800376c:	f7fd fdb4 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	225d      	movs	r2, #93	; 0x5d
 8003774:	2102      	movs	r1, #2
 8003776:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	438a      	bics	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	23e0      	movs	r3, #224	; 0xe0
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d902      	bls.n	800379a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e002      	b.n	80037a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	015b      	lsls	r3, r3, #5
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	23f0      	movs	r3, #240	; 0xf0
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d008      	beq.n	80037be <HAL_SPI_Init+0xaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	23e0      	movs	r3, #224	; 0xe0
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d002      	beq.n	80037be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	2382      	movs	r3, #130	; 0x82
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	401a      	ands	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	2384      	movs	r3, #132	; 0x84
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	400b      	ands	r3, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2102      	movs	r1, #2
 80037da:	400b      	ands	r3, r1
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2101      	movs	r1, #1
 80037e4:	400b      	ands	r3, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6999      	ldr	r1, [r3, #24]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	400b      	ands	r3, r1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2138      	movs	r1, #56	; 0x38
 80037fa:	400b      	ands	r3, r1
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	400b      	ands	r3, r1
 8003806:	431a      	orrs	r2, r3
 8003808:	0011      	movs	r1, r2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	2204      	movs	r2, #4
 8003824:	401a      	ands	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2110      	movs	r1, #16
 800382c:	400b      	ands	r3, r1
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	2108      	movs	r1, #8
 8003836:	400b      	ands	r3, r1
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68d9      	ldr	r1, [r3, #12]
 800383e:	23f0      	movs	r3, #240	; 0xf0
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	400b      	ands	r3, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	0011      	movs	r1, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	015b      	lsls	r3, r3, #5
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4907      	ldr	r1, [pc, #28]	; (8003880 <HAL_SPI_Init+0x16c>)
 8003864:	400a      	ands	r2, r1
 8003866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	225d      	movs	r2, #93	; 0x5d
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b004      	add	sp, #16
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffff7ff 	.word	0xfffff7ff

08003884 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003894:	231f      	movs	r3, #31
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	225c      	movs	r2, #92	; 0x5c
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_SPI_Transmit+0x26>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e140      	b.n	8003b2c <HAL_SPI_Transmit+0x2a8>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	225c      	movs	r2, #92	; 0x5c
 80038ae:	2101      	movs	r1, #1
 80038b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b2:	f7fd ff85 	bl	80017c0 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038ba:	2316      	movs	r3, #22
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	1dba      	adds	r2, r7, #6
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	225d      	movs	r2, #93	; 0x5d
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d004      	beq.n	80038da <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80038d0:	231f      	movs	r3, #31
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2202      	movs	r2, #2
 80038d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80038d8:	e11d      	b.n	8003b16 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_SPI_Transmit+0x64>
 80038e0:	1dbb      	adds	r3, r7, #6
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80038f0:	e111      	b.n	8003b16 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	225d      	movs	r2, #93	; 0x5d
 80038f6:	2103      	movs	r1, #3
 80038f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1dba      	adds	r2, r7, #6
 800390a:	8812      	ldrh	r2, [r2, #0]
 800390c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1dba      	adds	r2, r7, #6
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2244      	movs	r2, #68	; 0x44
 8003920:	2100      	movs	r1, #0
 8003922:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2246      	movs	r2, #70	; 0x46
 8003928:	2100      	movs	r1, #0
 800392a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	429a      	cmp	r2, r3
 8003942:	d110      	bne.n	8003966 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2140      	movs	r1, #64	; 0x40
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	01c9      	lsls	r1, r1, #7
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	4013      	ands	r3, r2
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	23e0      	movs	r3, #224	; 0xe0
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	429a      	cmp	r2, r3
 800398e:	d94e      	bls.n	8003a2e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <HAL_SPI_Transmit+0x11e>
 8003998:	2316      	movs	r3, #22
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d13f      	bne.n	8003a22 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039c6:	e02c      	b.n	8003a22 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d112      	bne.n	80039fc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039fa:	e012      	b.n	8003a22 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fc:	f7fd fee0 	bl	80017c0 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d802      	bhi.n	8003a12 <HAL_SPI_Transmit+0x18e>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_SPI_Transmit+0x194>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003a18:	231f      	movs	r3, #31
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a20:	e079      	b.n	8003b16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1cd      	bne.n	80039c8 <HAL_SPI_Transmit+0x144>
 8003a2c:	e04f      	b.n	8003ace <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_SPI_Transmit+0x1bc>
 8003a36:	2316      	movs	r3, #22
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d141      	bne.n	8003ac4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003a66:	e02d      	b.n	8003ac4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d113      	bne.n	8003a9e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a9c:	e012      	b.n	8003ac4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9e:	f7fd fe8f 	bl	80017c0 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d802      	bhi.n	8003ab4 <HAL_SPI_Transmit+0x230>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_Transmit+0x236>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003aba:	231f      	movs	r3, #31
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2203      	movs	r2, #3
 8003ac0:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ac2:	e028      	b.n	8003b16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1cc      	bne.n	8003a68 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 f95d 	bl	8003d94 <SPI_EndRxTxTransaction>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003b0a:	231f      	movs	r3, #31
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e000      	b.n	8003b16 <HAL_SPI_Transmit+0x292>
  }

error:
 8003b14:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	225d      	movs	r2, #93	; 0x5d
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	225c      	movs	r2, #92	; 0x5c
 8003b22:	2100      	movs	r1, #0
 8003b24:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b26:	231f      	movs	r3, #31
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b008      	add	sp, #32
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	1dfb      	adds	r3, r7, #7
 8003b42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b44:	f7fd fe3c 	bl	80017c0 <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b54:	f7fd fe34 	bl	80017c0 <HAL_GetTick>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	015b      	lsls	r3, r3, #5
 8003b62:	0d1b      	lsrs	r3, r3, #20
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	4353      	muls	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6a:	e058      	b.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	d055      	beq.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b72:	f7fd fe25 	bl	80017c0 <HAL_GetTick>
 8003b76:	0002      	movs	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d142      	bne.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	21e0      	movs	r1, #224	; 0xe0
 8003b94:	438a      	bics	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	2382      	movs	r3, #130	; 0x82
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d113      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d005      	beq.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d107      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	019b      	lsls	r3, r3, #6
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d110      	bne.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	491a      	ldr	r1, [pc, #104]	; (8003c4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	0189      	lsls	r1, r1, #6
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	225d      	movs	r2, #93	; 0x5d
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	225c      	movs	r2, #92	; 0x5c
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e017      	b.n	8003c3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	425a      	negs	r2, r3
 8003c2e:	4153      	adcs	r3, r2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	001a      	movs	r2, r3
 8003c34:	1dfb      	adds	r3, r7, #7
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d197      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b008      	add	sp, #32
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	20000024 	.word	0x20000024
 8003c4c:	ffffdfff 	.word	0xffffdfff

08003c50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c5e:	2317      	movs	r3, #23
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c66:	f7fd fdab 	bl	80017c0 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	18d3      	adds	r3, r2, r3
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c76:	f7fd fda3 	bl	80017c0 <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	330c      	adds	r3, #12
 8003c84:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	0013      	movs	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	00da      	lsls	r2, r3, #3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	0d1b      	lsrs	r3, r3, #20
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	4353      	muls	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c9c:	e068      	b.n	8003d70 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	23c0      	movs	r3, #192	; 0xc0
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10a      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	2117      	movs	r1, #23
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d055      	beq.n	8003d70 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cc4:	f7fd fd7c 	bl	80017c0 <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d902      	bls.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d142      	bne.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	21e0      	movs	r1, #224	; 0xe0
 8003ce6:	438a      	bics	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	2382      	movs	r3, #130	; 0x82
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d113      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d005      	beq.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d107      	bne.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d110      	bne.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d36:	400a      	ands	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0189      	lsls	r1, r1, #6
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	225d      	movs	r2, #93	; 0x5d
 8003d50:	2101      	movs	r1, #1
 8003d52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	225c      	movs	r2, #92	; 0x5c
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e010      	b.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d18e      	bne.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b00a      	add	sp, #40	; 0x28
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	20000024 	.word	0x20000024
 8003d90:	ffffdfff 	.word	0xffffdfff

08003d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	23c0      	movs	r3, #192	; 0xc0
 8003da4:	0159      	lsls	r1, r3, #5
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	0013      	movs	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	f7ff ff4e 	bl	8003c50 <SPI_WaitFifoStateUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d007      	beq.n	8003dc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e027      	b.n	8003e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	f7ff fead 	bl	8003b34 <SPI_WaitFlagStateUntilTimeout>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d007      	beq.n	8003dee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	2220      	movs	r2, #32
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e014      	b.n	8003e18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	23c0      	movs	r3, #192	; 0xc0
 8003df2:	00d9      	lsls	r1, r3, #3
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	0013      	movs	r3, r2
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f7ff ff27 	bl	8003c50 <SPI_WaitFifoStateUntilTimeout>
 8003e02:	1e03      	subs	r3, r0, #0
 8003e04:	d007      	beq.n	8003e16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e000      	b.n	8003e18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223d      	movs	r2, #61	; 0x3d
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223c      	movs	r2, #60	; 0x3c
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fd facd 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223d      	movs	r2, #61	; 0x3d
 8003e52:	2102      	movs	r1, #2
 8003e54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	0019      	movs	r1, r3
 8003e60:	0010      	movs	r0, r2
 8003e62:	f000 fc55 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2246      	movs	r2, #70	; 0x46
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223e      	movs	r2, #62	; 0x3e
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223f      	movs	r2, #63	; 0x3f
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2240      	movs	r2, #64	; 0x40
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2242      	movs	r2, #66	; 0x42
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2243      	movs	r2, #67	; 0x43
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2244      	movs	r2, #68	; 0x44
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2245      	movs	r2, #69	; 0x45
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	; 0x3d
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_TIM_OC_Start_IT+0x2a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	223e      	movs	r2, #62	; 0x3e
 8003edc:	5c9b      	ldrb	r3, [r3, r2]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	1e5a      	subs	r2, r3, #1
 8003ee4:	4193      	sbcs	r3, r2
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e01f      	b.n	8003f2a <HAL_TIM_OC_Start_IT+0x6a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d108      	bne.n	8003f02 <HAL_TIM_OC_Start_IT+0x42>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	223f      	movs	r2, #63	; 0x3f
 8003ef4:	5c9b      	ldrb	r3, [r3, r2]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	4193      	sbcs	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e013      	b.n	8003f2a <HAL_TIM_OC_Start_IT+0x6a>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d108      	bne.n	8003f1a <HAL_TIM_OC_Start_IT+0x5a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	5c9b      	ldrb	r3, [r3, r2]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	4193      	sbcs	r3, r2
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e007      	b.n	8003f2a <HAL_TIM_OC_Start_IT+0x6a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2241      	movs	r2, #65	; 0x41
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	4193      	sbcs	r3, r2
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0b7      	b.n	80040a2 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_OC_Start_IT+0x82>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	223e      	movs	r2, #62	; 0x3e
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	5499      	strb	r1, [r3, r2]
 8003f40:	e013      	b.n	8003f6a <HAL_TIM_OC_Start_IT+0xaa>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_OC_Start_IT+0x92>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	223f      	movs	r2, #63	; 0x3f
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	5499      	strb	r1, [r3, r2]
 8003f50:	e00b      	b.n	8003f6a <HAL_TIM_OC_Start_IT+0xaa>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_OC_Start_IT+0xa2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	5499      	strb	r1, [r3, r2]
 8003f60:	e003      	b.n	8003f6a <HAL_TIM_OC_Start_IT+0xaa>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2241      	movs	r2, #65	; 0x41
 8003f66:	2102      	movs	r1, #2
 8003f68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d02a      	beq.n	8003fc6 <HAL_TIM_OC_Start_IT+0x106>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d830      	bhi.n	8003fd8 <HAL_TIM_OC_Start_IT+0x118>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_TIM_OC_Start_IT+0xf4>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d82a      	bhi.n	8003fd8 <HAL_TIM_OC_Start_IT+0x118>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_TIM_OC_Start_IT+0xd0>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIM_OC_Start_IT+0xe2>
 8003f8e:	e023      	b.n	8003fd8 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	60da      	str	r2, [r3, #12]
      break;
 8003fa0:	e01f      	b.n	8003fe2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2104      	movs	r1, #4
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]
      break;
 8003fb2:	e016      	b.n	8003fe2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]
      break;
 8003fc4:	e00d      	b.n	8003fe2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]
      break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	230f      	movs	r3, #15
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
      break;
 8003fe0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d157      	bne.n	800409c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fea1 	bl	8004d3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_TIM_OC_Start_IT+0x1ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIM_OC_Start_IT+0x162>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_TIM_OC_Start_IT+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIM_OC_Start_IT+0x162>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIM_OC_Start_IT+0x162>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_TIM_OC_Start_IT+0x1f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_TIM_OC_Start_IT+0x166>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_TIM_OC_Start_IT+0x168>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0209      	lsls	r1, r1, #8
 800403a:	430a      	orrs	r2, r1
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <HAL_TIM_OC_Start_IT+0x1ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00f      	beq.n	8004068 <HAL_TIM_OC_Start_IT+0x1a8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	05db      	lsls	r3, r3, #23
 8004050:	429a      	cmp	r2, r3
 8004052:	d009      	beq.n	8004068 <HAL_TIM_OC_Start_IT+0x1a8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_TIM_OC_Start_IT+0x1fc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_OC_Start_IT+0x1a8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2207      	movs	r2, #7
 8004070:	4013      	ands	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b06      	cmp	r3, #6
 8004078:	d010      	beq.n	800409c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408a:	e007      	b.n	800409c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800409c:	230f      	movs	r3, #15
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	40000400 	.word	0x40000400

080040c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e042      	b.n	8004158 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	223d      	movs	r2, #61	; 0x3d
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	223c      	movs	r2, #60	; 0x3c
 80040e2:	2100      	movs	r1, #0
 80040e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f839 	bl	8004160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223d      	movs	r2, #61	; 0x3d
 80040f2:	2102      	movs	r1, #2
 80040f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	0019      	movs	r1, r3
 8004100:	0010      	movs	r0, r2
 8004102:	f000 fb05 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2246      	movs	r2, #70	; 0x46
 800410a:	2101      	movs	r1, #1
 800410c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223e      	movs	r2, #62	; 0x3e
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223f      	movs	r2, #63	; 0x3f
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2240      	movs	r2, #64	; 0x40
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2241      	movs	r2, #65	; 0x41
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2242      	movs	r2, #66	; 0x42
 8004132:	2101      	movs	r1, #1
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2243      	movs	r2, #67	; 0x43
 800413a:	2101      	movs	r1, #1
 800413c:	5499      	strb	r1, [r3, r2]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2244      	movs	r2, #68	; 0x44
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2245      	movs	r2, #69	; 0x45
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	223d      	movs	r2, #61	; 0x3d
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2202      	movs	r2, #2
 8004180:	4013      	ands	r3, r2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d124      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11d      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2203      	movs	r2, #3
 800419a:	4252      	negs	r2, r2
 800419c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2203      	movs	r2, #3
 80041ac:	4013      	ands	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 fa94 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e007      	b.n	80041ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fc f82f 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 fa93 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2204      	movs	r2, #4
 80041d8:	4013      	ands	r3, r2
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d125      	bne.n	800422a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2204      	movs	r2, #4
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11e      	bne.n	800422a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2205      	movs	r2, #5
 80041f2:	4252      	negs	r2, r2
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	23c0      	movs	r3, #192	; 0xc0
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fa67 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 8004212:	e007      	b.n	8004224 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0018      	movs	r0, r3
 8004218:	f7fc f802 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f000 fa66 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2208      	movs	r2, #8
 8004232:	4013      	ands	r3, r2
 8004234:	2b08      	cmp	r3, #8
 8004236:	d124      	bne.n	8004282 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2208      	movs	r2, #8
 8004240:	4013      	ands	r3, r2
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11d      	bne.n	8004282 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2209      	movs	r2, #9
 800424c:	4252      	negs	r2, r2
 800424e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2203      	movs	r2, #3
 800425e:	4013      	ands	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0018      	movs	r0, r3
 8004266:	f000 fa3b 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 800426a:	e007      	b.n	800427c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0018      	movs	r0, r3
 8004270:	f7fb ffd6 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 fa3a 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2210      	movs	r2, #16
 800428a:	4013      	ands	r3, r2
 800428c:	2b10      	cmp	r3, #16
 800428e:	d125      	bne.n	80042dc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2210      	movs	r2, #16
 8004298:	4013      	ands	r3, r2
 800429a:	2b10      	cmp	r3, #16
 800429c:	d11e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2211      	movs	r2, #17
 80042a4:	4252      	negs	r2, r2
 80042a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2208      	movs	r2, #8
 80042ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	23c0      	movs	r3, #192	; 0xc0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 fa0e 	bl	80046e0 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e007      	b.n	80042d6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7fb ffa9 	bl	8000220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fa0d 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d10f      	bne.n	800430a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d108      	bne.n	800430a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2202      	movs	r2, #2
 80042fe:	4252      	negs	r2, r2
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 f9e3 	bl	80046d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	4013      	ands	r3, r2
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d10f      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	4013      	ands	r3, r2
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d108      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2281      	movs	r2, #129	; 0x81
 800432c:	4252      	negs	r2, r2
 800432e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 fdea 	bl	8004f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2240      	movs	r2, #64	; 0x40
 8004340:	4013      	ands	r3, r2
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d10f      	bne.n	8004366 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	4013      	ands	r3, r2
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d108      	bne.n	8004366 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2241      	movs	r2, #65	; 0x41
 800435a:	4252      	negs	r2, r2
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 f9cd 	bl	8004700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2220      	movs	r2, #32
 800436e:	4013      	ands	r3, r2
 8004370:	2b20      	cmp	r3, #32
 8004372:	d10f      	bne.n	8004394 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	4013      	ands	r3, r2
 800437e:	2b20      	cmp	r3, #32
 8004380:	d108      	bne.n	8004394 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2221      	movs	r2, #33	; 0x21
 8004388:	4252      	negs	r2, r2
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fdb4 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2317      	movs	r3, #23
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	223c      	movs	r2, #60	; 0x3c
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_ConfigChannel+0x22>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0ad      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	223c      	movs	r2, #60	; 0x3c
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d100      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80043cc:	e076      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d900      	bls.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80043d4:	e095      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d04e      	beq.n	800447a <HAL_TIM_PWM_ConfigChannel+0xde>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d900      	bls.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80043e2:	e08e      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d021      	beq.n	8004434 <HAL_TIM_PWM_ConfigChannel+0x98>
 80043f0:	e087      	b.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fa08 	bl	8004810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2108      	movs	r1, #8
 800440c:	430a      	orrs	r2, r1
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2104      	movs	r1, #4
 800441c:	438a      	bics	r2, r1
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
      break;
 8004432:	e06b      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f000 fa6f 	bl	8004920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0109      	lsls	r1, r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4931      	ldr	r1, [pc, #196]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004460:	400a      	ands	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6999      	ldr	r1, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
      break;
 8004478:	e048      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0011      	movs	r1, r2
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fad0 	bl	8004a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2108      	movs	r1, #8
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2104      	movs	r1, #4
 80044a4:	438a      	bics	r2, r1
 80044a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69d9      	ldr	r1, [r3, #28]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	61da      	str	r2, [r3, #28]
      break;
 80044ba:	e027      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fb35 	bl	8004b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0109      	lsls	r1, r1, #4
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	490f      	ldr	r1, [pc, #60]	; (8004524 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69d9      	ldr	r1, [r3, #28]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      break;
 8004500:	e004      	b.n	800450c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004502:	2317      	movs	r3, #23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	223c      	movs	r2, #60	; 0x3c
 8004510:	2100      	movs	r1, #0
 8004512:	5499      	strb	r1, [r3, r2]

  return status;
 8004514:	2317      	movs	r3, #23
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b006      	add	sp, #24
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	fffffbff 	.word	0xfffffbff

08004528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	230f      	movs	r3, #15
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223c      	movs	r2, #60	; 0x3c
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x20>
 8004544:	2302      	movs	r3, #2
 8004546:	e0bc      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x19a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	223c      	movs	r2, #60	; 0x3c
 800454c:	2101      	movs	r1, #1
 800454e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	223d      	movs	r2, #61	; 0x3d
 8004554:	2102      	movs	r1, #2
 8004556:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2277      	movs	r2, #119	; 0x77
 8004564:	4393      	bics	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0192      	lsls	r2, r2, #6
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xde>
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0192      	lsls	r2, r2, #6
 8004588:	4293      	cmp	r3, r2
 800458a:	d900      	bls.n	800458e <HAL_TIM_ConfigClockSource+0x66>
 800458c:	e088      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	0152      	lsls	r2, r2, #5
 8004592:	4293      	cmp	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_TIM_ConfigClockSource+0x70>
 8004596:	e088      	b.n	80046aa <HAL_TIM_ConfigClockSource+0x182>
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0152      	lsls	r2, r2, #5
 800459c:	4293      	cmp	r3, r2
 800459e:	d900      	bls.n	80045a2 <HAL_TIM_ConfigClockSource+0x7a>
 80045a0:	e07e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045a2:	2b70      	cmp	r3, #112	; 0x70
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xb0>
 80045a6:	d900      	bls.n	80045aa <HAL_TIM_ConfigClockSource+0x82>
 80045a8:	e07a      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d04f      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x126>
 80045ae:	d900      	bls.n	80045b2 <HAL_TIM_ConfigClockSource+0x8a>
 80045b0:	e076      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045b2:	2b50      	cmp	r3, #80	; 0x50
 80045b4:	d03b      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x106>
 80045b6:	d900      	bls.n	80045ba <HAL_TIM_ConfigClockSource+0x92>
 80045b8:	e072      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d057      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x146>
 80045be:	d900      	bls.n	80045c2 <HAL_TIM_ConfigClockSource+0x9a>
 80045c0:	e06e      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c2:	2b30      	cmp	r3, #48	; 0x30
 80045c4:	d063      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045cc:	d868      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d05d      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d05b      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x166>
 80045d6:	e063      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f000 fb88 	bl	8004cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2277      	movs	r2, #119	; 0x77
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e052      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f000 fb71 	bl	8004cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	01c9      	lsls	r1, r1, #7
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	001a      	movs	r2, r3
 800463c:	f000 fae4 	bl	8004c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fb3e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	001a      	movs	r2, r3
 800465c:	f000 fb02 	bl	8004c64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	0018      	movs	r0, r3
 8004668:	f000 fb2e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	001a      	movs	r2, r3
 800467c:	f000 fac4 	bl	8004c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fb1e 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00e      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f000 fb15 	bl	8004cc8 <TIM_ITRx_SetConfig>
      break;
 800469e:	e005      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223d      	movs	r2, #61	; 0x3d
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223c      	movs	r2, #60	; 0x3c
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

  return status;
 80046bc:	230f      	movs	r3, #15
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	ffff00ff 	.word	0xffff00ff

080046d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a34      	ldr	r2, [pc, #208]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d008      	beq.n	800473a <TIM_Base_SetConfig+0x2a>
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	05db      	lsls	r3, r3, #23
 800472e:	429a      	cmp	r2, r3
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0x2a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <TIM_Base_SetConfig+0xe8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2270      	movs	r2, #112	; 0x70
 800473e:	4393      	bics	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	05db      	lsls	r3, r3, #23
 800475a:	429a      	cmp	r2, r3
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0xe8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <TIM_Base_SetConfig+0xec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <TIM_Base_SetConfig+0xf0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <TIM_Base_SetConfig+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x76>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <TIM_Base_SetConfig+0xf8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <TIM_Base_SetConfig+0xfc>)
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	4393      	bics	r3, r2
 800479e:	001a      	movs	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <TIM_Base_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <TIM_Base_SetConfig+0xf0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <TIM_Base_SetConfig+0xf4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0xce>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <TIM_Base_SetConfig+0xf8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d103      	bne.n	80047e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	615a      	str	r2, [r3, #20]
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b004      	add	sp, #16
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40002000 	.word	0x40002000
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800
 800480c:	fffffcff 	.word	0xfffffcff

08004810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2201      	movs	r2, #1
 8004820:	4393      	bics	r3, r2
 8004822:	001a      	movs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2270      	movs	r2, #112	; 0x70
 800483e:	4393      	bics	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	4393      	bics	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2202      	movs	r2, #2
 8004858:	4393      	bics	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_OC1_SetConfig+0xf8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_OC1_SetConfig+0xfc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_OC1_SetConfig+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_OC1_SetConfig+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <TIM_OC1_SetConfig+0x104>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10c      	bne.n	80048a0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2208      	movs	r2, #8
 800488a:	4393      	bics	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2204      	movs	r2, #4
 800489c:	4393      	bics	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <TIM_OC1_SetConfig+0xf8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC1_SetConfig+0xfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC1_SetConfig+0x100>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC1_SetConfig+0xb0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC1_SetConfig+0x104>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC1_SetConfig+0x108>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4a14      	ldr	r2, [pc, #80]	; (800491c <TIM_OC1_SetConfig+0x10c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b006      	add	sp, #24
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800
 8004918:	fffffeff 	.word	0xfffffeff
 800491c:	fffffdff 	.word	0xfffffdff

08004920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	2210      	movs	r2, #16
 8004930:	4393      	bics	r3, r2
 8004932:	001a      	movs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <TIM_OC2_SetConfig+0xe8>)
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <TIM_OC2_SetConfig+0xec>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2220      	movs	r2, #32
 800496a:	4393      	bics	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a24      	ldr	r2, [pc, #144]	; (8004a10 <TIM_OC2_SetConfig+0xf0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10d      	bne.n	800499e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	4393      	bics	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	4393      	bics	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <TIM_OC2_SetConfig+0xf0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <TIM_OC2_SetConfig+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <TIM_OC2_SetConfig+0xf8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC2_SetConfig+0x9e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <TIM_OC2_SetConfig+0xfc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <TIM_OC2_SetConfig+0x100>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <TIM_OC2_SetConfig+0x104>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b006      	add	sp, #24
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	ffff8fff 	.word	0xffff8fff
 8004a0c:	fffffcff 	.word	0xfffffcff
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	fffffbff 	.word	0xfffffbff
 8004a24:	fffff7ff 	.word	0xfffff7ff

08004a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4a35      	ldr	r2, [pc, #212]	; (8004b0c <TIM_OC3_SetConfig+0xe4>)
 8004a38:	401a      	ands	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2270      	movs	r2, #112	; 0x70
 8004a54:	4393      	bics	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4a28      	ldr	r2, [pc, #160]	; (8004b10 <TIM_OC3_SetConfig+0xe8>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_OC3_SetConfig+0xec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_OC3_SetConfig+0xf0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <TIM_OC3_SetConfig+0xf4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <TIM_OC3_SetConfig+0xec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <TIM_OC3_SetConfig+0xf8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <TIM_OC3_SetConfig+0xfc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_OC3_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <TIM_OC3_SetConfig+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d113      	bne.n	8004aea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <TIM_OC3_SetConfig+0x104>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <TIM_OC3_SetConfig+0x108>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	fffffdff 	.word	0xfffffdff
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	fffff7ff 	.word	0xfffff7ff
 8004b1c:	fffffbff 	.word	0xfffffbff
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC4_SetConfig+0xb0>)
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <TIM_OC4_SetConfig+0xb4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_OC4_SetConfig+0xb8>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <TIM_OC4_SetConfig+0xbc>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC4_SetConfig+0xc0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC4_SetConfig+0xc4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC4_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_OC4_SetConfig+0x78>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <TIM_OC4_SetConfig+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC4_SetConfig+0xd0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b006      	add	sp, #24
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	ffffefff 	.word	0xffffefff
 8004be8:	ffff8fff 	.word	0xffff8fff
 8004bec:	fffffcff 	.word	0xfffffcff
 8004bf0:	ffffdfff 	.word	0xffffdfff
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	ffffbfff 	.word	0xffffbfff

08004c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4393      	bics	r3, r2
 8004c22:	001a      	movs	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	22f0      	movs	r2, #240	; 0xf0
 8004c32:	4393      	bics	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	220a      	movs	r2, #10
 8004c44:	4393      	bics	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b006      	add	sp, #24
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	2210      	movs	r2, #16
 8004c76:	4393      	bics	r3, r2
 8004c78:	001a      	movs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <TIM_TI2_ConfigInputStage+0x60>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	22a0      	movs	r2, #160	; 0xa0
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b006      	add	sp, #24
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	ffff0fff 	.word	0xffff0fff

08004cc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2270      	movs	r2, #112	; 0x70
 8004cdc:	4393      	bics	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	2207      	movs	r2, #7
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <TIM_ETR_SetConfig+0x3c>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b006      	add	sp, #24
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	ffff00ff 	.word	0xffff00ff

08004d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	221f      	movs	r2, #31
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	0013      	movs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	43d2      	mvns	r2, r2
 8004d5e:	401a      	ands	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	211f      	movs	r1, #31
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4099      	lsls	r1, r3
 8004d72:	000b      	movs	r3, r1
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b006      	add	sp, #24
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223c      	movs	r2, #60	; 0x3c
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e047      	b.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223c      	movs	r2, #60	; 0x3c
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	223d      	movs	r2, #61	; 0x3d
 8004da8:	2102      	movs	r1, #2
 8004daa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2270      	movs	r2, #112	; 0x70
 8004dc0:	4393      	bics	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	05db      	lsls	r3, r3, #23
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d009      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10c      	bne.n	8004e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	4393      	bics	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223d      	movs	r2, #61	; 0x3d
 8004e1e:	2101      	movs	r1, #1
 8004e20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223c      	movs	r2, #60	; 0x3c
 8004e26:	2100      	movs	r1, #0
 8004e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b004      	add	sp, #16
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40014000 	.word	0x40014000

08004e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	223c      	movs	r2, #60	; 0x3c
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e03e      	b.n	8004eda <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223c      	movs	r2, #60	; 0x3c
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	4393      	bics	r3, r2
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004e78:	401a      	ands	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004e86:	401a      	ands	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004e94:	401a      	ands	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	223c      	movs	r2, #60	; 0x3c
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b004      	add	sp, #16
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	fffffcff 	.word	0xfffffcff
 8004ee8:	fffffbff 	.word	0xfffffbff
 8004eec:	fffff7ff 	.word	0xfffff7ff
 8004ef0:	ffffefff 	.word	0xffffefff
 8004ef4:	ffffdfff 	.word	0xffffdfff
 8004ef8:	ffffbfff 	.word	0xffffbfff

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e044      	b.n	8004fb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2274      	movs	r2, #116	; 0x74
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7fc fb09 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2224      	movs	r2, #36	; 0x24
 8004f4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2101      	movs	r1, #1
 8004f58:	438a      	bics	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 fbce 	bl	8005700 <UART_SetConfig>
 8004f64:	0003      	movs	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e024      	b.n	8004fb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fd01 	bl	8005980 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	490d      	ldr	r1, [pc, #52]	; (8004fc0 <HAL_UART_Init+0xa4>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	212a      	movs	r1, #42	; 0x2a
 8004f9a:	438a      	bics	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 fd99 	bl	8005ae8 <UART_CheckIdleState>
 8004fb6:	0003      	movs	r3, r0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	ffffb7ff 	.word	0xffffb7ff

08004fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d000      	beq.n	8004fde <HAL_UART_Transmit+0x1a>
 8004fdc:	e096      	b.n	800510c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_UART_Transmit+0x28>
 8004fe4:	1dbb      	adds	r3, r7, #6
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e08e      	b.n	800510e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	015b      	lsls	r3, r3, #5
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d109      	bne.n	8005010 <HAL_UART_Transmit+0x4c>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	d001      	beq.n	8005010 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e07e      	b.n	800510e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2274      	movs	r2, #116	; 0x74
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit+0x5a>
 800501a:	2302      	movs	r3, #2
 800501c:	e077      	b.n	800510e <HAL_UART_Transmit+0x14a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2274      	movs	r2, #116	; 0x74
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	2100      	movs	r1, #0
 800502c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2221      	movs	r2, #33	; 0x21
 8005032:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005034:	f7fc fbc4 	bl	80017c0 <HAL_GetTick>
 8005038:	0003      	movs	r3, r0
 800503a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1dba      	adds	r2, r7, #6
 8005040:	2150      	movs	r1, #80	; 0x50
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1dba      	adds	r2, r7, #6
 800504a:	2152      	movs	r1, #82	; 0x52
 800504c:	8812      	ldrh	r2, [r2, #0]
 800504e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	429a      	cmp	r2, r3
 800505a:	d108      	bne.n	800506e <HAL_UART_Transmit+0xaa>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e003      	b.n	8005076 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2274      	movs	r2, #116	; 0x74
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800507e:	e02d      	b.n	80050dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	0013      	movs	r3, r2
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	f000 fd73 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d001      	beq.n	800509a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e039      	b.n	800510e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	881a      	ldrh	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	05d2      	lsls	r2, r2, #23
 80050aa:	0dd2      	lsrs	r2, r2, #23
 80050ac:	b292      	uxth	r2, r2
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	3302      	adds	r3, #2
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e008      	b.n	80050ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b292      	uxth	r2, r2
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2252      	movs	r2, #82	; 0x52
 80050ce:	5a9b      	ldrh	r3, [r3, r2]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b299      	uxth	r1, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2252      	movs	r2, #82	; 0x52
 80050da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2252      	movs	r2, #82	; 0x52
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1cb      	bne.n	8005080 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	0013      	movs	r3, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	f000 fd3f 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 80050fa:	1e03      	subs	r3, r0, #0
 80050fc:	d001      	beq.n	8005102 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e005      	b.n	800510e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b008      	add	sp, #32
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b0ab      	sub	sp, #172	; 0xac
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	22a4      	movs	r2, #164	; 0xa4
 8005128:	18b9      	adds	r1, r7, r2
 800512a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	20a0      	movs	r0, #160	; 0xa0
 8005134:	1839      	adds	r1, r7, r0
 8005136:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	219c      	movs	r1, #156	; 0x9c
 8005140:	1879      	adds	r1, r7, r1
 8005142:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005144:	0011      	movs	r1, r2
 8005146:	18bb      	adds	r3, r7, r2
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a99      	ldr	r2, [pc, #612]	; (80053b0 <HAL_UART_IRQHandler+0x298>)
 800514c:	4013      	ands	r3, r2
 800514e:	2298      	movs	r2, #152	; 0x98
 8005150:	18bc      	adds	r4, r7, r2
 8005152:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005154:	18bb      	adds	r3, r7, r2
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d114      	bne.n	8005186 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800515c:	187b      	adds	r3, r7, r1
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2220      	movs	r2, #32
 8005162:	4013      	ands	r3, r2
 8005164:	d00f      	beq.n	8005186 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005166:	183b      	adds	r3, r7, r0
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2220      	movs	r2, #32
 800516c:	4013      	ands	r3, r2
 800516e:	d00a      	beq.n	8005186 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	2b00      	cmp	r3, #0
 8005176:	d100      	bne.n	800517a <HAL_UART_IRQHandler+0x62>
 8005178:	e296      	b.n	80056a8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	0010      	movs	r0, r2
 8005182:	4798      	blx	r3
      }
      return;
 8005184:	e290      	b.n	80056a8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005186:	2398      	movs	r3, #152	; 0x98
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d100      	bne.n	8005192 <HAL_UART_IRQHandler+0x7a>
 8005190:	e114      	b.n	80053bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005192:	239c      	movs	r3, #156	; 0x9c
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	4013      	ands	r3, r2
 800519c:	d106      	bne.n	80051ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800519e:	23a0      	movs	r3, #160	; 0xa0
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a83      	ldr	r2, [pc, #524]	; (80053b4 <HAL_UART_IRQHandler+0x29c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	d100      	bne.n	80051ac <HAL_UART_IRQHandler+0x94>
 80051aa:	e107      	b.n	80053bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051ac:	23a4      	movs	r3, #164	; 0xa4
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	4013      	ands	r3, r2
 80051b6:	d012      	beq.n	80051de <HAL_UART_IRQHandler+0xc6>
 80051b8:	23a0      	movs	r3, #160	; 0xa0
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4013      	ands	r3, r2
 80051c4:	d00b      	beq.n	80051de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	589b      	ldr	r3, [r3, r2]
 80051d4:	2201      	movs	r2, #1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2180      	movs	r1, #128	; 0x80
 80051dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051de:	23a4      	movs	r3, #164	; 0xa4
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2202      	movs	r2, #2
 80051e6:	4013      	ands	r3, r2
 80051e8:	d011      	beq.n	800520e <HAL_UART_IRQHandler+0xf6>
 80051ea:	239c      	movs	r3, #156	; 0x9c
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	4013      	ands	r3, r2
 80051f4:	d00b      	beq.n	800520e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2202      	movs	r2, #2
 80051fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2280      	movs	r2, #128	; 0x80
 8005202:	589b      	ldr	r3, [r3, r2]
 8005204:	2204      	movs	r2, #4
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800520e:	23a4      	movs	r3, #164	; 0xa4
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2204      	movs	r2, #4
 8005216:	4013      	ands	r3, r2
 8005218:	d011      	beq.n	800523e <HAL_UART_IRQHandler+0x126>
 800521a:	239c      	movs	r3, #156	; 0x9c
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2201      	movs	r2, #1
 8005222:	4013      	ands	r3, r2
 8005224:	d00b      	beq.n	800523e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2204      	movs	r2, #4
 800522c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	589b      	ldr	r3, [r3, r2]
 8005234:	2202      	movs	r2, #2
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800523e:	23a4      	movs	r3, #164	; 0xa4
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	4013      	ands	r3, r2
 8005248:	d017      	beq.n	800527a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800524a:	23a0      	movs	r3, #160	; 0xa0
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2220      	movs	r2, #32
 8005252:	4013      	ands	r3, r2
 8005254:	d105      	bne.n	8005262 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005256:	239c      	movs	r3, #156	; 0x9c
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2201      	movs	r2, #1
 800525e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005260:	d00b      	beq.n	800527a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2208      	movs	r2, #8
 8005268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2280      	movs	r2, #128	; 0x80
 800526e:	589b      	ldr	r3, [r3, r2]
 8005270:	2208      	movs	r2, #8
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800527a:	23a4      	movs	r3, #164	; 0xa4
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	4013      	ands	r3, r2
 8005286:	d013      	beq.n	80052b0 <HAL_UART_IRQHandler+0x198>
 8005288:	23a0      	movs	r3, #160	; 0xa0
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	04db      	lsls	r3, r3, #19
 8005292:	4013      	ands	r3, r2
 8005294:	d00c      	beq.n	80052b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	0112      	lsls	r2, r2, #4
 800529e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	589b      	ldr	r3, [r3, r2]
 80052a6:	2220      	movs	r2, #32
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	589b      	ldr	r3, [r3, r2]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d100      	bne.n	80052bc <HAL_UART_IRQHandler+0x1a4>
 80052ba:	e1f7      	b.n	80056ac <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052bc:	23a4      	movs	r3, #164	; 0xa4
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2220      	movs	r2, #32
 80052c4:	4013      	ands	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052c8:	23a0      	movs	r3, #160	; 0xa0
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2220      	movs	r2, #32
 80052d0:	4013      	ands	r3, r2
 80052d2:	d008      	beq.n	80052e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	0010      	movs	r0, r2
 80052e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	589b      	ldr	r3, [r3, r2]
 80052ec:	2194      	movs	r1, #148	; 0x94
 80052ee:	187a      	adds	r2, r7, r1
 80052f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2240      	movs	r2, #64	; 0x40
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d004      	beq.n	800530a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005300:	187b      	adds	r3, r7, r1
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2228      	movs	r2, #40	; 0x28
 8005306:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005308:	d047      	beq.n	800539a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 fcf7 	bl	8005d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2240      	movs	r2, #64	; 0x40
 800531a:	4013      	ands	r3, r2
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d137      	bne.n	8005390 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005328:	2090      	movs	r0, #144	; 0x90
 800532a:	183a      	adds	r2, r7, r0
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	2301      	movs	r3, #1
 8005330:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	438a      	bics	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	183b      	adds	r3, r7, r0
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005352:	f383 8810 	msr	PRIMASK, r3
}
 8005356:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <HAL_UART_IRQHandler+0x2a0>)
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	0018      	movs	r0, r3
 800536e:	f7fd f87f 	bl	8002470 <HAL_DMA_Abort_IT>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d01a      	beq.n	80053ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	0018      	movs	r0, r3
 8005382:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	e012      	b.n	80053ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	0018      	movs	r0, r3
 800538a:	f000 f9a5 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538e:	e00d      	b.n	80053ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0018      	movs	r0, r3
 8005394:	f000 f9a0 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e008      	b.n	80053ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f000 f99b 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2280      	movs	r2, #128	; 0x80
 80053a6:	2100      	movs	r1, #0
 80053a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80053aa:	e17f      	b.n	80056ac <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	46c0      	nop			; (mov r8, r8)
    return;
 80053ae:	e17d      	b.n	80056ac <HAL_UART_IRQHandler+0x594>
 80053b0:	0000080f 	.word	0x0000080f
 80053b4:	04000120 	.word	0x04000120
 80053b8:	08005dc5 	.word	0x08005dc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d000      	beq.n	80053c6 <HAL_UART_IRQHandler+0x2ae>
 80053c4:	e131      	b.n	800562a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053c6:	23a4      	movs	r3, #164	; 0xa4
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	4013      	ands	r3, r2
 80053d0:	d100      	bne.n	80053d4 <HAL_UART_IRQHandler+0x2bc>
 80053d2:	e12a      	b.n	800562a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053d4:	23a0      	movs	r3, #160	; 0xa0
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	4013      	ands	r3, r2
 80053de:	d100      	bne.n	80053e2 <HAL_UART_IRQHandler+0x2ca>
 80053e0:	e123      	b.n	800562a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2210      	movs	r2, #16
 80053e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d000      	beq.n	80053fa <HAL_UART_IRQHandler+0x2e2>
 80053f8:	e09b      	b.n	8005532 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	217e      	movs	r1, #126	; 0x7e
 8005404:	187b      	adds	r3, r7, r1
 8005406:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005408:	187b      	adds	r3, r7, r1
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d100      	bne.n	8005412 <HAL_UART_IRQHandler+0x2fa>
 8005410:	e14e      	b.n	80056b0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2258      	movs	r2, #88	; 0x58
 8005416:	5a9b      	ldrh	r3, [r3, r2]
 8005418:	187a      	adds	r2, r7, r1
 800541a:	8812      	ldrh	r2, [r2, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d300      	bcc.n	8005422 <HAL_UART_IRQHandler+0x30a>
 8005420:	e146      	b.n	80056b0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	187a      	adds	r2, r7, r1
 8005426:	215a      	movs	r1, #90	; 0x5a
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b20      	cmp	r3, #32
 8005434:	d06e      	beq.n	8005514 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005436:	f3ef 8310 	mrs	r3, PRIMASK
 800543a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005440:	2301      	movs	r3, #1
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	f383 8810 	msr	PRIMASK, r3
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	499a      	ldr	r1, [pc, #616]	; (80056c0 <HAL_UART_IRQHandler+0x5a8>)
 8005458:	400a      	ands	r2, r1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800545e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	f383 8810 	msr	PRIMASK, r3
}
 8005466:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005468:	f3ef 8310 	mrs	r3, PRIMASK
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	677b      	str	r3, [r7, #116]	; 0x74
 8005472:	2301      	movs	r3, #1
 8005474:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005478:	f383 8810 	msr	PRIMASK, r3
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	438a      	bics	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005494:	f383 8810 	msr	PRIMASK, r3
}
 8005498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549a:	f3ef 8310 	mrs	r3, PRIMASK
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80054a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	673b      	str	r3, [r7, #112]	; 0x70
 80054a4:	2301      	movs	r3, #1
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2140      	movs	r1, #64	; 0x40
 80054bc:	438a      	bics	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d8:	f3ef 8310 	mrs	r3, PRIMASK
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80054de:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e2:	2301      	movs	r3, #1
 80054e4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2110      	movs	r1, #16
 80054fa:	438a      	bics	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005504:	f383 8810 	msr	PRIMASK, r3
}
 8005508:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	0018      	movs	r0, r3
 8005510:	f7fc ff76 	bl	8002400 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2258      	movs	r2, #88	; 0x58
 8005518:	5a9a      	ldrh	r2, [r3, r2]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	215a      	movs	r1, #90	; 0x5a
 800551e:	5a5b      	ldrh	r3, [r3, r1]
 8005520:	b29b      	uxth	r3, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0011      	movs	r1, r2
 800552a:	0018      	movs	r0, r3
 800552c:	f000 f8dc 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005530:	e0be      	b.n	80056b0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2258      	movs	r2, #88	; 0x58
 8005536:	5a99      	ldrh	r1, [r3, r2]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	225a      	movs	r2, #90	; 0x5a
 800553c:	5a9b      	ldrh	r3, [r3, r2]
 800553e:	b29a      	uxth	r2, r3
 8005540:	208e      	movs	r0, #142	; 0x8e
 8005542:	183b      	adds	r3, r7, r0
 8005544:	1a8a      	subs	r2, r1, r2
 8005546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	225a      	movs	r2, #90	; 0x5a
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d100      	bne.n	8005556 <HAL_UART_IRQHandler+0x43e>
 8005554:	e0ae      	b.n	80056b4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005556:	183b      	adds	r3, r7, r0
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d100      	bne.n	8005560 <HAL_UART_IRQHandler+0x448>
 800555e:	e0a9      	b.n	80056b4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005560:	f3ef 8310 	mrs	r3, PRIMASK
 8005564:	60fb      	str	r3, [r7, #12]
  return(result);
 8005566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005568:	2488      	movs	r4, #136	; 0x88
 800556a:	193a      	adds	r2, r7, r4
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	2301      	movs	r3, #1
 8005570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f383 8810 	msr	PRIMASK, r3
}
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	494f      	ldr	r1, [pc, #316]	; (80056c4 <HAL_UART_IRQHandler+0x5ac>)
 8005586:	400a      	ands	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	193b      	adds	r3, r7, r4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	61bb      	str	r3, [r7, #24]
  return(result);
 800559e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	2484      	movs	r4, #132	; 0x84
 80055a2:	193a      	adds	r2, r7, r4
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	2301      	movs	r3, #1
 80055a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2101      	movs	r1, #1
 80055be:	438a      	bics	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	193b      	adds	r3, r7, r4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	2480      	movs	r4, #128	; 0x80
 80055ec:	193a      	adds	r2, r7, r4
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	2301      	movs	r3, #1
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2110      	movs	r1, #16
 8005608:	438a      	bics	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	193b      	adds	r3, r7, r4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	f383 8810 	msr	PRIMASK, r3
}
 8005618:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800561a:	183b      	adds	r3, r7, r0
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0011      	movs	r1, r2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f860 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005628:	e044      	b.n	80056b4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800562a:	23a4      	movs	r3, #164	; 0xa4
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	035b      	lsls	r3, r3, #13
 8005634:	4013      	ands	r3, r2
 8005636:	d010      	beq.n	800565a <HAL_UART_IRQHandler+0x542>
 8005638:	239c      	movs	r3, #156	; 0x9c
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	03db      	lsls	r3, r3, #15
 8005642:	4013      	ands	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	0352      	lsls	r2, r2, #13
 800564e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 fbf8 	bl	8005e48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005658:	e02f      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800565a:	23a4      	movs	r3, #164	; 0xa4
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2280      	movs	r2, #128	; 0x80
 8005662:	4013      	ands	r3, r2
 8005664:	d00f      	beq.n	8005686 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005666:	23a0      	movs	r3, #160	; 0xa0
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	4013      	ands	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01e      	beq.n	80056b8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	0010      	movs	r0, r2
 8005682:	4798      	blx	r3
    }
    return;
 8005684:	e018      	b.n	80056b8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005686:	23a4      	movs	r3, #164	; 0xa4
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	4013      	ands	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_UART_IRQHandler+0x5a2>
 8005692:	23a0      	movs	r3, #160	; 0xa0
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2240      	movs	r2, #64	; 0x40
 800569a:	4013      	ands	r3, r2
 800569c:	d00d      	beq.n	80056ba <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 fba6 	bl	8005df2 <UART_EndTransmit_IT>
    return;
 80056a6:	e008      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80056a8:	46c0      	nop			; (mov r8, r8)
 80056aa:	e006      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	e004      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	e002      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	e000      	b.n	80056ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80056b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b02b      	add	sp, #172	; 0xac
 80056be:	bd90      	pop	{r4, r7, pc}
 80056c0:	fffffeff 	.word	0xfffffeff
 80056c4:	fffffedf 	.word	0xfffffedf

080056c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b002      	add	sp, #8
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	000a      	movs	r2, r1
 80056f2:	1cbb      	adds	r3, r7, #2
 80056f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b002      	add	sp, #8
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005708:	231e      	movs	r3, #30
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a8d      	ldr	r2, [pc, #564]	; (8005964 <UART_SetConfig+0x264>)
 8005730:	4013      	ands	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4a88      	ldr	r2, [pc, #544]	; (8005968 <UART_SetConfig+0x268>)
 8005746:	4013      	ands	r3, r2
 8005748:	0019      	movs	r1, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a7f      	ldr	r2, [pc, #508]	; (800596c <UART_SetConfig+0x26c>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a7b      	ldr	r2, [pc, #492]	; (8005970 <UART_SetConfig+0x270>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d127      	bne.n	80057d6 <UART_SetConfig+0xd6>
 8005786:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <UART_SetConfig+0x274>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	2203      	movs	r2, #3
 800578c:	4013      	ands	r3, r2
 800578e:	2b03      	cmp	r3, #3
 8005790:	d00d      	beq.n	80057ae <UART_SetConfig+0xae>
 8005792:	d81b      	bhi.n	80057cc <UART_SetConfig+0xcc>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d014      	beq.n	80057c2 <UART_SetConfig+0xc2>
 8005798:	d818      	bhi.n	80057cc <UART_SetConfig+0xcc>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <UART_SetConfig+0xa4>
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d00a      	beq.n	80057b8 <UART_SetConfig+0xb8>
 80057a2:	e013      	b.n	80057cc <UART_SetConfig+0xcc>
 80057a4:	231f      	movs	r3, #31
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e021      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057ae:	231f      	movs	r3, #31
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2202      	movs	r2, #2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e01c      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057b8:	231f      	movs	r3, #31
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	2204      	movs	r2, #4
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e017      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057c2:	231f      	movs	r3, #31
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2208      	movs	r2, #8
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e012      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057cc:	231f      	movs	r3, #31
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2210      	movs	r2, #16
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e00d      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a67      	ldr	r2, [pc, #412]	; (8005978 <UART_SetConfig+0x278>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d104      	bne.n	80057ea <UART_SetConfig+0xea>
 80057e0:	231f      	movs	r3, #31
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e003      	b.n	80057f2 <UART_SetConfig+0xf2>
 80057ea:	231f      	movs	r3, #31
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2210      	movs	r2, #16
 80057f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d15d      	bne.n	80058ba <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80057fe:	231f      	movs	r3, #31
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d015      	beq.n	8005834 <UART_SetConfig+0x134>
 8005808:	dc18      	bgt.n	800583c <UART_SetConfig+0x13c>
 800580a:	2b04      	cmp	r3, #4
 800580c:	d00d      	beq.n	800582a <UART_SetConfig+0x12a>
 800580e:	dc15      	bgt.n	800583c <UART_SetConfig+0x13c>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <UART_SetConfig+0x11a>
 8005814:	2b02      	cmp	r3, #2
 8005816:	d005      	beq.n	8005824 <UART_SetConfig+0x124>
 8005818:	e010      	b.n	800583c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581a:	f7fd fe87 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 800581e:	0003      	movs	r3, r0
 8005820:	61bb      	str	r3, [r7, #24]
        break;
 8005822:	e012      	b.n	800584a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b55      	ldr	r3, [pc, #340]	; (800597c <UART_SetConfig+0x27c>)
 8005826:	61bb      	str	r3, [r7, #24]
        break;
 8005828:	e00f      	b.n	800584a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd fe11 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800582e:	0003      	movs	r3, r0
 8005830:	61bb      	str	r3, [r7, #24]
        break;
 8005832:	e00a      	b.n	800584a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	61bb      	str	r3, [r7, #24]
        break;
 800583a:	e006      	b.n	800584a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005840:	231e      	movs	r3, #30
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
        break;
 8005848:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d100      	bne.n	8005852 <UART_SetConfig+0x152>
 8005850:	e07b      	b.n	800594a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	005a      	lsls	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	0019      	movs	r1, r3
 8005864:	0010      	movs	r0, r2
 8005866:	f7fa fc4f 	bl	8000108 <__udivsi3>
 800586a:	0003      	movs	r3, r0
 800586c:	b29b      	uxth	r3, r3
 800586e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d91c      	bls.n	80058b0 <UART_SetConfig+0x1b0>
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	025b      	lsls	r3, r3, #9
 800587c:	429a      	cmp	r2, r3
 800587e:	d217      	bcs.n	80058b0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	b29a      	uxth	r2, r3
 8005884:	200e      	movs	r0, #14
 8005886:	183b      	adds	r3, r7, r0
 8005888:	210f      	movs	r1, #15
 800588a:	438a      	bics	r2, r1
 800588c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	2207      	movs	r2, #7
 8005896:	4013      	ands	r3, r2
 8005898:	b299      	uxth	r1, r3
 800589a:	183b      	adds	r3, r7, r0
 800589c:	183a      	adds	r2, r7, r0
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	183a      	adds	r2, r7, r0
 80058aa:	8812      	ldrh	r2, [r2, #0]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e04c      	b.n	800594a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80058b0:	231e      	movs	r3, #30
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e047      	b.n	800594a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ba:	231f      	movs	r3, #31
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d015      	beq.n	80058f0 <UART_SetConfig+0x1f0>
 80058c4:	dc18      	bgt.n	80058f8 <UART_SetConfig+0x1f8>
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d00d      	beq.n	80058e6 <UART_SetConfig+0x1e6>
 80058ca:	dc15      	bgt.n	80058f8 <UART_SetConfig+0x1f8>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <UART_SetConfig+0x1d6>
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d005      	beq.n	80058e0 <UART_SetConfig+0x1e0>
 80058d4:	e010      	b.n	80058f8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d6:	f7fd fe29 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 80058da:	0003      	movs	r3, r0
 80058dc:	61bb      	str	r3, [r7, #24]
        break;
 80058de:	e012      	b.n	8005906 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <UART_SetConfig+0x27c>)
 80058e2:	61bb      	str	r3, [r7, #24]
        break;
 80058e4:	e00f      	b.n	8005906 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fd fdb3 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 80058ea:	0003      	movs	r3, r0
 80058ec:	61bb      	str	r3, [r7, #24]
        break;
 80058ee:	e00a      	b.n	8005906 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	61bb      	str	r3, [r7, #24]
        break;
 80058f6:	e006      	b.n	8005906 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058fc:	231e      	movs	r3, #30
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
        break;
 8005904:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01e      	beq.n	800594a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	085a      	lsrs	r2, r3, #1
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	18d2      	adds	r2, r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	0019      	movs	r1, r3
 800591c:	0010      	movs	r0, r2
 800591e:	f7fa fbf3 	bl	8000108 <__udivsi3>
 8005922:	0003      	movs	r3, r0
 8005924:	b29b      	uxth	r3, r3
 8005926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d909      	bls.n	8005942 <UART_SetConfig+0x242>
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	025b      	lsls	r3, r3, #9
 8005934:	429a      	cmp	r2, r3
 8005936:	d204      	bcs.n	8005942 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	e003      	b.n	800594a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005942:	231e      	movs	r3, #30
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005956:	231e      	movs	r3, #30
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	781b      	ldrb	r3, [r3, #0]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b008      	add	sp, #32
 8005962:	bd80      	pop	{r7, pc}
 8005964:	ffff69f3 	.word	0xffff69f3
 8005968:	ffffcfff 	.word	0xffffcfff
 800596c:	fffff4ff 	.word	0xfffff4ff
 8005970:	40013800 	.word	0x40013800
 8005974:	40021000 	.word	0x40021000
 8005978:	40004400 	.word	0x40004400
 800597c:	007a1200 	.word	0x007a1200

08005980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	2201      	movs	r2, #1
 800598e:	4013      	ands	r3, r2
 8005990:	d00b      	beq.n	80059aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <UART_AdvFeatureConfig+0x144>)
 800599a:	4013      	ands	r3, r2
 800599c:	0019      	movs	r1, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2202      	movs	r2, #2
 80059b0:	4013      	ands	r3, r2
 80059b2:	d00b      	beq.n	80059cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4a43      	ldr	r2, [pc, #268]	; (8005ac8 <UART_AdvFeatureConfig+0x148>)
 80059bc:	4013      	ands	r3, r2
 80059be:	0019      	movs	r1, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2204      	movs	r2, #4
 80059d2:	4013      	ands	r3, r2
 80059d4:	d00b      	beq.n	80059ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <UART_AdvFeatureConfig+0x14c>)
 80059de:	4013      	ands	r3, r2
 80059e0:	0019      	movs	r1, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2208      	movs	r2, #8
 80059f4:	4013      	ands	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <UART_AdvFeatureConfig+0x150>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	0019      	movs	r1, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2210      	movs	r2, #16
 8005a16:	4013      	ands	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <UART_AdvFeatureConfig+0x154>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	0019      	movs	r1, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2220      	movs	r2, #32
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d00b      	beq.n	8005a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <UART_AdvFeatureConfig+0x158>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	0019      	movs	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2240      	movs	r2, #64	; 0x40
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d01d      	beq.n	8005a9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <UART_AdvFeatureConfig+0x15c>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	035b      	lsls	r3, r3, #13
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d10b      	bne.n	8005a9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <UART_AdvFeatureConfig+0x160>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2280      	movs	r2, #128	; 0x80
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <UART_AdvFeatureConfig+0x164>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	fffdffff 	.word	0xfffdffff
 8005ac8:	fffeffff 	.word	0xfffeffff
 8005acc:	fffbffff 	.word	0xfffbffff
 8005ad0:	ffff7fff 	.word	0xffff7fff
 8005ad4:	ffffefff 	.word	0xffffefff
 8005ad8:	ffffdfff 	.word	0xffffdfff
 8005adc:	ffefffff 	.word	0xffefffff
 8005ae0:	ff9fffff 	.word	0xff9fffff
 8005ae4:	fff7ffff 	.word	0xfff7ffff

08005ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	2100      	movs	r1, #0
 8005af6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af8:	f7fb fe62 	bl	80017c0 <HAL_GetTick>
 8005afc:	0003      	movs	r3, r0
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2208      	movs	r2, #8
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d10c      	bne.n	8005b28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	0391      	lsls	r1, r2, #14
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <UART_CheckIdleState+0x8c>)
 8005b18:	9200      	str	r2, [sp, #0]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f000 f82c 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005b20:	1e03      	subs	r3, r0, #0
 8005b22:	d001      	beq.n	8005b28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e021      	b.n	8005b6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2204      	movs	r2, #4
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d10c      	bne.n	8005b50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	03d1      	lsls	r1, r2, #15
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <UART_CheckIdleState+0x8c>)
 8005b40:	9200      	str	r2, [sp, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f000 f818 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d001      	beq.n	8005b50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e00d      	b.n	8005b6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2274      	movs	r2, #116	; 0x74
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	01ffffff 	.word	0x01ffffff

08005b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b094      	sub	sp, #80	; 0x50
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	1dfb      	adds	r3, r7, #7
 8005b86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	e0a3      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	d100      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b90:	e09f      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fb fe15 	bl	80017c0 <HAL_GetTick>
 8005b96:	0002      	movs	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d13d      	bne.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	f383 8810 	msr	PRIMASK, r3
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	494c      	ldr	r1, [pc, #304]	; (8005cfc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005bca:	400a      	ands	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	f383 8810 	msr	PRIMASK, r3
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bda:	f3ef 8310 	mrs	r3, PRIMASK
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	643b      	str	r3, [r7, #64]	; 0x40
 8005be4:	2301      	movs	r3, #1
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	438a      	bics	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2274      	movs	r2, #116	; 0x74
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e067      	b.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d050      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d146      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	0112      	lsls	r2, r2, #4
 8005c4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c52:	613b      	str	r3, [r7, #16]
  return(result);
 8005c54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4923      	ldr	r1, [pc, #140]	; (8005cfc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c80:	f3ef 8310 	mrs	r3, PRIMASK
 8005c84:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c86:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	438a      	bics	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	2120      	movs	r1, #32
 8005cc4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2274      	movs	r2, #116	; 0x74
 8005cca:	2100      	movs	r1, #0
 8005ccc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e010      	b.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	425a      	negs	r2, r3
 8005ce2:	4153      	adcs	r3, r2
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	1dfb      	adds	r3, r7, #7
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d100      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005cf0:	e74b      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b014      	add	sp, #80	; 0x50
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	fffffe5f 	.word	0xfffffe5f

08005d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08e      	sub	sp, #56	; 0x38
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d08:	f3ef 8310 	mrs	r3, PRIMASK
 8005d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
 8005d12:	2301      	movs	r3, #1
 8005d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f383 8810 	msr	PRIMASK, r3
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4925      	ldr	r1, [pc, #148]	; (8005dc0 <UART_EndRxTransfer+0xc0>)
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8005d40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
 8005d44:	2301      	movs	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d118      	bne.n	8005da6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d74:	f3ef 8310 	mrs	r3, PRIMASK
 8005d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7e:	2301      	movs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f383 8810 	msr	PRIMASK, r3
}
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2110      	movs	r1, #16
 8005d96:	438a      	bics	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b00e      	add	sp, #56	; 0x38
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	fffffedf 	.word	0xfffffedf

08005dc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	225a      	movs	r2, #90	; 0x5a
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2252      	movs	r2, #82	; 0x52
 8005dde:	2100      	movs	r1, #0
 8005de0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7ff fc77 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b004      	add	sp, #16
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e00:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	2301      	movs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f383 8810 	msr	PRIMASK, r3
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2140      	movs	r1, #64	; 0x40
 8005e1c:	438a      	bics	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f383 8810 	msr	PRIMASK, r3
}
 8005e2a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f7ff fc44 	bl	80056c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e40:	46c0      	nop			; (mov r8, r8)
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b006      	add	sp, #24
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b002      	add	sp, #8
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	6019      	str	r1, [r3, #0]
 8005e64:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2317      	movs	r3, #23
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2274      	movs	r2, #116	; 0x74
 8005e72:	5c9b      	ldrb	r3, [r3, r2]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e04a      	b.n	8005f12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2274      	movs	r2, #116	; 0x74
 8005e80:	2101      	movs	r1, #1
 8005e82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2224      	movs	r2, #36	; 0x24
 8005e88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	438a      	bics	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	0019      	movs	r1, r3
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	f000 f860 	bl	8005f86 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed6:	f7fb fc73 	bl	80017c0 <HAL_GetTick>
 8005eda:	0003      	movs	r3, r0
 8005edc:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2280      	movs	r2, #128	; 0x80
 8005ee2:	03d1      	lsls	r1, r2, #15
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8005ee8:	9200      	str	r2, [sp, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f7ff fe44 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	1e03      	subs	r3, r0, #0
 8005ef2:	d004      	beq.n	8005efe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8005ef4:	2317      	movs	r3, #23
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2203      	movs	r2, #3
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e002      	b.n	8005f04 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2274      	movs	r2, #116	; 0x74
 8005f08:	2100      	movs	r1, #0
 8005f0a:	5499      	strb	r1, [r3, r2]

  return status;
 8005f0c:	2317      	movs	r3, #23
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	781b      	ldrb	r3, [r3, #0]
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b006      	add	sp, #24
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	ffcfffff 	.word	0xffcfffff
 8005f20:	01ffffff 	.word	0x01ffffff

08005f24 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2274      	movs	r2, #116	; 0x74
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_EnableStopMode+0x16>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e021      	b.n	8005f7e <HAL_UARTEx_EnableStopMode+0x5a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2274      	movs	r2, #116	; 0x74
 8005f3e:	2101      	movs	r1, #1
 8005f40:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f42:	f3ef 8310 	mrs	r3, PRIMASK
 8005f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f48:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2102      	movs	r1, #2
 8005f64:	430a      	orrs	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f383 8810 	msr	PRIMASK, r3
}
 8005f72:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2274      	movs	r2, #116	; 0x74
 8005f78:	2100      	movs	r1, #0
 8005f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b006      	add	sp, #24
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	6019      	str	r1, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	4393      	bics	r3, r2
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	889b      	ldrh	r3, [r3, #4]
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	0a19      	lsrs	r1, r3, #8
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	799b      	ldrb	r3, [r3, #6]
 8005fbc:	061a      	lsls	r2, r3, #24
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b004      	add	sp, #16
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <__libc_init_array>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	4d0c      	ldr	r5, [pc, #48]	; (8006008 <__libc_init_array+0x38>)
 8005fd6:	4c0d      	ldr	r4, [pc, #52]	; (800600c <__libc_init_array+0x3c>)
 8005fd8:	1b64      	subs	r4, r4, r5
 8005fda:	10a4      	asrs	r4, r4, #2
 8005fdc:	42a6      	cmp	r6, r4
 8005fde:	d109      	bne.n	8005ff4 <__libc_init_array+0x24>
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	f000 f821 	bl	8006028 <_init>
 8005fe6:	4d0a      	ldr	r5, [pc, #40]	; (8006010 <__libc_init_array+0x40>)
 8005fe8:	4c0a      	ldr	r4, [pc, #40]	; (8006014 <__libc_init_array+0x44>)
 8005fea:	1b64      	subs	r4, r4, r5
 8005fec:	10a4      	asrs	r4, r4, #2
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	d105      	bne.n	8005ffe <__libc_init_array+0x2e>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	00b3      	lsls	r3, r6, #2
 8005ff6:	58eb      	ldr	r3, [r5, r3]
 8005ff8:	4798      	blx	r3
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7ee      	b.n	8005fdc <__libc_init_array+0xc>
 8005ffe:	00b3      	lsls	r3, r6, #2
 8006000:	58eb      	ldr	r3, [r5, r3]
 8006002:	4798      	blx	r3
 8006004:	3601      	adds	r6, #1
 8006006:	e7f2      	b.n	8005fee <__libc_init_array+0x1e>
 8006008:	0800607c 	.word	0x0800607c
 800600c:	0800607c 	.word	0x0800607c
 8006010:	0800607c 	.word	0x0800607c
 8006014:	08006080 	.word	0x08006080

08006018 <memset>:
 8006018:	0003      	movs	r3, r0
 800601a:	1882      	adds	r2, r0, r2
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	7019      	strb	r1, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
