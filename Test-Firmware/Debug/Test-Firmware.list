
Test-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000740c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a4  080075a4  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080075a4  080075a4  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075a4  080075a4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080075ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000034  080075e0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080075e0  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164a7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  00036503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00039178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018610  00000000  00000000  0004edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074efc  00000000  00000000  00067404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dc350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080074b4 	.word	0x080074b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080074b4 	.word	0x080074b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b095      	sub	sp, #84	; 0x54
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bd1      	ldr	r3, [pc, #836]	; (8000594 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d001      	beq.n	8000258 <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000254:	f000 fb9c 	bl	8000990 <HAL_TIM_OC_DelayElapsedCallback+0x74c>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000258:	4bcf      	ldr	r3, [pc, #828]	; (8000598 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d100      	bne.n	8000262 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
 8000260:	e0ba      	b.n	80003d8 <HAL_TIM_OC_DelayElapsedCallback+0x194>
      {
    	int current_count = ERPA_COUNTER;
 8000262:	4bce      	ldr	r3, [pc, #824]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	63bb      	str	r3, [r7, #56]	; 0x38
    	int current_cadence = ERPA_CADENCE;
 8000268:	4bcd      	ldr	r3, [pc, #820]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
    	if (ERPA_COUNTER == ERPA_CADENCE) {
 800026e:	4bcc      	ldr	r3, [pc, #816]	; (80005a0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	001a      	movs	r2, r3
 8000274:	4bc9      	ldr	r3, [pc, #804]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	429a      	cmp	r2, r3
 800027a:	d000      	beq.n	800027e <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 800027c:	e0a7      	b.n	80003ce <HAL_TIM_OC_DelayElapsedCallback+0x18a>
			 * +/- 0.5v Every 100ms
			 */

			/* Write to SPI (begin transfer?) */

			while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	4ac7      	ldr	r2, [pc, #796]	; (80005a4 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 8000286:	0019      	movs	r1, r3
 8000288:	0010      	movs	r0, r2
 800028a:	f002 ff37 	bl	80030fc <HAL_GPIO_ReadPin>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d1f6      	bne.n	8000280 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			 * Steps DAC
			 * +/- 0.5v Every 100ms
			*/

			  /* Write to SPI (begin transfer?) */
			HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000292:	49c5      	ldr	r1, [pc, #788]	; (80005a8 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 8000294:	48c5      	ldr	r0, [pc, #788]	; (80005ac <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 8000296:	2301      	movs	r3, #1
 8000298:	2201      	movs	r2, #1
 800029a:	f004 fad5 	bl	8004848 <HAL_SPI_Transmit>
			SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 800029e:	4bc4      	ldr	r3, [pc, #784]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4bc3      	ldr	r3, [pc, #780]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002a4:	49c3      	ldr	r1, [pc, #780]	; (80005b4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 80002a6:	400a      	ands	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
			while (!(SPI2->SR));
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	4bc0      	ldr	r3, [pc, #768]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0fb      	beq.n	80002ac <HAL_TIM_OC_DelayElapsedCallback+0x68>
			erpa_raw = SPI2->DR;
 80002b4:	4bbe      	ldr	r3, [pc, #760]	; (80005b0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	001a      	movs	r2, r3
 80002ba:	4bbf      	ldr	r3, [pc, #764]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 80002bc:	601a      	str	r2, [r3, #0]


			DAC->DHR12R1 = DAC_OUT[step];
 80002be:	4bbf      	ldr	r3, [pc, #764]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0019      	movs	r1, r3
 80002c4:	4bbe      	ldr	r3, [pc, #760]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 80002c6:	4abf      	ldr	r2, [pc, #764]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 80002c8:	0089      	lsls	r1, r1, #2
 80002ca:	588a      	ldr	r2, [r1, r2]
 80002cc:	609a      	str	r2, [r3, #8]

			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002ce:	2311      	movs	r3, #17
 80002d0:	001a      	movs	r2, r3
 80002d2:	49bd      	ldr	r1, [pc, #756]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002d4:	4bbd      	ldr	r3, [pc, #756]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 ff62 	bl	80021a0 <HAL_ADC_Start_DMA>
							  adcChannelCount);
			uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80002dc:	2132      	movs	r1, #50	; 0x32
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	4ab9      	ldr	r2, [pc, #740]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002e2:	8812      	ldrh	r2, [r2, #0]
 80002e4:	801a      	strh	r2, [r3, #0]
			uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002e6:	2030      	movs	r0, #48	; 0x30
 80002e8:	183b      	adds	r3, r7, r0
 80002ea:	4ab7      	ldr	r2, [pc, #732]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002ec:	8992      	ldrh	r2, [r2, #12]
 80002ee:	801a      	strh	r2, [r3, #0]
			uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002f0:	242e      	movs	r4, #46	; 0x2e
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	4ab4      	ldr	r2, [pc, #720]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 80002f6:	89d2      	ldrh	r2, [r2, #14]
 80002f8:	801a      	strh	r2, [r3, #0]
			uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002fa:	252c      	movs	r5, #44	; 0x2c
 80002fc:	197b      	adds	r3, r7, r5
 80002fe:	4ab2      	ldr	r2, [pc, #712]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000300:	8a12      	ldrh	r2, [r2, #16]
 8000302:	801a      	strh	r2, [r3, #0]

			erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 8000304:	22aa      	movs	r2, #170	; 0xaa
 8000306:	4bb2      	ldr	r3, [pc, #712]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000308:	701a      	strb	r2, [r3, #0]
			erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 800030a:	22aa      	movs	r2, #170	; 0xaa
 800030c:	4bb0      	ldr	r3, [pc, #704]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800030e:	705a      	strb	r2, [r3, #1]
			erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 8000310:	4bb0      	ldr	r3, [pc, #704]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	b29b      	uxth	r3, r3
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4bad      	ldr	r3, [pc, #692]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800031c:	709a      	strb	r2, [r3, #2]
			erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 800031e:	4bad      	ldr	r3, [pc, #692]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4baa      	ldr	r3, [pc, #680]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000326:	70da      	strb	r2, [r3, #3]
			erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8000328:	187b      	adds	r3, r7, r1
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	b29b      	uxth	r3, r3
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4ba7      	ldr	r3, [pc, #668]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000334:	711a      	strb	r2, [r3, #4]
			erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 8000336:	187b      	adds	r3, r7, r1
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4ba4      	ldr	r3, [pc, #656]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800033e:	715a      	strb	r2, [r3, #5]
			erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000340:	183b      	adds	r3, r7, r0
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4ba1      	ldr	r3, [pc, #644]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800034c:	719a      	strb	r2, [r3, #6]
			erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 800034e:	183b      	adds	r3, r7, r0
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b9e      	ldr	r3, [pc, #632]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000356:	71da      	strb	r2, [r3, #7]
			erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 8000358:	193b      	adds	r3, r7, r4
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	b29b      	uxth	r3, r3
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b9b      	ldr	r3, [pc, #620]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000364:	721a      	strb	r2, [r3, #8]
			erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000366:	193b      	adds	r3, r7, r4
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b98      	ldr	r3, [pc, #608]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800036e:	725a      	strb	r2, [r3, #9]
			erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000370:	197b      	adds	r3, r7, r5
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	0a1b      	lsrs	r3, r3, #8
 8000376:	b29b      	uxth	r3, r3
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b95      	ldr	r3, [pc, #596]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800037c:	729a      	strb	r2, [r3, #10]
			erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 800037e:	197b      	adds	r3, r7, r5
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	b2da      	uxtb	r2, r3
 8000384:	4b92      	ldr	r3, [pc, #584]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000386:	72da      	strb	r2, [r3, #11]
			erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 8000388:	4b8b      	ldr	r3, [pc, #556]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	121b      	asrs	r3, r3, #8
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b8f      	ldr	r3, [pc, #572]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000392:	731a      	strb	r2, [r3, #12]
			erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000394:	4b88      	ldr	r3, [pc, #544]	; (80005b8 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b8d      	ldr	r3, [pc, #564]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800039c:	735a      	strb	r2, [r3, #13]

		    HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 800039e:	498c      	ldr	r1, [pc, #560]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 80003a0:	488d      	ldr	r0, [pc, #564]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80003a2:	2364      	movs	r3, #100	; 0x64
 80003a4:	220e      	movs	r2, #14
 80003a6:	f005 fdef 	bl	8005f88 <HAL_UART_Transmit>

			erpa_seq++;
 80003aa:	4b8a      	ldr	r3, [pc, #552]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	4b88      	ldr	r3, [pc, #544]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80003b4:	801a      	strh	r2, [r3, #0]
			ERPA_COUNTER = 0;
 80003b6:	4b79      	ldr	r3, [pc, #484]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
			if (erpa_seq == 65535) {
 80003bc:	4b85      	ldr	r3, [pc, #532]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4a86      	ldr	r2, [pc, #536]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d108      	bne.n	80003d8 <HAL_TIM_OC_DelayElapsedCallback+0x194>
				erpa_seq = 0;
 80003c6:	4b83      	ldr	r3, [pc, #524]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	801a      	strh	r2, [r3, #0]
 80003cc:	e004      	b.n	80003d8 <HAL_TIM_OC_DelayElapsedCallback+0x194>
			}

    	} else {
    		ERPA_COUNTER++;
 80003ce:	4b73      	ldr	r3, [pc, #460]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	4b71      	ldr	r3, [pc, #452]	; (800059c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 80003d6:	601a      	str	r2, [r3, #0]
    	}
      }
      if (HK_ON)
 80003d8:	4b81      	ldr	r3, [pc, #516]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d100      	bne.n	80003e2 <HAL_TIM_OC_DelayElapsedCallback+0x19e>
 80003e0:	e33b      	b.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
      {
        if (HK_COUNTER == HK_CADENCE)
 80003e2:	4b80      	ldr	r3, [pc, #512]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	001a      	movs	r2, r3
 80003e8:	4b7f      	ldr	r3, [pc, #508]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d000      	beq.n	80003f2 <HAL_TIM_OC_DelayElapsedCallback+0x1ae>
 80003f0:	e2b4      	b.n	800095c <HAL_TIM_OC_DelayElapsedCallback+0x718>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 80003f2:	2200      	movs	r2, #0
 80003f4:	250c      	movs	r5, #12
 80003f6:	197b      	adds	r3, r7, r5
 80003f8:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	b299      	uxth	r1, r3
 80003fe:	262b      	movs	r6, #43	; 0x2b
 8000400:	19bc      	adds	r4, r7, r6
 8000402:	197a      	adds	r2, r7, r5
 8000404:	4879      	ldr	r0, [pc, #484]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000406:	23fa      	movs	r3, #250	; 0xfa
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	f002 ff45 	bl	800329c <HAL_I2C_Master_Transmit>
 8000412:	0003      	movs	r3, r0
 8000414:	7023      	strb	r3, [r4, #0]
                                        1000);
          if (ret != HAL_OK)
 8000416:	19bb      	adds	r3, r7, r6
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d008      	beq.n	8000430 <HAL_TIM_OC_DelayElapsedCallback+0x1ec>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800041e:	197b      	adds	r3, r7, r5
 8000420:	4a73      	ldr	r2, [pc, #460]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000422:	ca03      	ldmia	r2!, {r0, r1}
 8000424:	c303      	stmia	r3!, {r0, r1}
 8000426:	8811      	ldrh	r1, [r2, #0]
 8000428:	8019      	strh	r1, [r3, #0]
 800042a:	7892      	ldrb	r2, [r2, #2]
 800042c:	709a      	strb	r2, [r3, #2]
 800042e:	e02b      	b.n	8000488 <HAL_TIM_OC_DelayElapsedCallback+0x244>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 8000430:	2390      	movs	r3, #144	; 0x90
 8000432:	b299      	uxth	r1, r3
 8000434:	252b      	movs	r5, #43	; 0x2b
 8000436:	197c      	adds	r4, r7, r5
 8000438:	260c      	movs	r6, #12
 800043a:	19ba      	adds	r2, r7, r6
 800043c:	486b      	ldr	r0, [pc, #428]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800043e:	23fa      	movs	r3, #250	; 0xfa
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2302      	movs	r3, #2
 8000446:	f003 f831 	bl	80034ac <HAL_I2C_Master_Receive>
 800044a:	0003      	movs	r3, r0
 800044c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800044e:	197b      	adds	r3, r7, r5
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <HAL_TIM_OC_DelayElapsedCallback+0x224>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000456:	19bb      	adds	r3, r7, r6
 8000458:	4a66      	ldr	r2, [pc, #408]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800045a:	ca03      	ldmia	r2!, {r0, r1}
 800045c:	c303      	stmia	r3!, {r0, r1}
 800045e:	8811      	ldrh	r1, [r2, #0]
 8000460:	8019      	strh	r1, [r3, #0]
 8000462:	7892      	ldrb	r2, [r2, #2]
 8000464:	709a      	strb	r2, [r3, #2]
 8000466:	e00f      	b.n	8000488 <HAL_TIM_OC_DelayElapsedCallback+0x244>
            }
            else
            {
              output1 = (int16_t)(buf[0] << 8);
 8000468:	200c      	movs	r0, #12
 800046a:	183b      	adds	r3, r7, r0
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	021a      	lsls	r2, r3, #8
 8000470:	2146      	movs	r1, #70	; 0x46
 8000472:	187b      	adds	r3, r7, r1
 8000474:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	5e9b      	ldrsh	r3, [r3, r2]
 800047c:	183a      	adds	r2, r7, r0
 800047e:	7852      	ldrb	r2, [r2, #1]
 8000480:	4313      	orrs	r3, r2
 8000482:	10da      	asrs	r2, r3, #3
 8000484:	187b      	adds	r3, r7, r1
 8000486:	801a      	strh	r2, [r3, #0]
            }
          }

          /* Tell ADT7410_2 that we want to read from the temperature register */
          buf[0] = REG_TEMP;
 8000488:	2200      	movs	r2, #0
 800048a:	250c      	movs	r5, #12
 800048c:	197b      	adds	r3, r7, r5
 800048e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000490:	2394      	movs	r3, #148	; 0x94
 8000492:	b299      	uxth	r1, r3
 8000494:	262b      	movs	r6, #43	; 0x2b
 8000496:	19bc      	adds	r4, r7, r6
 8000498:	197a      	adds	r2, r7, r5
 800049a:	4854      	ldr	r0, [pc, #336]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800049c:	23fa      	movs	r3, #250	; 0xfa
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	f002 fefa 	bl	800329c <HAL_I2C_Master_Transmit>
 80004a8:	0003      	movs	r3, r0
 80004aa:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 80004ac:	19bb      	adds	r3, r7, r6
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d008      	beq.n	80004c6 <HAL_TIM_OC_DelayElapsedCallback+0x282>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	4a4e      	ldr	r2, [pc, #312]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80004b8:	ca03      	ldmia	r2!, {r0, r1}
 80004ba:	c303      	stmia	r3!, {r0, r1}
 80004bc:	8811      	ldrh	r1, [r2, #0]
 80004be:	8019      	strh	r1, [r3, #0]
 80004c0:	7892      	ldrb	r2, [r2, #2]
 80004c2:	709a      	strb	r2, [r3, #2]
 80004c4:	e02b      	b.n	800051e <HAL_TIM_OC_DelayElapsedCallback+0x2da>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 80004c6:	2394      	movs	r3, #148	; 0x94
 80004c8:	b299      	uxth	r1, r3
 80004ca:	252b      	movs	r5, #43	; 0x2b
 80004cc:	197c      	adds	r4, r7, r5
 80004ce:	260c      	movs	r6, #12
 80004d0:	19ba      	adds	r2, r7, r6
 80004d2:	4846      	ldr	r0, [pc, #280]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80004d4:	23fa      	movs	r3, #250	; 0xfa
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2302      	movs	r3, #2
 80004dc:	f002 ffe6 	bl	80034ac <HAL_I2C_Master_Receive>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80004e4:	197b      	adds	r3, r7, r5
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <HAL_TIM_OC_DelayElapsedCallback+0x2ba>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80004ec:	19bb      	adds	r3, r7, r6
 80004ee:	4a41      	ldr	r2, [pc, #260]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80004f0:	ca03      	ldmia	r2!, {r0, r1}
 80004f2:	c303      	stmia	r3!, {r0, r1}
 80004f4:	8811      	ldrh	r1, [r2, #0]
 80004f6:	8019      	strh	r1, [r3, #0]
 80004f8:	7892      	ldrb	r2, [r2, #2]
 80004fa:	709a      	strb	r2, [r3, #2]
 80004fc:	e00f      	b.n	800051e <HAL_TIM_OC_DelayElapsedCallback+0x2da>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 80004fe:	200c      	movs	r0, #12
 8000500:	183b      	adds	r3, r7, r0
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	021a      	lsls	r2, r3, #8
 8000506:	2144      	movs	r1, #68	; 0x44
 8000508:	187b      	adds	r3, r7, r1
 800050a:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	5e9b      	ldrsh	r3, [r3, r2]
 8000512:	183a      	adds	r2, r7, r0
 8000514:	7852      	ldrb	r2, [r2, #1]
 8000516:	4313      	orrs	r3, r2
 8000518:	10da      	asrs	r2, r3, #3
 800051a:	187b      	adds	r3, r7, r1
 800051c:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 800051e:	2200      	movs	r2, #0
 8000520:	250c      	movs	r5, #12
 8000522:	197b      	adds	r3, r7, r5
 8000524:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 8000526:	2392      	movs	r3, #146	; 0x92
 8000528:	b299      	uxth	r1, r3
 800052a:	262b      	movs	r6, #43	; 0x2b
 800052c:	19bc      	adds	r4, r7, r6
 800052e:	197a      	adds	r2, r7, r5
 8000530:	482e      	ldr	r0, [pc, #184]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000532:	23fa      	movs	r3, #250	; 0xfa
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	f002 feaf 	bl	800329c <HAL_I2C_Master_Transmit>
 800053e:	0003      	movs	r3, r0
 8000540:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 8000542:	19bb      	adds	r3, r7, r6
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <HAL_TIM_OC_DelayElapsedCallback+0x318>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 800054a:	197b      	adds	r3, r7, r5
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800054e:	ca03      	ldmia	r2!, {r0, r1}
 8000550:	c303      	stmia	r3!, {r0, r1}
 8000552:	8811      	ldrh	r1, [r2, #0]
 8000554:	8019      	strh	r1, [r3, #0]
 8000556:	7892      	ldrb	r2, [r2, #2]
 8000558:	709a      	strb	r2, [r3, #2]
 800055a:	e05d      	b.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 800055c:	2392      	movs	r3, #146	; 0x92
 800055e:	b299      	uxth	r1, r3
 8000560:	252b      	movs	r5, #43	; 0x2b
 8000562:	197c      	adds	r4, r7, r5
 8000564:	260c      	movs	r6, #12
 8000566:	19ba      	adds	r2, r7, r6
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 800056a:	23fa      	movs	r3, #250	; 0xfa
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2302      	movs	r3, #2
 8000572:	f002 ff9b 	bl	80034ac <HAL_I2C_Master_Receive>
 8000576:	0003      	movs	r3, r0
 8000578:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800057a:	197b      	adds	r3, r7, r5
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d03a      	beq.n	80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000582:	19bb      	adds	r3, r7, r6
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000586:	ca03      	ldmia	r2!, {r0, r1}
 8000588:	c303      	stmia	r3!, {r0, r1}
 800058a:	8811      	ldrh	r1, [r2, #0]
 800058c:	8019      	strh	r1, [r3, #0]
 800058e:	7892      	ldrb	r2, [r2, #2]
 8000590:	709a      	strb	r2, [r3, #2]
 8000592:	e041      	b.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>
 8000594:	20000244 	.word	0x20000244
 8000598:	20000021 	.word	0x20000021
 800059c:	20000388 	.word	0x20000388
 80005a0:	20000023 	.word	0x20000023
 80005a4:	48000400 	.word	0x48000400
 80005a8:	08007504 	.word	0x08007504
 80005ac:	20000198 	.word	0x20000198
 80005b0:	40003800 	.word	0x40003800
 80005b4:	fffffbff 	.word	0xfffffbff
 80005b8:	20000344 	.word	0x20000344
 80005bc:	2000033e 	.word	0x2000033e
 80005c0:	40007400 	.word	0x40007400
 80005c4:	20000000 	.word	0x20000000
 80005c8:	2000031c 	.word	0x2000031c
 80005cc:	20000050 	.word	0x20000050
 80005d0:	20000348 	.word	0x20000348
 80005d4:	20000356 	.word	0x20000356
 80005d8:	2000028c 	.word	0x2000028c
 80005dc:	0000ffff 	.word	0x0000ffff
 80005e0:	20000022 	.word	0x20000022
 80005e4:	20000025 	.word	0x20000025
 80005e8:	20000390 	.word	0x20000390
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	080074cc 	.word	0x080074cc
 80005f4:	080074d8 	.word	0x080074d8
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 80005f8:	200c      	movs	r0, #12
 80005fa:	183b      	adds	r3, r7, r0
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	021a      	lsls	r2, r3, #8
 8000600:	2142      	movs	r1, #66	; 0x42
 8000602:	187b      	adds	r3, r7, r1
 8000604:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	5e9b      	ldrsh	r3, [r3, r2]
 800060c:	183a      	adds	r2, r7, r0
 800060e:	7852      	ldrb	r2, [r2, #1]
 8000610:	4313      	orrs	r3, r2
 8000612:	10da      	asrs	r2, r3, #3
 8000614:	187b      	adds	r3, r7, r1
 8000616:	801a      	strh	r2, [r3, #0]
            }
          }
          /* TEMP SENSOR 4 */
          buf[0] = REG_TEMP;
 8000618:	2200      	movs	r2, #0
 800061a:	250c      	movs	r5, #12
 800061c:	197b      	adds	r3, r7, r5
 800061e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000620:	2396      	movs	r3, #150	; 0x96
 8000622:	b299      	uxth	r1, r3
 8000624:	262b      	movs	r6, #43	; 0x2b
 8000626:	19bc      	adds	r4, r7, r6
 8000628:	197a      	adds	r2, r7, r5
 800062a:	48cf      	ldr	r0, [pc, #828]	; (8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>)
 800062c:	23fa      	movs	r3, #250	; 0xfa
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	f002 fe32 	bl	800329c <HAL_I2C_Master_Transmit>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
                                        1000);
          /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
          if (ret != HAL_OK)
 800063c:	19bb      	adds	r3, r7, r6
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x412>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000644:	197b      	adds	r3, r7, r5
 8000646:	4ac9      	ldr	r2, [pc, #804]	; (800096c <HAL_TIM_OC_DelayElapsedCallback+0x728>)
 8000648:	ca03      	ldmia	r2!, {r0, r1}
 800064a:	c303      	stmia	r3!, {r0, r1}
 800064c:	8811      	ldrh	r1, [r2, #0]
 800064e:	8019      	strh	r1, [r3, #0]
 8000650:	7892      	ldrb	r2, [r2, #2]
 8000652:	709a      	strb	r2, [r3, #2]
 8000654:	e02b      	b.n	80006ae <HAL_TIM_OC_DelayElapsedCallback+0x46a>
          }
          else
          {

            /* Read 2 bytes from the temperature register */
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000656:	2396      	movs	r3, #150	; 0x96
 8000658:	b299      	uxth	r1, r3
 800065a:	252b      	movs	r5, #43	; 0x2b
 800065c:	197c      	adds	r4, r7, r5
 800065e:	260c      	movs	r6, #12
 8000660:	19ba      	adds	r2, r7, r6
 8000662:	48c1      	ldr	r0, [pc, #772]	; (8000968 <HAL_TIM_OC_DelayElapsedCallback+0x724>)
 8000664:	23fa      	movs	r3, #250	; 0xfa
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2302      	movs	r3, #2
 800066c:	f002 ff1e 	bl	80034ac <HAL_I2C_Master_Receive>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000674:	197b      	adds	r3, r7, r5
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <HAL_TIM_OC_DelayElapsedCallback+0x44a>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 800067c:	19bb      	adds	r3, r7, r6
 800067e:	4abc      	ldr	r2, [pc, #752]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x72c>)
 8000680:	ca03      	ldmia	r2!, {r0, r1}
 8000682:	c303      	stmia	r3!, {r0, r1}
 8000684:	8811      	ldrh	r1, [r2, #0]
 8000686:	8019      	strh	r1, [r3, #0]
 8000688:	7892      	ldrb	r2, [r2, #2]
 800068a:	709a      	strb	r2, [r3, #2]
 800068c:	e00f      	b.n	80006ae <HAL_TIM_OC_DelayElapsedCallback+0x46a>
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 800068e:	200c      	movs	r0, #12
 8000690:	183b      	adds	r3, r7, r0
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	021a      	lsls	r2, r3, #8
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	187b      	adds	r3, r7, r1
 800069a:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	5e9b      	ldrsh	r3, [r3, r2]
 80006a2:	183a      	adds	r2, r7, r0
 80006a4:	7852      	ldrb	r2, [r2, #1]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	10da      	asrs	r2, r3, #3
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80006ae:	2311      	movs	r3, #17
 80006b0:	001a      	movs	r2, r3
 80006b2:	49b0      	ldr	r1, [pc, #704]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006b4:	4bb0      	ldr	r3, [pc, #704]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fd72 	bl	80021a0 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 80006bc:	2128      	movs	r1, #40	; 0x28
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	4aac      	ldr	r2, [pc, #688]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006c2:	8852      	ldrh	r2, [r2, #2]
 80006c4:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80006c6:	2026      	movs	r0, #38	; 0x26
 80006c8:	183b      	adds	r3, r7, r0
 80006ca:	4aaa      	ldr	r2, [pc, #680]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006cc:	8892      	ldrh	r2, [r2, #4]
 80006ce:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80006d0:	2424      	movs	r4, #36	; 0x24
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	4aa7      	ldr	r2, [pc, #668]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006d6:	88d2      	ldrh	r2, [r2, #6]
 80006d8:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 80006da:	2522      	movs	r5, #34	; 0x22
 80006dc:	197b      	adds	r3, r7, r5
 80006de:	4aa5      	ldr	r2, [pc, #660]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006e0:	8912      	ldrh	r2, [r2, #8]
 80006e2:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 80006e4:	2620      	movs	r6, #32
 80006e6:	19bb      	adds	r3, r7, r6
 80006e8:	4aa2      	ldr	r2, [pc, #648]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006ea:	8952      	ldrh	r2, [r2, #10]
 80006ec:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 80006ee:	231e      	movs	r3, #30
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	4aa0      	ldr	r2, [pc, #640]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006f4:	8a52      	ldrh	r2, [r2, #18]
 80006f6:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80006f8:	221c      	movs	r2, #28
 80006fa:	18bb      	adds	r3, r7, r2
 80006fc:	4a9d      	ldr	r2, [pc, #628]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 80006fe:	8a92      	ldrh	r2, [r2, #20]
 8000700:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000702:	231a      	movs	r3, #26
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	4a9b      	ldr	r2, [pc, #620]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8000708:	8ad2      	ldrh	r2, [r2, #22]
 800070a:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 800070c:	2218      	movs	r2, #24
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	4a98      	ldr	r2, [pc, #608]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8000712:	8b12      	ldrh	r2, [r2, #24]
 8000714:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 8000716:	2316      	movs	r3, #22
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a96      	ldr	r2, [pc, #600]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 800071c:	8b52      	ldrh	r2, [r2, #26]
 800071e:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000720:	2214      	movs	r2, #20
 8000722:	18bb      	adds	r3, r7, r2
 8000724:	4a93      	ldr	r2, [pc, #588]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8000726:	8b92      	ldrh	r2, [r2, #28]
 8000728:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 800072a:	2312      	movs	r3, #18
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	4a91      	ldr	r2, [pc, #580]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 8000730:	8bd2      	ldrh	r2, [r2, #30]
 8000732:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000734:	2210      	movs	r2, #16
 8000736:	18bb      	adds	r3, r7, r2
 8000738:	4a8e      	ldr	r2, [pc, #568]	; (8000974 <HAL_TIM_OC_DelayElapsedCallback+0x730>)
 800073a:	8c12      	ldrh	r2, [r2, #32]
 800073c:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 800073e:	22cc      	movs	r2, #204	; 0xcc
 8000740:	4b8e      	ldr	r3, [pc, #568]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000742:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000744:	22cc      	movs	r2, #204	; 0xcc
 8000746:	4b8d      	ldr	r3, [pc, #564]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000748:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 800074a:	4b8d      	ldr	r3, [pc, #564]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	0a1b      	lsrs	r3, r3, #8
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b89      	ldr	r3, [pc, #548]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000756:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000758:	4b89      	ldr	r3, [pc, #548]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b87      	ldr	r3, [pc, #540]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000760:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000762:	2312      	movs	r3, #18
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b83      	ldr	r3, [pc, #524]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000770:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000772:	2312      	movs	r3, #18
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b80      	ldr	r3, [pc, #512]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800077c:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 800077e:	2210      	movs	r2, #16
 8000780:	18bb      	adds	r3, r7, r2
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b7c      	ldr	r3, [pc, #496]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800078c:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 800078e:	2210      	movs	r2, #16
 8000790:	18bb      	adds	r3, r7, r2
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b79      	ldr	r3, [pc, #484]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000798:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 800079a:	2346      	movs	r3, #70	; 0x46
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	2200      	movs	r2, #0
 80007a0:	5e9b      	ldrsh	r3, [r3, r2]
 80007a2:	121b      	asrs	r3, r3, #8
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b75      	ldr	r3, [pc, #468]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007a8:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 80007aa:	2346      	movs	r3, #70	; 0x46
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007b4:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 80007b6:	2344      	movs	r3, #68	; 0x44
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2200      	movs	r2, #0
 80007bc:	5e9b      	ldrsh	r3, [r3, r2]
 80007be:	121b      	asrs	r3, r3, #8
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b6e      	ldr	r3, [pc, #440]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007c4:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 80007c6:	2344      	movs	r3, #68	; 0x44
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b6b      	ldr	r3, [pc, #428]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007d0:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 80007d2:	2342      	movs	r3, #66	; 0x42
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	2200      	movs	r2, #0
 80007d8:	5e9b      	ldrsh	r3, [r3, r2]
 80007da:	121b      	asrs	r3, r3, #8
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b67      	ldr	r3, [pc, #412]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007e0:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 80007e2:	2342      	movs	r3, #66	; 0x42
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007ec:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	5e9b      	ldrsh	r3, [r3, r2]
 80007f6:	121b      	asrs	r3, r3, #8
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b60      	ldr	r3, [pc, #384]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80007fc:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000808:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 800080a:	187b      	adds	r3, r7, r1
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b59      	ldr	r3, [pc, #356]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000816:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 8000818:	187b      	adds	r3, r7, r1
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b57      	ldr	r3, [pc, #348]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000820:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 8000822:	183b      	adds	r3, r7, r0
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29b      	uxth	r3, r3
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b53      	ldr	r3, [pc, #332]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800082e:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 8000830:	183b      	adds	r3, r7, r0
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b51      	ldr	r3, [pc, #324]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000838:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 800083a:	211e      	movs	r1, #30
 800083c:	187b      	adds	r3, r7, r1
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b4d      	ldr	r3, [pc, #308]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000848:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 800084a:	187b      	adds	r3, r7, r1
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b4a      	ldr	r3, [pc, #296]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000852:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000854:	193b      	adds	r3, r7, r4
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000860:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000862:	193b      	adds	r3, r7, r4
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b44      	ldr	r3, [pc, #272]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800086a:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 800086c:	201a      	movs	r0, #26
 800086e:	183b      	adds	r3, r7, r0
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b29b      	uxth	r3, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b40      	ldr	r3, [pc, #256]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800087a:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 800087c:	183b      	adds	r3, r7, r0
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000884:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000886:	2018      	movs	r0, #24
 8000888:	183b      	adds	r3, r7, r0
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b3a      	ldr	r3, [pc, #232]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000894:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000896:	183b      	adds	r3, r7, r0
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800089e:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 80008a0:	211c      	movs	r1, #28
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b33      	ldr	r3, [pc, #204]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008ae:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008b8:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 80008ba:	2114      	movs	r1, #20
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008c8:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008d2:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 80008d4:	2016      	movs	r0, #22
 80008d6:	183b      	adds	r3, r7, r0
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b2d9      	uxtb	r1, r3
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 80008e6:	183b      	adds	r3, r7, r0
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b2d9      	uxtb	r1, r3
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008ee:	2221      	movs	r2, #33	; 0x21
 80008f0:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 80008f2:	197b      	adds	r3, r7, r5
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2d9      	uxtb	r1, r3
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 80008fe:	2222      	movs	r2, #34	; 0x22
 8000900:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000902:	197b      	adds	r3, r7, r5
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b2d9      	uxtb	r1, r3
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800090a:	2223      	movs	r2, #35	; 0x23
 800090c:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 800090e:	19bb      	adds	r3, r7, r6
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b29b      	uxth	r3, r3
 8000916:	b2d9      	uxtb	r1, r3
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800091a:	2224      	movs	r2, #36	; 0x24
 800091c:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 800091e:	19bb      	adds	r3, r7, r6
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b2d9      	uxtb	r1, r3
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000926:	2225      	movs	r2, #37	; 0x25
 8000928:	5499      	strb	r1, [r3, r2]


          HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 800092a:	4914      	ldr	r1, [pc, #80]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 800092c:	4815      	ldr	r0, [pc, #84]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2226      	movs	r2, #38	; 0x26
 8000932:	f005 fb29 	bl	8005f88 <HAL_UART_Transmit>


          hk_seq++;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	b29a      	uxth	r2, r3
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000940:	801a      	strh	r2, [r3, #0]
          HK_COUNTER = 0;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
          if (hk_seq == 65535) {
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d000      	beq.n	8000954 <HAL_TIM_OC_DelayElapsedCallback+0x710>
 8000952:	e082      	b.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
        	  hk_seq = 0;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 800095a:	e07e      	b.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
          HK_COUNTER++;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	e078      	b.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
 8000968:	200000e8 	.word	0x200000e8
 800096c:	080074cc 	.word	0x080074cc
 8000970:	080074d8 	.word	0x080074d8
 8000974:	2000031c 	.word	0x2000031c
 8000978:	20000050 	.word	0x20000050
 800097c:	20000360 	.word	0x20000360
 8000980:	20000386 	.word	0x20000386
 8000984:	2000028c 	.word	0x2000028c
 8000988:	20000390 	.word	0x20000390
 800098c:	0000ffff 	.word	0x0000ffff
  else if (htim == &htim1)
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <HAL_TIM_OC_DelayElapsedCallback+0x820>)
 8000994:	429a      	cmp	r2, r3
 8000996:	d160      	bne.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
      if (PMT_ON)
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_TIM_OC_DelayElapsedCallback+0x824>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d05c      	beq.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
    	if (PMT_COUNTER == PMT_CADENCE) {
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <HAL_TIM_OC_DelayElapsedCallback+0x828>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x82c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d150      	bne.n	8000a50 <HAL_TIM_OC_DelayElapsedCallback+0x80c>
    		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	005a      	lsls	r2, r3, #1
 80009b4:	2390      	movs	r3, #144	; 0x90
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fb9e 	bl	80030fc <HAL_GPIO_ReadPin>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d1f5      	bne.n	80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>
    		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 80009c4:	492b      	ldr	r1, [pc, #172]	; (8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x830>)
 80009c6:	482c      	ldr	r0, [pc, #176]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x834>)
 80009c8:	2301      	movs	r3, #1
 80009ca:	2201      	movs	r2, #1
 80009cc:	f003 ff3c 	bl	8004848 <HAL_SPI_Transmit>
    		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x838>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x838>)
 80009d6:	492a      	ldr	r1, [pc, #168]	; (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x83c>)
 80009d8:	400a      	ands	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
    		while (!(SPI1->SR));
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x838>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0fb      	beq.n	80009de <HAL_TIM_OC_DelayElapsedCallback+0x79a>
    		pmt_raw = SPI1->DR;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x838>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	001a      	movs	r2, r3
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 80009ee:	601a      	str	r2, [r3, #0]
    		int r = pmt_raw;
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    		pmt_buf[0] = pmt_sync;
 80009f6:	22bb      	movs	r2, #187	; 0xbb
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 80009fa:	701a      	strb	r2, [r3, #0]
    		pmt_buf[1] = pmt_sync;
 80009fc:	22bb      	movs	r2, #187	; 0xbb
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a00:	705a      	strb	r2, [r3, #1]
    		pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x848>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a0e:	709a      	strb	r2, [r3, #2]
    		pmt_buf[3] = (pmt_seq & 0xFF);
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x848>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a18:	70da      	strb	r2, [r3, #3]
    		pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	121b      	asrs	r3, r3, #8
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a24:	711a      	strb	r2, [r3, #4]
    		pmt_buf[5] = (pmt_raw & 0xFF);
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x840>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a2e:	715a      	strb	r2, [r3, #5]
        	HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x844>)
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <HAL_TIM_OC_DelayElapsedCallback+0x84c>)
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	2206      	movs	r2, #6
 8000a38:	f005 faa6 	bl	8005f88 <HAL_UART_Transmit>
    		pmt_seq++;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x848>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x848>)
 8000a46:	801a      	strh	r2, [r3, #0]
    		PMT_COUNTER = 0;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x82c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	e004      	b.n	8000a5a <HAL_TIM_OC_DelayElapsedCallback+0x816>
    		PMT_COUNTER++;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x82c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x82c>)
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b013      	add	sp, #76	; 0x4c
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	200001fc 	.word	0x200001fc
 8000a68:	20000020 	.word	0x20000020
 8000a6c:	20000024 	.word	0x20000024
 8000a70:	2000038c 	.word	0x2000038c
 8000a74:	08007504 	.word	0x08007504
 8000a78:	20000134 	.word	0x20000134
 8000a7c:	40013000 	.word	0x40013000
 8000a80:	fffffbff 	.word	0xfffffbff
 8000a84:	20000340 	.word	0x20000340
 8000a88:	20000358 	.word	0x20000358
 8000a8c:	2000035e 	.word	0x2000035e
 8000a90:	2000028c 	.word	0x2000028c

08000a94 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 8000a9c:	497f      	ldr	r1, [pc, #508]	; (8000c9c <HAL_UART_RxCpltCallback+0x208>)
 8000a9e:	4b80      	ldr	r3, [pc, #512]	; (8000ca0 <HAL_UART_RxCpltCallback+0x20c>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f005 fb19 	bl	80060da <HAL_UART_Receive_IT>
  unsigned char key = rx_buf[0];
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	4a7b      	ldr	r2, [pc, #492]	; (8000c9c <HAL_UART_RxCpltCallback+0x208>)
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]
  switch (key)
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b20      	cmp	r3, #32
 8000ab8:	d900      	bls.n	8000abc <HAL_UART_RxCpltCallback+0x28>
 8000aba:	e0eb      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <HAL_UART_RxCpltCallback+0x210>)
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	469f      	mov	pc, r3
  {
  case 0x0B:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000ac6:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <HAL_UART_RxCpltCallback+0x214>)
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	2201      	movs	r2, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fb32 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000ad2:	e0df      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x0A:
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ad4:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <HAL_UART_RxCpltCallback+0x214>)
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fb2b 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000ae0:	e0d8      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }

  case 0x08:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <HAL_UART_RxCpltCallback+0x214>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fb24 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000aee:	e0d1      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x09:
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000af0:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <HAL_UART_RxCpltCallback+0x214>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2200      	movs	r2, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fb1d 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000afc:	e0ca      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x1B:
  {
    if (step < 7)
 8000afe:	4b6b      	ldr	r3, [pc, #428]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d900      	bls.n	8000b08 <HAL_UART_RxCpltCallback+0x74>
 8000b06:	e0c2      	b.n	8000c8e <HAL_UART_RxCpltCallback+0x1fa>
    {
      step++;
 8000b08:	4b68      	ldr	r3, [pc, #416]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b66      	ldr	r3, [pc, #408]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b12:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b14:	e0bb      	b.n	8000c8e <HAL_UART_RxCpltCallback+0x1fa>
  }
  case 0x1C:
  {
    if (step > 0)
 8000b16:	4b65      	ldr	r3, [pc, #404]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d100      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x8c>
 8000b1e:	e0b8      	b.n	8000c92 <HAL_UART_RxCpltCallback+0x1fe>
    {
      step--;
 8000b20:	4b62      	ldr	r3, [pc, #392]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b60      	ldr	r3, [pc, #384]	; (8000cac <HAL_UART_RxCpltCallback+0x218>)
 8000b2a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000b2c:	e0b1      	b.n	8000c92 <HAL_UART_RxCpltCallback+0x1fe>
  }
  case 0x1E: { // ERPA Cadence Multiplier
	  ERPA_CADENCE = rx_buf[1];
 8000b2e:	4b5b      	ldr	r3, [pc, #364]	; (8000c9c <HAL_UART_RxCpltCallback+0x208>)
 8000b30:	785a      	ldrb	r2, [r3, #1]
 8000b32:	4b5f      	ldr	r3, [pc, #380]	; (8000cb0 <HAL_UART_RxCpltCallback+0x21c>)
 8000b34:	701a      	strb	r2, [r3, #0]
	  ERPA_COUNTER = 0;
 8000b36:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <HAL_UART_RxCpltCallback+0x220>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	  break;
 8000b3c:	e0aa      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x1F: { // PMT Cadence Multiplier
	  PMT_CADENCE = rx_buf[1];
 8000b3e:	4b57      	ldr	r3, [pc, #348]	; (8000c9c <HAL_UART_RxCpltCallback+0x208>)
 8000b40:	785a      	ldrb	r2, [r3, #1]
 8000b42:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <HAL_UART_RxCpltCallback+0x224>)
 8000b44:	701a      	strb	r2, [r3, #0]
	  PMT_COUNTER = 0;
 8000b46:	4b5d      	ldr	r3, [pc, #372]	; (8000cbc <HAL_UART_RxCpltCallback+0x228>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
	  break;
 8000b4c:	e0a2      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x20: { // HK Cadence Multiplier
	  HK_CADENCE = rx_buf[1];
 8000b4e:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <HAL_UART_RxCpltCallback+0x208>)
 8000b50:	785a      	ldrb	r2, [r3, #1]
 8000b52:	4b5b      	ldr	r3, [pc, #364]	; (8000cc0 <HAL_UART_RxCpltCallback+0x22c>)
 8000b54:	701a      	strb	r2, [r3, #0]
	  HK_COUNTER = 0;
 8000b56:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <HAL_UART_RxCpltCallback+0x230>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
	  break;
 8000b5c:	e09a      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x00:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000b5e:	4b5a      	ldr	r3, [pc, #360]	; (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b60:	2120      	movs	r1, #32
 8000b62:	2201      	movs	r2, #1
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 fae6 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000b6a:	e093      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x13:
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000b6c:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b6e:	2120      	movs	r1, #32
 8000b70:	2200      	movs	r2, #0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 fadf 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000b78:	e08c      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x01:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	2201      	movs	r2, #1
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 fad8 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000b86:	e085      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x14:
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b8a:	2140      	movs	r1, #64	; 0x40
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f002 fad1 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000b94:	e07e      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x02:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b96:	484d      	ldr	r0, [pc, #308]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	f002 fac9 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000ba4:	e076      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x15:
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ba6:	4849      	ldr	r0, [pc, #292]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	2200      	movs	r2, #0
 8000bae:	0019      	movs	r1, r3
 8000bb0:	f002 fac1 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000bb4:	e06e      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x03:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bb6:	4845      	ldr	r0, [pc, #276]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	019b      	lsls	r3, r3, #6
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	f002 fab9 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000bc4:	e066      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x16:
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bc6:	4841      	ldr	r0, [pc, #260]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	019b      	lsls	r3, r3, #6
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0019      	movs	r1, r3
 8000bd0:	f002 fab1 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000bd4:	e05e      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x04:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 faaa 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000be2:	e057      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x17:
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000be4:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	2200      	movs	r2, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f002 faa3 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000bf0:	e050      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x05:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bf2:	4836      	ldr	r0, [pc, #216]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	f002 fa9b 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c00:	e048      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x18:
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000c02:	4832      	ldr	r0, [pc, #200]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f002 fa93 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c10:	e040      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x06:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c12:	482e      	ldr	r0, [pc, #184]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	2201      	movs	r2, #1
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f002 fa8b 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c20:	e038      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x19:
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c22:	482a      	ldr	r0, [pc, #168]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	f002 fa83 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c30:	e030      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x07:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	2201      	movs	r2, #1
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 fa7c 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c3e:	e029      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x1A:
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <HAL_UART_RxCpltCallback+0x238>)
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fa75 	bl	8003136 <HAL_GPIO_WritePin>
    break;
 8000c4c:	e022      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x0C:
  {
      HAL_SuspendTick();
 8000c4e:	f001 f959 	bl	8001f04 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2001      	movs	r0, #1
 8000c56:	f002 ffc1 	bl	8003bdc <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000c5a:	f7ff fae1 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case 0x0D:
  {
    PMT_ON = 1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
    break;
 8000c64:	e016      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x10:
  {
    PMT_ON = 0;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    break;
 8000c6c:	e012      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x0E:
  {
    ERPA_ON = 1;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_UART_RxCpltCallback+0x240>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
    break;
 8000c74:	e00e      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x11:
  {
    ERPA_ON = 0;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_RxCpltCallback+0x240>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    break;
 8000c7c:	e00a      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x0F:
  {
    HK_ON = 1;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_UART_RxCpltCallback+0x244>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
    break;
 8000c84:	e006      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
  }
  case 0x12:
  {
    HK_ON = 0;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_RxCpltCallback+0x244>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
    break;
 8000c8c:	e002      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
    break;
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	e000      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x200>
    break;
 8000c92:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b004      	add	sp, #16
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000310 	.word	0x20000310
 8000ca0:	2000028c 	.word	0x2000028c
 8000ca4:	08007508 	.word	0x08007508
 8000ca8:	48001400 	.word	0x48001400
 8000cac:	2000033e 	.word	0x2000033e
 8000cb0:	20000023 	.word	0x20000023
 8000cb4:	20000388 	.word	0x20000388
 8000cb8:	20000024 	.word	0x20000024
 8000cbc:	2000038c 	.word	0x2000038c
 8000cc0:	20000025 	.word	0x20000025
 8000cc4:	20000390 	.word	0x20000390
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	20000020 	.word	0x20000020
 8000cd4:	20000021 	.word	0x20000021
 8000cd8:	20000022 	.word	0x20000022

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f001 f8ab 	bl	8001e3c <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f86d 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f000 fc85 	bl	80015f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cee:	f000 fc65 	bl	80015bc <MX_DMA_Init>
  MX_SPI2_Init();
 8000cf2:	f000 faaf 	bl	8001254 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000cf6:	f000 faed 	bl	80012d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cfa:	f000 fba1 	bl	8001440 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000cfe:	f000 fa69 	bl	80011d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d02:	f000 fc1b 	bl	800153c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000d06:	f000 f9f3 	bl	80010f0 <MX_DAC1_Init>
  MX_ADC_Init();
 8000d0a:	f000 f8c5 	bl	8000e98 <MX_ADC_Init>
  MX_I2C1_Init();
 8000d0e:	f000 fa21 	bl	8001154 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <main+0xd0>)
 8000d14:	2100      	movs	r1, #0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fe31 	bl	800297e <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <main+0xd4>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f004 f8af 	bl	8004e84 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <main+0xd8>)
 8000d28:	210c      	movs	r1, #12
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f004 f8aa 	bl	8004e84 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <main+0xdc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	69da      	ldr	r2, [r3, #28]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	025b      	lsls	r3, r3, #9
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d0f5      	beq.n	8000d32 <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <main+0xdc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	69da      	ldr	r2, [r3, #28]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	03db      	lsls	r3, r3, #15
 8000d52:	401a      	ands	r2, r3
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	03db      	lsls	r3, r3, #15
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d1f5      	bne.n	8000d48 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <main+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <main+0xe0>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x5B; // send "["
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <main+0xe0>)
 8000d6a:	225b      	movs	r2, #91	; 0x5b
 8000d6c:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <main+0xe0>)
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <main+0xdc>)
 8000d72:	6819      	ldr	r1, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	f006 fab5 	bl	80072e4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <main+0xa6>
      Error_Handler();
 8000d7e:	f000 fcd5 	bl	800172c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <main+0xdc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <main+0xdc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	03c9      	lsls	r1, r1, #15
 8000d90:	430a      	orrs	r2, r1
 8000d92:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <main+0xdc>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f006 fb0a 	bl	80073b0 <HAL_UARTEx_EnableStopMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Receive_IT(&huart1, rx_buf, 2);
 8000d9c:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <main+0xe4>)
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <main+0xdc>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f005 f999 	bl	80060da <HAL_UART_Receive_IT>
 8000da8:	e7f8      	b.n	8000d9c <main+0xc0>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	200000d4 	.word	0x200000d4
 8000db0:	200001fc 	.word	0x200001fc
 8000db4:	20000244 	.word	0x20000244
 8000db8:	2000028c 	.word	0x2000028c
 8000dbc:	20000314 	.word	0x20000314
 8000dc0:	20000310 	.word	0x20000310

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b097      	sub	sp, #92	; 0x5c
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	2428      	movs	r4, #40	; 0x28
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2330      	movs	r3, #48	; 0x30
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f006 fb65 	bl	80074a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dda:	2318      	movs	r3, #24
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2310      	movs	r3, #16
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f006 fb5d 	bl	80074a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f006 fb56 	bl	80074a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000df8:	0021      	movs	r1, r4
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2212      	movs	r2, #18
 8000dfe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2201      	movs	r2, #1
 8000e04:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2201      	movs	r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2210      	movs	r2, #16
 8000e10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2210      	movs	r2, #16
 8000e16:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	22a0      	movs	r2, #160	; 0xa0
 8000e28:	0392      	lsls	r2, r2, #14
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 ff05 	bl	8003c44 <HAL_RCC_OscConfig>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e3e:	f000 fc75 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	2118      	movs	r1, #24
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2207      	movs	r2, #7
 8000e48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2101      	movs	r1, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f003 fa09 	bl	8004278 <HAL_RCC_ClockConfig>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e6a:	f000 fc5f 	bl	800172c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2221      	movs	r2, #33	; 0x21
 8000e72:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2203      	movs	r2, #3
 8000e78:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	0018      	movs	r0, r3
 8000e84:	f003 fb4a 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	1e03      	subs	r3, r0, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e8c:	f000 fc4e 	bl	800172c <Error_Handler>
  }
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b017      	add	sp, #92	; 0x5c
 8000e96:	bd90      	pop	{r4, r7, pc}

08000e98 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f006 fafc 	bl	80074a4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000eac:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <MX_ADC_Init+0x250>)
 8000eae:	4a8f      	ldr	r2, [pc, #572]	; (80010ec <MX_ADC_Init+0x254>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb2:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <MX_ADC_Init+0x250>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <MX_ADC_Init+0x250>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ed0:	4b85      	ldr	r3, [pc, #532]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed6:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000edc:	4b82      	ldr	r3, [pc, #520]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <MX_ADC_Init+0x250>)
 8000eea:	22c2      	movs	r2, #194	; 0xc2
 8000eec:	32ff      	adds	r2, #255	; 0xff
 8000eee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ef6:	4b7c      	ldr	r3, [pc, #496]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ef8:	2224      	movs	r2, #36	; 0x24
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efe:	4b7a      	ldr	r3, [pc, #488]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f80a 	bl	8001f20 <HAL_ADC_Init>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f10:	f000 fc0c 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	0152      	lsls	r2, r2, #5
 8000f20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	0552      	lsls	r2, r2, #21
 8000f28:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 f9cf 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f3a:	f000 fbf7 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f44:	1d3a      	adds	r2, r7, #4
 8000f46:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 f9c2 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000f54:	f000 fbea 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 f9b5 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000f6e:	f000 fbdd 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2203      	movs	r2, #3
 8000f76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f78:	1d3a      	adds	r2, r7, #4
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 f9a8 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000f88:	f000 fbd0 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2205      	movs	r2, #5
 8000f90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f92:	1d3a      	adds	r2, r7, #4
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <MX_ADC_Init+0x250>)
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 f99b 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000fa2:	f000 fbc3 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2206      	movs	r2, #6
 8000faa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_ADC_Init+0x250>)
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 f98e 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000fbc:	f000 fbb6 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fc6:	1d3a      	adds	r2, r7, #4
 8000fc8:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <MX_ADC_Init+0x250>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 f981 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000fd6:	f000 fba9 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2208      	movs	r2, #8
 8000fde:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <MX_ADC_Init+0x250>)
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 f974 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000ff0:	f000 fb9c 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2209      	movs	r2, #9
 8000ff8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <MX_ADC_Init+0x250>)
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f001 f967 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <MX_ADC_Init+0x176>
  {
    Error_Handler();
 800100a:	f000 fb8f 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	220a      	movs	r2, #10
 8001012:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001014:	1d3a      	adds	r2, r7, #4
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <MX_ADC_Init+0x250>)
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f001 f95a 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8001024:	f000 fb82 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	220b      	movs	r2, #11
 800102c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC_Init+0x250>)
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f001 f94d 	bl	80022d4 <HAL_ADC_ConfigChannel>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 800103e:	f000 fb75 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	220c      	movs	r2, #12
 8001046:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC_Init+0x250>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f001 f940 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8001058:	f000 fb68 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	220d      	movs	r2, #13
 8001060:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001062:	1d3a      	adds	r2, r7, #4
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC_Init+0x250>)
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f001 f933 	bl	80022d4 <HAL_ADC_ConfigChannel>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8001072:	f000 fb5b 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	220e      	movs	r2, #14
 800107a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC_Init+0x250>)
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f001 f926 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 800108c:	f000 fb4e 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	220f      	movs	r2, #15
 8001094:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_ADC_Init+0x250>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f001 f919 	bl	80022d4 <HAL_ADC_ConfigChannel>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC_Init+0x212>
  {
    Error_Handler();
 80010a6:	f000 fb41 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2210      	movs	r2, #16
 80010ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b0:	1d3a      	adds	r2, r7, #4
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_ADC_Init+0x250>)
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 f90c 	bl	80022d4 <HAL_ADC_ConfigChannel>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 80010c0:	f000 fb34 	bl	800172c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2211      	movs	r2, #17
 80010c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010ca:	1d3a      	adds	r2, r7, #4
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_ADC_Init+0x250>)
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 f8ff 	bl	80022d4 <HAL_ADC_ConfigChannel>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC_Init+0x246>
  {
    Error_Handler();
 80010da:	f000 fb27 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b004      	add	sp, #16
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000050 	.word	0x20000050
 80010ec:	40012400 	.word	0x40012400

080010f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_DAC1_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010fc:	003b      	movs	r3, r7
 80010fe:	0018      	movs	r0, r3
 8001100:	2308      	movs	r3, #8
 8001102:	001a      	movs	r2, r3
 8001104:	2100      	movs	r1, #0
 8001106:	f006 f9cd 	bl	80074a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_DAC1_Init+0x5c>)
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <MX_DAC1_Init+0x60>)
 800110e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_DAC1_Init+0x5c>)
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fbd2 	bl	80028bc <HAL_DAC_Init>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 800111c:	f000 fb06 	bl	800172c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001120:	003b      	movs	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001126:	003b      	movs	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800112c:	0039      	movs	r1, r7
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_DAC1_Init+0x5c>)
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fbe5 	bl	8002902 <HAL_DAC_ConfigChannel>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 800113c:	f000 faf6 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000033e 	.word	0x2000033e
 800114c:	200000d4 	.word	0x200000d4
 8001150:	40007400 	.word	0x40007400

08001154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_I2C1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MX_I2C1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <MX_I2C1_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_I2C1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001190:	0018      	movs	r0, r3
 8001192:	f001 ffed 	bl	8003170 <HAL_I2C_Init>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 fac7 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 fc82 	bl	8003aac <HAL_I2CEx_ConfigAnalogFilter>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 fabe 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 fcc5 	bl	8003b44 <HAL_I2CEx_ConfigDigitalFilter>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 fab5 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000e8 	.word	0x200000e8
 80011cc:	40005400 	.word	0x40005400
 80011d0:	2000090e 	.word	0x2000090e

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_SPI1_Init+0x78>)
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <MX_SPI1_Init+0x7c>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_SPI1_Init+0x78>)
 80011e0:	2282      	movs	r2, #130	; 0x82
 80011e2:	0052      	lsls	r2, r2, #1
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_SPI1_Init+0x78>)
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	00d2      	lsls	r2, r2, #3
 80011ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI1_Init+0x78>)
 80011f0:	22f0      	movs	r2, #240	; 0xf0
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_SPI1_Init+0x78>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_SPI1_Init+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI1_Init+0x78>)
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_SPI1_Init+0x78>)
 800120c:	2230      	movs	r2, #48	; 0x30
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI1_Init+0x78>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_SPI1_Init+0x78>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_SPI1_Init+0x78>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI1_Init+0x78>)
 8001224:	2207      	movs	r2, #7
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_SPI1_Init+0x78>)
 800122a:	2200      	movs	r2, #0
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI1_Init+0x78>)
 8001230:	2208      	movs	r2, #8
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <MX_SPI1_Init+0x78>)
 8001236:	0018      	movs	r0, r3
 8001238:	f003 fa4e 	bl	80046d8 <HAL_SPI_Init>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 fa74 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000134 	.word	0x20000134
 8001250:	40013000 	.word	0x40013000

08001254 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_SPI2_Init+0x78>)
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <MX_SPI2_Init+0x7c>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_SPI2_Init+0x78>)
 8001260:	2282      	movs	r2, #130	; 0x82
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_SPI2_Init+0x78>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	00d2      	lsls	r2, r2, #3
 800126c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_SPI2_Init+0x78>)
 8001270:	22f0      	movs	r2, #240	; 0xf0
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_SPI2_Init+0x78>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_SPI2_Init+0x78>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_SPI2_Init+0x78>)
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_SPI2_Init+0x78>)
 800128c:	2230      	movs	r2, #48	; 0x30
 800128e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_SPI2_Init+0x78>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_SPI2_Init+0x78>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_SPI2_Init+0x78>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_SPI2_Init+0x78>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_SPI2_Init+0x78>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_SPI2_Init+0x78>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <MX_SPI2_Init+0x78>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fa0e 	bl	80046d8 <HAL_SPI_Init>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 fa34 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000198 	.word	0x20000198
 80012d0:	40003800 	.word	0x40003800

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	2348      	movs	r3, #72	; 0x48
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	0018      	movs	r0, r3
 80012e0:	2310      	movs	r3, #16
 80012e2:	001a      	movs	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	f006 f8dd 	bl	80074a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	0018      	movs	r0, r3
 80012f0:	2308      	movs	r3, #8
 80012f2:	001a      	movs	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	f006 f8d5 	bl	80074a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	2324      	movs	r3, #36	; 0x24
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	0018      	movs	r0, r3
 8001300:	231c      	movs	r3, #28
 8001302:	001a      	movs	r2, r3
 8001304:	2100      	movs	r1, #0
 8001306:	f006 f8cd 	bl	80074a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	0018      	movs	r0, r3
 800130e:	2320      	movs	r3, #32
 8001310:	001a      	movs	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	f006 f8c6 	bl	80074a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001318:	4b46      	ldr	r3, [pc, #280]	; (8001434 <MX_TIM1_Init+0x160>)
 800131a:	4a47      	ldr	r2, [pc, #284]	; (8001438 <MX_TIM1_Init+0x164>)
 800131c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 800131e:	4b45      	ldr	r3, [pc, #276]	; (8001434 <MX_TIM1_Init+0x160>)
 8001320:	2263      	movs	r2, #99	; 0x63
 8001322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b43      	ldr	r3, [pc, #268]	; (8001434 <MX_TIM1_Init+0x160>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 600 - 1;
 800132a:	4b42      	ldr	r3, [pc, #264]	; (8001434 <MX_TIM1_Init+0x160>)
 800132c:	4a43      	ldr	r2, [pc, #268]	; (800143c <MX_TIM1_Init+0x168>)
 800132e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <MX_TIM1_Init+0x160>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001336:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <MX_TIM1_Init+0x160>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_TIM1_Init+0x160>)
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001342:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <MX_TIM1_Init+0x160>)
 8001344:	0018      	movs	r0, r3
 8001346:	f003 fd4d 	bl	8004de4 <HAL_TIM_Base_Init>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 f9ed 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001352:	2148      	movs	r1, #72	; 0x48
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0152      	lsls	r2, r2, #5
 800135a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135c:	187a      	adds	r2, r7, r1
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <MX_TIM1_Init+0x160>)
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f004 f8c2 	bl	80054ec <HAL_TIM_ConfigClockSource>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800136c:	f000 f9de 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <MX_TIM1_Init+0x160>)
 8001372:	0018      	movs	r0, r3
 8001374:	f003 fe86 	bl	8005084 <HAL_TIM_PWM_Init>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800137c:	f000 f9d6 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138e:	187a      	adds	r2, r7, r1
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <MX_TIM1_Init+0x160>)
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f004 fcd7 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800139e:	f000 f9c5 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2124      	movs	r1, #36	; 0x24
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2260      	movs	r2, #96	; 0x60
 80013a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7 -1;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2206      	movs	r2, #6
 80013ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	1879      	adds	r1, r7, r1
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_TIM1_Init+0x160>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	0018      	movs	r0, r3
 80013d6:	f003 ffc3 	bl	8005360 <HAL_TIM_PWM_ConfigChannel>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80013de:	f000 f9a5 	bl	800172c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	0192      	lsls	r2, r2, #6
 8001406:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800140e:	1d3a      	adds	r2, r7, #4
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_TIM1_Init+0x160>)
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f004 fcf5 	bl	8005e04 <HAL_TIMEx_ConfigBreakDeadTime>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800141e:	f000 f985 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <MX_TIM1_Init+0x160>)
 8001424:	0018      	movs	r0, r3
 8001426:	f000 fbc1 	bl	8001bac <HAL_TIM_MspPostInit>

}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b016      	add	sp, #88	; 0x58
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	200001fc 	.word	0x200001fc
 8001438:	40012c00 	.word	0x40012c00
 800143c:	00000257 	.word	0x00000257

08001440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	2328      	movs	r3, #40	; 0x28
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	0018      	movs	r0, r3
 800144c:	2310      	movs	r3, #16
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f006 f827 	bl	80074a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	2320      	movs	r3, #32
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	0018      	movs	r0, r3
 800145c:	2308      	movs	r3, #8
 800145e:	001a      	movs	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	f006 f81f 	bl	80074a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0018      	movs	r0, r3
 800146a:	231c      	movs	r3, #28
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f006 f818 	bl	80074a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <MX_TIM2_Init+0xf8>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	05d2      	lsls	r2, r2, #23
 800147a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_TIM2_Init+0xf8>)
 800147e:	2263      	movs	r2, #99	; 0x63
 8001480:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <MX_TIM2_Init+0xf8>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 480 - 1;
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_TIM2_Init+0xf8>)
 800148a:	22e0      	movs	r2, #224	; 0xe0
 800148c:	32ff      	adds	r2, #255	; 0xff
 800148e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_TIM2_Init+0xf8>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_TIM2_Init+0xf8>)
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_TIM2_Init+0xf8>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f003 fca0 	bl	8004de4 <HAL_TIM_Base_Init>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014a8:	f000 f940 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	2128      	movs	r1, #40	; 0x28
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0152      	lsls	r2, r2, #5
 80014b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b6:	187a      	adds	r2, r7, r1
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_TIM2_Init+0xf8>)
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f004 f815 	bl	80054ec <HAL_TIM_ConfigClockSource>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014c6:	f000 f931 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_TIM2_Init+0xf8>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 fdd9 	bl	8005084 <HAL_TIM_PWM_Init>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014d6:	f000 f929 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2120      	movs	r1, #32
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	187a      	adds	r2, r7, r1
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_TIM2_Init+0xf8>)
 80014ec:	0011      	movs	r1, r2
 80014ee:	0018      	movs	r0, r3
 80014f0:	f004 fc2a 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80014f8:	f000 f918 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2260      	movs	r2, #96	; 0x60
 8001500:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5 - 1;
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2204      	movs	r2, #4
 8001506:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001514:	1d39      	adds	r1, r7, #4
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_TIM2_Init+0xf8>)
 8001518:	220c      	movs	r2, #12
 800151a:	0018      	movs	r0, r3
 800151c:	f003 ff20 	bl	8005360 <HAL_TIM_PWM_ConfigChannel>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001524:	f000 f902 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <MX_TIM2_Init+0xf8>)
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fb3e 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b00e      	add	sp, #56	; 0x38
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000244 	.word	0x20000244

0800153c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_USART1_UART_Init+0x6c>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_USART1_UART_Init+0x70>)
 8001548:	2200      	movs	r2, #0
 800154a:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_USART1_UART_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <MX_USART1_UART_Init+0x7c>)
 8001556:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 800155a:	22e1      	movs	r2, #225	; 0xe1
 800155c:	0212      	lsls	r2, r2, #8
 800155e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001574:	220c      	movs	r2, #12
 8001576:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART1_UART_Init+0x78>)
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fca4 	bl	8005ee0 <HAL_UART_Init>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 800159c:	f000 f8c6 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000356 	.word	0x20000356
 80015ac:	2000035e 	.word	0x2000035e
 80015b0:	20000386 	.word	0x20000386
 80015b4:	2000028c 	.word	0x2000028c
 80015b8:	40013800 	.word	0x40013800

080015bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_DMA_Init+0x38>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_DMA_Init+0x38>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_DMA_Init+0x38>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2009      	movs	r0, #9
 80015e0:	f001 f93a 	bl	8002858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015e4:	2009      	movs	r0, #9
 80015e6:	f001 f94c 	bl	8002882 <HAL_NVIC_EnableIRQ>

}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40021000 	.word	0x40021000

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	2414      	movs	r4, #20
 8001600:	193b      	adds	r3, r7, r4
 8001602:	0018      	movs	r0, r3
 8001604:	2314      	movs	r3, #20
 8001606:	001a      	movs	r2, r3
 8001608:	2100      	movs	r1, #0
 800160a:	f005 ff4b 	bl	80074a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <MX_GPIO_Init+0x124>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_GPIO_Init+0x124>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0309      	lsls	r1, r1, #12
 8001618:	430a      	orrs	r2, r1
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_GPIO_Init+0x124>)
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	031b      	lsls	r3, r3, #12
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <MX_GPIO_Init+0x124>)
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_GPIO_Init+0x124>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	03c9      	lsls	r1, r1, #15
 8001634:	430a      	orrs	r2, r1
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <MX_GPIO_Init+0x124>)
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	03db      	lsls	r3, r3, #15
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <MX_GPIO_Init+0x124>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MX_GPIO_Init+0x124>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0289      	lsls	r1, r1, #10
 8001650:	430a      	orrs	r2, r1
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <MX_GPIO_Init+0x124>)
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	029b      	lsls	r3, r3, #10
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <MX_GPIO_Init+0x124>)
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_GPIO_Init+0x124>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	02c9      	lsls	r1, r1, #11
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_GPIO_Init+0x124>)
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	02db      	lsls	r3, r3, #11
 8001678:	4013      	ands	r3, r2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800167e:	239f      	movs	r3, #159	; 0x9f
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	4827      	ldr	r0, [pc, #156]	; (8001720 <MX_GPIO_Init+0x128>)
 8001684:	2200      	movs	r2, #0
 8001686:	0019      	movs	r1, r3
 8001688:	f001 fd55 	bl	8003136 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_GPIO_Init+0x12c>)
 800168e:	2200      	movs	r2, #0
 8001690:	21c0      	movs	r1, #192	; 0xc0
 8001692:	0018      	movs	r0, r3
 8001694:	f001 fd4f 	bl	8003136 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_GPIO_Init+0x130>)
 800169a:	2200      	movs	r2, #0
 800169c:	2160      	movs	r1, #96	; 0x60
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 fd49 	bl	8003136 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	229f      	movs	r2, #159	; 0x9f
 80016a8:	0192      	lsls	r2, r2, #6
 80016aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	2201      	movs	r2, #1
 80016b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_GPIO_Init+0x128>)
 80016c2:	0019      	movs	r1, r3
 80016c4:	0010      	movs	r0, r2
 80016c6:	f001 fba9 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	22c0      	movs	r2, #192	; 0xc0
 80016ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	2201      	movs	r2, #1
 80016d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <MX_GPIO_Init+0x12c>)
 80016e6:	0019      	movs	r1, r3
 80016e8:	0010      	movs	r0, r2
 80016ea:	f001 fb97 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ee:	0021      	movs	r1, r4
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2260      	movs	r2, #96	; 0x60
 80016f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2201      	movs	r2, #1
 80016fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	187b      	adds	r3, r7, r1
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <MX_GPIO_Init+0x130>)
 800170c:	0019      	movs	r1, r3
 800170e:	0010      	movs	r0, r2
 8001710:	f001 fb84 	bl	8002e1c <HAL_GPIO_Init>

}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b00b      	add	sp, #44	; 0x2c
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	48000800 	.word	0x48000800
 8001724:	48001400 	.word	0x48001400
 8001728:	48000400 	.word	0x48000400

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_MspInit+0x44>)
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_MspInit+0x44>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_MspInit+0x44>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x44>)
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_MspInit+0x44>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0549      	lsls	r1, r1, #21
 8001760:	430a      	orrs	r2, r1
 8001762:	61da      	str	r2, [r3, #28]
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_MspInit+0x44>)
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	055b      	lsls	r3, r3, #21
 800176c:	4013      	ands	r3, r2
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08d      	sub	sp, #52	; 0x34
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	241c      	movs	r4, #28
 800178a:	193b      	adds	r3, r7, r4
 800178c:	0018      	movs	r0, r3
 800178e:	2314      	movs	r3, #20
 8001790:	001a      	movs	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	f005 fe86 	bl	80074a4 <memset>
  if(hadc->Instance==ADC1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_ADC_MspInit+0x148>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d000      	beq.n	80017a4 <HAL_ADC_MspInit+0x24>
 80017a2:	e08d      	b.n	80018c0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0089      	lsls	r1, r1, #2
 80017ae:	430a      	orrs	r2, r1
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0309      	lsls	r1, r1, #12
 80017ca:	430a      	orrs	r2, r1
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	031b      	lsls	r3, r3, #12
 80017d6:	4013      	ands	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	0289      	lsls	r1, r1, #10
 80017e6:	430a      	orrs	r2, r1
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	029b      	lsls	r3, r3, #10
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	02c9      	lsls	r1, r1, #11
 8001802:	430a      	orrs	r2, r1
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_ADC_MspInit+0x14c>)
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	02db      	lsls	r3, r3, #11
 800180e:	4013      	ands	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001814:	193b      	adds	r3, r7, r4
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	193b      	adds	r3, r7, r4
 800181c:	2203      	movs	r2, #3
 800181e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	193b      	adds	r3, r7, r4
 8001828:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_ADC_MspInit+0x150>)
 800182a:	0019      	movs	r1, r3
 800182c:	0010      	movs	r0, r2
 800182e:	f001 faf5 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001832:	193b      	adds	r3, r7, r4
 8001834:	22ef      	movs	r2, #239	; 0xef
 8001836:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	193b      	adds	r3, r7, r4
 800183a:	2203      	movs	r2, #3
 800183c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	193a      	adds	r2, r7, r4
 8001846:	2390      	movs	r3, #144	; 0x90
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f001 fae5 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001852:	193b      	adds	r3, r7, r4
 8001854:	2203      	movs	r2, #3
 8001856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001858:	193b      	adds	r3, r7, r4
 800185a:	2203      	movs	r2, #3
 800185c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	193b      	adds	r3, r7, r4
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	193b      	adds	r3, r7, r4
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_ADC_MspInit+0x154>)
 8001868:	0019      	movs	r1, r3
 800186a:	0010      	movs	r0, r2
 800186c:	f001 fad6 	bl	8002e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 8001872:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_ADC_MspInit+0x15c>)
 8001874:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0052      	lsls	r2, r2, #1
 800188e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 f8a2 	bl	80029f0 <HAL_DMA_Init>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80018b0:	f7ff ff3c 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_ADC_MspInit+0x158>)
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b00d      	add	sp, #52	; 0x34
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	40012400 	.word	0x40012400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000400 	.word	0x48000400
 80018d8:	20000090 	.word	0x20000090
 80018dc:	40020008 	.word	0x40020008

080018e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	2414      	movs	r4, #20
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	0018      	movs	r0, r3
 80018ee:	2314      	movs	r3, #20
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f005 fdd6 	bl	80074a4 <memset>
  if(hdac->Instance==DAC)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_DAC_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12b      	bne.n	800195a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_DAC_MspInit+0x88>)
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_DAC_MspInit+0x88>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0589      	lsls	r1, r1, #22
 800190c:	430a      	orrs	r2, r1
 800190e:	61da      	str	r2, [r3, #28]
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_DAC_MspInit+0x88>)
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	059b      	lsls	r3, r3, #22
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_DAC_MspInit+0x88>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_DAC_MspInit+0x88>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0289      	lsls	r1, r1, #10
 8001928:	430a      	orrs	r2, r1
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_DAC_MspInit+0x88>)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800193a:	193b      	adds	r3, r7, r4
 800193c:	2210      	movs	r2, #16
 800193e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2203      	movs	r2, #3
 8001944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	193a      	adds	r2, r7, r4
 800194e:	2390      	movs	r3, #144	; 0x90
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f001 fa61 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b00b      	add	sp, #44	; 0x2c
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40007400 	.word	0x40007400
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	2414      	movs	r4, #20
 8001976:	193b      	adds	r3, r7, r4
 8001978:	0018      	movs	r0, r3
 800197a:	2314      	movs	r3, #20
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f005 fd90 	bl	80074a4 <memset>
  if(hi2c->Instance==I2C1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <HAL_I2C_MspInit+0x90>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d132      	bne.n	80019f4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	02c9      	lsls	r1, r1, #11
 8001998:	430a      	orrs	r2, r1
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	22c0      	movs	r2, #192	; 0xc0
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b2:	0021      	movs	r1, r4
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2212      	movs	r2, #18
 80019b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2203      	movs	r2, #3
 80019c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2201      	movs	r2, #1
 80019ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_I2C_MspInit+0x98>)
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	f001 fa22 	bl	8002e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	0389      	lsls	r1, r1, #14
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_I2C_MspInit+0x94>)
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	039b      	lsls	r3, r3, #14
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b00b      	add	sp, #44	; 0x2c
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	40005400 	.word	0x40005400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400

08001a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b08d      	sub	sp, #52	; 0x34
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	241c      	movs	r4, #28
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	0018      	movs	r0, r3
 8001a16:	2314      	movs	r3, #20
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f005 fd42 	bl	80074a4 <memset>
  if(hspi->Instance==SPI1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_SPI_MspInit+0x100>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d132      	bne.n	8001a90 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0149      	lsls	r1, r1, #5
 8001a34:	430a      	orrs	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	015b      	lsls	r3, r3, #5
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	02c9      	lsls	r1, r1, #11
 8001a50:	430a      	orrs	r2, r1
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	02db      	lsls	r3, r3, #11
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a62:	0021      	movs	r1, r4
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2218      	movs	r2, #24
 8001a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_SPI_MspInit+0x108>)
 8001a86:	0019      	movs	r1, r3
 8001a88:	0010      	movs	r0, r2
 8001a8a:	f001 f9c7 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a8e:	e037      	b.n	8001b00 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_SPI_MspInit+0x10c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d132      	bne.n	8001b00 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	01c9      	lsls	r1, r1, #7
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	61da      	str	r2, [r3, #28]
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	02c9      	lsls	r1, r1, #11
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_SPI_MspInit+0x104>)
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	02db      	lsls	r3, r3, #11
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ad2:	211c      	movs	r1, #28
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	22c0      	movs	r2, #192	; 0xc0
 8001ad8:	01d2      	lsls	r2, r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2202      	movs	r2, #2
 8001ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	2203      	movs	r2, #3
 8001aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001aee:	187b      	adds	r3, r7, r1
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <HAL_SPI_MspInit+0x108>)
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f001 f98e 	bl	8002e1c <HAL_GPIO_Init>
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b00d      	add	sp, #52	; 0x34
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	40013000 	.word	0x40013000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	40003800 	.word	0x40003800

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11e      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0109      	lsls	r1, r1, #4
 8001b34:	430a      	orrs	r2, r1
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	200d      	movs	r0, #13
 8001b4c:	f000 fe84 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001b50:	200d      	movs	r0, #13
 8001b52:	f000 fe96 	bl	8002882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2101      	movs	r1, #1
 8001b5a:	200e      	movs	r0, #14
 8001b5c:	f000 fe7c 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b60:	200e      	movs	r0, #14
 8001b62:	f000 fe8e 	bl	8002882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b66:	e019      	b.n	8001b9c <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d113      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	61da      	str	r2, [r3, #28]
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x90>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	200f      	movs	r0, #15
 8001b92:	f000 fe61 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 fe73 	bl	8002882 <HAL_NVIC_EnableIRQ>
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	2414      	movs	r4, #20
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	2314      	movs	r3, #20
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f005 fc70 	bl	80074a4 <memset>
  if(htim->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_TIM_MspPostInit+0xd0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d126      	bne.n	8001c1c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0289      	lsls	r1, r1, #10
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	0021      	movs	r1, r4
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2202      	movs	r2, #2
 8001c0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	187a      	adds	r2, r7, r1
 8001c0e:	2390      	movs	r3, #144	; 0x90
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	0011      	movs	r1, r2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f001 f901 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c1a:	e02a      	b.n	8001c72 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	05db      	lsls	r3, r3, #23
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d124      	bne.n	8001c72 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	02c9      	lsls	r1, r1, #11
 8001c32:	430a      	orrs	r2, r1
 8001c34:	615a      	str	r2, [r3, #20]
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_TIM_MspPostInit+0xd4>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	02db      	lsls	r3, r3, #11
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c44:	2114      	movs	r1, #20
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2202      	movs	r2, #2
 8001c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2202      	movs	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_TIM_MspPostInit+0xd8>)
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f001 f8d5 	bl	8002e1c <HAL_GPIO_Init>
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b00b      	add	sp, #44	; 0x2c
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40021000 	.word	0x40021000
 8001c84:	48000400 	.word	0x48000400

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	2414      	movs	r4, #20
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	0018      	movs	r0, r3
 8001c96:	2314      	movs	r3, #20
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f005 fc02 	bl	80074a4 <memset>
  if(huart->Instance==USART1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_UART_MspInit+0xa4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d13b      	bne.n	8001d22 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	01c9      	lsls	r1, r1, #7
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	0289      	lsls	r1, r1, #10
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_UART_MspInit+0xa8>)
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce2:	193b      	adds	r3, r7, r4
 8001ce4:	22c0      	movs	r2, #192	; 0xc0
 8001ce6:	00d2      	lsls	r2, r2, #3
 8001ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	0021      	movs	r1, r4
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2202      	movs	r2, #2
 8001cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2201      	movs	r2, #1
 8001d02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	187a      	adds	r2, r7, r1
 8001d06:	2390      	movs	r3, #144	; 0x90
 8001d08:	05db      	lsls	r3, r3, #23
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f001 f885 	bl	8002e1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	201b      	movs	r0, #27
 8001d18:	f000 fd9e 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d1c:	201b      	movs	r0, #27
 8001d1e:	f000 fdb0 	bl	8002882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b00b      	add	sp, #44	; 0x2c
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40021000 	.word	0x40021000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f8b8 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <DMA1_Channel1_IRQHandler+0x14>)
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 ff6b 	bl	8002c46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20000090 	.word	0x20000090

08001d7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f003 f9d6 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	200001fc 	.word	0x200001fc

08001d94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <TIM1_CC_IRQHandler+0x14>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f003 f9ca 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	200001fc 	.word	0x200001fc

08001dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <TIM2_IRQHandler+0x14>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f003 f9be 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	20000244 	.word	0x20000244

08001dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <USART1_IRQHandler+0x14>)
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f004 f9e6 	bl	800619c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	2000028c 	.word	0x2000028c

08001ddc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <Reset_Handler>:
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <LoopForever+0x2>)
 8001dea:	4685      	mov	sp, r0
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopForever+0x6>)
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopForever+0xa>)
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopForever+0xe>)
 8001df2:	2300      	movs	r3, #0
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:
 8001df6:	58d4      	ldr	r4, [r2, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:
 8001dfc:	18c4      	adds	r4, r0, r3
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopForever+0x12>)
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopForever+0x16>)
 8001e06:	2300      	movs	r3, #0
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:
 8001e0e:	42a2      	cmp	r2, r4
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>
 8001e12:	f7ff ffe3 	bl	8001ddc <SystemInit>
 8001e16:	f005 fb21 	bl	800745c <__libc_init_array>
 8001e1a:	f7fe ff5f 	bl	8000cdc <main>

08001e1e <LoopForever>:
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
 8001e20:	20002000 	.word	0x20002000
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000034 	.word	0x20000034
 8001e2c:	080075ac 	.word	0x080075ac
 8001e30:	20000034 	.word	0x20000034
 8001e34:	20000398 	.word	0x20000398

08001e38 <ADC1_COMP_IRQHandler>:
 8001e38:	e7fe      	b.n	8001e38 <ADC1_COMP_IRQHandler>
	...

08001e3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_Init+0x24>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_Init+0x24>)
 8001e46:	2110      	movs	r1, #16
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f809 	bl	8001e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e52:	f7ff fc71 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40022000 	.word	0x40022000

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_InitTick+0x5c>)
 8001e6e:	681c      	ldr	r4, [r3, #0]
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_InitTick+0x60>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	0019      	movs	r1, r3
 8001e76:	23fa      	movs	r3, #250	; 0xfa
 8001e78:	0098      	lsls	r0, r3, #2
 8001e7a:	f7fe f945 	bl	8000108 <__udivsi3>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	0019      	movs	r1, r3
 8001e82:	0020      	movs	r0, r4
 8001e84:	f7fe f940 	bl	8000108 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fd09 	bl	80028a2 <HAL_SYSTICK_Config>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e00f      	b.n	8001eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d80b      	bhi.n	8001eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fcd6 	bl	8002858 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_InitTick+0x64>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b003      	add	sp, #12
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	20000028 	.word	0x20000028
 8001ec4:	20000030 	.word	0x20000030
 8001ec8:	2000002c 	.word	0x2000002c

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	18d2      	adds	r2, r2, r3
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000030 	.word	0x20000030
 8001eec:	20000394 	.word	0x20000394

08001ef0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000394 	.word	0x20000394

08001f04 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_SuspendTick+0x18>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_SuspendTick+0x18>)
 8001f0e:	2102      	movs	r1, #2
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e125      	b.n	800218a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2234      	movs	r2, #52	; 0x34
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff fc12 	bl	8001780 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	2210      	movs	r2, #16
 8001f62:	4013      	ands	r3, r2
 8001f64:	d000      	beq.n	8001f68 <HAL_ADC_Init+0x48>
 8001f66:	e103      	b.n	8002170 <HAL_ADC_Init+0x250>
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d000      	beq.n	8001f74 <HAL_ADC_Init+0x54>
 8001f72:	e0fd      	b.n	8002170 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f7e:	d000      	beq.n	8001f82 <HAL_ADC_Init+0x62>
 8001f80:	e0f6      	b.n	8002170 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	4a83      	ldr	r2, [pc, #524]	; (8002194 <HAL_ADC_Init+0x274>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d112      	bne.n	8001fc6 <HAL_ADC_Init+0xa6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d009      	beq.n	8001fc2 <HAL_ADC_Init+0xa2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	401a      	ands	r2, r3
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Init+0xa6>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADC_Init+0xa8>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2218      	movs	r2, #24
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	0899      	lsrs	r1, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4964      	ldr	r1, [pc, #400]	; (8002198 <HAL_ADC_Init+0x278>)
 8002006:	400a      	ands	r2, r1
 8002008:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
 800200e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e5b      	ldrb	r3, [r3, #25]
 8002014:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002016:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7e9b      	ldrb	r3, [r3, #26]
 800201c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800201e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <HAL_ADC_Init+0x10e>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	e000      	b.n	8002030 <HAL_ADC_Init+0x110>
 800202e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002030:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002036:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d101      	bne.n	8002044 <HAL_ADC_Init+0x124>
 8002040:	2304      	movs	r3, #4
 8002042:	e000      	b.n	8002046 <HAL_ADC_Init+0x126>
 8002044:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002046:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2124      	movs	r1, #36	; 0x24
 800204c:	5c5b      	ldrb	r3, [r3, r1]
 800204e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002050:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7edb      	ldrb	r3, [r3, #27]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d115      	bne.n	800208c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e9b      	ldrb	r3, [r3, #26]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	0252      	lsls	r2, r2, #9
 800206e:	4313      	orrs	r3, r2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	e00b      	b.n	800208c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	2220      	movs	r2, #32
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	2201      	movs	r2, #1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	23c2      	movs	r3, #194	; 0xc2
 8002092:	33ff      	adds	r3, #255	; 0xff
 8002094:	429a      	cmp	r2, r3
 8002096:	d007      	beq.n	80020a8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020a0:	4313      	orrs	r3, r2
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	055b      	lsls	r3, r3, #21
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d01b      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d017      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d013      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d00f      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00b      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d007      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d003      	beq.n	80020fc <HAL_ADC_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	2b07      	cmp	r3, #7
 80020fa:	d112      	bne.n	8002122 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2107      	movs	r1, #7
 8002108:	438a      	bics	r2, r1
 800210a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6959      	ldr	r1, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	2207      	movs	r2, #7
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_ADC_Init+0x27c>)
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d10b      	bne.n	800214a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2203      	movs	r2, #3
 800213e:	4393      	bics	r3, r2
 8002140:	2201      	movs	r2, #1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002148:	e01c      	b.n	8002184 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	2212      	movs	r2, #18
 8002150:	4393      	bics	r3, r2
 8002152:	2210      	movs	r2, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	2201      	movs	r2, #1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002166:	230f      	movs	r3, #15
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800216e:	e009      	b.n	8002184 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	2210      	movs	r2, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800217c:	230f      	movs	r3, #15
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	fffffefd 	.word	0xfffffefd
 8002198:	fffe0219 	.word	0xfffe0219
 800219c:	833fffe7 	.word	0x833fffe7

080021a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2317      	movs	r3, #23
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d15e      	bne.n	800227e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2234      	movs	r2, #52	; 0x34
 80021c4:	5c9b      	ldrb	r3, [r3, r2]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Start_DMA+0x2e>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e05e      	b.n	800228c <HAL_ADC_Start_DMA+0xec>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2234      	movs	r2, #52	; 0x34
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	7e5b      	ldrb	r3, [r3, #25]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80021de:	2317      	movs	r3, #23
 80021e0:	18fc      	adds	r4, r7, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f983 	bl	80024f0 <ADC_Enable>
 80021ea:	0003      	movs	r3, r0
 80021ec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021ee:	2317      	movs	r3, #23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d146      	bne.n	8002286 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_ADC_Start_DMA+0xf4>)
 80021fe:	4013      	ands	r3, r2
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	0052      	lsls	r2, r2, #1
 8002204:	431a      	orrs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2234      	movs	r2, #52	; 0x34
 8002214:	2100      	movs	r1, #0
 8002216:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_ADC_Start_DMA+0xf8>)
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_ADC_Start_DMA+0xfc>)
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_ADC_Start_DMA+0x100>)
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	221c      	movs	r2, #28
 8002236:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2110      	movs	r1, #16
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3340      	adds	r3, #64	; 0x40
 8002262:	0019      	movs	r1, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f000 fc0a 	bl	8002a80 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2104      	movs	r1, #4
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	e003      	b.n	8002286 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800227e:	2317      	movs	r3, #23
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2202      	movs	r2, #2
 8002284:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002286:	2317      	movs	r3, #23
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b007      	add	sp, #28
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	fffff0fe 	.word	0xfffff0fe
 8002298:	080025f9 	.word	0x080025f9
 800229c:	080026ad 	.word	0x080026ad
 80022a0:	080026cb 	.word	0x080026cb

080022a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022de:	230f      	movs	r3, #15
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	055b      	lsls	r3, r3, #21
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d011      	beq.n	800231a <HAL_ADC_ConfigChannel+0x46>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00d      	beq.n	800231a <HAL_ADC_ConfigChannel+0x46>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	2b02      	cmp	r3, #2
 8002304:	d009      	beq.n	800231a <HAL_ADC_ConfigChannel+0x46>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	2b03      	cmp	r3, #3
 800230c:	d005      	beq.n	800231a <HAL_ADC_ConfigChannel+0x46>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	2b04      	cmp	r3, #4
 8002314:	d001      	beq.n	800231a <HAL_ADC_ConfigChannel+0x46>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2234      	movs	r2, #52	; 0x34
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x54>
 8002324:	2302      	movs	r3, #2
 8002326:	e0d0      	b.n	80024ca <HAL_ADC_ConfigChannel+0x1f6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2234      	movs	r2, #52	; 0x34
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d000      	beq.n	800233e <HAL_ADC_ConfigChannel+0x6a>
 800233c:	e0b4      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4a64      	ldr	r2, [pc, #400]	; (80024d4 <HAL_ADC_ConfigChannel+0x200>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d100      	bne.n	800234a <HAL_ADC_ConfigChannel+0x76>
 8002348:	e082      	b.n	8002450 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	429a      	cmp	r2, r3
 800236a:	d037      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d033      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	2b02      	cmp	r3, #2
 800237a:	d02f      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2b03      	cmp	r3, #3
 8002382:	d02b      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	2b04      	cmp	r3, #4
 800238a:	d027      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b05      	cmp	r3, #5
 8002392:	d023      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2b06      	cmp	r3, #6
 800239a:	d01f      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	2b07      	cmp	r3, #7
 80023a2:	d01b      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2107      	movs	r1, #7
 80023b0:	400b      	ands	r3, r1
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d012      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2107      	movs	r1, #7
 80023c2:	438a      	bics	r2, r1
 80023c4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6959      	ldr	r1, [r3, #20]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2207      	movs	r2, #7
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d007      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x120>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b11      	cmp	r3, #17
 80023ea:	d003      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x120>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d163      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_ADC_ConfigChannel+0x204>)
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d009      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x140>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b11      	cmp	r3, #17
 8002406:	d102      	bne.n	800240e <HAL_ADC_ConfigChannel+0x13a>
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	03db      	lsls	r3, r3, #15
 800240c:	e004      	b.n	8002418 <HAL_ADC_ConfigChannel+0x144>
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	045b      	lsls	r3, r3, #17
 8002412:	e001      	b.n	8002418 <HAL_ADC_ConfigChannel+0x144>
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_ADC_ConfigChannel+0x204>)
 800241a:	430b      	orrs	r3, r1
 800241c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b10      	cmp	r3, #16
 8002424:	d14a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_ADC_ConfigChannel+0x208>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	492d      	ldr	r1, [pc, #180]	; (80024e0 <HAL_ADC_ConfigChannel+0x20c>)
 800242c:	0018      	movs	r0, r3
 800242e:	f7fd fe6b 	bl	8000108 <__udivsi3>
 8002432:	0003      	movs	r3, r0
 8002434:	001a      	movs	r2, r3
 8002436:	0013      	movs	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	189b      	adds	r3, r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002440:	e002      	b.n	8002448 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3b01      	subs	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f9      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x16e>
 800244e:	e035      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	4099      	lsls	r1, r3
 800245e:	000b      	movs	r3, r1
 8002460:	43d9      	mvns	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b10      	cmp	r3, #16
 8002470:	d007      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x1ae>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b11      	cmp	r3, #17
 8002478:	d003      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x1ae>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b12      	cmp	r3, #18
 8002480:	d11c      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_ADC_ConfigChannel+0x204>)
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b10      	cmp	r3, #16
 800248c:	d007      	beq.n	800249e <HAL_ADC_ConfigChannel+0x1ca>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b11      	cmp	r3, #17
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1c6>
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_ADC_ConfigChannel+0x210>)
 8002498:	e002      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1cc>
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_ADC_ConfigChannel+0x214>)
 800249c:	e000      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1cc>
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_ADC_ConfigChannel+0x218>)
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_ADC_ConfigChannel+0x204>)
 80024a2:	400b      	ands	r3, r1
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e009      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	2220      	movs	r2, #32
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2234      	movs	r2, #52	; 0x34
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80024c4:	230f      	movs	r3, #15
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b004      	add	sp, #16
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	00001001 	.word	0x00001001
 80024d8:	40012708 	.word	0x40012708
 80024dc:	20000028 	.word	0x20000028
 80024e0:	000f4240 	.word	0x000f4240
 80024e4:	ffbfffff 	.word	0xffbfffff
 80024e8:	feffffff 	.word	0xfeffffff
 80024ec:	ff7fffff 	.word	0xff7fffff

080024f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2203      	movs	r2, #3
 8002508:	4013      	ands	r3, r2
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <ADC_Enable+0x44>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	2b01      	cmp	r3, #1
 800251a:	d009      	beq.n	8002530 <ADC_Enable+0x40>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	401a      	ands	r2, r3
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	429a      	cmp	r2, r3
 800252e:	d101      	bne.n	8002534 <ADC_Enable+0x44>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <ADC_Enable+0x46>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d152      	bne.n	80025e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <ADC_Enable+0xfc>)
 8002542:	4013      	ands	r3, r2
 8002544:	d00d      	beq.n	8002562 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	2210      	movs	r2, #16
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	2201      	movs	r2, #1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e03f      	b.n	80025e2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <ADC_Enable+0x100>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	491f      	ldr	r1, [pc, #124]	; (80025f4 <ADC_Enable+0x104>)
 8002578:	0018      	movs	r0, r3
 800257a:	f7fd fdc5 	bl	8000108 <__udivsi3>
 800257e:	0003      	movs	r3, r0
 8002580:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002582:	e002      	b.n	800258a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f9      	bne.n	8002584 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002590:	f7ff fcae 	bl	8001ef0 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002598:	e01b      	b.n	80025d2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800259a:	f7ff fca9 	bl	8001ef0 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d914      	bls.n	80025d2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d00d      	beq.n	80025d2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	2210      	movs	r2, #16
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2201      	movs	r2, #1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e007      	b.n	80025e2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d1dc      	bne.n	800259a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	80000017 	.word	0x80000017
 80025f0:	20000028 	.word	0x20000028
 80025f4:	000f4240 	.word	0x000f4240

080025f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	2250      	movs	r2, #80	; 0x50
 800260c:	4013      	ands	r3, r2
 800260e:	d140      	bne.n	8002692 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	431a      	orrs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d12d      	bne.n	8002688 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002630:	2b00      	cmp	r3, #0
 8002632:	d129      	bne.n	8002688 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2208      	movs	r2, #8
 800263c:	4013      	ands	r3, r2
 800263e:	2b08      	cmp	r3, #8
 8002640:	d122      	bne.n	8002688 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2204      	movs	r2, #4
 800264a:	4013      	ands	r3, r2
 800264c:	d110      	bne.n	8002670 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	210c      	movs	r1, #12
 800265a:	438a      	bics	r2, r1
 800265c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <ADC_DMAConvCplt+0xb0>)
 8002664:	4013      	ands	r3, r2
 8002666:	2201      	movs	r2, #1
 8002668:	431a      	orrs	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
 800266e:	e00b      	b.n	8002688 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	2220      	movs	r2, #32
 8002676:	431a      	orrs	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	2201      	movs	r2, #1
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fe0a 	bl	80022a4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002690:	e005      	b.n	800269e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0010      	movs	r0, r2
 800269c:	4798      	blx	r3
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	fffffefe 	.word	0xfffffefe

080026ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fdf9 	bl	80022b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}

080026ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	2240      	movs	r2, #64	; 0x40
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	2204      	movs	r2, #4
 80026ea:	431a      	orrs	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7ff fde6 	bl	80022c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}

08002700 <__NVIC_EnableIRQ>:
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	0002      	movs	r2, r0
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b7f      	cmp	r3, #127	; 0x7f
 8002712:	d809      	bhi.n	8002728 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	001a      	movs	r2, r3
 800271a:	231f      	movs	r3, #31
 800271c:	401a      	ands	r2, r3
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_EnableIRQ+0x30>)
 8002720:	2101      	movs	r1, #1
 8002722:	4091      	lsls	r1, r2
 8002724:	000a      	movs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	0002      	movs	r2, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b7f      	cmp	r3, #127	; 0x7f
 8002748:	d828      	bhi.n	800279c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800274a:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <__NVIC_SetPriority+0xd4>)
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b25b      	sxtb	r3, r3
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	33c0      	adds	r3, #192	; 0xc0
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	589b      	ldr	r3, [r3, r2]
 800275a:	1dfa      	adds	r2, r7, #7
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	0011      	movs	r1, r2
 8002760:	2203      	movs	r2, #3
 8002762:	400a      	ands	r2, r1
 8002764:	00d2      	lsls	r2, r2, #3
 8002766:	21ff      	movs	r1, #255	; 0xff
 8002768:	4091      	lsls	r1, r2
 800276a:	000a      	movs	r2, r1
 800276c:	43d2      	mvns	r2, r2
 800276e:	401a      	ands	r2, r3
 8002770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	401a      	ands	r2, r3
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	2303      	movs	r3, #3
 8002782:	4003      	ands	r3, r0
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002788:	481f      	ldr	r0, [pc, #124]	; (8002808 <__NVIC_SetPriority+0xd4>)
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b25b      	sxtb	r3, r3
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	430a      	orrs	r2, r1
 8002794:	33c0      	adds	r3, #192	; 0xc0
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	501a      	str	r2, [r3, r0]
}
 800279a:	e031      	b.n	8002800 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <__NVIC_SetPriority+0xd8>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0019      	movs	r1, r3
 80027a4:	230f      	movs	r3, #15
 80027a6:	400b      	ands	r3, r1
 80027a8:	3b08      	subs	r3, #8
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3306      	adds	r3, #6
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	3304      	adds	r3, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1dfa      	adds	r2, r7, #7
 80027b8:	7812      	ldrb	r2, [r2, #0]
 80027ba:	0011      	movs	r1, r2
 80027bc:	2203      	movs	r2, #3
 80027be:	400a      	ands	r2, r1
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	21ff      	movs	r1, #255	; 0xff
 80027c4:	4091      	lsls	r1, r2
 80027c6:	000a      	movs	r2, r1
 80027c8:	43d2      	mvns	r2, r2
 80027ca:	401a      	ands	r2, r3
 80027cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	401a      	ands	r2, r3
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	0018      	movs	r0, r3
 80027dc:	2303      	movs	r3, #3
 80027de:	4003      	ands	r3, r0
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e4:	4809      	ldr	r0, [pc, #36]	; (800280c <__NVIC_SetPriority+0xd8>)
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	001c      	movs	r4, r3
 80027ec:	230f      	movs	r3, #15
 80027ee:	4023      	ands	r3, r4
 80027f0:	3b08      	subs	r3, #8
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	430a      	orrs	r2, r1
 80027f6:	3306      	adds	r3, #6
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	18c3      	adds	r3, r0, r3
 80027fc:	3304      	adds	r3, #4
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b003      	add	sp, #12
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	045b      	lsls	r3, r3, #17
 8002820:	429a      	cmp	r2, r3
 8002822:	d301      	bcc.n	8002828 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002824:	2301      	movs	r3, #1
 8002826:	e010      	b.n	800284a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <SysTick_Config+0x44>)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	3a01      	subs	r2, #1
 800282e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002830:	2301      	movs	r3, #1
 8002832:	425b      	negs	r3, r3
 8002834:	2103      	movs	r1, #3
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ff7c 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x44>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x44>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	210f      	movs	r1, #15
 8002864:	187b      	adds	r3, r7, r1
 8002866:	1c02      	adds	r2, r0, #0
 8002868:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	187b      	adds	r3, r7, r1
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	0011      	movs	r1, r2
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff ff5d 	bl	8002734 <__NVIC_SetPriority>
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	0002      	movs	r2, r0
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ff33 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff ffaf 	bl	8002810 <SysTick_Config>
 80028b2:	0003      	movs	r3, r0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e015      	b.n	80028fa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	791b      	ldrb	r3, [r3, #4]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7fe fffd 	bl	80018e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	795b      	ldrb	r3, [r3, #5]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_DAC_ConfigChannel+0x20>
 800291e:	2302      	movs	r3, #2
 8002920:	e029      	b.n	8002976 <HAL_DAC_ConfigChannel+0x74>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2202      	movs	r2, #2
 800292c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8002936:	223e      	movs	r2, #62	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	409a      	lsls	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	43da      	mvns	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b006      	add	sp, #24
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	795b      	ldrb	r3, [r3, #5]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DAC_Start+0x16>
 8002990:	2302      	movs	r3, #2
 8002992:	e028      	b.n	80029e6 <HAL_DAC_Start+0x68>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	223c      	movs	r2, #60	; 0x3c
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b3c      	cmp	r3, #60	; 0x3c
 80029c6:	d107      	bne.n	80029d8 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e036      	b.n	8002a74 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_DMA_Init+0x8c>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f9c4 	bl	8002de4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2221      	movs	r2, #33	; 0x21
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}  
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	ffffc00f 	.word	0xffffc00f

08002a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2317      	movs	r3, #23
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DMA_Start_IT+0x24>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e04f      	b.n	8002b44 <HAL_DMA_Start_IT+0xc4>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2221      	movs	r2, #33	; 0x21
 8002ab0:	5c9b      	ldrb	r3, [r3, r2]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d13a      	bne.n	8002b2e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	2102      	movs	r1, #2
 8002abe:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f954 	bl	8002d8a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	210e      	movs	r1, #14
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00f      	b.n	8002b1c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	210a      	movs	r1, #10
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2104      	movs	r1, #4
 8002b18:	438a      	bics	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e007      	b.n	8002b3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	2100      	movs	r1, #0
 8002b34:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b36:	2317      	movs	r3, #23
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002b3e:	2317      	movs	r3, #23
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
} 
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b006      	add	sp, #24
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	5c9b      	ldrb	r3, [r3, r2]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2204      	movs	r2, #4
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e020      	b.n	8002bb4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	210e      	movs	r1, #14
 8002b7e:	438a      	bics	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4091      	lsls	r1, r2
 8002b9e:	000a      	movs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	210f      	movs	r1, #15
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d006      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e028      	b.n	8002c38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	210e      	movs	r1, #14
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	438a      	bics	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4091      	lsls	r1, r2
 8002c12:	000a      	movs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2221      	movs	r2, #33	; 0x21
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	0010      	movs	r0, r2
 8002c36:	4798      	blx	r3
    } 
  }
  return status;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	781b      	ldrb	r3, [r3, #0]
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2204      	movs	r2, #4
 8002c64:	409a      	lsls	r2, r3
 8002c66:	0013      	movs	r3, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d024      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x72>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d020      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d107      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	438a      	bics	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <HAL_DMA_IRQHandler+0x66>
 8002caa:	e06a      	b.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	0010      	movs	r0, r2
 8002cb4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	e064      	b.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d02b      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xda>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d027      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d10b      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	210a      	movs	r1, #10
 8002ce8:	438a      	bics	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2221      	movs	r2, #33	; 0x21
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4091      	lsls	r1, r2
 8002d00:	000a      	movs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d1e:	e030      	b.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2208      	movs	r2, #8
 8002d26:	409a      	lsls	r2, r3
 8002d28:	0013      	movs	r3, r2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d028      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2208      	movs	r2, #8
 8002d34:	4013      	ands	r3, r2
 8002d36:	d024      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	210e      	movs	r1, #14
 8002d44:	438a      	bics	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2101      	movs	r1, #1
 8002d52:	4091      	lsls	r1, r2
 8002d54:	000a      	movs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2221      	movs	r2, #33	; 0x21
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	4798      	blx	r3
    }
   }
}  
 8002d80:	e7ff      	b.n	8002d82 <HAL_DMA_IRQHandler+0x13c>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b004      	add	sp, #16
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	2101      	movs	r1, #1
 8002da2:	4091      	lsls	r1, r2
 8002da4:	000a      	movs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d108      	bne.n	8002dca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dc8:	e007      	b.n	8002dda <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	60da      	str	r2, [r3, #12]
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <DMA_CalcBaseAndBitshift+0x30>)
 8002df2:	4694      	mov	ip, r2
 8002df4:	4463      	add	r3, ip
 8002df6:	2114      	movs	r1, #20
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7fd f985 	bl	8000108 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <DMA_CalcBaseAndBitshift+0x34>)
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	bffdfff8 	.word	0xbffdfff8
 8002e18:	40020000 	.word	0x40020000

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	e14f      	b.n	80030cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4091      	lsls	r1, r2
 8002e36:	000a      	movs	r2, r1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d100      	bne.n	8002e44 <HAL_GPIO_Init+0x28>
 8002e42:	e140      	b.n	80030c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d005      	beq.n	8002e5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d130      	bne.n	8002ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	0013      	movs	r3, r2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e92:	2201      	movs	r2, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d017      	beq.n	8002efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	0013      	movs	r3, r2
 8002eda:	43da      	mvns	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	0013      	movs	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d123      	bne.n	8002f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	58d3      	ldr	r3, [r2, r3]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2207      	movs	r2, #7
 8002f18:	4013      	ands	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2107      	movs	r1, #7
 8002f32:	400b      	ands	r3, r1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	409a      	lsls	r2, r3
 8002f38:	0013      	movs	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	6939      	ldr	r1, [r7, #16]
 8002f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	029b      	lsls	r3, r3, #10
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d100      	bne.n	8002f90 <HAL_GPIO_Init+0x174>
 8002f8e:	e09a      	b.n	80030c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f90:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	589b      	ldr	r3, [r3, r2]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4013      	ands	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	0013      	movs	r3, r2
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	2390      	movs	r3, #144	; 0x90
 8002fd0:	05db      	lsls	r3, r3, #23
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a44      	ldr	r2, [pc, #272]	; (80030ec <HAL_GPIO_Init+0x2d0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x1de>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <HAL_GPIO_Init+0x2d4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x1da>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x1d6>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	e004      	b.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_GPIO_Init+0x1e4>
 8002ffe:	2300      	movs	r3, #0
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	2103      	movs	r1, #3
 8003004:	400a      	ands	r2, r1
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	4093      	lsls	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003010:	4935      	ldr	r1, [pc, #212]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43da      	mvns	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	025b      	lsls	r3, r3, #9
 8003036:	4013      	ands	r3, r2
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	43da      	mvns	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	029b      	lsls	r3, r3, #10
 8003060:	4013      	ands	r3, r2
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	035b      	lsls	r3, r3, #13
 800308a:	4013      	ands	r3, r2
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	039b      	lsls	r3, r3, #14
 80030b4:	4013      	ands	r3, r2
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	40da      	lsrs	r2, r3
 80030d4:	1e13      	subs	r3, r2, #0
 80030d6:	d000      	beq.n	80030da <HAL_GPIO_Init+0x2be>
 80030d8:	e6a8      	b.n	8002e2c <HAL_GPIO_Init+0x10>
  } 
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b006      	add	sp, #24
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000
 80030ec:	48000400 	.word	0x48000400
 80030f0:	48000800 	.word	0x48000800
 80030f4:	48000c00 	.word	0x48000c00
 80030f8:	40010400 	.word	0x40010400

080030fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	000a      	movs	r2, r1
 8003106:	1cbb      	adds	r3, r7, #2
 8003108:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	1cba      	adds	r2, r7, #2
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	4013      	ands	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003116:	230f      	movs	r3, #15
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e003      	b.n	8003128 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003120:	230f      	movs	r3, #15
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
  }
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	0008      	movs	r0, r1
 8003140:	0011      	movs	r1, r2
 8003142:	1cbb      	adds	r3, r7, #2
 8003144:	1c02      	adds	r2, r0, #0
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	1c7b      	adds	r3, r7, #1
 800314a:	1c0a      	adds	r2, r1, #0
 800314c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314e:	1c7b      	adds	r3, r7, #1
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003156:	1cbb      	adds	r3, r7, #2
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800315e:	e003      	b.n	8003168 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003160:	1cbb      	adds	r3, r7, #2
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e082      	b.n	8003288 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2241      	movs	r2, #65	; 0x41
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2240      	movs	r2, #64	; 0x40
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f7fe fbe7 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2241      	movs	r2, #65	; 0x41
 80031a2:	2124      	movs	r1, #36	; 0x24
 80031a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	438a      	bics	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4934      	ldr	r1, [pc, #208]	; (8003290 <HAL_I2C_Init+0x120>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4931      	ldr	r1, [pc, #196]	; (8003294 <HAL_I2C_Init+0x124>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0209      	lsls	r1, r1, #8
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e007      	b.n	80031fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2184      	movs	r1, #132	; 0x84
 80031f8:	0209      	lsls	r1, r1, #8
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d104      	bne.n	8003210 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	491f      	ldr	r1, [pc, #124]	; (8003298 <HAL_I2C_Init+0x128>)
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	491a      	ldr	r1, [pc, #104]	; (8003294 <HAL_I2C_Init+0x124>)
 800322c:	400a      	ands	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	431a      	orrs	r2, r3
 800323a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69d9      	ldr	r1, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2241      	movs	r2, #65	; 0x41
 8003274:	2120      	movs	r1, #32
 8003276:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2242      	movs	r2, #66	; 0x42
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}
 8003290:	f0ffffff 	.word	0xf0ffffff
 8003294:	ffff7fff 	.word	0xffff7fff
 8003298:	02008000 	.word	0x02008000

0800329c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	0008      	movs	r0, r1
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	0019      	movs	r1, r3
 80032aa:	230a      	movs	r3, #10
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	1c02      	adds	r2, r0, #0
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	2308      	movs	r3, #8
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	1c0a      	adds	r2, r1, #0
 80032b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2241      	movs	r2, #65	; 0x41
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d000      	beq.n	80032c8 <HAL_I2C_Master_Transmit+0x2c>
 80032c6:	e0e7      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	5c9b      	ldrb	r3, [r3, r2]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_I2C_Master_Transmit+0x3a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0e1      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032de:	f7fe fe07 	bl	8001ef0 <HAL_GetTick>
 80032e2:	0003      	movs	r3, r0
 80032e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	0219      	lsls	r1, r3, #8
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2319      	movs	r3, #25
 80032f2:	2201      	movs	r2, #1
 80032f4:	f000 fa04 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0cc      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2241      	movs	r2, #65	; 0x41
 8003304:	2121      	movs	r1, #33	; 0x21
 8003306:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2242      	movs	r2, #66	; 0x42
 800330c:	2110      	movs	r1, #16
 800330e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2208      	movs	r2, #8
 8003320:	18ba      	adds	r2, r7, r2
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2bff      	cmp	r3, #255	; 0xff
 8003334:	d911      	bls.n	800335a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	22ff      	movs	r2, #255	; 0xff
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	b2da      	uxtb	r2, r3
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	045c      	lsls	r4, r3, #17
 8003346:	230a      	movs	r3, #10
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	8819      	ldrh	r1, [r3, #0]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_I2C_Master_Transmit+0x208>)
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	0023      	movs	r3, r4
 8003354:	f000 fb74 	bl	8003a40 <I2C_TransferConfig>
 8003358:	e075      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	b2da      	uxtb	r2, r3
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	049c      	lsls	r4, r3, #18
 800336e:	230a      	movs	r3, #10
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	8819      	ldrh	r1, [r3, #0]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_I2C_Master_Transmit+0x208>)
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0023      	movs	r3, r4
 800337c:	f000 fb60 	bl	8003a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003380:	e061      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f9f8 	bl	800377e <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e081      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03a      	beq.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d136      	bne.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	0013      	movs	r3, r2
 80033e2:	2200      	movs	r2, #0
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	f000 f98b 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e053      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2bff      	cmp	r3, #255	; 0xff
 80033fa:	d911      	bls.n	8003420 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	b2da      	uxtb	r2, r3
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	045c      	lsls	r4, r3, #17
 800340c:	230a      	movs	r3, #10
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	8819      	ldrh	r1, [r3, #0]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	0023      	movs	r3, r4
 800341a:	f000 fb11 	bl	8003a40 <I2C_TransferConfig>
 800341e:	e012      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	049c      	lsls	r4, r3, #18
 8003434:	230a      	movs	r3, #10
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	8819      	ldrh	r1, [r3, #0]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	0023      	movs	r3, r4
 8003442:	f000 fafd 	bl	8003a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d198      	bne.n	8003382 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f9d0 	bl	80037fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e01a      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2220      	movs	r2, #32
 800346a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	490c      	ldr	r1, [pc, #48]	; (80034a8 <HAL_I2C_Master_Transmit+0x20c>)
 8003478:	400a      	ands	r2, r1
 800347a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2241      	movs	r2, #65	; 0x41
 8003480:	2120      	movs	r1, #32
 8003482:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2242      	movs	r2, #66	; 0x42
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
  }
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b007      	add	sp, #28
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	80002000 	.word	0x80002000
 80034a8:	fe00e800 	.word	0xfe00e800

080034ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	0008      	movs	r0, r1
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	0019      	movs	r1, r3
 80034ba:	230a      	movs	r3, #10
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	1c02      	adds	r2, r0, #0
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	2308      	movs	r3, #8
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	1c0a      	adds	r2, r1, #0
 80034c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2241      	movs	r2, #65	; 0x41
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d000      	beq.n	80034d8 <HAL_I2C_Master_Receive+0x2c>
 80034d6:	e0e8      	b.n	80036aa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Master_Receive+0x3a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0e2      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2240      	movs	r2, #64	; 0x40
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ee:	f7fe fcff 	bl	8001ef0 <HAL_GetTick>
 80034f2:	0003      	movs	r3, r0
 80034f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	0219      	lsls	r1, r3, #8
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	f000 f8fc 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cd      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2241      	movs	r2, #65	; 0x41
 8003514:	2122      	movs	r1, #34	; 0x22
 8003516:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2242      	movs	r2, #66	; 0x42
 800351c:	2110      	movs	r1, #16
 800351e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2208      	movs	r2, #8
 8003530:	18ba      	adds	r2, r7, r2
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2bff      	cmp	r3, #255	; 0xff
 8003544:	d911      	bls.n	800356a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	b2da      	uxtb	r2, r3
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	045c      	lsls	r4, r3, #17
 8003556:	230a      	movs	r3, #10
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	8819      	ldrh	r1, [r3, #0]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <HAL_I2C_Master_Receive+0x208>)
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	0023      	movs	r3, r4
 8003564:	f000 fa6c 	bl	8003a40 <I2C_TransferConfig>
 8003568:	e076      	b.n	8003658 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	049c      	lsls	r4, r3, #18
 800357e:	230a      	movs	r3, #10
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	8819      	ldrh	r1, [r3, #0]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_I2C_Master_Receive+0x208>)
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	0023      	movs	r3, r4
 800358c:	f000 fa58 	bl	8003a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003590:	e062      	b.n	8003658 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f96b 	bl	8003874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e082      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d03a      	beq.n	8003658 <HAL_I2C_Master_Receive+0x1ac>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d136      	bne.n	8003658 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	0013      	movs	r3, r2
 80035f4:	2200      	movs	r2, #0
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	f000 f882 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e053      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2bff      	cmp	r3, #255	; 0xff
 800360c:	d911      	bls.n	8003632 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	b2da      	uxtb	r2, r3
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	045c      	lsls	r4, r3, #17
 800361e:	230a      	movs	r3, #10
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	8819      	ldrh	r1, [r3, #0]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	0023      	movs	r3, r4
 800362c:	f000 fa08 	bl	8003a40 <I2C_TransferConfig>
 8003630:	e012      	b.n	8003658 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	049c      	lsls	r4, r3, #18
 8003646:	230a      	movs	r3, #10
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	8819      	ldrh	r1, [r3, #0]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	0023      	movs	r3, r4
 8003654:	f000 f9f4 	bl	8003a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d197      	bne.n	8003592 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	0018      	movs	r0, r3
 800366a:	f000 f8c7 	bl	80037fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e01a      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	490b      	ldr	r1, [pc, #44]	; (80036b8 <HAL_I2C_Master_Receive+0x20c>)
 800368a:	400a      	ands	r2, r1
 800368c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2241      	movs	r2, #65	; 0x41
 8003692:	2120      	movs	r1, #32
 8003694:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2242      	movs	r2, #66	; 0x42
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	2100      	movs	r1, #0
 80036a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b007      	add	sp, #28
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	80002400 	.word	0x80002400
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2202      	movs	r2, #2
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d103      	bne.n	80036da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d007      	beq.n	80036f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
  }
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	e021      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	d01e      	beq.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7fe fbea 	bl	8001ef0 <HAL_GetTick>
 800371c:	0002      	movs	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d113      	bne.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	2220      	movs	r2, #32
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2241      	movs	r2, #65	; 0x41
 800373e:	2120      	movs	r1, #32
 8003740:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2242      	movs	r2, #66	; 0x42
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2240      	movs	r2, #64	; 0x40
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	425a      	negs	r2, r3
 8003766:	4153      	adcs	r3, r2
 8003768:	b2db      	uxtb	r3, r3
 800376a:	001a      	movs	r2, r3
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d0ce      	beq.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800378a:	e02b      	b.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f8da 	bl	800394c <I2C_IsAcknowledgeFailed>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d001      	beq.n	80037a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e029      	b.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3301      	adds	r3, #1
 80037a4:	d01e      	beq.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fe fba3 	bl	8001ef0 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d113      	bne.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	2220      	movs	r2, #32
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2241      	movs	r2, #65	; 0x41
 80037cc:	2120      	movs	r1, #32
 80037ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2242      	movs	r2, #66	; 0x42
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2202      	movs	r2, #2
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d1cc      	bne.n	800378c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003808:	e028      	b.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0018      	movs	r0, r3
 8003812:	f000 f89b 	bl	800394c <I2C_IsAcknowledgeFailed>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e026      	b.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fe fb67 	bl	8001ef0 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	2220      	movs	r2, #32
 800383a:	431a      	orrs	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2241      	movs	r2, #65	; 0x41
 8003844:	2120      	movs	r1, #32
 8003846:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2242      	movs	r2, #66	; 0x42
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	2b20      	cmp	r3, #32
 8003868:	d1cf      	bne.n	800380a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b004      	add	sp, #16
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003880:	e055      	b.n	800392e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f85f 	bl	800394c <I2C_IsAcknowledgeFailed>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d001      	beq.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e053      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2220      	movs	r2, #32
 800389e:	4013      	ands	r3, r2
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d129      	bne.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d105      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e03f      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2220      	movs	r2, #32
 80038c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	491d      	ldr	r1, [pc, #116]	; (8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2241      	movs	r2, #65	; 0x41
 80038e0:	2120      	movs	r1, #32
 80038e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2242      	movs	r2, #66	; 0x42
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e022      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7fe fafa 	bl	8001ef0 <HAL_GetTick>
 80038fc:	0002      	movs	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	2220      	movs	r2, #32
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2241      	movs	r2, #65	; 0x41
 800391e:	2120      	movs	r1, #32
 8003920:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2240      	movs	r2, #64	; 0x40
 8003926:	2100      	movs	r1, #0
 8003928:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e007      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2204      	movs	r2, #4
 8003936:	4013      	ands	r3, r2
 8003938:	2b04      	cmp	r3, #4
 800393a:	d1a2      	bne.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	fe00e800 	.word	0xfe00e800

0800394c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2210      	movs	r2, #16
 8003960:	4013      	ands	r3, r2
 8003962:	2b10      	cmp	r3, #16
 8003964:	d164      	bne.n	8003a30 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	049b      	lsls	r3, r3, #18
 8003970:	401a      	ands	r2, r3
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	049b      	lsls	r3, r3, #18
 8003976:	429a      	cmp	r2, r3
 8003978:	d02b      	beq.n	80039d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	01c9      	lsls	r1, r1, #7
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	e021      	b.n	80039d2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	d01e      	beq.n	80039d2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe faac 	bl	8001ef0 <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_IsAcknowledgeFailed+0x5e>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	2220      	movs	r2, #32
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2241      	movs	r2, #65	; 0x41
 80039ba:	2120      	movs	r1, #32
 80039bc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2242      	movs	r2, #66	; 0x42
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2240      	movs	r2, #64	; 0x40
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e02f      	b.n	8003a32 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2220      	movs	r2, #32
 80039da:	4013      	ands	r3, r2
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d1d6      	bne.n	800398e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2210      	movs	r2, #16
 80039e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2220      	movs	r2, #32
 80039ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fe62 	bl	80036bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	490e      	ldr	r1, [pc, #56]	; (8003a3c <I2C_IsAcknowledgeFailed+0xf0>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2241      	movs	r2, #65	; 0x41
 8003a18:	2120      	movs	r1, #32
 8003a1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2242      	movs	r2, #66	; 0x42
 8003a20:	2100      	movs	r1, #0
 8003a22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	fe00e800 	.word	0xfe00e800

08003a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	0008      	movs	r0, r1
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	240a      	movs	r4, #10
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	1c02      	adds	r2, r0, #0
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	2009      	movs	r0, #9
 8003a58:	183b      	adds	r3, r7, r0
 8003a5a:	1c0a      	adds	r2, r1, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	0d51      	lsrs	r1, r2, #21
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	00d2      	lsls	r2, r2, #3
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <I2C_TransferConfig+0x68>)
 8003a70:	430a      	orrs	r2, r1
 8003a72:	43d2      	mvns	r2, r2
 8003a74:	401a      	ands	r2, r3
 8003a76:	0011      	movs	r1, r2
 8003a78:	193b      	adds	r3, r7, r4
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	0d9a      	lsrs	r2, r3, #22
 8003a80:	183b      	adds	r3, r7, r0
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	0418      	lsls	r0, r3, #16
 8003a86:	23ff      	movs	r3, #255	; 0xff
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	4003      	ands	r3, r0
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b005      	add	sp, #20
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	03ff63ff 	.word	0x03ff63ff

08003aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2241      	movs	r2, #65	; 0x41
 8003aba:	5c9b      	ldrb	r3, [r3, r2]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d138      	bne.n	8003b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2240      	movs	r2, #64	; 0x40
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e032      	b.n	8003b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2241      	movs	r2, #65	; 0x41
 8003adc:	2124      	movs	r1, #36	; 0x24
 8003ade:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2101      	movs	r1, #1
 8003aec:	438a      	bics	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4911      	ldr	r1, [pc, #68]	; (8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2241      	movs	r2, #65	; 0x41
 8003b24:	2120      	movs	r1, #32
 8003b26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2240      	movs	r2, #64	; 0x40
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	ffffefff 	.word	0xffffefff

08003b44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2241      	movs	r2, #65	; 0x41
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d139      	bne.n	8003bce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	5c9b      	ldrb	r3, [r3, r2]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e033      	b.n	8003bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2241      	movs	r2, #65	; 0x41
 8003b74:	2124      	movs	r1, #36	; 0x24
 8003b76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2241      	movs	r2, #65	; 0x41
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2240      	movs	r2, #64	; 0x40
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	fffff0ff 	.word	0xfffff0ff

08003bdc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	000a      	movs	r2, r1
 8003be6:	1cfb      	adds	r3, r7, #3
 8003be8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_PWR_EnterSTOPMode+0x60>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_PWR_EnterSTOPMode+0x60>)
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c10:	2104      	movs	r1, #4
 8003c12:	430a      	orrs	r2, r1
 8003c14:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003c16:	1cfb      	adds	r3, r7, #3
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c1e:	bf30      	wfi
 8003c20:	e002      	b.n	8003c28 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c22:	bf40      	sev
    __WFE();
 8003c24:	bf20      	wfe
    __WFE();
 8003c26:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <HAL_PWR_EnterSTOPMode+0x64>)
 8003c2e:	2104      	movs	r1, #4
 8003c30:	438a      	bics	r2, r1
 8003c32:	611a      	str	r2, [r3, #16]
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e301      	b.n	800425a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <HAL_RCC_OscConfig+0x1e>
 8003c60:	e08d      	b.n	8003d7e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c62:	4bc3      	ldr	r3, [pc, #780]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	220c      	movs	r2, #12
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d00e      	beq.n	8003c8c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c6e:	4bc0      	ldr	r3, [pc, #768]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	220c      	movs	r2, #12
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x64>
 8003c7a:	4bbd      	ldr	r3, [pc, #756]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	401a      	ands	r2, r3
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	025b      	lsls	r3, r3, #9
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	029b      	lsls	r3, r3, #10
 8003c94:	4013      	ands	r3, r2
 8003c96:	d100      	bne.n	8003c9a <HAL_RCC_OscConfig+0x56>
 8003c98:	e070      	b.n	8003d7c <HAL_RCC_OscConfig+0x138>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d000      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x60>
 8003ca2:	e06b      	b.n	8003d7c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e2d8      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x7c>
 8003cb0:	4baf      	ldr	r3, [pc, #700]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4bae      	ldr	r3, [pc, #696]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	0249      	lsls	r1, r1, #9
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e02f      	b.n	8003d20 <HAL_RCC_OscConfig+0xdc>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10c      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x9e>
 8003cc8:	4ba9      	ldr	r3, [pc, #676]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4ba8      	ldr	r3, [pc, #672]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cce:	49a9      	ldr	r1, [pc, #676]	; (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4ba6      	ldr	r3, [pc, #664]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4ba5      	ldr	r3, [pc, #660]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cda:	49a7      	ldr	r1, [pc, #668]	; (8003f78 <HAL_RCC_OscConfig+0x334>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e01e      	b.n	8003d20 <HAL_RCC_OscConfig+0xdc>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d10e      	bne.n	8003d08 <HAL_RCC_OscConfig+0xc4>
 8003cea:	4ba1      	ldr	r3, [pc, #644]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4ba0      	ldr	r3, [pc, #640]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	02c9      	lsls	r1, r1, #11
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	4b9d      	ldr	r3, [pc, #628]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b9c      	ldr	r3, [pc, #624]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	0249      	lsls	r1, r1, #9
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0xdc>
 8003d08:	4b99      	ldr	r3, [pc, #612]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	4999      	ldr	r1, [pc, #612]	; (8003f74 <HAL_RCC_OscConfig+0x330>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	4b96      	ldr	r3, [pc, #600]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b95      	ldr	r3, [pc, #596]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d1a:	4997      	ldr	r1, [pc, #604]	; (8003f78 <HAL_RCC_OscConfig+0x334>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d014      	beq.n	8003d52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe f8e2 	bl	8001ef0 <HAL_GetTick>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d32:	f7fe f8dd 	bl	8001ef0 <HAL_GetTick>
 8003d36:	0002      	movs	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e28a      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d44:	4b8a      	ldr	r3, [pc, #552]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	029b      	lsls	r3, r3, #10
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0xee>
 8003d50:	e015      	b.n	8003d7e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d52:	f7fe f8cd 	bl	8001ef0 <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe f8c8 	bl	8001ef0 <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e275      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b80      	ldr	r3, [pc, #512]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	4013      	ands	r3, r2
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x118>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d100      	bne.n	8003d8a <HAL_RCC_OscConfig+0x146>
 8003d88:	e069      	b.n	8003e5e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d8a:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	d00b      	beq.n	8003dac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d94:	4b76      	ldr	r3, [pc, #472]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	220c      	movs	r2, #12
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d11c      	bne.n	8003dda <HAL_RCC_OscConfig+0x196>
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	025b      	lsls	r3, r3, #9
 8003da8:	4013      	ands	r3, r2
 8003daa:	d116      	bne.n	8003dda <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dac:	4b70      	ldr	r3, [pc, #448]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x17e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e24b      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	22f8      	movs	r2, #248	; 0xf8
 8003dc8:	4393      	bics	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	00da      	lsls	r2, r3, #3
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd8:	e041      	b.n	8003e5e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d024      	beq.n	8003e2c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b62      	ldr	r3, [pc, #392]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe f87f 	bl	8001ef0 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fe f87a 	bl	8001ef0 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e227      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d0f1      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e14:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	22f8      	movs	r2, #248	; 0xf8
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00da      	lsls	r2, r3, #3
 8003e24:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e018      	b.n	8003e5e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	2101      	movs	r1, #1
 8003e34:	438a      	bics	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e38:	f7fe f85a 	bl	8001ef0 <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe f855 	bl	8001ef0 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e202      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d1f1      	bne.n	8003e42 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2208      	movs	r2, #8
 8003e64:	4013      	ands	r3, r2
 8003e66:	d036      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d019      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e70:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e76:	2101      	movs	r1, #1
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe f838 	bl	8001ef0 <HAL_GetTick>
 8003e80:	0003      	movs	r3, r0
 8003e82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe f833 	bl	8001ef0 <HAL_GetTick>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1e0      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d0f1      	beq.n	8003e86 <HAL_RCC_OscConfig+0x242>
 8003ea2:	e018      	b.n	8003ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb0:	f7fe f81e 	bl	8001ef0 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eba:	f7fe f819 	bl	8001ef0 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1c6      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d1f1      	bne.n	8003eba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2204      	movs	r2, #4
 8003edc:	4013      	ands	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x29e>
 8003ee0:	e0b4      	b.n	800404c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	201f      	movs	r0, #31
 8003ee4:	183b      	adds	r3, r7, r0
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	055b      	lsls	r3, r3, #21
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d110      	bne.n	8003f18 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	0549      	lsls	r1, r1, #21
 8003f00:	430a      	orrs	r2, r1
 8003f02:	61da      	str	r2, [r3, #28]
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	055b      	lsls	r3, r3, #21
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_RCC_OscConfig+0x338>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d11a      	bne.n	8003f5a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_OscConfig+0x338>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_RCC_OscConfig+0x338>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0049      	lsls	r1, r1, #1
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fd ffdd 	bl	8001ef0 <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fd ffd8 	bl	8001ef0 <HAL_GetTick>
 8003f40:	0002      	movs	r2, r0
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e185      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x338>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10e      	bne.n	8003f80 <HAL_RCC_OscConfig+0x33c>
 8003f62:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	6a1a      	ldr	r2, [r3, #32]
 8003f66:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <HAL_RCC_OscConfig+0x32c>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	621a      	str	r2, [r3, #32]
 8003f6e:	e035      	b.n	8003fdc <HAL_RCC_OscConfig+0x398>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	fffeffff 	.word	0xfffeffff
 8003f78:	fffbffff 	.word	0xfffbffff
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10c      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x35e>
 8003f88:	4bb6      	ldr	r3, [pc, #728]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	4bb5      	ldr	r3, [pc, #724]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	621a      	str	r2, [r3, #32]
 8003f94:	4bb3      	ldr	r3, [pc, #716]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	4bb2      	ldr	r3, [pc, #712]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x398>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x380>
 8003faa:	4bae      	ldr	r3, [pc, #696]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	4bad      	ldr	r3, [pc, #692]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	621a      	str	r2, [r3, #32]
 8003fb6:	4bab      	ldr	r3, [pc, #684]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	4baa      	ldr	r3, [pc, #680]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0x398>
 8003fc4:	4ba7      	ldr	r3, [pc, #668]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	4ba6      	ldr	r3, [pc, #664]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	438a      	bics	r2, r1
 8003fce:	621a      	str	r2, [r3, #32]
 8003fd0:	4ba4      	ldr	r3, [pc, #656]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	4ba3      	ldr	r3, [pc, #652]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	438a      	bics	r2, r1
 8003fda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d014      	beq.n	800400e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe4:	f7fd ff84 	bl	8001ef0 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	e009      	b.n	8004002 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd ff7f 	bl	8001ef0 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	4a9b      	ldr	r2, [pc, #620]	; (8004268 <HAL_RCC_OscConfig+0x624>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e12b      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	4b98      	ldr	r3, [pc, #608]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x3aa>
 800400c:	e013      	b.n	8004036 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fd ff6f 	bl	8001ef0 <HAL_GetTick>
 8004012:	0003      	movs	r3, r0
 8004014:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004016:	e009      	b.n	800402c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004018:	f7fd ff6a 	bl	8001ef0 <HAL_GetTick>
 800401c:	0002      	movs	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	4a91      	ldr	r2, [pc, #580]	; (8004268 <HAL_RCC_OscConfig+0x624>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e116      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402c:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004036:	231f      	movs	r3, #31
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004040:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	4b87      	ldr	r3, [pc, #540]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004046:	4989      	ldr	r1, [pc, #548]	; (800426c <HAL_RCC_OscConfig+0x628>)
 8004048:	400a      	ands	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2210      	movs	r2, #16
 8004052:	4013      	ands	r3, r2
 8004054:	d063      	beq.n	800411e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d12a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800405e:	4b81      	ldr	r3, [pc, #516]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004062:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004064:	2104      	movs	r1, #4
 8004066:	430a      	orrs	r2, r1
 8004068:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800406a:	4b7e      	ldr	r3, [pc, #504]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004070:	2101      	movs	r1, #1
 8004072:	430a      	orrs	r2, r1
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fd ff3b 	bl	8001ef0 <HAL_GetTick>
 800407a:	0003      	movs	r3, r0
 800407c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004080:	f7fd ff36 	bl	8001ef0 <HAL_GetTick>
 8004084:	0002      	movs	r2, r0
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0e3      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004092:	4b74      	ldr	r3, [pc, #464]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2202      	movs	r2, #2
 8004098:	4013      	ands	r3, r2
 800409a:	d0f1      	beq.n	8004080 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800409c:	4b71      	ldr	r3, [pc, #452]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	22f8      	movs	r2, #248	; 0xf8
 80040a2:	4393      	bics	r3, r2
 80040a4:	0019      	movs	r1, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	00da      	lsls	r2, r3, #3
 80040ac:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040ae:	430a      	orrs	r2, r1
 80040b0:	635a      	str	r2, [r3, #52]	; 0x34
 80040b2:	e034      	b.n	800411e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	3305      	adds	r3, #5
 80040ba:	d111      	bne.n	80040e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80040bc:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040c2:	2104      	movs	r1, #4
 80040c4:	438a      	bics	r2, r1
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	22f8      	movs	r2, #248	; 0xf8
 80040ce:	4393      	bics	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	00da      	lsls	r2, r3, #3
 80040d8:	4b62      	ldr	r3, [pc, #392]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040da:	430a      	orrs	r2, r1
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34
 80040de:	e01e      	b.n	800411e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040e0:	4b60      	ldr	r3, [pc, #384]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e4:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040e6:	2104      	movs	r1, #4
 80040e8:	430a      	orrs	r2, r1
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040ec:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7fd fefa 	bl	8001ef0 <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004102:	f7fd fef5 	bl	8001ef0 <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0a2      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	2202      	movs	r2, #2
 800411a:	4013      	ands	r3, r2
 800411c:	d1f1      	bne.n	8004102 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <HAL_RCC_OscConfig+0x4e4>
 8004126:	e097      	b.n	8004258 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004128:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	220c      	movs	r2, #12
 800412e:	4013      	ands	r3, r2
 8004130:	2b08      	cmp	r3, #8
 8004132:	d100      	bne.n	8004136 <HAL_RCC_OscConfig+0x4f2>
 8004134:	e06b      	b.n	800420e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d14c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004144:	494a      	ldr	r1, [pc, #296]	; (8004270 <HAL_RCC_OscConfig+0x62c>)
 8004146:	400a      	ands	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fed1 	bl	8001ef0 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004154:	f7fd fecc 	bl	8001ef0 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e079      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	049b      	lsls	r3, r3, #18
 800416e:	4013      	ands	r3, r2
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004172:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	220f      	movs	r2, #15
 8004178:	4393      	bics	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4b38      	ldr	r3, [pc, #224]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004182:	430a      	orrs	r2, r1
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4a3a      	ldr	r2, [pc, #232]	; (8004274 <HAL_RCC_OscConfig+0x630>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	431a      	orrs	r2, r3
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80041a6:	2180      	movs	r1, #128	; 0x80
 80041a8:	0449      	lsls	r1, r1, #17
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd fe9f 	bl	8001ef0 <HAL_GetTick>
 80041b2:	0003      	movs	r3, r0
 80041b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd fe9a 	bl	8001ef0 <HAL_GetTick>
 80041bc:	0002      	movs	r2, r0
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e047      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ca:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	049b      	lsls	r3, r3, #18
 80041d2:	4013      	ands	r3, r2
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x574>
 80041d6:	e03f      	b.n	8004258 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 80041de:	4924      	ldr	r1, [pc, #144]	; (8004270 <HAL_RCC_OscConfig+0x62c>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd fe84 	bl	8001ef0 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd fe7f 	bl	8001ef0 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e02c      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	049b      	lsls	r3, r3, #18
 8004208:	4013      	ands	r3, r2
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x5aa>
 800420c:	e024      	b.n	8004258 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e01f      	b.n	800425a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCC_OscConfig+0x620>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	025b      	lsls	r3, r3, #9
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	429a      	cmp	r2, r3
 8004234:	d10e      	bne.n	8004254 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	220f      	movs	r2, #15
 800423a:	401a      	ands	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	23f0      	movs	r3, #240	; 0xf0
 8004248:	039b      	lsls	r3, r3, #14
 800424a:	401a      	ands	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b008      	add	sp, #32
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40021000 	.word	0x40021000
 8004268:	00001388 	.word	0x00001388
 800426c:	efffffff 	.word	0xefffffff
 8004270:	feffffff 	.word	0xfeffffff
 8004274:	ffc2ffff 	.word	0xffc2ffff

08004278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b3      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	4013      	ands	r3, r2
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d911      	bls.n	80042be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2201      	movs	r2, #1
 80042a0:	4393      	bics	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	4b55      	ldr	r3, [pc, #340]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d001      	beq.n	80042be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09a      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d015      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2204      	movs	r2, #4
 80042ce:	4013      	ands	r3, r2
 80042d0:	d006      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042d2:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80042d8:	21e0      	movs	r1, #224	; 0xe0
 80042da:	00c9      	lsls	r1, r1, #3
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	22f0      	movs	r2, #240	; 0xf0
 80042e6:	4393      	bics	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	d040      	beq.n	8004380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	4013      	ands	r3, r2
 8004310:	d114      	bne.n	800433c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e06e      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	049b      	lsls	r3, r3, #18
 8004326:	4013      	ands	r3, r2
 8004328:	d108      	bne.n	800433c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e062      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	4b34      	ldr	r3, [pc, #208]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2202      	movs	r2, #2
 8004334:	4013      	ands	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e05b      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	4393      	bics	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd fdce 	bl	8001ef0 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004358:	e009      	b.n	800436e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435a:	f7fd fdc9 	bl	8001ef0 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_RCC_ClockConfig+0x18c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e042      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	220c      	movs	r2, #12
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	429a      	cmp	r2, r3
 800437e:	d1ec      	bne.n	800435a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d211      	bcs.n	80043b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_RCC_ClockConfig+0x184>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4013      	ands	r3, r2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e020      	b.n	80043f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2204      	movs	r2, #4
 80043b8:	4013      	ands	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <HAL_RCC_ClockConfig+0x190>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043d0:	f000 f820 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043d4:	0001      	movs	r1, r0
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x188>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	220f      	movs	r2, #15
 80043de:	4013      	ands	r3, r2
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x194>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	000a      	movs	r2, r1
 80043e6:	40da      	lsrs	r2, r3
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x198>)
 80043ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80043ec:	2003      	movs	r0, #3
 80043ee:	f7fd fd39 	bl	8001e64 <HAL_InitTick>
  
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	00001388 	.word	0x00001388
 8004408:	fffff8ff 	.word	0xfffff8ff
 800440c:	0800758c 	.word	0x0800758c
 8004410:	20000028 	.word	0x20000028

08004414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b08f      	sub	sp, #60	; 0x3c
 8004418:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800441a:	2314      	movs	r3, #20
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004422:	c313      	stmia	r3!, {r0, r1, r4}
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800442c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800442e:	c313      	stmia	r3!, {r0, r1, r4}
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
 800443c:	2300      	movs	r3, #0
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	220c      	movs	r2, #12
 8004452:	4013      	ands	r3, r2
 8004454:	2b04      	cmp	r3, #4
 8004456:	d002      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x4a>
 8004458:	2b08      	cmp	r3, #8
 800445a:	d003      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x50>
 800445c:	e02d      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004462:	e02d      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	0c9b      	lsrs	r3, r3, #18
 8004468:	220f      	movs	r2, #15
 800446a:	4013      	ands	r3, r2
 800446c:	2214      	movs	r2, #20
 800446e:	18ba      	adds	r2, r7, r2
 8004470:	5cd3      	ldrb	r3, [r2, r3]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	220f      	movs	r2, #15
 800447a:	4013      	ands	r3, r2
 800447c:	1d3a      	adds	r2, r7, #4
 800447e:	5cd3      	ldrb	r3, [r2, r3]
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	4013      	ands	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800448c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800448e:	4812      	ldr	r0, [pc, #72]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004490:	f7fb fe3a 	bl	8000108 <__udivsi3>
 8004494:	0003      	movs	r3, r0
 8004496:	001a      	movs	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	4353      	muls	r3, r2
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 800449e:	e009      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a2:	000a      	movs	r2, r1
 80044a4:	0152      	lsls	r2, r2, #5
 80044a6:	1a52      	subs	r2, r2, r1
 80044a8:	0193      	lsls	r3, r2, #6
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	185b      	adds	r3, r3, r1
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b00f      	add	sp, #60	; 0x3c
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	080074e4 	.word	0x080074e4
 80044d0:	080074f4 	.word	0x080074f4
 80044d4:	40021000 	.word	0x40021000
 80044d8:	007a1200 	.word	0x007a1200

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b02      	ldr	r3, [pc, #8]	; (80044ec <HAL_RCC_GetHCLKFreq+0x10>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000028 	.word	0x20000028

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80044f4:	f7ff fff2 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044f8:	0001      	movs	r1, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	2207      	movs	r2, #7
 8004502:	4013      	ands	r3, r2
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	40d9      	lsrs	r1, r3
 800450a:	000b      	movs	r3, r1
}    
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	40021000 	.word	0x40021000
 8004518:	0800759c 	.word	0x0800759c

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	025b      	lsls	r3, r3, #9
 8004534:	4013      	ands	r3, r2
 8004536:	d100      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004538:	e08e      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800453a:	2017      	movs	r0, #23
 800453c:	183b      	adds	r3, r7, r0
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004542:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	055b      	lsls	r3, r3, #21
 800454a:	4013      	ands	r3, r2
 800454c:	d110      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0549      	lsls	r1, r1, #21
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	055b      	lsls	r3, r3, #21
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456a:	183b      	adds	r3, r7, r0
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4013      	ands	r3, r2
 800457a:	d11a      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457c:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	0049      	lsls	r1, r1, #1
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd fcb1 	bl	8001ef0 <HAL_GetTick>
 800458e:	0003      	movs	r3, r0
 8004590:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	e008      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fd fcac 	bl	8001ef0 <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e087      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b2:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	23c0      	movs	r3, #192	; 0xc0
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d034      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	23c0      	movs	r3, #192	; 0xc0
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d02c      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045de:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	0249      	lsls	r1, r1, #9
 80045e8:	430a      	orrs	r2, r1
 80045ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ec:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	4b33      	ldr	r3, [pc, #204]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045f2:	4936      	ldr	r1, [pc, #216]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fd fc73 	bl	8001ef0 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	e009      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fd fc6e 	bl	8001ef0 <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e048      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d0f0      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800463e:	430a      	orrs	r2, r1
 8004640:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004642:	2317      	movs	r3, #23
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004652:	4920      	ldr	r1, [pc, #128]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004654:	400a      	ands	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2201      	movs	r2, #1
 800465e:	4013      	ands	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	2203      	movs	r2, #3
 8004668:	4393      	bics	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004672:	430a      	orrs	r2, r1
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2220      	movs	r2, #32
 800467c:	4013      	ands	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	2210      	movs	r2, #16
 8004686:	4393      	bics	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004690:	430a      	orrs	r2, r1
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4013      	ands	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4393      	bics	r3, r2
 80046a8:	0019      	movs	r1, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046b0:	430a      	orrs	r2, r1
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
 80046c8:	fffffcff 	.word	0xfffffcff
 80046cc:	fffeffff 	.word	0xfffeffff
 80046d0:	00001388 	.word	0x00001388
 80046d4:	efffffff 	.word	0xefffffff

080046d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0a8      	b.n	800483c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	2382      	movs	r3, #130	; 0x82
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d009      	beq.n	8004712 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	61da      	str	r2, [r3, #28]
 8004704:	e005      	b.n	8004712 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	225d      	movs	r2, #93	; 0x5d
 800471c:	5c9b      	ldrb	r3, [r3, r2]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	225c      	movs	r2, #92	; 0x5c
 8004728:	2100      	movs	r1, #0
 800472a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f7fd f96a 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	225d      	movs	r2, #93	; 0x5d
 8004738:	2102      	movs	r1, #2
 800473a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2140      	movs	r1, #64	; 0x40
 8004748:	438a      	bics	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	23e0      	movs	r3, #224	; 0xe0
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	429a      	cmp	r2, r3
 8004756:	d902      	bls.n	800475e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e002      	b.n	8004764 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	015b      	lsls	r3, r3, #5
 8004762:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	23f0      	movs	r3, #240	; 0xf0
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	429a      	cmp	r2, r3
 800476e:	d008      	beq.n	8004782 <HAL_SPI_Init+0xaa>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	23e0      	movs	r3, #224	; 0xe0
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	429a      	cmp	r2, r3
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	2382      	movs	r3, #130	; 0x82
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	401a      	ands	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	2384      	movs	r3, #132	; 0x84
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	400b      	ands	r3, r1
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2102      	movs	r1, #2
 800479e:	400b      	ands	r3, r1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	2101      	movs	r1, #1
 80047a8:	400b      	ands	r3, r1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6999      	ldr	r1, [r3, #24]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	400b      	ands	r3, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2138      	movs	r1, #56	; 0x38
 80047be:	400b      	ands	r3, r1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	400b      	ands	r3, r1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	0011      	movs	r1, r2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	401a      	ands	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	2204      	movs	r2, #4
 80047e8:	401a      	ands	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2110      	movs	r1, #16
 80047f0:	400b      	ands	r3, r1
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	2108      	movs	r1, #8
 80047fa:	400b      	ands	r3, r1
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68d9      	ldr	r1, [r3, #12]
 8004802:	23f0      	movs	r3, #240	; 0xf0
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	400b      	ands	r3, r1
 8004808:	431a      	orrs	r2, r3
 800480a:	0011      	movs	r1, r2
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	015b      	lsls	r3, r3, #5
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4907      	ldr	r1, [pc, #28]	; (8004844 <HAL_SPI_Init+0x16c>)
 8004828:	400a      	ands	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	225d      	movs	r2, #93	; 0x5d
 8004836:	2101      	movs	r1, #1
 8004838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	b004      	add	sp, #16
 8004842:	bd80      	pop	{r7, pc}
 8004844:	fffff7ff 	.word	0xfffff7ff

08004848 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	1dbb      	adds	r3, r7, #6
 8004856:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004858:	231f      	movs	r3, #31
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	225c      	movs	r2, #92	; 0x5c
 8004864:	5c9b      	ldrb	r3, [r3, r2]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_SPI_Transmit+0x26>
 800486a:	2302      	movs	r3, #2
 800486c:	e140      	b.n	8004af0 <HAL_SPI_Transmit+0x2a8>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	225c      	movs	r2, #92	; 0x5c
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004876:	f7fd fb3b 	bl	8001ef0 <HAL_GetTick>
 800487a:	0003      	movs	r3, r0
 800487c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800487e:	2316      	movs	r3, #22
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	1dba      	adds	r2, r7, #6
 8004884:	8812      	ldrh	r2, [r2, #0]
 8004886:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	225d      	movs	r2, #93	; 0x5d
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d004      	beq.n	800489e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004894:	231f      	movs	r3, #31
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]
    goto error;
 800489c:	e11d      	b.n	8004ada <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_SPI_Transmit+0x64>
 80048a4:	1dbb      	adds	r3, r7, #6
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80048ac:	231f      	movs	r3, #31
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80048b4:	e111      	b.n	8004ada <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	225d      	movs	r2, #93	; 0x5d
 80048ba:	2103      	movs	r1, #3
 80048bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1dba      	adds	r2, r7, #6
 80048ce:	8812      	ldrh	r2, [r2, #0]
 80048d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1dba      	adds	r2, r7, #6
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2244      	movs	r2, #68	; 0x44
 80048e4:	2100      	movs	r1, #0
 80048e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2246      	movs	r2, #70	; 0x46
 80048ec:	2100      	movs	r1, #0
 80048ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	429a      	cmp	r2, r3
 8004906:	d110      	bne.n	800492a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	438a      	bics	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2180      	movs	r1, #128	; 0x80
 8004924:	01c9      	lsls	r1, r1, #7
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2240      	movs	r2, #64	; 0x40
 8004932:	4013      	ands	r3, r2
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d007      	beq.n	8004948 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	23e0      	movs	r3, #224	; 0xe0
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	429a      	cmp	r2, r3
 8004952:	d94e      	bls.n	80049f2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_SPI_Transmit+0x11e>
 800495c:	2316      	movs	r3, #22
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d13f      	bne.n	80049e6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800498a:	e02c      	b.n	80049e6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d112      	bne.n	80049c0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049be:	e012      	b.n	80049e6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c0:	f7fd fa96 	bl	8001ef0 <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d802      	bhi.n	80049d6 <HAL_SPI_Transmit+0x18e>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_Transmit+0x194>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80049dc:	231f      	movs	r3, #31
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2203      	movs	r2, #3
 80049e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80049e4:	e079      	b.n	8004ada <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1cd      	bne.n	800498c <HAL_SPI_Transmit+0x144>
 80049f0:	e04f      	b.n	8004a92 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_SPI_Transmit+0x1bc>
 80049fa:	2316      	movs	r3, #22
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d141      	bne.n	8004a88 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004a2a:	e02d      	b.n	8004a88 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2202      	movs	r2, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d113      	bne.n	8004a62 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a60:	e012      	b.n	8004a88 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a62:	f7fd fa45 	bl	8001ef0 <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d802      	bhi.n	8004a78 <HAL_SPI_Transmit+0x230>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x236>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004a7e:	231f      	movs	r3, #31
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2203      	movs	r2, #3
 8004a84:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a86:	e028      	b.n	8004ada <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1cc      	bne.n	8004a2c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 f95d 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004ace:	231f      	movs	r3, #31
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e000      	b.n	8004ada <HAL_SPI_Transmit+0x292>
  }

error:
 8004ad8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	225d      	movs	r2, #93	; 0x5d
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	225c      	movs	r2, #92	; 0x5c
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004aea:	231f      	movs	r3, #31
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b008      	add	sp, #32
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b08:	f7fd f9f2 	bl	8001ef0 <HAL_GetTick>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b18:	f7fd f9ea 	bl	8001ef0 <HAL_GetTick>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	015b      	lsls	r3, r3, #5
 8004b26:	0d1b      	lsrs	r3, r3, #20
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	4353      	muls	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b2e:	e058      	b.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	d055      	beq.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b36:	f7fd f9db 	bl	8001ef0 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d902      	bls.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d142      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	21e0      	movs	r1, #224	; 0xe0
 8004b58:	438a      	bics	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	2382      	movs	r3, #130	; 0x82
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d113      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d107      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2140      	movs	r1, #64	; 0x40
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	019b      	lsls	r3, r3, #6
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d110      	bne.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	491a      	ldr	r1, [pc, #104]	; (8004c10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ba8:	400a      	ands	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	0189      	lsls	r1, r1, #6
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	225d      	movs	r2, #93	; 0x5d
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	225c      	movs	r2, #92	; 0x5c
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e017      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	425a      	negs	r2, r3
 8004bf2:	4153      	adcs	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d197      	bne.n	8004b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b008      	add	sp, #32
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20000028 	.word	0x20000028
 8004c10:	ffffdfff 	.word	0xffffdfff

08004c14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c22:	2317      	movs	r3, #23
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c2a:	f7fd f961 	bl	8001ef0 <HAL_GetTick>
 8004c2e:	0002      	movs	r2, r0
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c3a:	f7fd f959 	bl	8001ef0 <HAL_GetTick>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c4a:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	0013      	movs	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	00da      	lsls	r2, r3, #3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	0d1b      	lsrs	r3, r3, #20
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	4353      	muls	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c60:	e068      	b.n	8004d34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	23c0      	movs	r3, #192	; 0xc0
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10a      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	2117      	movs	r1, #23
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	3301      	adds	r3, #1
 8004c86:	d055      	beq.n	8004d34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c88:	f7fd f932 	bl	8001ef0 <HAL_GetTick>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d902      	bls.n	8004c9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d142      	bne.n	8004d24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	21e0      	movs	r1, #224	; 0xe0
 8004caa:	438a      	bics	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	2382      	movs	r3, #130	; 0x82
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d113      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d005      	beq.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d107      	bne.n	8004ce2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	438a      	bics	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d110      	bne.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4916      	ldr	r1, [pc, #88]	; (8004d54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	0189      	lsls	r1, r1, #6
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	225d      	movs	r2, #93	; 0x5d
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	225c      	movs	r2, #92	; 0x5c
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e010      	b.n	8004d46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d18e      	bne.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b00a      	add	sp, #40	; 0x28
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	20000028 	.word	0x20000028
 8004d54:	ffffdfff 	.word	0xffffdfff

08004d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	23c0      	movs	r3, #192	; 0xc0
 8004d68:	0159      	lsls	r1, r3, #5
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	0013      	movs	r3, r2
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7ff ff4e 	bl	8004c14 <SPI_WaitFifoStateUntilTimeout>
 8004d78:	1e03      	subs	r3, r0, #0
 8004d7a:	d007      	beq.n	8004d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	2220      	movs	r2, #32
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e027      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0013      	movs	r3, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	f7ff fead 	bl	8004af8 <SPI_WaitFlagStateUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	2220      	movs	r2, #32
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e014      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	23c0      	movs	r3, #192	; 0xc0
 8004db6:	00d9      	lsls	r1, r3, #3
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	0013      	movs	r3, r2
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f7ff ff27 	bl	8004c14 <SPI_WaitFifoStateUntilTimeout>
 8004dc6:	1e03      	subs	r3, r0, #0
 8004dc8:	d007      	beq.n	8004dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	2220      	movs	r2, #32
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e000      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e042      	b.n	8004e7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	223d      	movs	r2, #61	; 0x3d
 8004dfa:	5c9b      	ldrb	r3, [r3, r2]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	223c      	movs	r2, #60	; 0x3c
 8004e06:	2100      	movs	r1, #0
 8004e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7fc fe83 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	223d      	movs	r2, #61	; 0x3d
 8004e16:	2102      	movs	r1, #2
 8004e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	0019      	movs	r1, r3
 8004e24:	0010      	movs	r0, r2
 8004e26:	f000 fc55 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2246      	movs	r2, #70	; 0x46
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	223e      	movs	r2, #62	; 0x3e
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223f      	movs	r2, #63	; 0x3f
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2240      	movs	r2, #64	; 0x40
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2241      	movs	r2, #65	; 0x41
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2242      	movs	r2, #66	; 0x42
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2243      	movs	r2, #67	; 0x43
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2244      	movs	r2, #68	; 0x44
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2245      	movs	r2, #69	; 0x45
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	223d      	movs	r2, #61	; 0x3d
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	230f      	movs	r3, #15
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <HAL_TIM_OC_Start_IT+0x2a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	223e      	movs	r2, #62	; 0x3e
 8004ea0:	5c9b      	ldrb	r3, [r3, r2]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	4193      	sbcs	r3, r2
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e01f      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d108      	bne.n	8004ec6 <HAL_TIM_OC_Start_IT+0x42>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223f      	movs	r2, #63	; 0x3f
 8004eb8:	5c9b      	ldrb	r3, [r3, r2]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	4193      	sbcs	r3, r2
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e013      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d108      	bne.n	8004ede <HAL_TIM_OC_Start_IT+0x5a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	5c9b      	ldrb	r3, [r3, r2]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	4193      	sbcs	r3, r2
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e007      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2241      	movs	r2, #65	; 0x41
 8004ee2:	5c9b      	ldrb	r3, [r3, r2]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	4193      	sbcs	r3, r2
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0b7      	b.n	8005066 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_OC_Start_IT+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	223e      	movs	r2, #62	; 0x3e
 8004f00:	2102      	movs	r1, #2
 8004f02:	5499      	strb	r1, [r3, r2]
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_OC_Start_IT+0x92>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	223f      	movs	r2, #63	; 0x3f
 8004f10:	2102      	movs	r1, #2
 8004f12:	5499      	strb	r1, [r3, r2]
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_OC_Start_IT+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2240      	movs	r2, #64	; 0x40
 8004f20:	2102      	movs	r1, #2
 8004f22:	5499      	strb	r1, [r3, r2]
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2241      	movs	r2, #65	; 0x41
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d02a      	beq.n	8004f8a <HAL_TIM_OC_Start_IT+0x106>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d830      	bhi.n	8004f9c <HAL_TIM_OC_Start_IT+0x118>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d01b      	beq.n	8004f78 <HAL_TIM_OC_Start_IT+0xf4>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d82a      	bhi.n	8004f9c <HAL_TIM_OC_Start_IT+0x118>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_TIM_OC_Start_IT+0xd0>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d009      	beq.n	8004f66 <HAL_TIM_OC_Start_IT+0xe2>
 8004f52:	e023      	b.n	8004f9c <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2102      	movs	r1, #2
 8004f60:	430a      	orrs	r2, r1
 8004f62:	60da      	str	r2, [r3, #12]
      break;
 8004f64:	e01f      	b.n	8004fa6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2104      	movs	r1, #4
 8004f72:	430a      	orrs	r2, r1
 8004f74:	60da      	str	r2, [r3, #12]
      break;
 8004f76:	e016      	b.n	8004fa6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2108      	movs	r1, #8
 8004f84:	430a      	orrs	r2, r1
 8004f86:	60da      	str	r2, [r3, #12]
      break;
 8004f88:	e00d      	b.n	8004fa6 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2110      	movs	r1, #16
 8004f96:	430a      	orrs	r2, r1
 8004f98:	60da      	str	r2, [r3, #12]
      break;
 8004f9a:	e004      	b.n	8004fa6 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004f9c:	230f      	movs	r3, #15
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
      break;
 8004fa4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004fa6:	230f      	movs	r3, #15
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d157      	bne.n	8005060 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f000 fea1 	bl	8005d00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIM_OC_Start_IT+0x162>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a29      	ldr	r2, [pc, #164]	; (8005074 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIM_OC_Start_IT+0x162>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIM_OC_Start_IT+0x162>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_TIM_OC_Start_IT+0x1f8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_OC_Start_IT+0x166>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_OC_Start_IT+0x168>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	0209      	lsls	r1, r1, #8
 8004ffe:	430a      	orrs	r2, r1
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <HAL_TIM_OC_Start_IT+0x1ec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <HAL_TIM_OC_Start_IT+0x1a8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	05db      	lsls	r3, r3, #23
 8005014:	429a      	cmp	r2, r3
 8005016:	d009      	beq.n	800502c <HAL_TIM_OC_Start_IT+0x1a8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_TIM_OC_Start_IT+0x1fc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIM_OC_Start_IT+0x1a8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a13      	ldr	r2, [pc, #76]	; (8005074 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2207      	movs	r2, #7
 8005034:	4013      	ands	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d010      	beq.n	8005060 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	430a      	orrs	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e007      	b.n	8005060 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005060:	230f      	movs	r3, #15
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	781b      	ldrb	r3, [r3, #0]
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40000400 	.word	0x40000400

08005084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e042      	b.n	800511c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	223d      	movs	r2, #61	; 0x3d
 800509a:	5c9b      	ldrb	r3, [r3, r2]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	223c      	movs	r2, #60	; 0x3c
 80050a6:	2100      	movs	r1, #0
 80050a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 f839 	bl	8005124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	223d      	movs	r2, #61	; 0x3d
 80050b6:	2102      	movs	r1, #2
 80050b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	0019      	movs	r1, r3
 80050c4:	0010      	movs	r0, r2
 80050c6:	f000 fb05 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2246      	movs	r2, #70	; 0x46
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	223e      	movs	r2, #62	; 0x3e
 80050d6:	2101      	movs	r1, #1
 80050d8:	5499      	strb	r1, [r3, r2]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	223f      	movs	r2, #63	; 0x3f
 80050de:	2101      	movs	r1, #1
 80050e0:	5499      	strb	r1, [r3, r2]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2241      	movs	r2, #65	; 0x41
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2242      	movs	r2, #66	; 0x42
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2243      	movs	r2, #67	; 0x43
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2244      	movs	r2, #68	; 0x44
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2245      	movs	r2, #69	; 0x45
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	223d      	movs	r2, #61	; 0x3d
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b002      	add	sp, #8
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2202      	movs	r2, #2
 8005144:	4013      	ands	r3, r2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d124      	bne.n	8005194 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	4013      	ands	r3, r2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d11d      	bne.n	8005194 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	4252      	negs	r2, r2
 8005160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2203      	movs	r2, #3
 8005170:	4013      	ands	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f000 fa94 	bl	80056a4 <HAL_TIM_IC_CaptureCallback>
 800517c:	e007      	b.n	800518e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f7fb f85f 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0018      	movs	r0, r3
 800518a:	f000 fa93 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2204      	movs	r2, #4
 800519c:	4013      	ands	r3, r2
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d125      	bne.n	80051ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2204      	movs	r2, #4
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d11e      	bne.n	80051ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2205      	movs	r2, #5
 80051b6:	4252      	negs	r2, r2
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	23c0      	movs	r3, #192	; 0xc0
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4013      	ands	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 fa67 	bl	80056a4 <HAL_TIM_IC_CaptureCallback>
 80051d6:	e007      	b.n	80051e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	0018      	movs	r0, r3
 80051dc:	f7fb f832 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f000 fa66 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2208      	movs	r2, #8
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d124      	bne.n	8005246 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2208      	movs	r2, #8
 8005204:	4013      	ands	r3, r2
 8005206:	2b08      	cmp	r3, #8
 8005208:	d11d      	bne.n	8005246 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2209      	movs	r2, #9
 8005210:	4252      	negs	r2, r2
 8005212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	2203      	movs	r2, #3
 8005222:	4013      	ands	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fa3b 	bl	80056a4 <HAL_TIM_IC_CaptureCallback>
 800522e:	e007      	b.n	8005240 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	0018      	movs	r0, r3
 8005234:	f7fb f806 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f000 fa3a 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2210      	movs	r2, #16
 800524e:	4013      	ands	r3, r2
 8005250:	2b10      	cmp	r3, #16
 8005252:	d125      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2210      	movs	r2, #16
 800525c:	4013      	ands	r3, r2
 800525e:	2b10      	cmp	r3, #16
 8005260:	d11e      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2211      	movs	r2, #17
 8005268:	4252      	negs	r2, r2
 800526a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2208      	movs	r2, #8
 8005270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	23c0      	movs	r3, #192	; 0xc0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4013      	ands	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fa0e 	bl	80056a4 <HAL_TIM_IC_CaptureCallback>
 8005288:	e007      	b.n	800529a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f7fa ffd9 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fa0d 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2201      	movs	r2, #1
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10f      	bne.n	80052ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d108      	bne.n	80052ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2202      	movs	r2, #2
 80052c2:	4252      	negs	r2, r2
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f9e3 	bl	8005694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d10f      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b80      	cmp	r3, #128	; 0x80
 80052e8:	d108      	bne.n	80052fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2281      	movs	r2, #129	; 0x81
 80052f0:	4252      	negs	r2, r2
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 fdea 	bl	8005ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2240      	movs	r2, #64	; 0x40
 8005304:	4013      	ands	r3, r2
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d10f      	bne.n	800532a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2240      	movs	r2, #64	; 0x40
 8005312:	4013      	ands	r3, r2
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d108      	bne.n	800532a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2241      	movs	r2, #65	; 0x41
 800531e:	4252      	negs	r2, r2
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	0018      	movs	r0, r3
 8005326:	f000 f9cd 	bl	80056c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2220      	movs	r2, #32
 8005332:	4013      	ands	r3, r2
 8005334:	2b20      	cmp	r3, #32
 8005336:	d10f      	bne.n	8005358 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	4013      	ands	r3, r2
 8005342:	2b20      	cmp	r3, #32
 8005344:	d108      	bne.n	8005358 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2221      	movs	r2, #33	; 0x21
 800534c:	4252      	negs	r2, r2
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fdb4 	bl	8005ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005358:	46c0      	nop			; (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b002      	add	sp, #8
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2317      	movs	r3, #23
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	223c      	movs	r2, #60	; 0x3c
 8005378:	5c9b      	ldrb	r3, [r3, r2]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_ConfigChannel+0x22>
 800537e:	2302      	movs	r3, #2
 8005380:	e0ad      	b.n	80054de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	223c      	movs	r2, #60	; 0x3c
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d100      	bne.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005390:	e076      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d900      	bls.n	800539a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005398:	e095      	b.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d04e      	beq.n	800543e <HAL_TIM_PWM_ConfigChannel+0xde>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d900      	bls.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80053a6:	e08e      	b.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d021      	beq.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80053b4:	e087      	b.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	0011      	movs	r1, r2
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 fa08 	bl	80057d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2108      	movs	r1, #8
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2104      	movs	r1, #4
 80053e0:	438a      	bics	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	619a      	str	r2, [r3, #24]
      break;
 80053f6:	e06b      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0011      	movs	r1, r2
 8005400:	0018      	movs	r0, r3
 8005402:	f000 fa6f 	bl	80058e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	0109      	lsls	r1, r1, #4
 8005414:	430a      	orrs	r2, r1
 8005416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4931      	ldr	r1, [pc, #196]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005424:	400a      	ands	r2, r1
 8005426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	021a      	lsls	r2, r3, #8
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	619a      	str	r2, [r3, #24]
      break;
 800543c:	e048      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0011      	movs	r1, r2
 8005446:	0018      	movs	r0, r3
 8005448:	f000 fad0 	bl	80059ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2108      	movs	r1, #8
 8005458:	430a      	orrs	r2, r1
 800545a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2104      	movs	r1, #4
 8005468:	438a      	bics	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69d9      	ldr	r1, [r3, #28]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
      break;
 800547e:	e027      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f000 fb35 	bl	8005af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2180      	movs	r1, #128	; 0x80
 800549a:	0109      	lsls	r1, r1, #4
 800549c:	430a      	orrs	r2, r1
 800549e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	490f      	ldr	r1, [pc, #60]	; (80054e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69d9      	ldr	r1, [r3, #28]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e004      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80054c6:	2317      	movs	r3, #23
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
      break;
 80054ce:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	223c      	movs	r2, #60	; 0x3c
 80054d4:	2100      	movs	r1, #0
 80054d6:	5499      	strb	r1, [r3, r2]

  return status;
 80054d8:	2317      	movs	r3, #23
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	781b      	ldrb	r3, [r3, #0]
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b006      	add	sp, #24
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	fffffbff 	.word	0xfffffbff

080054ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	230f      	movs	r3, #15
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	223c      	movs	r2, #60	; 0x3c
 8005502:	5c9b      	ldrb	r3, [r3, r2]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIM_ConfigClockSource+0x20>
 8005508:	2302      	movs	r3, #2
 800550a:	e0bc      	b.n	8005686 <HAL_TIM_ConfigClockSource+0x19a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	223c      	movs	r2, #60	; 0x3c
 8005510:	2101      	movs	r1, #1
 8005512:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	223d      	movs	r2, #61	; 0x3d
 8005518:	2102      	movs	r1, #2
 800551a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2277      	movs	r2, #119	; 0x77
 8005528:	4393      	bics	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005530:	4013      	ands	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	0192      	lsls	r2, r2, #6
 8005544:	4293      	cmp	r3, r2
 8005546:	d040      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0xde>
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0192      	lsls	r2, r2, #6
 800554c:	4293      	cmp	r3, r2
 800554e:	d900      	bls.n	8005552 <HAL_TIM_ConfigClockSource+0x66>
 8005550:	e088      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	0152      	lsls	r2, r2, #5
 8005556:	4293      	cmp	r3, r2
 8005558:	d100      	bne.n	800555c <HAL_TIM_ConfigClockSource+0x70>
 800555a:	e088      	b.n	800566e <HAL_TIM_ConfigClockSource+0x182>
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	0152      	lsls	r2, r2, #5
 8005560:	4293      	cmp	r3, r2
 8005562:	d900      	bls.n	8005566 <HAL_TIM_ConfigClockSource+0x7a>
 8005564:	e07e      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 8005566:	2b70      	cmp	r3, #112	; 0x70
 8005568:	d018      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xb0>
 800556a:	d900      	bls.n	800556e <HAL_TIM_ConfigClockSource+0x82>
 800556c:	e07a      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 800556e:	2b60      	cmp	r3, #96	; 0x60
 8005570:	d04f      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x126>
 8005572:	d900      	bls.n	8005576 <HAL_TIM_ConfigClockSource+0x8a>
 8005574:	e076      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 8005576:	2b50      	cmp	r3, #80	; 0x50
 8005578:	d03b      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x106>
 800557a:	d900      	bls.n	800557e <HAL_TIM_ConfigClockSource+0x92>
 800557c:	e072      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d057      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x146>
 8005582:	d900      	bls.n	8005586 <HAL_TIM_ConfigClockSource+0x9a>
 8005584:	e06e      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	d063      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x166>
 800558a:	d86b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d060      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x166>
 8005590:	d868      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d05d      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x166>
 8005596:	2b10      	cmp	r3, #16
 8005598:	d05b      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x166>
 800559a:	e063      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6899      	ldr	r1, [r3, #8]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f000 fb88 	bl	8005cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2277      	movs	r2, #119	; 0x77
 80055bc:	4313      	orrs	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
      break;
 80055c8:	e052      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6899      	ldr	r1, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f000 fb71 	bl	8005cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	01c9      	lsls	r1, r1, #7
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
      break;
 80055f0:	e03e      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	001a      	movs	r2, r3
 8005600:	f000 fae4 	bl	8005bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2150      	movs	r1, #80	; 0x50
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fb3e 	bl	8005c8c <TIM_ITRx_SetConfig>
      break;
 8005610:	e02e      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	001a      	movs	r2, r3
 8005620:	f000 fb02 	bl	8005c28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2160      	movs	r1, #96	; 0x60
 800562a:	0018      	movs	r0, r3
 800562c:	f000 fb2e 	bl	8005c8c <TIM_ITRx_SetConfig>
      break;
 8005630:	e01e      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	001a      	movs	r2, r3
 8005640:	f000 fac4 	bl	8005bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fb1e 	bl	8005c8c <TIM_ITRx_SetConfig>
      break;
 8005650:	e00e      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	0019      	movs	r1, r3
 800565c:	0010      	movs	r0, r2
 800565e:	f000 fb15 	bl	8005c8c <TIM_ITRx_SetConfig>
      break;
 8005662:	e005      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005664:	230f      	movs	r3, #15
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	2201      	movs	r2, #1
 800566a:	701a      	strb	r2, [r3, #0]
      break;
 800566c:	e000      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800566e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	223d      	movs	r2, #61	; 0x3d
 8005674:	2101      	movs	r1, #1
 8005676:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	223c      	movs	r2, #60	; 0x3c
 800567c:	2100      	movs	r1, #0
 800567e:	5499      	strb	r1, [r3, r2]

  return status;
 8005680:	230f      	movs	r3, #15
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	781b      	ldrb	r3, [r3, #0]
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b004      	add	sp, #16
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	ffff00ff 	.word	0xffff00ff

08005694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b002      	add	sp, #8
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b002      	add	sp, #8
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d008      	beq.n	80056fe <TIM_Base_SetConfig+0x2a>
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	05db      	lsls	r3, r3, #23
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d003      	beq.n	80056fe <TIM_Base_SetConfig+0x2a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a30      	ldr	r2, [pc, #192]	; (80057bc <TIM_Base_SetConfig+0xe8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2270      	movs	r2, #112	; 0x70
 8005702:	4393      	bics	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	05db      	lsls	r3, r3, #23
 800571e:	429a      	cmp	r2, r3
 8005720:	d013      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a25      	ldr	r2, [pc, #148]	; (80057bc <TIM_Base_SetConfig+0xe8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <TIM_Base_SetConfig+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <TIM_Base_SetConfig+0xf0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <TIM_Base_SetConfig+0xf4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_Base_SetConfig+0x76>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a21      	ldr	r2, [pc, #132]	; (80057cc <TIM_Base_SetConfig+0xf8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a20      	ldr	r2, [pc, #128]	; (80057d0 <TIM_Base_SetConfig+0xfc>)
 800574e:	4013      	ands	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	4393      	bics	r3, r2
 8005762:	001a      	movs	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <TIM_Base_SetConfig+0xe4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0xce>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <TIM_Base_SetConfig+0xf0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0xce>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <TIM_Base_SetConfig+0xf4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0xce>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <TIM_Base_SetConfig+0xf8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d103      	bne.n	80057aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	615a      	str	r2, [r3, #20]
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b004      	add	sp, #16
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40002000 	.word	0x40002000
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800
 80057d0:	fffffcff 	.word	0xfffffcff

080057d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4393      	bics	r3, r2
 80057e6:	001a      	movs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2270      	movs	r2, #112	; 0x70
 8005802:	4393      	bics	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2203      	movs	r2, #3
 800580a:	4393      	bics	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2202      	movs	r2, #2
 800581c:	4393      	bics	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a27      	ldr	r2, [pc, #156]	; (80058cc <TIM_OC1_SetConfig+0xf8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_OC1_SetConfig+0x76>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <TIM_OC1_SetConfig+0xfc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_OC1_SetConfig+0x76>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <TIM_OC1_SetConfig+0x100>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC1_SetConfig+0x76>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <TIM_OC1_SetConfig+0x104>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d10c      	bne.n	8005864 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2208      	movs	r2, #8
 800584e:	4393      	bics	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2204      	movs	r2, #4
 8005860:	4393      	bics	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a19      	ldr	r2, [pc, #100]	; (80058cc <TIM_OC1_SetConfig+0xf8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_OC1_SetConfig+0xb0>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <TIM_OC1_SetConfig+0xfc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_OC1_SetConfig+0xb0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <TIM_OC1_SetConfig+0x100>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC1_SetConfig+0xb0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <TIM_OC1_SetConfig+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <TIM_OC1_SetConfig+0x108>)
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <TIM_OC1_SetConfig+0x10c>)
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b006      	add	sp, #24
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	fffffeff 	.word	0xfffffeff
 80058e0:	fffffdff 	.word	0xfffffdff

080058e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	2210      	movs	r2, #16
 80058f4:	4393      	bics	r3, r2
 80058f6:	001a      	movs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a2e      	ldr	r2, [pc, #184]	; (80059cc <TIM_OC2_SetConfig+0xe8>)
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a2d      	ldr	r2, [pc, #180]	; (80059d0 <TIM_OC2_SetConfig+0xec>)
 800591a:	4013      	ands	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2220      	movs	r2, #32
 800592e:	4393      	bics	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <TIM_OC2_SetConfig+0xf0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10d      	bne.n	8005962 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	4393      	bics	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	4393      	bics	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <TIM_OC2_SetConfig+0xf0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_OC2_SetConfig+0x9e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <TIM_OC2_SetConfig+0xf4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_OC2_SetConfig+0x9e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <TIM_OC2_SetConfig+0xf8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC2_SetConfig+0x9e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <TIM_OC2_SetConfig+0xfc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d113      	bne.n	80059aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <TIM_OC2_SetConfig+0x100>)
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <TIM_OC2_SetConfig+0x104>)
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b006      	add	sp, #24
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	ffff8fff 	.word	0xffff8fff
 80059d0:	fffffcff 	.word	0xfffffcff
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800
 80059e4:	fffffbff 	.word	0xfffffbff
 80059e8:	fffff7ff 	.word	0xfffff7ff

080059ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4a35      	ldr	r2, [pc, #212]	; (8005ad0 <TIM_OC3_SetConfig+0xe4>)
 80059fc:	401a      	ands	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2270      	movs	r2, #112	; 0x70
 8005a18:	4393      	bics	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4393      	bics	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <TIM_OC3_SetConfig+0xe8>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a24      	ldr	r2, [pc, #144]	; (8005ad8 <TIM_OC3_SetConfig+0xec>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10d      	bne.n	8005a66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4a23      	ldr	r2, [pc, #140]	; (8005adc <TIM_OC3_SetConfig+0xf0>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <TIM_OC3_SetConfig+0xf4>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <TIM_OC3_SetConfig+0xec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_OC3_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <TIM_OC3_SetConfig+0xf8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_OC3_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <TIM_OC3_SetConfig+0xfc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_OC3_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <TIM_OC3_SetConfig+0x100>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d113      	bne.n	8005aae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <TIM_OC3_SetConfig+0x104>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <TIM_OC3_SetConfig+0x108>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b006      	add	sp, #24
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	fffffeff 	.word	0xfffffeff
 8005ad4:	fffffdff 	.word	0xfffffdff
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	fffff7ff 	.word	0xfffff7ff
 8005ae0:	fffffbff 	.word	0xfffffbff
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800
 8005af0:	ffffefff 	.word	0xffffefff
 8005af4:	ffffdfff 	.word	0xffffdfff

08005af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <TIM_OC4_SetConfig+0xb0>)
 8005b08:	401a      	ands	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a22      	ldr	r2, [pc, #136]	; (8005bac <TIM_OC4_SetConfig+0xb4>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <TIM_OC4_SetConfig+0xb8>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <TIM_OC4_SetConfig+0xbc>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	031b      	lsls	r3, r3, #12
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <TIM_OC4_SetConfig+0xc0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_OC4_SetConfig+0x78>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <TIM_OC4_SetConfig+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_OC4_SetConfig+0x78>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC4_SetConfig+0xc8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_OC4_SetConfig+0x78>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <TIM_OC4_SetConfig+0xcc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d109      	bne.n	8005b84 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <TIM_OC4_SetConfig+0xd0>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	ffffefff 	.word	0xffffefff
 8005bac:	ffff8fff 	.word	0xffff8fff
 8005bb0:	fffffcff 	.word	0xfffffcff
 8005bb4:	ffffdfff 	.word	0xffffdfff
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	ffffbfff 	.word	0xffffbfff

08005bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	2201      	movs	r2, #1
 8005be4:	4393      	bics	r3, r2
 8005be6:	001a      	movs	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	22f0      	movs	r2, #240	; 0xf0
 8005bf6:	4393      	bics	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	220a      	movs	r2, #10
 8005c08:	4393      	bics	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b006      	add	sp, #24
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	2210      	movs	r2, #16
 8005c3a:	4393      	bics	r3, r2
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4a0d      	ldr	r2, [pc, #52]	; (8005c88 <TIM_TI2_ConfigInputStage+0x60>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	22a0      	movs	r2, #160	; 0xa0
 8005c64:	4393      	bics	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b006      	add	sp, #24
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	ffff0fff 	.word	0xffff0fff

08005c8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2270      	movs	r2, #112	; 0x70
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	2207      	movs	r2, #7
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	609a      	str	r2, [r3, #8]
}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b004      	add	sp, #16
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <TIM_ETR_SetConfig+0x3c>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	021a      	lsls	r2, r3, #8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	609a      	str	r2, [r3, #8]
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b006      	add	sp, #24
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	ffff00ff 	.word	0xffff00ff

08005d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	221f      	movs	r2, #31
 8005d10:	4013      	ands	r3, r2
 8005d12:	2201      	movs	r2, #1
 8005d14:	409a      	lsls	r2, r3
 8005d16:	0013      	movs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	43d2      	mvns	r2, r2
 8005d22:	401a      	ands	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	211f      	movs	r1, #31
 8005d30:	400b      	ands	r3, r1
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4099      	lsls	r1, r3
 8005d36:	000b      	movs	r3, r1
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b006      	add	sp, #24
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	223c      	movs	r2, #60	; 0x3c
 8005d56:	5c9b      	ldrb	r3, [r3, r2]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e047      	b.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	223c      	movs	r2, #60	; 0x3c
 8005d64:	2101      	movs	r1, #1
 8005d66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	223d      	movs	r2, #61	; 0x3d
 8005d6c:	2102      	movs	r1, #2
 8005d6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2270      	movs	r2, #112	; 0x70
 8005d84:	4393      	bics	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	05db      	lsls	r3, r3, #23
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d009      	beq.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a10      	ldr	r2, [pc, #64]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d10c      	bne.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	4393      	bics	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	223d      	movs	r2, #61	; 0x3d
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	223c      	movs	r2, #60	; 0x3c
 8005dea:	2100      	movs	r1, #0
 8005dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b004      	add	sp, #16
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40014000 	.word	0x40014000

08005e04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	223c      	movs	r2, #60	; 0x3c
 8005e16:	5c9b      	ldrb	r3, [r3, r2]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e03e      	b.n	8005e9e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	223c      	movs	r2, #60	; 0x3c
 8005e24:	2101      	movs	r1, #1
 8005e26:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	22ff      	movs	r2, #255	; 0xff
 8005e2c:	4393      	bics	r3, r2
 8005e2e:	001a      	movs	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a18      	ldr	r2, [pc, #96]	; (8005eac <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005e58:	401a      	ands	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005e66:	401a      	ands	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005e74:	401a      	ands	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005e82:	401a      	ands	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	223c      	movs	r2, #60	; 0x3c
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b004      	add	sp, #16
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	fffffcff 	.word	0xfffffcff
 8005eac:	fffffbff 	.word	0xfffffbff
 8005eb0:	fffff7ff 	.word	0xfffff7ff
 8005eb4:	ffffefff 	.word	0xffffefff
 8005eb8:	ffffdfff 	.word	0xffffdfff
 8005ebc:	ffffbfff 	.word	0xffffbfff

08005ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b002      	add	sp, #8
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e044      	b.n	8005f7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2274      	movs	r2, #116	; 0x74
 8005efe:	2100      	movs	r1, #0
 8005f00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7fb febf 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2224      	movs	r2, #36	; 0x24
 8005f0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	438a      	bics	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 fc2e 	bl	8006784 <UART_SetConfig>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e024      	b.n	8005f7c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 fd61 	bl	8006a04 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	490d      	ldr	r1, [pc, #52]	; (8005f84 <HAL_UART_Init+0xa4>)
 8005f4e:	400a      	ands	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	212a      	movs	r1, #42	; 0x2a
 8005f5e:	438a      	bics	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 fdf9 	bl	8006b6c <UART_CheckIdleState>
 8005f7a:	0003      	movs	r3, r0
}
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b002      	add	sp, #8
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	ffffb7ff 	.word	0xffffb7ff

08005f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d000      	beq.n	8005fa2 <HAL_UART_Transmit+0x1a>
 8005fa0:	e096      	b.n	80060d0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_UART_Transmit+0x28>
 8005fa8:	1dbb      	adds	r3, r7, #6
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e08e      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d109      	bne.n	8005fd4 <HAL_UART_Transmit+0x4c>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d105      	bne.n	8005fd4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d001      	beq.n	8005fd4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e07e      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2274      	movs	r2, #116	; 0x74
 8005fd8:	5c9b      	ldrb	r3, [r3, r2]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Transmit+0x5a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e077      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2274      	movs	r2, #116	; 0x74
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2280      	movs	r2, #128	; 0x80
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2221      	movs	r2, #33	; 0x21
 8005ff6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff8:	f7fb ff7a 	bl	8001ef0 <HAL_GetTick>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1dba      	adds	r2, r7, #6
 8006004:	2150      	movs	r1, #80	; 0x50
 8006006:	8812      	ldrh	r2, [r2, #0]
 8006008:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1dba      	adds	r2, r7, #6
 800600e:	2152      	movs	r1, #82	; 0x52
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	015b      	lsls	r3, r3, #5
 800601c:	429a      	cmp	r2, r3
 800601e:	d108      	bne.n	8006032 <HAL_UART_Transmit+0xaa>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e003      	b.n	800603a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2274      	movs	r2, #116	; 0x74
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006042:	e02d      	b.n	80060a0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	0013      	movs	r3, r2
 800604e:	2200      	movs	r2, #0
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	f000 fdd3 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d001      	beq.n	800605e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e039      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	881a      	ldrh	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	05d2      	lsls	r2, r2, #23
 800606e:	0dd2      	lsrs	r2, r2, #23
 8006070:	b292      	uxth	r2, r2
 8006072:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	3302      	adds	r3, #2
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e008      	b.n	800608e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	b292      	uxth	r2, r2
 8006086:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2252      	movs	r2, #82	; 0x52
 8006092:	5a9b      	ldrh	r3, [r3, r2]
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b299      	uxth	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2252      	movs	r2, #82	; 0x52
 800609e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2252      	movs	r2, #82	; 0x52
 80060a4:	5a9b      	ldrh	r3, [r3, r2]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1cb      	bne.n	8006044 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	0013      	movs	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	f000 fd9f 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 80060be:	1e03      	subs	r3, r0, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e005      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e000      	b.n	80060d2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
  }
}
 80060d2:	0018      	movs	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b008      	add	sp, #32
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b088      	sub	sp, #32
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	1dbb      	adds	r3, r7, #6
 80060e6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d150      	bne.n	8006192 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_Receive_IT+0x24>
 80060f6:	1dbb      	adds	r3, r7, #6
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e048      	b.n	8006194 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	015b      	lsls	r3, r3, #5
 800610a:	429a      	cmp	r2, r3
 800610c:	d109      	bne.n	8006122 <HAL_UART_Receive_IT+0x48>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2201      	movs	r2, #1
 800611a:	4013      	ands	r3, r2
 800611c:	d001      	beq.n	8006122 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e038      	b.n	8006194 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2274      	movs	r2, #116	; 0x74
 8006126:	5c9b      	ldrb	r3, [r3, r2]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_UART_Receive_IT+0x56>
 800612c:	2302      	movs	r3, #2
 800612e:	e031      	b.n	8006194 <HAL_UART_Receive_IT+0xba>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2274      	movs	r2, #116	; 0x74
 8006134:	2101      	movs	r1, #1
 8006136:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	4013      	ands	r3, r2
 800614a:	d019      	beq.n	8006180 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614c:	f3ef 8310 	mrs	r3, PRIMASK
 8006150:	613b      	str	r3, [r7, #16]
  return(result);
 8006152:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006154:	61fb      	str	r3, [r7, #28]
 8006156:	2301      	movs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			; (mov r8, r8)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	04c9      	lsls	r1, r1, #19
 8006170:	430a      	orrs	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f383 8810 	msr	PRIMASK, r3
}
 800617e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006180:	1dbb      	adds	r3, r7, #6
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fdfb 	bl	8006d84 <UART_Start_Receive_IT>
 800618e:	0003      	movs	r3, r0
 8006190:	e000      	b.n	8006194 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	b008      	add	sp, #32
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b0ab      	sub	sp, #172	; 0xac
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	22a4      	movs	r2, #164	; 0xa4
 80061ac:	18b9      	adds	r1, r7, r2
 80061ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	20a0      	movs	r0, #160	; 0xa0
 80061b8:	1839      	adds	r1, r7, r0
 80061ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	219c      	movs	r1, #156	; 0x9c
 80061c4:	1879      	adds	r1, r7, r1
 80061c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061c8:	0011      	movs	r1, r2
 80061ca:	18bb      	adds	r3, r7, r2
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a99      	ldr	r2, [pc, #612]	; (8006434 <HAL_UART_IRQHandler+0x298>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	2298      	movs	r2, #152	; 0x98
 80061d4:	18bc      	adds	r4, r7, r2
 80061d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80061d8:	18bb      	adds	r3, r7, r2
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d114      	bne.n	800620a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2220      	movs	r2, #32
 80061e6:	4013      	ands	r3, r2
 80061e8:	d00f      	beq.n	800620a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061ea:	183b      	adds	r3, r7, r0
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2220      	movs	r2, #32
 80061f0:	4013      	ands	r3, r2
 80061f2:	d00a      	beq.n	800620a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d100      	bne.n	80061fe <HAL_UART_IRQHandler+0x62>
 80061fc:	e296      	b.n	800672c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	0010      	movs	r0, r2
 8006206:	4798      	blx	r3
      }
      return;
 8006208:	e290      	b.n	800672c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800620a:	2398      	movs	r3, #152	; 0x98
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d100      	bne.n	8006216 <HAL_UART_IRQHandler+0x7a>
 8006214:	e114      	b.n	8006440 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006216:	239c      	movs	r3, #156	; 0x9c
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	4013      	ands	r3, r2
 8006220:	d106      	bne.n	8006230 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006222:	23a0      	movs	r3, #160	; 0xa0
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a83      	ldr	r2, [pc, #524]	; (8006438 <HAL_UART_IRQHandler+0x29c>)
 800622a:	4013      	ands	r3, r2
 800622c:	d100      	bne.n	8006230 <HAL_UART_IRQHandler+0x94>
 800622e:	e107      	b.n	8006440 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006230:	23a4      	movs	r3, #164	; 0xa4
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	4013      	ands	r3, r2
 800623a:	d012      	beq.n	8006262 <HAL_UART_IRQHandler+0xc6>
 800623c:	23a0      	movs	r3, #160	; 0xa0
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4013      	ands	r3, r2
 8006248:	d00b      	beq.n	8006262 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2280      	movs	r2, #128	; 0x80
 8006256:	589b      	ldr	r3, [r3, r2]
 8006258:	2201      	movs	r2, #1
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006262:	23a4      	movs	r3, #164	; 0xa4
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2202      	movs	r2, #2
 800626a:	4013      	ands	r3, r2
 800626c:	d011      	beq.n	8006292 <HAL_UART_IRQHandler+0xf6>
 800626e:	239c      	movs	r3, #156	; 0x9c
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2201      	movs	r2, #1
 8006276:	4013      	ands	r3, r2
 8006278:	d00b      	beq.n	8006292 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2202      	movs	r2, #2
 8006280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	589b      	ldr	r3, [r3, r2]
 8006288:	2204      	movs	r2, #4
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006292:	23a4      	movs	r3, #164	; 0xa4
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2204      	movs	r2, #4
 800629a:	4013      	ands	r3, r2
 800629c:	d011      	beq.n	80062c2 <HAL_UART_IRQHandler+0x126>
 800629e:	239c      	movs	r3, #156	; 0x9c
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2201      	movs	r2, #1
 80062a6:	4013      	ands	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2204      	movs	r2, #4
 80062b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2280      	movs	r2, #128	; 0x80
 80062b6:	589b      	ldr	r3, [r3, r2]
 80062b8:	2202      	movs	r2, #2
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062c2:	23a4      	movs	r3, #164	; 0xa4
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2208      	movs	r2, #8
 80062ca:	4013      	ands	r3, r2
 80062cc:	d017      	beq.n	80062fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062ce:	23a0      	movs	r3, #160	; 0xa0
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2220      	movs	r2, #32
 80062d6:	4013      	ands	r3, r2
 80062d8:	d105      	bne.n	80062e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062da:	239c      	movs	r3, #156	; 0x9c
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062e4:	d00b      	beq.n	80062fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2208      	movs	r2, #8
 80062ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2280      	movs	r2, #128	; 0x80
 80062f2:	589b      	ldr	r3, [r3, r2]
 80062f4:	2208      	movs	r2, #8
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062fe:	23a4      	movs	r3, #164	; 0xa4
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4013      	ands	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_UART_IRQHandler+0x198>
 800630c:	23a0      	movs	r3, #160	; 0xa0
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	04db      	lsls	r3, r3, #19
 8006316:	4013      	ands	r3, r2
 8006318:	d00c      	beq.n	8006334 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	589b      	ldr	r3, [r3, r2]
 800632a:	2220      	movs	r2, #32
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2180      	movs	r1, #128	; 0x80
 8006332:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	589b      	ldr	r3, [r3, r2]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d100      	bne.n	8006340 <HAL_UART_IRQHandler+0x1a4>
 800633e:	e1f7      	b.n	8006730 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006340:	23a4      	movs	r3, #164	; 0xa4
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2220      	movs	r2, #32
 8006348:	4013      	ands	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800634c:	23a0      	movs	r3, #160	; 0xa0
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2220      	movs	r2, #32
 8006354:	4013      	ands	r3, r2
 8006356:	d008      	beq.n	800636a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	0010      	movs	r0, r2
 8006368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	589b      	ldr	r3, [r3, r2]
 8006370:	2194      	movs	r1, #148	; 0x94
 8006372:	187a      	adds	r2, r7, r1
 8006374:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2240      	movs	r2, #64	; 0x40
 800637e:	4013      	ands	r3, r2
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d004      	beq.n	800638e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006384:	187b      	adds	r3, r7, r1
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2228      	movs	r2, #40	; 0x28
 800638a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800638c:	d047      	beq.n	800641e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0018      	movs	r0, r3
 8006392:	f000 fd93 	bl	8006ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2240      	movs	r2, #64	; 0x40
 800639e:	4013      	ands	r3, r2
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d137      	bne.n	8006414 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a4:	f3ef 8310 	mrs	r3, PRIMASK
 80063a8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80063aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ac:	2090      	movs	r0, #144	; 0x90
 80063ae:	183a      	adds	r2, r7, r0
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	2301      	movs	r3, #1
 80063b4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b8:	f383 8810 	msr	PRIMASK, r3
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2140      	movs	r1, #64	; 0x40
 80063ca:	438a      	bics	r2, r1
 80063cc:	609a      	str	r2, [r3, #8]
 80063ce:	183b      	adds	r3, r7, r0
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d6:	f383 8810 	msr	PRIMASK, r3
}
 80063da:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <HAL_UART_IRQHandler+0x2a0>)
 80063ea:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fc fbe3 	bl	8002bbc <HAL_DMA_Abort_IT>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d01a      	beq.n	8006430 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	0018      	movs	r0, r3
 8006406:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	e012      	b.n	8006430 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0018      	movs	r0, r3
 800640e:	f000 f9a5 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006412:	e00d      	b.n	8006430 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	0018      	movs	r0, r3
 8006418:	f000 f9a0 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	e008      	b.n	8006430 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	0018      	movs	r0, r3
 8006422:	f000 f99b 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2280      	movs	r2, #128	; 0x80
 800642a:	2100      	movs	r1, #0
 800642c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800642e:	e17f      	b.n	8006730 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	46c0      	nop			; (mov r8, r8)
    return;
 8006432:	e17d      	b.n	8006730 <HAL_UART_IRQHandler+0x594>
 8006434:	0000080f 	.word	0x0000080f
 8006438:	04000120 	.word	0x04000120
 800643c:	08006f81 	.word	0x08006f81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006444:	2b01      	cmp	r3, #1
 8006446:	d000      	beq.n	800644a <HAL_UART_IRQHandler+0x2ae>
 8006448:	e131      	b.n	80066ae <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800644a:	23a4      	movs	r3, #164	; 0xa4
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2210      	movs	r2, #16
 8006452:	4013      	ands	r3, r2
 8006454:	d100      	bne.n	8006458 <HAL_UART_IRQHandler+0x2bc>
 8006456:	e12a      	b.n	80066ae <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006458:	23a0      	movs	r3, #160	; 0xa0
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2210      	movs	r2, #16
 8006460:	4013      	ands	r3, r2
 8006462:	d100      	bne.n	8006466 <HAL_UART_IRQHandler+0x2ca>
 8006464:	e123      	b.n	80066ae <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2210      	movs	r2, #16
 800646c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2240      	movs	r2, #64	; 0x40
 8006476:	4013      	ands	r3, r2
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d000      	beq.n	800647e <HAL_UART_IRQHandler+0x2e2>
 800647c:	e09b      	b.n	80065b6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	217e      	movs	r1, #126	; 0x7e
 8006488:	187b      	adds	r3, r7, r1
 800648a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800648c:	187b      	adds	r3, r7, r1
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d100      	bne.n	8006496 <HAL_UART_IRQHandler+0x2fa>
 8006494:	e14e      	b.n	8006734 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2258      	movs	r2, #88	; 0x58
 800649a:	5a9b      	ldrh	r3, [r3, r2]
 800649c:	187a      	adds	r2, r7, r1
 800649e:	8812      	ldrh	r2, [r2, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d300      	bcc.n	80064a6 <HAL_UART_IRQHandler+0x30a>
 80064a4:	e146      	b.n	8006734 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	187a      	adds	r2, r7, r1
 80064aa:	215a      	movs	r1, #90	; 0x5a
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d06e      	beq.n	8006598 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ba:	f3ef 8310 	mrs	r3, PRIMASK
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80064c4:	2301      	movs	r3, #1
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	499a      	ldr	r1, [pc, #616]	; (8006744 <HAL_UART_IRQHandler+0x5a8>)
 80064dc:	400a      	ands	r2, r1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	f383 8810 	msr	PRIMASK, r3
}
 80064ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ec:	f3ef 8310 	mrs	r3, PRIMASK
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80064f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f4:	677b      	str	r3, [r7, #116]	; 0x74
 80064f6:	2301      	movs	r3, #1
 80064f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2101      	movs	r1, #1
 800650e:	438a      	bics	r2, r1
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006514:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651e:	f3ef 8310 	mrs	r3, PRIMASK
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006524:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	673b      	str	r3, [r7, #112]	; 0x70
 8006528:	2301      	movs	r3, #1
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2140      	movs	r1, #64	; 0x40
 8006540:	438a      	bics	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8310 	mrs	r3, PRIMASK
 8006560:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006566:	2301      	movs	r3, #1
 8006568:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800656c:	f383 8810 	msr	PRIMASK, r3
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2110      	movs	r1, #16
 800657e:	438a      	bics	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006584:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006588:	f383 8810 	msr	PRIMASK, r3
}
 800658c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	0018      	movs	r0, r3
 8006594:	f7fc fada 	bl	8002b4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2258      	movs	r2, #88	; 0x58
 800659c:	5a9a      	ldrh	r2, [r3, r2]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	215a      	movs	r1, #90	; 0x5a
 80065a2:	5a5b      	ldrh	r3, [r3, r1]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0011      	movs	r1, r2
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 f8dc 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065b4:	e0be      	b.n	8006734 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2258      	movs	r2, #88	; 0x58
 80065ba:	5a99      	ldrh	r1, [r3, r2]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	225a      	movs	r2, #90	; 0x5a
 80065c0:	5a9b      	ldrh	r3, [r3, r2]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	208e      	movs	r0, #142	; 0x8e
 80065c6:	183b      	adds	r3, r7, r0
 80065c8:	1a8a      	subs	r2, r1, r2
 80065ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	225a      	movs	r2, #90	; 0x5a
 80065d0:	5a9b      	ldrh	r3, [r3, r2]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d100      	bne.n	80065da <HAL_UART_IRQHandler+0x43e>
 80065d8:	e0ae      	b.n	8006738 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80065da:	183b      	adds	r3, r7, r0
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d100      	bne.n	80065e4 <HAL_UART_IRQHandler+0x448>
 80065e2:	e0a9      	b.n	8006738 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e4:	f3ef 8310 	mrs	r3, PRIMASK
 80065e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ec:	2488      	movs	r4, #136	; 0x88
 80065ee:	193a      	adds	r2, r7, r4
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	2301      	movs	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f383 8810 	msr	PRIMASK, r3
}
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	494f      	ldr	r1, [pc, #316]	; (8006748 <HAL_UART_IRQHandler+0x5ac>)
 800660a:	400a      	ands	r2, r1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	193b      	adds	r3, r7, r4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f383 8810 	msr	PRIMASK, r3
}
 800661a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661c:	f3ef 8310 	mrs	r3, PRIMASK
 8006620:	61bb      	str	r3, [r7, #24]
  return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	2484      	movs	r4, #132	; 0x84
 8006626:	193a      	adds	r2, r7, r4
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	2301      	movs	r3, #1
 800662c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2101      	movs	r1, #1
 8006642:	438a      	bics	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	193b      	adds	r3, r7, r4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	f383 8810 	msr	PRIMASK, r3
}
 8006652:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006666:	f3ef 8310 	mrs	r3, PRIMASK
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	2480      	movs	r4, #128	; 0x80
 8006670:	193a      	adds	r2, r7, r4
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	2301      	movs	r3, #1
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	f383 8810 	msr	PRIMASK, r3
}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2110      	movs	r1, #16
 800668c:	438a      	bics	r2, r1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	193b      	adds	r3, r7, r4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	f383 8810 	msr	PRIMASK, r3
}
 800669c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800669e:	183b      	adds	r3, r7, r0
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f000 f860 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ac:	e044      	b.n	8006738 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066ae:	23a4      	movs	r3, #164	; 0xa4
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	2380      	movs	r3, #128	; 0x80
 80066b6:	035b      	lsls	r3, r3, #13
 80066b8:	4013      	ands	r3, r2
 80066ba:	d010      	beq.n	80066de <HAL_UART_IRQHandler+0x542>
 80066bc:	239c      	movs	r3, #156	; 0x9c
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	03db      	lsls	r3, r3, #15
 80066c6:	4013      	ands	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2280      	movs	r2, #128	; 0x80
 80066d0:	0352      	lsls	r2, r2, #13
 80066d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fdfc 	bl	80072d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066dc:	e02f      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066de:	23a4      	movs	r3, #164	; 0xa4
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2280      	movs	r2, #128	; 0x80
 80066e6:	4013      	ands	r3, r2
 80066e8:	d00f      	beq.n	800670a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066ea:	23a0      	movs	r3, #160	; 0xa0
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	4013      	ands	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01e      	beq.n	800673c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	0010      	movs	r0, r2
 8006706:	4798      	blx	r3
    }
    return;
 8006708:	e018      	b.n	800673c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800670a:	23a4      	movs	r3, #164	; 0xa4
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2240      	movs	r2, #64	; 0x40
 8006712:	4013      	ands	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_UART_IRQHandler+0x5a2>
 8006716:	23a0      	movs	r3, #160	; 0xa0
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2240      	movs	r2, #64	; 0x40
 800671e:	4013      	ands	r3, r2
 8006720:	d00d      	beq.n	800673e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 fc42 	bl	8006fae <UART_EndTransmit_IT>
    return;
 800672a:	e008      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
      return;
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	e006      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
    return;
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	e004      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	e002      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
      return;
 8006738:	46c0      	nop			; (mov r8, r8)
 800673a:	e000      	b.n	800673e <HAL_UART_IRQHandler+0x5a2>
    return;
 800673c:	46c0      	nop			; (mov r8, r8)
  }

}
 800673e:	46bd      	mov	sp, r7
 8006740:	b02b      	add	sp, #172	; 0xac
 8006742:	bd90      	pop	{r4, r7, pc}
 8006744:	fffffeff 	.word	0xfffffeff
 8006748:	fffffedf 	.word	0xfffffedf

0800674c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b002      	add	sp, #8
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b002      	add	sp, #8
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	000a      	movs	r2, r1
 8006776:	1cbb      	adds	r3, r7, #2
 8006778:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	46bd      	mov	sp, r7
 800677e:	b002      	add	sp, #8
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800678c:	231e      	movs	r3, #30
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a8d      	ldr	r2, [pc, #564]	; (80069e8 <UART_SetConfig+0x264>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a88      	ldr	r2, [pc, #544]	; (80069ec <UART_SetConfig+0x268>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a7f      	ldr	r2, [pc, #508]	; (80069f0 <UART_SetConfig+0x26c>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	0019      	movs	r1, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7b      	ldr	r2, [pc, #492]	; (80069f4 <UART_SetConfig+0x270>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d127      	bne.n	800685a <UART_SetConfig+0xd6>
 800680a:	4b7b      	ldr	r3, [pc, #492]	; (80069f8 <UART_SetConfig+0x274>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	2203      	movs	r2, #3
 8006810:	4013      	ands	r3, r2
 8006812:	2b03      	cmp	r3, #3
 8006814:	d00d      	beq.n	8006832 <UART_SetConfig+0xae>
 8006816:	d81b      	bhi.n	8006850 <UART_SetConfig+0xcc>
 8006818:	2b02      	cmp	r3, #2
 800681a:	d014      	beq.n	8006846 <UART_SetConfig+0xc2>
 800681c:	d818      	bhi.n	8006850 <UART_SetConfig+0xcc>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <UART_SetConfig+0xa4>
 8006822:	2b01      	cmp	r3, #1
 8006824:	d00a      	beq.n	800683c <UART_SetConfig+0xb8>
 8006826:	e013      	b.n	8006850 <UART_SetConfig+0xcc>
 8006828:	231f      	movs	r3, #31
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e021      	b.n	8006876 <UART_SetConfig+0xf2>
 8006832:	231f      	movs	r3, #31
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e01c      	b.n	8006876 <UART_SetConfig+0xf2>
 800683c:	231f      	movs	r3, #31
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	2204      	movs	r2, #4
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e017      	b.n	8006876 <UART_SetConfig+0xf2>
 8006846:	231f      	movs	r3, #31
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	2208      	movs	r2, #8
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e012      	b.n	8006876 <UART_SetConfig+0xf2>
 8006850:	231f      	movs	r3, #31
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2210      	movs	r2, #16
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e00d      	b.n	8006876 <UART_SetConfig+0xf2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a67      	ldr	r2, [pc, #412]	; (80069fc <UART_SetConfig+0x278>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d104      	bne.n	800686e <UART_SetConfig+0xea>
 8006864:	231f      	movs	r3, #31
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e003      	b.n	8006876 <UART_SetConfig+0xf2>
 800686e:	231f      	movs	r3, #31
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	2210      	movs	r2, #16
 8006874:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	429a      	cmp	r2, r3
 8006880:	d15d      	bne.n	800693e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006882:	231f      	movs	r3, #31
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d015      	beq.n	80068b8 <UART_SetConfig+0x134>
 800688c:	dc18      	bgt.n	80068c0 <UART_SetConfig+0x13c>
 800688e:	2b04      	cmp	r3, #4
 8006890:	d00d      	beq.n	80068ae <UART_SetConfig+0x12a>
 8006892:	dc15      	bgt.n	80068c0 <UART_SetConfig+0x13c>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <UART_SetConfig+0x11a>
 8006898:	2b02      	cmp	r3, #2
 800689a:	d005      	beq.n	80068a8 <UART_SetConfig+0x124>
 800689c:	e010      	b.n	80068c0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800689e:	f7fd fe27 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 80068a2:	0003      	movs	r3, r0
 80068a4:	61bb      	str	r3, [r7, #24]
        break;
 80068a6:	e012      	b.n	80068ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b55      	ldr	r3, [pc, #340]	; (8006a00 <UART_SetConfig+0x27c>)
 80068aa:	61bb      	str	r3, [r7, #24]
        break;
 80068ac:	e00f      	b.n	80068ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd fdb1 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80068b2:	0003      	movs	r3, r0
 80068b4:	61bb      	str	r3, [r7, #24]
        break;
 80068b6:	e00a      	b.n	80068ce <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b8:	2380      	movs	r3, #128	; 0x80
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	61bb      	str	r3, [r7, #24]
        break;
 80068be:	e006      	b.n	80068ce <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068c4:	231e      	movs	r3, #30
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
        break;
 80068cc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d100      	bne.n	80068d6 <UART_SetConfig+0x152>
 80068d4:	e07b      	b.n	80069ce <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	005a      	lsls	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	18d2      	adds	r2, r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	0019      	movs	r1, r3
 80068e8:	0010      	movs	r0, r2
 80068ea:	f7f9 fc0d 	bl	8000108 <__udivsi3>
 80068ee:	0003      	movs	r3, r0
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d91c      	bls.n	8006934 <UART_SetConfig+0x1b0>
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	429a      	cmp	r2, r3
 8006902:	d217      	bcs.n	8006934 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	b29a      	uxth	r2, r3
 8006908:	200e      	movs	r0, #14
 800690a:	183b      	adds	r3, r7, r0
 800690c:	210f      	movs	r1, #15
 800690e:	438a      	bics	r2, r1
 8006910:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	b29b      	uxth	r3, r3
 8006918:	2207      	movs	r2, #7
 800691a:	4013      	ands	r3, r2
 800691c:	b299      	uxth	r1, r3
 800691e:	183b      	adds	r3, r7, r0
 8006920:	183a      	adds	r2, r7, r0
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	183a      	adds	r2, r7, r0
 800692e:	8812      	ldrh	r2, [r2, #0]
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	e04c      	b.n	80069ce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006934:	231e      	movs	r3, #30
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	e047      	b.n	80069ce <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800693e:	231f      	movs	r3, #31
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d015      	beq.n	8006974 <UART_SetConfig+0x1f0>
 8006948:	dc18      	bgt.n	800697c <UART_SetConfig+0x1f8>
 800694a:	2b04      	cmp	r3, #4
 800694c:	d00d      	beq.n	800696a <UART_SetConfig+0x1e6>
 800694e:	dc15      	bgt.n	800697c <UART_SetConfig+0x1f8>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <UART_SetConfig+0x1d6>
 8006954:	2b02      	cmp	r3, #2
 8006956:	d005      	beq.n	8006964 <UART_SetConfig+0x1e0>
 8006958:	e010      	b.n	800697c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695a:	f7fd fdc9 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 800695e:	0003      	movs	r3, r0
 8006960:	61bb      	str	r3, [r7, #24]
        break;
 8006962:	e012      	b.n	800698a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006964:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <UART_SetConfig+0x27c>)
 8006966:	61bb      	str	r3, [r7, #24]
        break;
 8006968:	e00f      	b.n	800698a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696a:	f7fd fd53 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 800696e:	0003      	movs	r3, r0
 8006970:	61bb      	str	r3, [r7, #24]
        break;
 8006972:	e00a      	b.n	800698a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	61bb      	str	r3, [r7, #24]
        break;
 800697a:	e006      	b.n	800698a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006980:	231e      	movs	r3, #30
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
        break;
 8006988:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	085a      	lsrs	r2, r3, #1
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	18d2      	adds	r2, r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	0019      	movs	r1, r3
 80069a0:	0010      	movs	r0, r2
 80069a2:	f7f9 fbb1 	bl	8000108 <__udivsi3>
 80069a6:	0003      	movs	r3, r0
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d909      	bls.n	80069c6 <UART_SetConfig+0x242>
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	025b      	lsls	r3, r3, #9
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d204      	bcs.n	80069c6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	60da      	str	r2, [r3, #12]
 80069c4:	e003      	b.n	80069ce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80069c6:	231e      	movs	r3, #30
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	2201      	movs	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069da:	231e      	movs	r3, #30
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	781b      	ldrb	r3, [r3, #0]
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b008      	add	sp, #32
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	ffff69f3 	.word	0xffff69f3
 80069ec:	ffffcfff 	.word	0xffffcfff
 80069f0:	fffff4ff 	.word	0xfffff4ff
 80069f4:	40013800 	.word	0x40013800
 80069f8:	40021000 	.word	0x40021000
 80069fc:	40004400 	.word	0x40004400
 8006a00:	007a1200 	.word	0x007a1200

08006a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2201      	movs	r2, #1
 8006a12:	4013      	ands	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a4a      	ldr	r2, [pc, #296]	; (8006b48 <UART_AdvFeatureConfig+0x144>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	0019      	movs	r1, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2202      	movs	r2, #2
 8006a34:	4013      	ands	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4a43      	ldr	r2, [pc, #268]	; (8006b4c <UART_AdvFeatureConfig+0x148>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	0019      	movs	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2204      	movs	r2, #4
 8006a56:	4013      	ands	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4a3b      	ldr	r2, [pc, #236]	; (8006b50 <UART_AdvFeatureConfig+0x14c>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	0019      	movs	r1, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2208      	movs	r2, #8
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	4a34      	ldr	r2, [pc, #208]	; (8006b54 <UART_AdvFeatureConfig+0x150>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	0019      	movs	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2210      	movs	r2, #16
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d00b      	beq.n	8006ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4a2c      	ldr	r2, [pc, #176]	; (8006b58 <UART_AdvFeatureConfig+0x154>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2220      	movs	r2, #32
 8006abc:	4013      	ands	r3, r2
 8006abe:	d00b      	beq.n	8006ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <UART_AdvFeatureConfig+0x158>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2240      	movs	r2, #64	; 0x40
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d01d      	beq.n	8006b1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <UART_AdvFeatureConfig+0x15c>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	0019      	movs	r1, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	035b      	lsls	r3, r3, #13
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d10b      	bne.n	8006b1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <UART_AdvFeatureConfig+0x160>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	0019      	movs	r1, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	4013      	ands	r3, r2
 8006b26:	d00b      	beq.n	8006b40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4a0e      	ldr	r2, [pc, #56]	; (8006b68 <UART_AdvFeatureConfig+0x164>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	0019      	movs	r1, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }
}
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b002      	add	sp, #8
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	fffdffff 	.word	0xfffdffff
 8006b4c:	fffeffff 	.word	0xfffeffff
 8006b50:	fffbffff 	.word	0xfffbffff
 8006b54:	ffff7fff 	.word	0xffff7fff
 8006b58:	ffffefff 	.word	0xffffefff
 8006b5c:	ffffdfff 	.word	0xffffdfff
 8006b60:	ffefffff 	.word	0xffefffff
 8006b64:	ff9fffff 	.word	0xff9fffff
 8006b68:	fff7ffff 	.word	0xfff7ffff

08006b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	2100      	movs	r1, #0
 8006b7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b7c:	f7fb f9b8 	bl	8001ef0 <HAL_GetTick>
 8006b80:	0003      	movs	r3, r0
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d10c      	bne.n	8006bac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	0391      	lsls	r1, r2, #14
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <UART_CheckIdleState+0x8c>)
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f000 f82c 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 8006ba4:	1e03      	subs	r3, r0, #0
 8006ba6:	d001      	beq.n	8006bac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e021      	b.n	8006bf0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d10c      	bne.n	8006bd4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2280      	movs	r2, #128	; 0x80
 8006bbe:	03d1      	lsls	r1, r2, #15
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <UART_CheckIdleState+0x8c>)
 8006bc4:	9200      	str	r2, [sp, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f000 f818 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 8006bcc:	1e03      	subs	r3, r0, #0
 8006bce:	d001      	beq.n	8006bd4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e00d      	b.n	8006bf0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2274      	movs	r2, #116	; 0x74
 8006bea:	2100      	movs	r1, #0
 8006bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b004      	add	sp, #16
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	01ffffff 	.word	0x01ffffff

08006bfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b094      	sub	sp, #80	; 0x50
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	1dfb      	adds	r3, r7, #7
 8006c0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0c:	e0a3      	b.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c10:	3301      	adds	r3, #1
 8006c12:	d100      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c14:	e09f      	b.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fb f96b 	bl	8001ef0 <HAL_GetTick>
 8006c1a:	0002      	movs	r2, r0
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d13d      	bne.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c34:	647b      	str	r3, [r7, #68]	; 0x44
 8006c36:	2301      	movs	r3, #1
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	f383 8810 	msr	PRIMASK, r3
}
 8006c40:	46c0      	nop			; (mov r8, r8)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	494c      	ldr	r1, [pc, #304]	; (8006d80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c4e:	400a      	ands	r2, r1
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f383 8810 	msr	PRIMASK, r3
}
 8006c5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	643b      	str	r3, [r7, #64]	; 0x40
 8006c68:	2301      	movs	r3, #1
 8006c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2101      	movs	r1, #1
 8006c80:	438a      	bics	r2, r1
 8006c82:	609a      	str	r2, [r3, #8]
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8a:	f383 8810 	msr	PRIMASK, r3
}
 8006c8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2274      	movs	r2, #116	; 0x74
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e067      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d050      	beq.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69da      	ldr	r2, [r3, #28]
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d146      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2280      	movs	r2, #128	; 0x80
 8006cce:	0112      	lsls	r2, r2, #4
 8006cd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	613b      	str	r3, [r7, #16]
  return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	2301      	movs	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4923      	ldr	r1, [pc, #140]	; (8006d80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d04:	f3ef 8310 	mrs	r3, PRIMASK
 8006d08:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d0a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d0e:	2301      	movs	r3, #1
 8006d10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			; (mov r8, r8)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	438a      	bics	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	f383 8810 	msr	PRIMASK, r3
}
 8006d34:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	2120      	movs	r1, #32
 8006d48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2274      	movs	r2, #116	; 0x74
 8006d4e:	2100      	movs	r1, #0
 8006d50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e010      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	425a      	negs	r2, r3
 8006d66:	4153      	adcs	r3, r2
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	1dfb      	adds	r3, r7, #7
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d100      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006d74:	e74b      	b.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b014      	add	sp, #80	; 0x50
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	fffffe5f 	.word	0xfffffe5f

08006d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08c      	sub	sp, #48	; 0x30
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	1dbb      	adds	r3, r7, #6
 8006d90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1dba      	adds	r2, r7, #6
 8006d9c:	2158      	movs	r1, #88	; 0x58
 8006d9e:	8812      	ldrh	r2, [r2, #0]
 8006da0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1dba      	adds	r2, r7, #6
 8006da6:	215a      	movs	r1, #90	; 0x5a
 8006da8:	8812      	ldrh	r2, [r2, #0]
 8006daa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	2380      	movs	r3, #128	; 0x80
 8006db8:	015b      	lsls	r3, r3, #5
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10d      	bne.n	8006dda <UART_Start_Receive_IT+0x56>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <UART_Start_Receive_IT+0x4c>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	225c      	movs	r2, #92	; 0x5c
 8006dca:	4939      	ldr	r1, [pc, #228]	; (8006eb0 <UART_Start_Receive_IT+0x12c>)
 8006dcc:	5299      	strh	r1, [r3, r2]
 8006dce:	e01a      	b.n	8006e06 <UART_Start_Receive_IT+0x82>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	225c      	movs	r2, #92	; 0x5c
 8006dd4:	21ff      	movs	r1, #255	; 0xff
 8006dd6:	5299      	strh	r1, [r3, r2]
 8006dd8:	e015      	b.n	8006e06 <UART_Start_Receive_IT+0x82>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <UART_Start_Receive_IT+0x7a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <UART_Start_Receive_IT+0x70>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	225c      	movs	r2, #92	; 0x5c
 8006dee:	21ff      	movs	r1, #255	; 0xff
 8006df0:	5299      	strh	r1, [r3, r2]
 8006df2:	e008      	b.n	8006e06 <UART_Start_Receive_IT+0x82>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	225c      	movs	r2, #92	; 0x5c
 8006df8:	217f      	movs	r1, #127	; 0x7f
 8006dfa:	5299      	strh	r1, [r3, r2]
 8006dfc:	e003      	b.n	8006e06 <UART_Start_Receive_IT+0x82>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	225c      	movs	r2, #92	; 0x5c
 8006e02:	2100      	movs	r1, #0
 8006e04:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2222      	movs	r2, #34	; 0x22
 8006e12:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e14:	f3ef 8310 	mrs	r3, PRIMASK
 8006e18:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e1a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1e:	2301      	movs	r3, #1
 8006e20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f383 8810 	msr	PRIMASK, r3
}
 8006e28:	46c0      	nop			; (mov r8, r8)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2101      	movs	r1, #1
 8006e36:	430a      	orrs	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	f383 8810 	msr	PRIMASK, r3
}
 8006e44:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	015b      	lsls	r3, r3, #5
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d107      	bne.n	8006e62 <UART_Start_Receive_IT+0xde>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <UART_Start_Receive_IT+0x130>)
 8006e5e:	665a      	str	r2, [r3, #100]	; 0x64
 8006e60:	e002      	b.n	8006e68 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <UART_Start_Receive_IT+0x134>)
 8006e66:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2274      	movs	r2, #116	; 0x74
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e70:	f3ef 8310 	mrs	r3, PRIMASK
 8006e74:	613b      	str	r3, [r7, #16]
  return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f383 8810 	msr	PRIMASK, r3
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2190      	movs	r1, #144	; 0x90
 8006e92:	0049      	lsls	r1, r1, #1
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b00c      	add	sp, #48	; 0x30
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	000001ff 	.word	0x000001ff
 8006eb4:	0800716d 	.word	0x0800716d
 8006eb8:	08007005 	.word	0x08007005

08006ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8006eca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f383 8810 	msr	PRIMASK, r3
}
 8006ed8:	46c0      	nop			; (mov r8, r8)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4925      	ldr	r1, [pc, #148]	; (8006f7c <UART_EndRxTransfer+0xc0>)
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f383 8810 	msr	PRIMASK, r3
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8006efa:	623b      	str	r3, [r7, #32]
  return(result);
 8006efc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efe:	633b      	str	r3, [r7, #48]	; 0x30
 8006f00:	2301      	movs	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2101      	movs	r1, #1
 8006f18:	438a      	bics	r2, r1
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	f383 8810 	msr	PRIMASK, r3
}
 8006f26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d118      	bne.n	8006f62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f30:	f3ef 8310 	mrs	r3, PRIMASK
 8006f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f383 8810 	msr	PRIMASK, r3
}
 8006f44:	46c0      	nop			; (mov r8, r8)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2110      	movs	r1, #16
 8006f52:	438a      	bics	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f383 8810 	msr	PRIMASK, r3
}
 8006f60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f74:	46c0      	nop			; (mov r8, r8)
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b00e      	add	sp, #56	; 0x38
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	fffffedf 	.word	0xfffffedf

08006f80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	225a      	movs	r2, #90	; 0x5a
 8006f92:	2100      	movs	r1, #0
 8006f94:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2252      	movs	r2, #82	; 0x52
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff fbdb 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f383 8810 	msr	PRIMASK, r3
}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2140      	movs	r1, #64	; 0x40
 8006fd8:	438a      	bics	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7ff fba8 	bl	800674c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ffc:	46c0      	nop			; (mov r8, r8)
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b006      	add	sp, #24
 8007002:	bd80      	pop	{r7, pc}

08007004 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b090      	sub	sp, #64	; 0x40
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800700c:	203e      	movs	r0, #62	; 0x3e
 800700e:	183b      	adds	r3, r7, r0
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	215c      	movs	r1, #92	; 0x5c
 8007014:	5a52      	ldrh	r2, [r2, r1]
 8007016:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701c:	2b22      	cmp	r3, #34	; 0x22
 800701e:	d000      	beq.n	8007022 <UART_RxISR_8BIT+0x1e>
 8007020:	e095      	b.n	800714e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	213c      	movs	r1, #60	; 0x3c
 8007028:	187b      	adds	r3, r7, r1
 800702a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800702c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800702e:	187b      	adds	r3, r7, r1
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	183b      	adds	r3, r7, r0
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b2d9      	uxtb	r1, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	400a      	ands	r2, r1
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	225a      	movs	r2, #90	; 0x5a
 8007052:	5a9b      	ldrh	r3, [r3, r2]
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b299      	uxth	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	225a      	movs	r2, #90	; 0x5a
 800705e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	225a      	movs	r2, #90	; 0x5a
 8007064:	5a9b      	ldrh	r3, [r3, r2]
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d178      	bne.n	800715e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706c:	f3ef 8310 	mrs	r3, PRIMASK
 8007070:	61bb      	str	r3, [r7, #24]
  return(result);
 8007072:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
 8007076:	2301      	movs	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4936      	ldr	r1, [pc, #216]	; (8007168 <UART_RxISR_8BIT+0x164>)
 800708e:	400a      	ands	r2, r1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709e:	f3ef 8310 	mrs	r3, PRIMASK
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
 80070a8:	2301      	movs	r3, #1
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f383 8810 	msr	PRIMASK, r3
}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2101      	movs	r1, #1
 80070c0:	438a      	bics	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d12f      	bne.n	8007144 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ea:	f3ef 8310 	mrs	r3, PRIMASK
 80070ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80070f0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
 80070f4:	2301      	movs	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f383 8810 	msr	PRIMASK, r3
}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2110      	movs	r1, #16
 800710c:	438a      	bics	r2, r1
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f383 8810 	msr	PRIMASK, r3
}
 800711a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2210      	movs	r2, #16
 8007124:	4013      	ands	r3, r2
 8007126:	2b10      	cmp	r3, #16
 8007128:	d103      	bne.n	8007132 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2258      	movs	r2, #88	; 0x58
 8007136:	5a9a      	ldrh	r2, [r3, r2]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f7ff fb15 	bl	800676c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007142:	e00c      	b.n	800715e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	0018      	movs	r0, r3
 8007148:	f7f9 fca4 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 800714c:	e007      	b.n	800715e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2108      	movs	r1, #8
 800715a:	430a      	orrs	r2, r1
 800715c:	619a      	str	r2, [r3, #24]
}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	46bd      	mov	sp, r7
 8007162:	b010      	add	sp, #64	; 0x40
 8007164:	bd80      	pop	{r7, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	fffffedf 	.word	0xfffffedf

0800716c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b090      	sub	sp, #64	; 0x40
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007174:	203e      	movs	r0, #62	; 0x3e
 8007176:	183b      	adds	r3, r7, r0
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	215c      	movs	r1, #92	; 0x5c
 800717c:	5a52      	ldrh	r2, [r2, r1]
 800717e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	2b22      	cmp	r3, #34	; 0x22
 8007186:	d000      	beq.n	800718a <UART_RxISR_16BIT+0x1e>
 8007188:	e095      	b.n	80072b6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	213c      	movs	r1, #60	; 0x3c
 8007190:	187b      	adds	r3, r7, r1
 8007192:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007194:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800719c:	187b      	adds	r3, r7, r1
 800719e:	183a      	adds	r2, r7, r0
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	8812      	ldrh	r2, [r2, #0]
 80071a4:	4013      	ands	r3, r2
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	1c9a      	adds	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	225a      	movs	r2, #90	; 0x5a
 80071ba:	5a9b      	ldrh	r3, [r3, r2]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b299      	uxth	r1, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	225a      	movs	r2, #90	; 0x5a
 80071c6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	225a      	movs	r2, #90	; 0x5a
 80071cc:	5a9b      	ldrh	r3, [r3, r2]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d178      	bne.n	80072c6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d4:	f3ef 8310 	mrs	r3, PRIMASK
 80071d8:	617b      	str	r3, [r7, #20]
  return(result);
 80071da:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	2301      	movs	r3, #1
 80071e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4936      	ldr	r1, [pc, #216]	; (80072d0 <UART_RxISR_16BIT+0x164>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f383 8810 	msr	PRIMASK, r3
}
 8007204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007206:	f3ef 8310 	mrs	r3, PRIMASK
 800720a:	623b      	str	r3, [r7, #32]
  return(result);
 800720c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	633b      	str	r3, [r7, #48]	; 0x30
 8007210:	2301      	movs	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2101      	movs	r1, #1
 8007228:	438a      	bics	r2, r1
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	f383 8810 	msr	PRIMASK, r3
}
 8007236:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007248:	2b01      	cmp	r3, #1
 800724a:	d12f      	bne.n	80072ac <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
 8007256:	60bb      	str	r3, [r7, #8]
  return(result);
 8007258:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725c:	2301      	movs	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f383 8810 	msr	PRIMASK, r3
}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2110      	movs	r1, #16
 8007274:	438a      	bics	r2, r1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f383 8810 	msr	PRIMASK, r3
}
 8007282:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2210      	movs	r2, #16
 800728c:	4013      	ands	r3, r2
 800728e:	2b10      	cmp	r3, #16
 8007290:	d103      	bne.n	800729a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2210      	movs	r2, #16
 8007298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2258      	movs	r2, #88	; 0x58
 800729e:	5a9a      	ldrh	r2, [r3, r2]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	0011      	movs	r1, r2
 80072a4:	0018      	movs	r0, r3
 80072a6:	f7ff fa61 	bl	800676c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072aa:	e00c      	b.n	80072c6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7f9 fbf0 	bl	8000a94 <HAL_UART_RxCpltCallback>
}
 80072b4:	e007      	b.n	80072c6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699a      	ldr	r2, [r3, #24]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2108      	movs	r1, #8
 80072c2:	430a      	orrs	r2, r1
 80072c4:	619a      	str	r2, [r3, #24]
}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b010      	add	sp, #64	; 0x40
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	fffffedf 	.word	0xfffffedf

080072d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072dc:	46c0      	nop			; (mov r8, r8)
 80072de:	46bd      	mov	sp, r7
 80072e0:	b002      	add	sp, #8
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	6019      	str	r1, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2317      	movs	r3, #23
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2274      	movs	r2, #116	; 0x74
 80072fe:	5c9b      	ldrb	r3, [r3, r2]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8007304:	2302      	movs	r3, #2
 8007306:	e04a      	b.n	800739e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2274      	movs	r2, #116	; 0x74
 800730c:	2101      	movs	r1, #1
 800730e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2224      	movs	r2, #36	; 0x24
 8007314:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	438a      	bics	r2, r1
 8007324:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4a1e      	ldr	r2, [pc, #120]	; (80073a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800732e:	4013      	ands	r3, r2
 8007330:	0019      	movs	r1, r3
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d105      	bne.n	8007352 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007346:	1d3b      	adds	r3, r7, #4
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	6819      	ldr	r1, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	f000 f860 	bl	8007412 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2101      	movs	r1, #1
 800735e:	430a      	orrs	r2, r1
 8007360:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007362:	f7fa fdc5 	bl	8001ef0 <HAL_GetTick>
 8007366:	0003      	movs	r3, r0
 8007368:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2280      	movs	r2, #128	; 0x80
 800736e:	03d1      	lsls	r1, r2, #15
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007374:	9200      	str	r2, [sp, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	f7ff fc40 	bl	8006bfc <UART_WaitOnFlagUntilTimeout>
 800737c:	1e03      	subs	r3, r0, #0
 800737e:	d004      	beq.n	800738a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8007380:	2317      	movs	r3, #23
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	2203      	movs	r2, #3
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e002      	b.n	8007390 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2274      	movs	r2, #116	; 0x74
 8007394:	2100      	movs	r1, #0
 8007396:	5499      	strb	r1, [r3, r2]

  return status;
 8007398:	2317      	movs	r3, #23
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	781b      	ldrb	r3, [r3, #0]
}
 800739e:	0018      	movs	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b006      	add	sp, #24
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	ffcfffff 	.word	0xffcfffff
 80073ac:	01ffffff 	.word	0x01ffffff

080073b0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2274      	movs	r2, #116	; 0x74
 80073bc:	5c9b      	ldrb	r3, [r3, r2]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_UARTEx_EnableStopMode+0x16>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e021      	b.n	800740a <HAL_UARTEx_EnableStopMode+0x5a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2274      	movs	r2, #116	; 0x74
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ce:	f3ef 8310 	mrs	r3, PRIMASK
 80073d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d4:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	2301      	movs	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2102      	movs	r1, #2
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f383 8810 	msr	PRIMASK, r3
}
 80073fe:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2274      	movs	r2, #116	; 0x74
 8007404:	2100      	movs	r1, #0
 8007406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b006      	add	sp, #24
 8007410:	bd80      	pop	{r7, pc}

08007412 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	6019      	str	r1, [r3, #0]
 800741e:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2210      	movs	r2, #16
 8007428:	4393      	bics	r3, r2
 800742a:	001a      	movs	r2, r3
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	889b      	ldrh	r3, [r3, #4]
 8007430:	0019      	movs	r1, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	0a19      	lsrs	r1, r3, #8
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	799b      	ldrb	r3, [r3, #6]
 8007448:	061a      	lsls	r2, r3, #24
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	46bd      	mov	sp, r7
 8007456:	b004      	add	sp, #16
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	2600      	movs	r6, #0
 8007460:	4d0c      	ldr	r5, [pc, #48]	; (8007494 <__libc_init_array+0x38>)
 8007462:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007464:	1b64      	subs	r4, r4, r5
 8007466:	10a4      	asrs	r4, r4, #2
 8007468:	42a6      	cmp	r6, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	2600      	movs	r6, #0
 800746e:	f000 f821 	bl	80074b4 <_init>
 8007472:	4d0a      	ldr	r5, [pc, #40]	; (800749c <__libc_init_array+0x40>)
 8007474:	4c0a      	ldr	r4, [pc, #40]	; (80074a0 <__libc_init_array+0x44>)
 8007476:	1b64      	subs	r4, r4, r5
 8007478:	10a4      	asrs	r4, r4, #2
 800747a:	42a6      	cmp	r6, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	00b3      	lsls	r3, r6, #2
 8007482:	58eb      	ldr	r3, [r5, r3]
 8007484:	4798      	blx	r3
 8007486:	3601      	adds	r6, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	00b3      	lsls	r3, r6, #2
 800748c:	58eb      	ldr	r3, [r5, r3]
 800748e:	4798      	blx	r3
 8007490:	3601      	adds	r6, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080075a4 	.word	0x080075a4
 8007498:	080075a4 	.word	0x080075a4
 800749c:	080075a4 	.word	0x080075a4
 80074a0:	080075a8 	.word	0x080075a8

080074a4 <memset>:
 80074a4:	0003      	movs	r3, r0
 80074a6:	1882      	adds	r2, r0, r2
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d100      	bne.n	80074ae <memset+0xa>
 80074ac:	4770      	bx	lr
 80074ae:	7019      	strb	r1, [r3, #0]
 80074b0:	3301      	adds	r3, #1
 80074b2:	e7f9      	b.n	80074a8 <memset+0x4>

080074b4 <_init>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr

080074c0 <_fini>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr
