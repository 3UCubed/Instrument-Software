
Testing-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e34  08006e34  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08006e34  08006e34  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e34  08006e34  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000030  08006e6c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006e6c  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016292  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  000362ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00038f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135c4  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018557  00000000  00000000  0004ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074e36  00000000  00000000  00067153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dbfdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c7c 	.word	0x08006c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08006c7c 	.word	0x08006c7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
 * This is where packets are sent
 * Function should be called every 125ms for PMT and 100ms for ERPA
 * HK will send every 50 ERPA packets or every 5 seconds
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b091      	sub	sp, #68	; 0x44
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4be0      	ldr	r3, [pc, #896]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d000      	beq.n	8000256 <HAL_TIM_OC_DelayElapsedCallback+0x12>
 8000254:	e34a      	b.n	80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6a8>
  {
    if (1)
    { // check pin state
      if (ERPA_ON)
 8000256:	4bdf      	ldr	r3, [pc, #892]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d100      	bne.n	8000260 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 800025e:	e08f      	b.n	8000380 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
         * +/- 0.5v Every 100ms
         */

        /* Write to SPI (begin transfer?) */

        HAL_SPI_Transmit(&hspi2, (uint8_t *)&WRITE, 1, 1);
 8000260:	49dd      	ldr	r1, [pc, #884]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 8000262:	48de      	ldr	r0, [pc, #888]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 8000264:	2301      	movs	r3, #1
 8000266:	2201      	movs	r2, #1
 8000268:	f004 f96c 	bl	8004544 <HAL_SPI_Transmit>

        while (!(SPI2->SR))
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	4bdc      	ldr	r3, [pc, #880]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0fb      	beq.n	800026e <HAL_TIM_OC_DelayElapsedCallback+0x2a>
          ;

        erpa_raw = SPI2->DR;
 8000276:	4bda      	ldr	r3, [pc, #872]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	001a      	movs	r2, r3
 800027c:	4bd9      	ldr	r3, [pc, #868]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800027e:	601a      	str	r2, [r3, #0]


        DAC->DHR12R1 = DAC_OUT[step];
 8000280:	4bd9      	ldr	r3, [pc, #868]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	0019      	movs	r1, r3
 8000286:	4bd9      	ldr	r3, [pc, #868]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 8000288:	4ad9      	ldr	r2, [pc, #868]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800028a:	0089      	lsls	r1, r1, #2
 800028c:	588a      	ldr	r2, [r1, r2]
 800028e:	609a      	str	r2, [r3, #8]

        HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000290:	2311      	movs	r3, #17
 8000292:	001a      	movs	r2, r3
 8000294:	49d7      	ldr	r1, [pc, #860]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000296:	4bd8      	ldr	r3, [pc, #864]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 8000298:	0018      	movs	r0, r3
 800029a:	f001 fe1b 	bl	8001ed4 <HAL_ADC_Start_DMA>
                          adcChannelCount);
        uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 800029e:	212e      	movs	r1, #46	; 0x2e
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	4ad4      	ldr	r2, [pc, #848]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002a4:	8812      	ldrh	r2, [r2, #0]
 80002a6:	801a      	strh	r2, [r3, #0]
        uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002a8:	202c      	movs	r0, #44	; 0x2c
 80002aa:	183b      	adds	r3, r7, r0
 80002ac:	4ad1      	ldr	r2, [pc, #836]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002ae:	8992      	ldrh	r2, [r2, #12]
 80002b0:	801a      	strh	r2, [r3, #0]
        uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002b2:	242a      	movs	r4, #42	; 0x2a
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	4acf      	ldr	r2, [pc, #828]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002b8:	89d2      	ldrh	r2, [r2, #14]
 80002ba:	801a      	strh	r2, [r3, #0]
        uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002bc:	2528      	movs	r5, #40	; 0x28
 80002be:	197b      	adds	r3, r7, r5
 80002c0:	4acc      	ldr	r2, [pc, #816]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002c2:	8a12      	ldrh	r2, [r2, #16]
 80002c4:	801a      	strh	r2, [r3, #0]

        erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80002c6:	22aa      	movs	r2, #170	; 0xaa
 80002c8:	4bcc      	ldr	r3, [pc, #816]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002ca:	701a      	strb	r2, [r3, #0]
        erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002cc:	22aa      	movs	r2, #170	; 0xaa
 80002ce:	4bcb      	ldr	r3, [pc, #812]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002d0:	705a      	strb	r2, [r3, #1]
        erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80002d2:	4bcb      	ldr	r3, [pc, #812]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	0a1b      	lsrs	r3, r3, #8
 80002d8:	b29b      	uxth	r3, r3
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4bc7      	ldr	r3, [pc, #796]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002de:	709a      	strb	r2, [r3, #2]
        erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 80002e0:	4bc7      	ldr	r3, [pc, #796]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4bc5      	ldr	r3, [pc, #788]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002e8:	70da      	strb	r2, [r3, #3]
        erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4bc1      	ldr	r3, [pc, #772]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80002f6:	711a      	strb	r2, [r3, #4]
        erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4bbf      	ldr	r3, [pc, #764]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000300:	715a      	strb	r2, [r3, #5]
        erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000302:	183b      	adds	r3, r7, r0
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	0a1b      	lsrs	r3, r3, #8
 8000308:	b29b      	uxth	r3, r3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4bbb      	ldr	r3, [pc, #748]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800030e:	719a      	strb	r2, [r3, #6]
        erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 8000310:	183b      	adds	r3, r7, r0
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4bb9      	ldr	r3, [pc, #740]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000318:	71da      	strb	r2, [r3, #7]
        erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800031a:	193b      	adds	r3, r7, r4
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4bb5      	ldr	r3, [pc, #724]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000326:	721a      	strb	r2, [r3, #8]
        erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 8000328:	193b      	adds	r3, r7, r4
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4bb3      	ldr	r3, [pc, #716]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000330:	725a      	strb	r2, [r3, #9]
        erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000332:	197b      	adds	r3, r7, r5
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	0a1b      	lsrs	r3, r3, #8
 8000338:	b29b      	uxth	r3, r3
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4baf      	ldr	r3, [pc, #700]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800033e:	729a      	strb	r2, [r3, #10]
        erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000340:	197b      	adds	r3, r7, r5
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4bad      	ldr	r3, [pc, #692]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000348:	72da      	strb	r2, [r3, #11]
        erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 800034a:	4ba6      	ldr	r3, [pc, #664]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	121b      	asrs	r3, r3, #8
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4baa      	ldr	r3, [pc, #680]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000354:	731a      	strb	r2, [r3, #12]
        erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000356:	4ba3      	ldr	r3, [pc, #652]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4ba7      	ldr	r3, [pc, #668]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 800035e:	735a      	strb	r2, [r3, #13]

        erpa_seq++;
 8000360:	4ba7      	ldr	r3, [pc, #668]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	b29a      	uxth	r2, r3
 8000368:	4ba5      	ldr	r3, [pc, #660]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800036a:	801a      	strh	r2, [r3, #0]
        if (ERPA_ON)
 800036c:	4b99      	ldr	r3, [pc, #612]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d005      	beq.n	8000380 <HAL_TIM_OC_DelayElapsedCallback+0x13c>
        {
          HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000374:	49a1      	ldr	r1, [pc, #644]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 8000376:	48a3      	ldr	r0, [pc, #652]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	220e      	movs	r2, #14
 800037c:	f005 f90a 	bl	8005594 <HAL_UART_Transmit>
        }
      }
      if (HK_ON)
 8000380:	4ba1      	ldr	r3, [pc, #644]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d100      	bne.n	800038a <HAL_TIM_OC_DelayElapsedCallback+0x146>
 8000388:	e2f1      	b.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
      {
        if (hk_counter == HK_CADENCE)
 800038a:	4ba0      	ldr	r3, [pc, #640]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	4293      	cmp	r3, r2
 8000392:	d000      	beq.n	8000396 <HAL_TIM_OC_DelayElapsedCallback+0x152>
 8000394:	e2a4      	b.n	80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x69c>
          int16_t output1;
          int16_t output2;
          int16_t output3;
          int16_t output4;

          buf[0] = REG_TEMP;
 8000396:	2200      	movs	r2, #0
 8000398:	2508      	movs	r5, #8
 800039a:	197b      	adds	r3, r7, r5
 800039c:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	b299      	uxth	r1, r3
 80003a2:	2627      	movs	r6, #39	; 0x27
 80003a4:	19bc      	adds	r4, r7, r6
 80003a6:	197a      	adds	r2, r7, r5
 80003a8:	4899      	ldr	r0, [pc, #612]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80003aa:	23fa      	movs	r3, #250	; 0xfa
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2301      	movs	r3, #1
 80003b2:	f002 fdf1 	bl	8002f98 <HAL_I2C_Master_Transmit>
 80003b6:	0003      	movs	r3, r0
 80003b8:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80003ba:	19bb      	adds	r3, r7, r6
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <HAL_TIM_OC_DelayElapsedCallback+0x190>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80003c2:	197b      	adds	r3, r7, r5
 80003c4:	4a93      	ldr	r2, [pc, #588]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80003c6:	ca03      	ldmia	r2!, {r0, r1}
 80003c8:	c303      	stmia	r3!, {r0, r1}
 80003ca:	8811      	ldrh	r1, [r2, #0]
 80003cc:	8019      	strh	r1, [r3, #0]
 80003ce:	7892      	ldrb	r2, [r2, #2]
 80003d0:	709a      	strb	r2, [r3, #2]
 80003d2:	e02b      	b.n	800042c <HAL_TIM_OC_DelayElapsedCallback+0x1e8>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003d4:	2390      	movs	r3, #144	; 0x90
 80003d6:	b299      	uxth	r1, r3
 80003d8:	2527      	movs	r5, #39	; 0x27
 80003da:	197c      	adds	r4, r7, r5
 80003dc:	2608      	movs	r6, #8
 80003de:	19ba      	adds	r2, r7, r6
 80003e0:	488b      	ldr	r0, [pc, #556]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80003e2:	23fa      	movs	r3, #250	; 0xfa
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2302      	movs	r3, #2
 80003ea:	f002 fedd 	bl	80031a8 <HAL_I2C_Master_Receive>
 80003ee:	0003      	movs	r3, r0
 80003f0:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80003f2:	197b      	adds	r3, r7, r5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <HAL_TIM_OC_DelayElapsedCallback+0x1c8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80003fa:	19bb      	adds	r3, r7, r6
 80003fc:	4a86      	ldr	r2, [pc, #536]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80003fe:	ca03      	ldmia	r2!, {r0, r1}
 8000400:	c303      	stmia	r3!, {r0, r1}
 8000402:	8811      	ldrh	r1, [r2, #0]
 8000404:	8019      	strh	r1, [r3, #0]
 8000406:	7892      	ldrb	r2, [r2, #2]
 8000408:	709a      	strb	r2, [r3, #2]
 800040a:	e00f      	b.n	800042c <HAL_TIM_OC_DelayElapsedCallback+0x1e8>
            }
            else
            {

              output1 = (int16_t)(buf[0] << 8);
 800040c:	2008      	movs	r0, #8
 800040e:	183b      	adds	r3, r7, r0
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	021a      	lsls	r2, r3, #8
 8000414:	2136      	movs	r1, #54	; 0x36
 8000416:	187b      	adds	r3, r7, r1
 8000418:	801a      	strh	r2, [r3, #0]
              output1 = (output1 | buf[1]) >> 3;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	5e9b      	ldrsh	r3, [r3, r2]
 8000420:	183a      	adds	r2, r7, r0
 8000422:	7852      	ldrb	r2, [r2, #1]
 8000424:	4313      	orrs	r3, r2
 8000426:	10da      	asrs	r2, r3, #3
 8000428:	187b      	adds	r3, r7, r1
 800042a:	801a      	strh	r2, [r3, #0]
            }
          }

          // Tell ADT7410_2 that we want to read from the temperature register
          buf[0] = REG_TEMP;
 800042c:	2200      	movs	r2, #0
 800042e:	2508      	movs	r5, #8
 8000430:	197b      	adds	r3, r7, r5
 8000432:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 8000434:	2394      	movs	r3, #148	; 0x94
 8000436:	b299      	uxth	r1, r3
 8000438:	2627      	movs	r6, #39	; 0x27
 800043a:	19bc      	adds	r4, r7, r6
 800043c:	197a      	adds	r2, r7, r5
 800043e:	4874      	ldr	r0, [pc, #464]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000440:	23fa      	movs	r3, #250	; 0xfa
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	f002 fda6 	bl	8002f98 <HAL_I2C_Master_Transmit>
 800044c:	0003      	movs	r3, r0
 800044e:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 8000450:	19bb      	adds	r3, r7, r6
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <HAL_TIM_OC_DelayElapsedCallback+0x226>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000458:	197b      	adds	r3, r7, r5
 800045a:	4a6e      	ldr	r2, [pc, #440]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 800045c:	ca03      	ldmia	r2!, {r0, r1}
 800045e:	c303      	stmia	r3!, {r0, r1}
 8000460:	8811      	ldrh	r1, [r2, #0]
 8000462:	8019      	strh	r1, [r3, #0]
 8000464:	7892      	ldrb	r2, [r2, #2]
 8000466:	709a      	strb	r2, [r3, #2]
 8000468:	e02b      	b.n	80004c2 <HAL_TIM_OC_DelayElapsedCallback+0x27e>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 800046a:	2394      	movs	r3, #148	; 0x94
 800046c:	b299      	uxth	r1, r3
 800046e:	2527      	movs	r5, #39	; 0x27
 8000470:	197c      	adds	r4, r7, r5
 8000472:	2608      	movs	r6, #8
 8000474:	19ba      	adds	r2, r7, r6
 8000476:	4866      	ldr	r0, [pc, #408]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 8000478:	23fa      	movs	r3, #250	; 0xfa
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2302      	movs	r3, #2
 8000480:	f002 fe92 	bl	80031a8 <HAL_I2C_Master_Receive>
 8000484:	0003      	movs	r3, r0
 8000486:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 8000488:	197b      	adds	r3, r7, r5
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <HAL_TIM_OC_DelayElapsedCallback+0x25e>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000490:	19bb      	adds	r3, r7, r6
 8000492:	4a61      	ldr	r2, [pc, #388]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 8000494:	ca03      	ldmia	r2!, {r0, r1}
 8000496:	c303      	stmia	r3!, {r0, r1}
 8000498:	8811      	ldrh	r1, [r2, #0]
 800049a:	8019      	strh	r1, [r3, #0]
 800049c:	7892      	ldrb	r2, [r2, #2]
 800049e:	709a      	strb	r2, [r3, #2]
 80004a0:	e00f      	b.n	80004c2 <HAL_TIM_OC_DelayElapsedCallback+0x27e>
            }
            else
            {

              output2 = (int16_t)(buf[0] << 8);
 80004a2:	2008      	movs	r0, #8
 80004a4:	183b      	adds	r3, r7, r0
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	021a      	lsls	r2, r3, #8
 80004aa:	2134      	movs	r1, #52	; 0x34
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	801a      	strh	r2, [r3, #0]
              output2 = (output2 | buf[1]) >> 3;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	5e9b      	ldrsh	r3, [r3, r2]
 80004b6:	183a      	adds	r2, r7, r0
 80004b8:	7852      	ldrb	r2, [r2, #1]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	10da      	asrs	r2, r3, #3
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 3
          buf[0] = REG_TEMP;
 80004c2:	2200      	movs	r2, #0
 80004c4:	2508      	movs	r5, #8
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004ca:	2392      	movs	r3, #146	; 0x92
 80004cc:	b299      	uxth	r1, r3
 80004ce:	2627      	movs	r6, #39	; 0x27
 80004d0:	19bc      	adds	r4, r7, r6
 80004d2:	197a      	adds	r2, r7, r5
 80004d4:	484e      	ldr	r0, [pc, #312]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80004d6:	23fa      	movs	r3, #250	; 0xfa
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2301      	movs	r3, #1
 80004de:	f002 fd5b 	bl	8002f98 <HAL_I2C_Master_Transmit>
 80004e2:	0003      	movs	r3, r0
 80004e4:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 80004e6:	19bb      	adds	r3, r7, r6
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <HAL_TIM_OC_DelayElapsedCallback+0x2bc>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	4a48      	ldr	r2, [pc, #288]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 80004f2:	ca03      	ldmia	r2!, {r0, r1}
 80004f4:	c303      	stmia	r3!, {r0, r1}
 80004f6:	8811      	ldrh	r1, [r2, #0]
 80004f8:	8019      	strh	r1, [r3, #0]
 80004fa:	7892      	ldrb	r2, [r2, #2]
 80004fc:	709a      	strb	r2, [r3, #2]
 80004fe:	e02b      	b.n	8000558 <HAL_TIM_OC_DelayElapsedCallback+0x314>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000500:	2392      	movs	r3, #146	; 0x92
 8000502:	b299      	uxth	r1, r3
 8000504:	2527      	movs	r5, #39	; 0x27
 8000506:	197c      	adds	r4, r7, r5
 8000508:	2608      	movs	r6, #8
 800050a:	19ba      	adds	r2, r7, r6
 800050c:	4840      	ldr	r0, [pc, #256]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800050e:	23fa      	movs	r3, #250	; 0xfa
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2302      	movs	r3, #2
 8000516:	f002 fe47 	bl	80031a8 <HAL_I2C_Master_Receive>
 800051a:	0003      	movs	r3, r0
 800051c:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 800051e:	197b      	adds	r3, r7, r5
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <HAL_TIM_OC_DelayElapsedCallback+0x2f4>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 8000526:	19bb      	adds	r3, r7, r6
 8000528:	4a3b      	ldr	r2, [pc, #236]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 800052a:	ca03      	ldmia	r2!, {r0, r1}
 800052c:	c303      	stmia	r3!, {r0, r1}
 800052e:	8811      	ldrh	r1, [r2, #0]
 8000530:	8019      	strh	r1, [r3, #0]
 8000532:	7892      	ldrb	r2, [r2, #2]
 8000534:	709a      	strb	r2, [r3, #2]
 8000536:	e00f      	b.n	8000558 <HAL_TIM_OC_DelayElapsedCallback+0x314>
            }
            else
            {

              output3 = (int16_t)(buf[0] << 8);
 8000538:	2008      	movs	r0, #8
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	021a      	lsls	r2, r3, #8
 8000540:	2132      	movs	r1, #50	; 0x32
 8000542:	187b      	adds	r3, r7, r1
 8000544:	801a      	strh	r2, [r3, #0]
              output3 = (output3 | buf[1]) >> 3;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	5e9b      	ldrsh	r3, [r3, r2]
 800054c:	183a      	adds	r2, r7, r0
 800054e:	7852      	ldrb	r2, [r2, #1]
 8000550:	4313      	orrs	r3, r2
 8000552:	10da      	asrs	r2, r3, #3
 8000554:	187b      	adds	r3, r7, r1
 8000556:	801a      	strh	r2, [r3, #0]
            }
          }
          // TEMP SENSOR 4
          buf[0] = REG_TEMP;
 8000558:	2200      	movs	r2, #0
 800055a:	2508      	movs	r5, #8
 800055c:	197b      	adds	r3, r7, r5
 800055e:	701a      	strb	r2, [r3, #0]
          ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000560:	2396      	movs	r3, #150	; 0x96
 8000562:	b299      	uxth	r1, r3
 8000564:	2627      	movs	r6, #39	; 0x27
 8000566:	19bc      	adds	r4, r7, r6
 8000568:	197a      	adds	r2, r7, r5
 800056a:	4829      	ldr	r0, [pc, #164]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 800056c:	23fa      	movs	r3, #250	; 0xfa
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2301      	movs	r3, #1
 8000574:	f002 fd10 	bl	8002f98 <HAL_I2C_Master_Transmit>
 8000578:	0003      	movs	r3, r0
 800057a:	7023      	strb	r3, [r4, #0]
                                        1000);
          //			I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
          if (ret != HAL_OK)
 800057c:	19bb      	adds	r3, r7, r6
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d008      	beq.n	8000596 <HAL_TIM_OC_DelayElapsedCallback+0x352>
          {
            strcpy((char *)buf, "Error Tx\r\n");
 8000584:	197b      	adds	r3, r7, r5
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x3d0>)
 8000588:	ca03      	ldmia	r2!, {r0, r1}
 800058a:	c303      	stmia	r3!, {r0, r1}
 800058c:	8811      	ldrh	r1, [r2, #0]
 800058e:	8019      	strh	r1, [r3, #0]
 8000590:	7892      	ldrb	r2, [r2, #2]
 8000592:	709a      	strb	r2, [r3, #2]
 8000594:	e052      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
          }
          else
          {

            //				 Read 2 bytes from the temperature register
            ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000596:	2396      	movs	r3, #150	; 0x96
 8000598:	b299      	uxth	r1, r3
 800059a:	2527      	movs	r5, #39	; 0x27
 800059c:	197c      	adds	r4, r7, r5
 800059e:	2608      	movs	r6, #8
 80005a0:	19ba      	adds	r2, r7, r6
 80005a2:	481b      	ldr	r0, [pc, #108]	; (8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>)
 80005a4:	23fa      	movs	r3, #250	; 0xfa
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2302      	movs	r3, #2
 80005ac:	f002 fdfc 	bl	80031a8 <HAL_I2C_Master_Receive>
 80005b0:	0003      	movs	r3, r0
 80005b2:	7023      	strb	r3, [r4, #0]
                                         1000);
            if (ret != HAL_OK)
 80005b4:	197b      	adds	r3, r7, r5
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d02f      	beq.n	800061c <HAL_TIM_OC_DelayElapsedCallback+0x3d8>
            {
              strcpy((char *)buf, "Error Rx\r\n");
 80005bc:	19bb      	adds	r3, r7, r6
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x3d4>)
 80005c0:	ca03      	ldmia	r2!, {r0, r1}
 80005c2:	c303      	stmia	r3!, {r0, r1}
 80005c4:	8811      	ldrh	r1, [r2, #0]
 80005c6:	8019      	strh	r1, [r3, #0]
 80005c8:	7892      	ldrb	r2, [r2, #2]
 80005ca:	709a      	strb	r2, [r3, #2]
 80005cc:	e036      	b.n	800063c <HAL_TIM_OC_DelayElapsedCallback+0x3f8>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	20000240 	.word	0x20000240
 80005d4:	20000021 	.word	0x20000021
 80005d8:	08006ccc 	.word	0x08006ccc
 80005dc:	20000194 	.word	0x20000194
 80005e0:	40003800 	.word	0x40003800
 80005e4:	200003a4 	.word	0x200003a4
 80005e8:	2000039a 	.word	0x2000039a
 80005ec:	40007400 	.word	0x40007400
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000378 	.word	0x20000378
 80005f8:	2000004c 	.word	0x2000004c
 80005fc:	200003a8 	.word	0x200003a8
 8000600:	200003b6 	.word	0x200003b6
 8000604:	20000288 	.word	0x20000288
 8000608:	20000022 	.word	0x20000022
 800060c:	200003e8 	.word	0x200003e8
 8000610:	200000e4 	.word	0x200000e4
 8000614:	08006c94 	.word	0x08006c94
 8000618:	08006ca0 	.word	0x08006ca0
            }
            else
            {

              output4 = (int16_t)(buf[0] << 8);
 800061c:	2008      	movs	r0, #8
 800061e:	183b      	adds	r3, r7, r0
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	021a      	lsls	r2, r3, #8
 8000624:	2130      	movs	r1, #48	; 0x30
 8000626:	187b      	adds	r3, r7, r1
 8000628:	801a      	strh	r2, [r3, #0]
              output4 = (output4 | buf[1]) >> 3;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	5e9b      	ldrsh	r3, [r3, r2]
 8000630:	183a      	adds	r2, r7, r0
 8000632:	7852      	ldrb	r2, [r2, #1]
 8000634:	4313      	orrs	r3, r2
 8000636:	10da      	asrs	r2, r3, #3
 8000638:	187b      	adds	r3, r7, r1
 800063a:	801a      	strh	r2, [r3, #0]
            }
          }

          HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 800063c:	2311      	movs	r3, #17
 800063e:	001a      	movs	r2, r3
 8000640:	49cd      	ldr	r1, [pc, #820]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000642:	4bce      	ldr	r3, [pc, #824]	; (800097c <HAL_TIM_OC_DelayElapsedCallback+0x738>)
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fc45 	bl	8001ed4 <HAL_ADC_Start_DMA>
                            adcChannelCount);

          uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 800064a:	2124      	movs	r1, #36	; 0x24
 800064c:	187b      	adds	r3, r7, r1
 800064e:	4aca      	ldr	r2, [pc, #808]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000650:	8852      	ldrh	r2, [r2, #2]
 8000652:	801a      	strh	r2, [r3, #0]
          uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 8000654:	2022      	movs	r0, #34	; 0x22
 8000656:	183b      	adds	r3, r7, r0
 8000658:	4ac7      	ldr	r2, [pc, #796]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 800065a:	8892      	ldrh	r2, [r2, #4]
 800065c:	801a      	strh	r2, [r3, #0]
          uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 800065e:	2420      	movs	r4, #32
 8000660:	193b      	adds	r3, r7, r4
 8000662:	4ac5      	ldr	r2, [pc, #788]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000664:	88d2      	ldrh	r2, [r2, #6]
 8000666:	801a      	strh	r2, [r3, #0]
          uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n150v_mon: n150 voltage monitor
 8000668:	251e      	movs	r5, #30
 800066a:	197b      	adds	r3, r7, r5
 800066c:	4ac2      	ldr	r2, [pc, #776]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 800066e:	8912      	ldrh	r2, [r2, #8]
 8000670:	801a      	strh	r2, [r3, #0]
          uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 8000672:	261c      	movs	r6, #28
 8000674:	19bb      	adds	r3, r7, r6
 8000676:	4ac0      	ldr	r2, [pc, #768]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000678:	8952      	ldrh	r2, [r2, #10]
 800067a:	801a      	strh	r2, [r3, #0]
          uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 800067c:	231a      	movs	r3, #26
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	4abd      	ldr	r2, [pc, #756]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000682:	8a52      	ldrh	r2, [r2, #18]
 8000684:	801a      	strh	r2, [r3, #0]
          uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 8000686:	2218      	movs	r2, #24
 8000688:	18bb      	adds	r3, r7, r2
 800068a:	4abb      	ldr	r2, [pc, #748]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 800068c:	8a92      	ldrh	r2, [r2, #20]
 800068e:	801a      	strh	r2, [r3, #0]
          uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 8000690:	2316      	movs	r3, #22
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	4ab8      	ldr	r2, [pc, #736]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 8000696:	8ad2      	ldrh	r2, [r2, #22]
 8000698:	801a      	strh	r2, [r3, #0]
          uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 800069a:	2214      	movs	r2, #20
 800069c:	18bb      	adds	r3, r7, r2
 800069e:	4ab6      	ldr	r2, [pc, #728]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006a0:	8b12      	ldrh	r2, [r2, #24]
 80006a2:	801a      	strh	r2, [r3, #0]
          uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 80006a4:	2312      	movs	r3, #18
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	4ab3      	ldr	r2, [pc, #716]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006aa:	8b52      	ldrh	r2, [r2, #26]
 80006ac:	801a      	strh	r2, [r3, #0]
          uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 80006ae:	2210      	movs	r2, #16
 80006b0:	18bb      	adds	r3, r7, r2
 80006b2:	4ab1      	ldr	r2, [pc, #708]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006b4:	8b92      	ldrh	r2, [r2, #28]
 80006b6:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 80006b8:	230e      	movs	r3, #14
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	4aae      	ldr	r2, [pc, #696]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006be:	8bd2      	ldrh	r2, [r2, #30]
 80006c0:	801a      	strh	r2, [r3, #0]
          uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 80006c2:	220c      	movs	r2, #12
 80006c4:	18bb      	adds	r3, r7, r2
 80006c6:	4aac      	ldr	r2, [pc, #688]	; (8000978 <HAL_TIM_OC_DelayElapsedCallback+0x734>)
 80006c8:	8c12      	ldrh	r2, [r2, #32]
 80006ca:	801a      	strh	r2, [r3, #0]


          hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 80006cc:	22cc      	movs	r2, #204	; 0xcc
 80006ce:	4bac      	ldr	r3, [pc, #688]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80006d0:	701a      	strb	r2, [r3, #0]
          hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 80006d2:	22cc      	movs	r2, #204	; 0xcc
 80006d4:	4baa      	ldr	r3, [pc, #680]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80006d6:	705a      	strb	r2, [r3, #1]
          hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 80006d8:	4baa      	ldr	r3, [pc, #680]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4ba7      	ldr	r3, [pc, #668]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80006e4:	709a      	strb	r2, [r3, #2]
          hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 80006e6:	4ba7      	ldr	r3, [pc, #668]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4ba4      	ldr	r3, [pc, #656]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80006ee:	70da      	strb	r2, [r3, #3]
          hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 80006f0:	230e      	movs	r3, #14
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	0a1b      	lsrs	r3, r3, #8
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4ba0      	ldr	r3, [pc, #640]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80006fe:	711a      	strb	r2, [r3, #4]
          hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000700:	230e      	movs	r3, #14
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b9d      	ldr	r3, [pc, #628]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800070a:	715a      	strb	r2, [r3, #5]
          hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 800070c:	220c      	movs	r2, #12
 800070e:	18bb      	adds	r3, r7, r2
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	0a1b      	lsrs	r3, r3, #8
 8000714:	b29b      	uxth	r3, r3
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b99      	ldr	r3, [pc, #612]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800071a:	719a      	strb	r2, [r3, #6]
          hk_buf[7] = (MCU_VREF & 0xFF);
 800071c:	220c      	movs	r2, #12
 800071e:	18bb      	adds	r3, r7, r2
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b96      	ldr	r3, [pc, #600]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000726:	71da      	strb	r2, [r3, #7]
          hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000728:	2336      	movs	r3, #54	; 0x36
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2200      	movs	r2, #0
 800072e:	5e9b      	ldrsh	r3, [r3, r2]
 8000730:	121b      	asrs	r3, r3, #8
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b92      	ldr	r3, [pc, #584]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000736:	721a      	strb	r2, [r3, #8]
          hk_buf[9] = (output1 & 0xFF);
 8000738:	2336      	movs	r3, #54	; 0x36
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b8f      	ldr	r3, [pc, #572]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000742:	725a      	strb	r2, [r3, #9]
          hk_buf[10] = ((output2 & 0xFF00) >> 8);
 8000744:	2334      	movs	r3, #52	; 0x34
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	5e9b      	ldrsh	r3, [r3, r2]
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b8b      	ldr	r3, [pc, #556]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000752:	729a      	strb	r2, [r3, #10]
          hk_buf[11] = (output2 & 0xFF);
 8000754:	2334      	movs	r3, #52	; 0x34
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b88      	ldr	r3, [pc, #544]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800075e:	72da      	strb	r2, [r3, #11]
          hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2200      	movs	r2, #0
 8000766:	5e9b      	ldrsh	r3, [r3, r2]
 8000768:	121b      	asrs	r3, r3, #8
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b84      	ldr	r3, [pc, #528]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800076e:	731a      	strb	r2, [r3, #12]
          hk_buf[13] = (output3 & 0xFF);
 8000770:	2332      	movs	r3, #50	; 0x32
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b81      	ldr	r3, [pc, #516]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800077a:	735a      	strb	r2, [r3, #13]
          hk_buf[14] = ((output4 & 0xFF00) >> 8);
 800077c:	2330      	movs	r3, #48	; 0x30
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2200      	movs	r2, #0
 8000782:	5e9b      	ldrsh	r3, [r3, r2]
 8000784:	121b      	asrs	r3, r3, #8
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b7d      	ldr	r3, [pc, #500]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800078a:	739a      	strb	r2, [r3, #14]
          hk_buf[15] = (output4 & 0xFF);
 800078c:	2330      	movs	r3, #48	; 0x30
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b7a      	ldr	r3, [pc, #488]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000796:	73da      	strb	r2, [r3, #15]
          hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 8000798:	187b      	adds	r3, r7, r1
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b77      	ldr	r3, [pc, #476]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007a4:	741a      	strb	r2, [r3, #16]
          hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b74      	ldr	r3, [pc, #464]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007ae:	745a      	strb	r2, [r3, #17]
          hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 80007b0:	183b      	adds	r3, r7, r0
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b71      	ldr	r3, [pc, #452]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007bc:	749a      	strb	r2, [r3, #18]
          hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b6e      	ldr	r3, [pc, #440]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007c6:	74da      	strb	r2, [r3, #19]
          hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 80007c8:	211a      	movs	r1, #26
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007d6:	751a      	strb	r2, [r3, #20]
          hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b68      	ldr	r3, [pc, #416]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007e0:	755a      	strb	r2, [r3, #21]
          hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b64      	ldr	r3, [pc, #400]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007ee:	759a      	strb	r2, [r3, #22]
          hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80007f8:	75da      	strb	r2, [r3, #23]
          hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 80007fa:	2016      	movs	r0, #22
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b29b      	uxth	r3, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b5e      	ldr	r3, [pc, #376]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000808:	761a      	strb	r2, [r3, #24]
          hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 800080a:	183b      	adds	r3, r7, r0
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000812:	765a      	strb	r2, [r3, #25]
          hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000814:	2014      	movs	r0, #20
 8000816:	183b      	adds	r3, r7, r0
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b57      	ldr	r3, [pc, #348]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000822:	769a      	strb	r2, [r3, #26]
          hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000824:	183b      	adds	r3, r7, r0
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800082c:	76da      	strb	r2, [r3, #27]
          hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 800082e:	2118      	movs	r1, #24
 8000830:	187b      	adds	r3, r7, r1
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800083c:	771a      	strb	r2, [r3, #28]
          hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 800083e:	187b      	adds	r3, r7, r1
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000846:	775a      	strb	r2, [r3, #29]
          hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000848:	2110      	movs	r1, #16
 800084a:	187b      	adds	r3, r7, r1
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b29b      	uxth	r3, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000856:	779a      	strb	r2, [r3, #30]
          hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000858:	187b      	adds	r3, r7, r1
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b48      	ldr	r3, [pc, #288]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000860:	77da      	strb	r2, [r3, #31]
          hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000862:	2012      	movs	r0, #18
 8000864:	183b      	adds	r3, r7, r0
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2d9      	uxtb	r1, r3
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000870:	2220      	movs	r2, #32
 8000872:	5499      	strb	r1, [r3, r2]
          hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000874:	183b      	adds	r3, r7, r0
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800087c:	2221      	movs	r2, #33	; 0x21
 800087e:	5499      	strb	r1, [r3, r2]
          hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000880:	197b      	adds	r3, r7, r5
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2d9      	uxtb	r1, r3
 800088a:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 800088c:	2222      	movs	r2, #34	; 0x22
 800088e:	5499      	strb	r1, [r3, r2]
          hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000890:	197b      	adds	r3, r7, r5
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b2d9      	uxtb	r1, r3
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 8000898:	2223      	movs	r2, #35	; 0x23
 800089a:	5499      	strb	r1, [r3, r2]
          hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 800089c:	19bb      	adds	r3, r7, r6
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2d9      	uxtb	r1, r3
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80008a8:	2224      	movs	r2, #36	; 0x24
 80008aa:	5499      	strb	r1, [r3, r2]
          hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 80008ac:	19bb      	adds	r3, r7, r6
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	b2d9      	uxtb	r1, r3
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80008b4:	2225      	movs	r2, #37	; 0x25
 80008b6:	5499      	strb	r1, [r3, r2]

          if (HK_ON)
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_TIM_OC_DelayElapsedCallback+0x744>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <HAL_TIM_OC_DelayElapsedCallback+0x688>
          {
            HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 80008c0:	492f      	ldr	r1, [pc, #188]	; (8000980 <HAL_TIM_OC_DelayElapsedCallback+0x73c>)
 80008c2:	4832      	ldr	r0, [pc, #200]	; (800098c <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 80008c4:	2364      	movs	r3, #100	; 0x64
 80008c6:	2226      	movs	r2, #38	; 0x26
 80008c8:	f004 fe64 	bl	8005594 <HAL_UART_Transmit>
          }
          hk_counter = 1;
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
          hk_seq++;
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <HAL_TIM_OC_DelayElapsedCallback+0x740>)
 80008dc:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 80008de:	e046      	b.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
          hk_counter++;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <HAL_TIM_OC_DelayElapsedCallback+0x74c>)
 80008e8:	601a      	str	r2, [r3, #0]
}
 80008ea:	e040      	b.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
  else if (htim == &htim1)
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x750>)
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d13c      	bne.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
    if (PMT_ON)
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x754>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d038      	beq.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0x72a>
        HAL_SPI_Transmit(&hspi2, (uint8_t *)&WRITE, 1, 1);
 80008fc:	4927      	ldr	r1, [pc, #156]	; (800099c <HAL_TIM_OC_DelayElapsedCallback+0x758>)
 80008fe:	4828      	ldr	r0, [pc, #160]	; (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x75c>)
 8000900:	2301      	movs	r3, #1
 8000902:	2201      	movs	r2, #1
 8000904:	f003 fe1e 	bl	8004544 <HAL_SPI_Transmit>
        while (!(SPI2->SR))
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0fb      	beq.n	800090a <HAL_TIM_OC_DelayElapsedCallback+0x6c6>
        raw = SPI2->DR;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x760>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	001a      	movs	r2, r3
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <HAL_TIM_OC_DelayElapsedCallback+0x764>)
 800091a:	601a      	str	r2, [r3, #0]
    	  pmt_buf[0] = pmt_sync;
 800091c:	22bb      	movs	r2, #187	; 0xbb
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000920:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000922:	22bb      	movs	r2, #187	; 0xbb
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000926:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000934:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 800093e:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x770>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	121b      	asrs	r3, r3, #8
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 800094a:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_TIM_OC_DelayElapsedCallback+0x770>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000954:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_TIM_OC_DelayElapsedCallback+0x76c>)
 8000960:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000962:	4912      	ldr	r1, [pc, #72]	; (80009ac <HAL_TIM_OC_DelayElapsedCallback+0x768>)
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <HAL_TIM_OC_DelayElapsedCallback+0x748>)
 8000966:	2364      	movs	r3, #100	; 0x64
 8000968:	2206      	movs	r2, #6
 800096a:	f004 fe13 	bl	8005594 <HAL_UART_Transmit>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b00f      	add	sp, #60	; 0x3c
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000378 	.word	0x20000378
 800097c:	2000004c 	.word	0x2000004c
 8000980:	200003c0 	.word	0x200003c0
 8000984:	200003e6 	.word	0x200003e6
 8000988:	20000022 	.word	0x20000022
 800098c:	20000288 	.word	0x20000288
 8000990:	200003e8 	.word	0x200003e8
 8000994:	200001f8 	.word	0x200001f8
 8000998:	20000020 	.word	0x20000020
 800099c:	08006ccc 	.word	0x08006ccc
 80009a0:	20000194 	.word	0x20000194
 80009a4:	40003800 	.word	0x40003800
 80009a8:	2000039c 	.word	0x2000039c
 80009ac:	200003b8 	.word	0x200003b8
 80009b0:	200003be 	.word	0x200003be
 80009b4:	200003a0 	.word	0x200003a0

080009b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

//  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
  char key = rx_buf[0];
 80009c0:	210f      	movs	r1, #15
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	4a70      	ldr	r2, [pc, #448]	; (8000b88 <HAL_UART_RxCpltCallback+0x1d0>)
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	701a      	strb	r2, [r3, #0]

  switch (key)
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	3b21      	subs	r3, #33	; 0x21
 80009d0:	2b52      	cmp	r3, #82	; 0x52
 80009d2:	d900      	bls.n	80009d6 <HAL_UART_RxCpltCallback+0x1e>
 80009d4:	e0d3      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
 80009d6:	009a      	lsls	r2, r3, #2
 80009d8:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <HAL_UART_RxCpltCallback+0x1d4>)
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	469f      	mov	pc, r3
  {
  case 'G':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80009e0:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <HAL_UART_RxCpltCallback+0x1d8>)
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	2201      	movs	r2, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 fa22 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 80009ec:	e0c7      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'H':
  {
    HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80009ee:	4b68      	ldr	r3, [pc, #416]	; (8000b90 <HAL_UART_RxCpltCallback+0x1d8>)
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 fa1b 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 80009fa:	e0c0      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }

  case 'I':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_SET);
 80009fc:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <HAL_UART_RxCpltCallback+0x1d8>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fa14 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a08:	e0b9      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'J':
  {
    HAL_GPIO_WritePin(gpios[9].gpio, gpios[9].pin, GPIO_PIN_RESET);
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fa0d 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a16:	e0b2      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '<':
  {
    if (step < 5)
 8000a18:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d900      	bls.n	8000a22 <HAL_UART_RxCpltCallback+0x6a>
 8000a20:	e0aa      	b.n	8000b78 <HAL_UART_RxCpltCallback+0x1c0>
    {
      step++;
 8000a22:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a2c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000a2e:	e0a3      	b.n	8000b78 <HAL_UART_RxCpltCallback+0x1c0>
  }
  case '>':
  {
    if (step > 0)
 8000a30:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d100      	bne.n	8000a3a <HAL_UART_RxCpltCallback+0x82>
 8000a38:	e0a0      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x1c4>
    {
      step--;
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <HAL_UART_RxCpltCallback+0x1dc>)
 8000a44:	701a      	strb	r2, [r3, #0]
    }
    break;
 8000a46:	e099      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x1c4>
  }
  case 'a':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a48:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 f9ee 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a54:	e093      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '$':
  {
    HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000a56:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a58:	2120      	movs	r1, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 f9e7 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a62:	e08c      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'b':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000a64:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 f9e0 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a70:	e085      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '%':
  {
    HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a72:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	2200      	movs	r2, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 f9d9 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a7e:	e07e      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'c':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000a80:	4846      	ldr	r0, [pc, #280]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	2201      	movs	r2, #1
 8000a88:	0019      	movs	r1, r3
 8000a8a:	f002 f9d1 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a8e:	e076      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '^':
  {
    HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000a90:	4842      	ldr	r0, [pc, #264]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	2200      	movs	r2, #0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f002 f9c9 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000a9e:	e06e      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'd':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000aa0:	483e      	ldr	r0, [pc, #248]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	f002 f9c1 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000aae:	e066      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '&':
  {
    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f002 f9b9 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000abe:	e05e      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'e':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 f9b2 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000acc:	e057      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '*':
  {
    HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 f9ab 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000ada:	e050      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'f':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000adc:	482f      	ldr	r0, [pc, #188]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	f002 f9a3 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000aea:	e048      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '(':
  {
    HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aec:	482b      	ldr	r0, [pc, #172]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2200      	movs	r2, #0
 8000af4:	0019      	movs	r1, r3
 8000af6:	f002 f99b 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000afa:	e040      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'g':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	2201      	movs	r2, #1
 8000b04:	0019      	movs	r1, r3
 8000b06:	f002 f993 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000b0a:	e038      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case ')':
  {
    HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b0c:	4823      	ldr	r0, [pc, #140]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	2200      	movs	r2, #0
 8000b14:	0019      	movs	r1, r3
 8000b16:	f002 f98b 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000b1a:	e030      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 'h':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	2201      	movs	r2, #1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 f984 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000b28:	e029      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '-':
  {
    HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_UART_RxCpltCallback+0x1e4>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 f97d 	bl	8002e30 <HAL_GPIO_WritePin>
    break;
 8000b36:	e022      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case 's':
  {
      HAL_SuspendTick();
 8000b38:	f001 f87e 	bl	8001c38 <HAL_SuspendTick>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f002 feca 	bl	80038d8 <HAL_PWR_EnterSTOPMode>
      NVIC_SystemReset();
 8000b44:	f7ff fb6c 	bl	8000220 <__NVIC_SystemReset>
      break;
  }
  case '1':
  {
    PMT_ON = 1;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
    break;
 8000b4e:	e016      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '!':
  {
    PMT_ON = 0;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
    break;
 8000b56:	e012      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '2':
  {
    ERPA_ON = 1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_UART_RxCpltCallback+0x1ec>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
    break;
 8000b5e:	e00e      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '@':
  {
    ERPA_ON = 0;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_UART_RxCpltCallback+0x1ec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
    break;
 8000b66:	e00a      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '3':
  {
    HK_ON = 1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
    break;
 8000b6e:	e006      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
  }
  case '#':
  {
    HK_ON = 0;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    break;
 8000b76:	e002      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	e000      	b.n	8000b7e <HAL_UART_RxCpltCallback+0x1c6>
    break;
 8000b7c:	46c0      	nop			; (mov r8, r8)
  }
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	2000030c 	.word	0x2000030c
 8000b8c:	08006cd0 	.word	0x08006cd0
 8000b90:	48001400 	.word	0x48001400
 8000b94:	2000039a 	.word	0x2000039a
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	20000020 	.word	0x20000020
 8000ba4:	20000021 	.word	0x20000021
 8000ba8:	20000022 	.word	0x20000022

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 ffdd 	bl	8001b70 <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f873 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 fc03 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbe:	f000 fbe3 	bl	8001388 <MX_DMA_Init>
  MX_SPI2_Init();
 8000bc2:	f000 fab5 	bl	8001130 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bc6:	f000 faf3 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bca:	f000 fb49 	bl	8001260 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000bce:	f000 fa6f 	bl	80010b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bd2:	f000 fb99 	bl	8001308 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000bd6:	f000 f9f9 	bl	8000fcc <MX_DAC1_Init>
  MX_ADC_Init();
 8000bda:	f000 f8cb 	bl	8000d74 <MX_ADC_Init>
  MX_I2C1_Init();
 8000bde:	f000 fa27 	bl	8001030 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <main+0xdc>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fd63 	bl	80026b2 <HAL_DAC_Start>

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <main+0xe0>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 ffc5 	bl	8004b80 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <main+0xe4>)
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f003 ffc0 	bl	8004b80 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <main+0xe8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d0f5      	beq.n	8000c02 <main+0x56>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <main+0xe8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	69da      	ldr	r2, [r3, #28]
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	03db      	lsls	r3, r3, #15
 8000c22:	401a      	ands	r2, r3
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	03db      	lsls	r3, r3, #15
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d1f5      	bne.n	8000c18 <main+0x6c>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <main+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <main+0xec>)
 8000c34:	2210      	movs	r2, #16
 8000c36:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <main+0xec>)
 8000c3a:	2223      	movs	r2, #35	; 0x23
 8000c3c:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <main+0xec>)
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <main+0xe8>)
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	f005 ff31 	bl	8006aac <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <main+0xa6>
      Error_Handler();
 8000c4e:	f000 fc75 	bl	800153c <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <main+0xe8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <main+0xe8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	03c9      	lsls	r1, r1, #15
 8000c60:	430a      	orrs	r2, r1
 8000c62:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <main+0xe8>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f005 ff86 	bl	8006b78 <HAL_UARTEx_EnableStopMode>
//	  HAL_Delay(100);




	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c6c:	490b      	ldr	r1, [pc, #44]	; (8000c9c <main+0xf0>)
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <main+0xe8>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	0018      	movs	r0, r3
 8000c74:	f004 fe14 	bl	80058a0 <HAL_UART_Receive_IT>

    HAL_UART_Receive(&huart1, rx_buf, 1, 0);
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <main+0xf0>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <main+0xe8>)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f004 fd32 	bl	80056e8 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000c84:	e7f2      	b.n	8000c6c <main+0xc0>
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	200000d0 	.word	0x200000d0
 8000c8c:	200001f8 	.word	0x200001f8
 8000c90:	20000240 	.word	0x20000240
 8000c94:	20000288 	.word	0x20000288
 8000c98:	20000370 	.word	0x20000370
 8000c9c:	2000030c 	.word	0x2000030c

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b097      	sub	sp, #92	; 0x5c
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	2428      	movs	r4, #40	; 0x28
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	2330      	movs	r3, #48	; 0x30
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f005 ffdb 	bl	8006c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb6:	2318      	movs	r3, #24
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	f005 ffd3 	bl	8006c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2314      	movs	r3, #20
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f005 ffcc 	bl	8006c6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2212      	movs	r2, #18
 8000cda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2210      	movs	r2, #16
 8000cec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	22a0      	movs	r2, #160	; 0xa0
 8000d04:	0392      	lsls	r2, r2, #14
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 fe15 	bl	8003940 <HAL_RCC_OscConfig>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d1a:	f000 fc0f 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	2118      	movs	r1, #24
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2207      	movs	r2, #7
 8000d24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2202      	movs	r2, #2
 8000d2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f003 f919 	bl	8003f74 <HAL_RCC_ClockConfig>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d46:	f000 fbf9 	bl	800153c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2221      	movs	r2, #33	; 0x21
 8000d4e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2203      	movs	r2, #3
 8000d54:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 fa5a 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d68:	f000 fbe8 	bl	800153c <Error_Handler>
  }
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b017      	add	sp, #92	; 0x5c
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	230c      	movs	r3, #12
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f005 ff72 	bl	8006c6c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d88:	4b8e      	ldr	r3, [pc, #568]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000d8a:	4a8f      	ldr	r2, [pc, #572]	; (8000fc8 <MX_ADC_Init+0x254>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8e:	4b8d      	ldr	r3, [pc, #564]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d94:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9a:	4b8a      	ldr	r3, [pc, #552]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000da0:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da6:	4b87      	ldr	r3, [pc, #540]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dac:	4b85      	ldr	r3, [pc, #532]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000db2:	4b84      	ldr	r3, [pc, #528]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b81      	ldr	r3, [pc, #516]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b7f      	ldr	r3, [pc, #508]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dc6:	22c2      	movs	r2, #194	; 0xc2
 8000dc8:	32ff      	adds	r2, #255	; 0xff
 8000dca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dcc:	4b7d      	ldr	r3, [pc, #500]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000dd2:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000dd4:	2224      	movs	r2, #36	; 0x24
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dda:	4b7a      	ldr	r3, [pc, #488]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000de0:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 ff36 	bl	8001c54 <HAL_ADC_Init>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 fba6 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	0152      	lsls	r2, r2, #5
 8000dfc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0552      	lsls	r2, r2, #21
 8000e04:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e06:	1d3a      	adds	r2, r7, #4
 8000e08:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 f8fb 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e16:	f000 fb91 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e20:	1d3a      	adds	r2, r7, #4
 8000e22:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f001 f8ee 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e30:	f000 fb84 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2202      	movs	r2, #2
 8000e38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3a:	1d3a      	adds	r2, r7, #4
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 f8e1 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000e4a:	f000 fb77 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2203      	movs	r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e54:	1d3a      	adds	r2, r7, #4
 8000e56:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 f8d4 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000e64:	f000 fb6a 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6e:	1d3a      	adds	r2, r7, #4
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f8c7 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000e7e:	f000 fb5d 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2206      	movs	r2, #6
 8000e86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e88:	1d3a      	adds	r2, r7, #4
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 f8ba 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000e98:	f000 fb50 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea2:	1d3a      	adds	r2, r7, #4
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f8ad 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000eb2:	f000 fb43 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2208      	movs	r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ebc:	1d3a      	adds	r2, r7, #4
 8000ebe:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 f8a0 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000ecc:	f000 fb36 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 f893 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000ee6:	f000 fb29 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	220a      	movs	r2, #10
 8000eee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 f886 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f00:	f000 fb1c 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	220b      	movs	r2, #11
 8000f08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f879 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000f1a:	f000 fb0f 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	220c      	movs	r2, #12
 8000f22:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f24:	1d3a      	adds	r2, r7, #4
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 f86c 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000f34:	f000 fb02 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	220d      	movs	r2, #13
 8000f3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 f85f 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000f4e:	f000 faf5 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	220e      	movs	r2, #14
 8000f56:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f58:	1d3a      	adds	r2, r7, #4
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 f852 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000f68:	f000 fae8 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	220f      	movs	r2, #15
 8000f70:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 f845 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000f82:	f000 fadb 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2210      	movs	r2, #16
 8000f8a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8c:	1d3a      	adds	r2, r7, #4
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 f838 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000f9c:	f000 face 	bl	800153c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2211      	movs	r2, #17
 8000fa4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_ADC_Init+0x250>)
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 f82b 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8000fb6:	f000 fac1 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	2000004c 	.word	0x2000004c
 8000fc8:	40012400 	.word	0x40012400

08000fcc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_DAC1_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fd8:	003b      	movs	r3, r7
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2308      	movs	r3, #8
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f005 fe43 	bl	8006c6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_DAC1_Init+0x5c>)
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <MX_DAC1_Init+0x60>)
 8000fea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_DAC1_Init+0x5c>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 fafe 	bl	80025f0 <HAL_DAC_Init>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8000ff8:	f000 faa0 	bl	800153c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001002:	003b      	movs	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001008:	0039      	movs	r1, r7
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_DAC1_Init+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	0018      	movs	r0, r3
 8001010:	f001 fb11 	bl	8002636 <HAL_DAC_ConfigChannel>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001018:	f000 fa90 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000039a 	.word	0x2000039a
 8001028:	200000d0 	.word	0x200000d0
 800102c:	40007400 	.word	0x40007400

08001030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_I2C1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_I2C1_Init+0x74>)
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <MX_I2C1_Init+0x7c>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_I2C1_Init+0x74>)
 800106c:	0018      	movs	r0, r3
 800106e:	f001 fefd 	bl	8002e6c <HAL_I2C_Init>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001076:	f000 fa61 	bl	800153c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_I2C1_Init+0x74>)
 800107c:	2100      	movs	r1, #0
 800107e:	0018      	movs	r0, r3
 8001080:	f002 fb92 	bl	80037a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001088:	f000 fa58 	bl	800153c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <MX_I2C1_Init+0x74>)
 800108e:	2100      	movs	r1, #0
 8001090:	0018      	movs	r0, r3
 8001092:	f002 fbd5 	bl	8003840 <HAL_I2CEx_ConfigDigitalFilter>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fa4f 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200000e4 	.word	0x200000e4
 80010a8:	40005400 	.word	0x40005400
 80010ac:	2000090e 	.word	0x2000090e

080010b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_SPI1_Init+0x78>)
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <MX_SPI1_Init+0x7c>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_SPI1_Init+0x78>)
 80010bc:	2282      	movs	r2, #130	; 0x82
 80010be:	0052      	lsls	r2, r2, #1
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_SPI1_Init+0x78>)
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI1_Init+0x78>)
 80010cc:	22f0      	movs	r2, #240	; 0xf0
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_SPI1_Init+0x78>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_SPI1_Init+0x78>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI1_Init+0x78>)
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_SPI1_Init+0x78>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI1_Init+0x78>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_SPI1_Init+0x78>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_SPI1_Init+0x78>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI1_Init+0x78>)
 8001100:	2207      	movs	r2, #7
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_SPI1_Init+0x78>)
 8001106:	2200      	movs	r2, #0
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI1_Init+0x78>)
 800110c:	2208      	movs	r2, #8
 800110e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MX_SPI1_Init+0x78>)
 8001112:	0018      	movs	r0, r3
 8001114:	f003 f95e 	bl	80043d4 <HAL_SPI_Init>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800111c:	f000 fa0e 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000130 	.word	0x20000130
 800112c:	40013000 	.word	0x40013000

08001130 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001136:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <MX_SPI2_Init+0x7c>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_SPI2_Init+0x78>)
 800113c:	2282      	movs	r2, #130	; 0x82
 800113e:	0052      	lsls	r2, r2, #1
 8001140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	00d2      	lsls	r2, r2, #3
 8001148:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_SPI2_Init+0x78>)
 800114c:	22f0      	movs	r2, #240	; 0xf0
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_SPI2_Init+0x78>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001168:	2218      	movs	r2, #24
 800116a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_SPI2_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_SPI2_Init+0x78>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001180:	2207      	movs	r2, #7
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_SPI2_Init+0x78>)
 800118c:	2208      	movs	r2, #8
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_SPI2_Init+0x78>)
 8001192:	0018      	movs	r0, r3
 8001194:	f003 f91e 	bl	80043d4 <HAL_SPI_Init>
 8001198:	1e03      	subs	r3, r0, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800119c:	f000 f9ce 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000194 	.word	0x20000194
 80011ac:	40003800 	.word	0x40003800

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	2308      	movs	r3, #8
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	0018      	movs	r0, r3
 80011bc:	2310      	movs	r3, #16
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f005 fd53 	bl	8006c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	003b      	movs	r3, r7
 80011c8:	0018      	movs	r0, r3
 80011ca:	2308      	movs	r3, #8
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f005 fd4c 	bl	8006c6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011dc:	2263      	movs	r2, #99	; 0x63
 80011de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000 - 1;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011e8:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_TIM1_Init+0xac>)
 80011ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_TIM1_Init+0xa4>)
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM1_Init+0xa4>)
 8001200:	0018      	movs	r0, r3
 8001202:	f003 fc6d 	bl	8004ae0 <HAL_TIM_Base_Init>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800120a:	f000 f997 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	2108      	movs	r1, #8
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0152      	lsls	r2, r2, #5
 8001216:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001218:	187a      	adds	r2, r7, r1
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_TIM1_Init+0xa4>)
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f003 fec4 	bl	8004fac <HAL_TIM_ConfigClockSource>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001228:	f000 f988 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001238:	003a      	movs	r2, r7
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_TIM1_Init+0xa4>)
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f004 f8e6 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001248:	f000 f978 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001f8 	.word	0x200001f8
 8001258:	40012c00 	.word	0x40012c00
 800125c:	00005dbf 	.word	0x00005dbf

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	2308      	movs	r3, #8
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	2310      	movs	r3, #16
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f005 fcfb 	bl	8006c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	2308      	movs	r3, #8
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f005 fcf4 	bl	8006c6c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM2_Init+0xa0>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	05d2      	lsls	r2, r2, #23
 800128a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM2_Init+0xa0>)
 800128e:	2263      	movs	r2, #99	; 0x63
 8001290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM2_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM2_Init+0xa0>)
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <MX_TIM2_Init+0xa4>)
 800129c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0xa0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0xa0>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0xa0>)
 80012ac:	0018      	movs	r0, r3
 80012ae:	f003 fc17 	bl	8004ae0 <HAL_TIM_Base_Init>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 f941 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	2108      	movs	r1, #8
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0152      	lsls	r2, r2, #5
 80012c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	187a      	adds	r2, r7, r1
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_TIM2_Init+0xa0>)
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f003 fe6e 	bl	8004fac <HAL_TIM_ConfigClockSource>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 f932 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	003b      	movs	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	003a      	movs	r2, r7
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_TIM2_Init+0xa0>)
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f004 f890 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012f4:	f000 f922 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000240 	.word	0x20000240
 8001304:	00005dbf 	.word	0x00005dbf

08001308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_USART1_UART_Init+0x6c>)
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_USART1_UART_Init+0x70>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_USART1_UART_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_USART1_UART_Init+0x7c>)
 8001322:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001326:	22e1      	movs	r2, #225	; 0xe1
 8001328:	0212      	lsls	r2, r2, #8
 800132a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_USART1_UART_Init+0x78>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART1_UART_Init+0x78>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001340:	220c      	movs	r2, #12
 8001342:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_USART1_UART_Init+0x78>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_USART1_UART_Init+0x78>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART1_UART_Init+0x78>)
 800135e:	0018      	movs	r0, r3
 8001360:	f004 f8c4 	bl	80054ec <HAL_UART_Init>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8001368:	f000 f8e8 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	200003b6 	.word	0x200003b6
 8001378:	200003be 	.word	0x200003be
 800137c:	200003e6 	.word	0x200003e6
 8001380:	20000288 	.word	0x20000288
 8001384:	40013800 	.word	0x40013800

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_DMA_Init+0x38>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_DMA_Init+0x38>)
 8001394:	2101      	movs	r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_DMA_Init+0x38>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2201      	movs	r2, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2009      	movs	r0, #9
 80013ac:	f001 f8ee 	bl	800258c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	2009      	movs	r0, #9
 80013b2:	f001 f900 	bl	80025b6 <HAL_NVIC_EnableIRQ>

}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	2414      	movs	r4, #20
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	0018      	movs	r0, r3
 80013d0:	2314      	movs	r3, #20
 80013d2:	001a      	movs	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f005 fc49 	bl	8006c6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b54      	ldr	r3, [pc, #336]	; (800152c <MX_GPIO_Init+0x168>)
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	4b53      	ldr	r3, [pc, #332]	; (800152c <MX_GPIO_Init+0x168>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0309      	lsls	r1, r1, #12
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <MX_GPIO_Init+0x168>)
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	4b4d      	ldr	r3, [pc, #308]	; (800152c <MX_GPIO_Init+0x168>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	4b4c      	ldr	r3, [pc, #304]	; (800152c <MX_GPIO_Init+0x168>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	03c9      	lsls	r1, r1, #15
 8001400:	430a      	orrs	r2, r1
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <MX_GPIO_Init+0x168>)
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	03db      	lsls	r3, r3, #15
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b46      	ldr	r3, [pc, #280]	; (800152c <MX_GPIO_Init+0x168>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <MX_GPIO_Init+0x168>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b42      	ldr	r3, [pc, #264]	; (800152c <MX_GPIO_Init+0x168>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_GPIO_Init+0x168>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <MX_GPIO_Init+0x168>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	02c9      	lsls	r1, r1, #11
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <MX_GPIO_Init+0x168>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	02db      	lsls	r3, r3, #11
 8001444:	4013      	ands	r3, r2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800144a:	239f      	movs	r3, #159	; 0x9f
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	4838      	ldr	r0, [pc, #224]	; (8001530 <MX_GPIO_Init+0x16c>)
 8001450:	2200      	movs	r2, #0
 8001452:	0019      	movs	r1, r3
 8001454:	f001 fcec 	bl	8002e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001458:	2386      	movs	r3, #134	; 0x86
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4835      	ldr	r0, [pc, #212]	; (8001534 <MX_GPIO_Init+0x170>)
 800145e:	2200      	movs	r2, #0
 8001460:	0019      	movs	r1, r3
 8001462:	f001 fce5 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	0059      	lsls	r1, r3, #1
 800146a:	2390      	movs	r3, #144	; 0x90
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2200      	movs	r2, #0
 8001470:	0018      	movs	r0, r3
 8001472:	f001 fcdd 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <MX_GPIO_Init+0x174>)
 8001478:	2200      	movs	r2, #0
 800147a:	21c0      	movs	r1, #192	; 0xc0
 800147c:	0018      	movs	r0, r3
 800147e:	f001 fcd7 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001482:	193b      	adds	r3, r7, r4
 8001484:	229f      	movs	r2, #159	; 0x9f
 8001486:	0192      	lsls	r2, r2, #6
 8001488:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	193b      	adds	r3, r7, r4
 800148c:	2201      	movs	r2, #1
 800148e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	193b      	adds	r3, r7, r4
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	193b      	adds	r3, r7, r4
 800149e:	4a24      	ldr	r2, [pc, #144]	; (8001530 <MX_GPIO_Init+0x16c>)
 80014a0:	0019      	movs	r1, r3
 80014a2:	0010      	movs	r0, r2
 80014a4:	f001 fb54 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6;
 80014a8:	0021      	movs	r1, r4
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2286      	movs	r2, #134	; 0x86
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	000c      	movs	r4, r1
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2201      	movs	r2, #1
 80014b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <MX_GPIO_Init+0x170>)
 80014ca:	0019      	movs	r1, r3
 80014cc:	0010      	movs	r0, r2
 80014ce:	f001 fb3f 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014d2:	0021      	movs	r1, r4
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	0052      	lsls	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	000c      	movs	r4, r1
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2201      	movs	r2, #1
 80014e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	193a      	adds	r2, r7, r4
 80014f2:	2390      	movs	r3, #144	; 0x90
 80014f4:	05db      	lsls	r3, r3, #23
 80014f6:	0011      	movs	r1, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 fb29 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fe:	0021      	movs	r1, r4
 8001500:	187b      	adds	r3, r7, r1
 8001502:	22c0      	movs	r2, #192	; 0xc0
 8001504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2201      	movs	r2, #1
 800150a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001518:	187b      	adds	r3, r7, r1
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <MX_GPIO_Init+0x174>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f001 fb16 	bl	8002b50 <HAL_GPIO_Init>

}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b00b      	add	sp, #44	; 0x2c
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800
 8001534:	48000400 	.word	0x48000400
 8001538:	48001400 	.word	0x48001400

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_MspInit+0x44>)
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_MspInit+0x44>)
 8001554:	2101      	movs	r1, #1
 8001556:	430a      	orrs	r2, r1
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_MspInit+0x44>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2201      	movs	r2, #1
 8001560:	4013      	ands	r3, r2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_MspInit+0x44>)
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_MspInit+0x44>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0549      	lsls	r1, r1, #21
 8001570:	430a      	orrs	r2, r1
 8001572:	61da      	str	r2, [r3, #28]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_MspInit+0x44>)
 8001576:	69da      	ldr	r2, [r3, #28]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	4013      	ands	r3, r2
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08d      	sub	sp, #52	; 0x34
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	241c      	movs	r4, #28
 800159a:	193b      	adds	r3, r7, r4
 800159c:	0018      	movs	r0, r3
 800159e:	2314      	movs	r3, #20
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f005 fb62 	bl	8006c6c <memset>
  if(hadc->Instance==ADC1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_ADC_MspInit+0x148>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d000      	beq.n	80015b4 <HAL_ADC_MspInit+0x24>
 80015b2:	e08d      	b.n	80016d0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0089      	lsls	r1, r1, #2
 80015be:	430a      	orrs	r2, r1
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015c4:	699a      	ldr	r2, [r3, #24]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	4b42      	ldr	r3, [pc, #264]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	0309      	lsls	r1, r1, #12
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	031b      	lsls	r3, r3, #12
 80015e6:	4013      	ands	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0289      	lsls	r1, r1, #10
 80015f6:	430a      	orrs	r2, r1
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	029b      	lsls	r3, r3, #10
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	02c9      	lsls	r1, r1, #11
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_ADC_MspInit+0x14c>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	02db      	lsls	r3, r3, #11
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001624:	193b      	adds	r3, r7, r4
 8001626:	223f      	movs	r2, #63	; 0x3f
 8001628:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2203      	movs	r2, #3
 800162e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	193b      	adds	r3, r7, r4
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_ADC_MspInit+0x150>)
 800163a:	0019      	movs	r1, r3
 800163c:	0010      	movs	r0, r2
 800163e:	f001 fa87 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001642:	193b      	adds	r3, r7, r4
 8001644:	22ef      	movs	r2, #239	; 0xef
 8001646:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001648:	193b      	adds	r3, r7, r4
 800164a:	2203      	movs	r2, #3
 800164c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	193a      	adds	r2, r7, r4
 8001656:	2390      	movs	r3, #144	; 0x90
 8001658:	05db      	lsls	r3, r3, #23
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f001 fa77 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2203      	movs	r2, #3
 8001666:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2203      	movs	r2, #3
 800166c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	193b      	adds	r3, r7, r4
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <HAL_ADC_MspInit+0x154>)
 8001678:	0019      	movs	r1, r3
 800167a:	0010      	movs	r0, r2
 800167c:	f001 fa68 	bl	8002b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 8001682:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_ADC_MspInit+0x15c>)
 8001684:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	0052      	lsls	r2, r2, #1
 800169e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f001 f834 	bl	8002724 <HAL_DMA_Init>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80016c0:	f7ff ff3c 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_ADC_MspInit+0x158>)
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b00d      	add	sp, #52	; 0x34
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	40012400 	.word	0x40012400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48000400 	.word	0x48000400
 80016e8:	2000008c 	.word	0x2000008c
 80016ec:	40020008 	.word	0x40020008

080016f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	2414      	movs	r4, #20
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	0018      	movs	r0, r3
 80016fe:	2314      	movs	r3, #20
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f005 fab2 	bl	8006c6c <memset>
  if(hdac->Instance==DAC)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_DAC_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_DAC_MspInit+0x88>)
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_DAC_MspInit+0x88>)
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	0589      	lsls	r1, r1, #22
 800171c:	430a      	orrs	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_DAC_MspInit+0x88>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	059b      	lsls	r3, r3, #22
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_DAC_MspInit+0x88>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_DAC_MspInit+0x88>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0289      	lsls	r1, r1, #10
 8001738:	430a      	orrs	r2, r1
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_DAC_MspInit+0x88>)
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2210      	movs	r2, #16
 800174e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2203      	movs	r2, #3
 8001754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	193a      	adds	r2, r7, r4
 800175e:	2390      	movs	r3, #144	; 0x90
 8001760:	05db      	lsls	r3, r3, #23
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f001 f9f3 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b00b      	add	sp, #44	; 0x2c
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	40007400 	.word	0x40007400
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	2414      	movs	r4, #20
 8001786:	193b      	adds	r3, r7, r4
 8001788:	0018      	movs	r0, r3
 800178a:	2314      	movs	r3, #20
 800178c:	001a      	movs	r2, r3
 800178e:	2100      	movs	r1, #0
 8001790:	f005 fa6c 	bl	8006c6c <memset>
  if(hi2c->Instance==I2C1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_I2C_MspInit+0x90>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d132      	bne.n	8001804 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	02c9      	lsls	r1, r1, #11
 80017a8:	430a      	orrs	r2, r1
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	02db      	lsls	r3, r3, #11
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	22c0      	movs	r2, #192	; 0xc0
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c2:	0021      	movs	r1, r4
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	2212      	movs	r2, #18
 80017c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2203      	movs	r2, #3
 80017d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2201      	movs	r2, #1
 80017da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_I2C_MspInit+0x98>)
 80017e0:	0019      	movs	r1, r3
 80017e2:	0010      	movs	r0, r2
 80017e4:	f001 f9b4 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0389      	lsls	r1, r1, #14
 80017f2:	430a      	orrs	r2, r1
 80017f4:	61da      	str	r2, [r3, #28]
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_I2C_MspInit+0x94>)
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	039b      	lsls	r3, r3, #14
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b00b      	add	sp, #44	; 0x2c
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	40005400 	.word	0x40005400
 8001810:	40021000 	.word	0x40021000
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08d      	sub	sp, #52	; 0x34
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	241c      	movs	r4, #28
 8001822:	193b      	adds	r3, r7, r4
 8001824:	0018      	movs	r0, r3
 8001826:	2314      	movs	r3, #20
 8001828:	001a      	movs	r2, r3
 800182a:	2100      	movs	r1, #0
 800182c:	f005 fa1e 	bl	8006c6c <memset>
  if(hspi->Instance==SPI1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_SPI_MspInit+0x100>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d132      	bne.n	80018a0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_SPI_MspInit+0x104>)
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_SPI_MspInit+0x104>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0149      	lsls	r1, r1, #5
 8001844:	430a      	orrs	r2, r1
 8001846:	619a      	str	r2, [r3, #24]
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_SPI_MspInit+0x104>)
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_SPI_MspInit+0x104>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_SPI_MspInit+0x104>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	02c9      	lsls	r1, r1, #11
 8001860:	430a      	orrs	r2, r1
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_SPI_MspInit+0x104>)
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	02db      	lsls	r3, r3, #11
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001872:	0021      	movs	r1, r4
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2218      	movs	r2, #24
 8001878:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2202      	movs	r2, #2
 800187e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2203      	movs	r2, #3
 800188a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	187b      	adds	r3, r7, r1
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_SPI_MspInit+0x108>)
 8001896:	0019      	movs	r1, r3
 8001898:	0010      	movs	r0, r2
 800189a:	f001 f959 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800189e:	e037      	b.n	8001910 <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_SPI_MspInit+0x10c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d132      	bne.n	8001910 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	01c9      	lsls	r1, r1, #7
 80018b4:	430a      	orrs	r2, r1
 80018b6:	61da      	str	r2, [r3, #28]
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018ba:	69da      	ldr	r2, [r3, #28]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	01db      	lsls	r3, r3, #7
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	02c9      	lsls	r1, r1, #11
 80018d0:	430a      	orrs	r2, r1
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_SPI_MspInit+0x104>)
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	02db      	lsls	r3, r3, #11
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018e2:	211c      	movs	r1, #28
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	22c0      	movs	r2, #192	; 0xc0
 80018e8:	01d2      	lsls	r2, r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2202      	movs	r2, #2
 80018f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2203      	movs	r2, #3
 80018fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	187b      	adds	r3, r7, r1
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_SPI_MspInit+0x108>)
 8001908:	0019      	movs	r1, r3
 800190a:	0010      	movs	r0, r2
 800190c:	f001 f920 	bl	8002b50 <HAL_GPIO_Init>
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b00d      	add	sp, #52	; 0x34
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	40013000 	.word	0x40013000
 800191c:	40021000 	.word	0x40021000
 8001920:	48000400 	.word	0x48000400
 8001924:	40003800 	.word	0x40003800

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d11e      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0109      	lsls	r1, r1, #4
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	200d      	movs	r0, #13
 800195c:	f000 fe16 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001960:	200d      	movs	r0, #13
 8001962:	f000 fe28 	bl	80025b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	200e      	movs	r0, #14
 800196c:	f000 fe0e 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001970:	200e      	movs	r0, #14
 8001972:	f000 fe20 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001976:	e019      	b.n	80019ac <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	429a      	cmp	r2, r3
 8001982:	d113      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_TIM_Base_MspInit+0x90>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	200f      	movs	r0, #15
 80019a2:	f000 fdf3 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 fe05 	bl	80025b6 <HAL_NVIC_EnableIRQ>
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	2414      	movs	r4, #20
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	0018      	movs	r0, r3
 80019ca:	2314      	movs	r3, #20
 80019cc:	001a      	movs	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	f005 f94c 	bl	8006c6c <memset>
  if(huart->Instance==USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <HAL_UART_MspInit+0xa4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d13b      	bne.n	8001a56 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	01c9      	lsls	r1, r1, #7
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	01db      	lsls	r3, r3, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0289      	lsls	r1, r1, #10
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_UART_MspInit+0xa8>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	22c0      	movs	r2, #192	; 0xc0
 8001a1a:	00d2      	lsls	r2, r2, #3
 8001a1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	0021      	movs	r1, r4
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2202      	movs	r2, #2
 8001a24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2201      	movs	r2, #1
 8001a36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	187a      	adds	r2, r7, r1
 8001a3a:	2390      	movs	r3, #144	; 0x90
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f001 f885 	bl	8002b50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201b      	movs	r0, #27
 8001a4c:	f000 fd9e 	bl	800258c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a50:	201b      	movs	r0, #27
 8001a52:	f000 fdb0 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b00b      	add	sp, #44	; 0x2c
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40021000 	.word	0x40021000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f8b8 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <DMA1_Channel1_IRQHandler+0x14>)
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 ff6b 	bl	800297a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	2000008c 	.word	0x2000008c

08001ab0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f003 f962 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	200001f8 	.word	0x200001f8

08001ac8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <TIM1_CC_IRQHandler+0x14>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f003 f956 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	200001f8 	.word	0x200001f8

08001ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <TIM2_IRQHandler+0x14>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f003 f94a 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20000240 	.word	0x20000240

08001af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <USART1_IRQHandler+0x14>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f003 ff30 	bl	8005964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000288 	.word	0x20000288

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b46:	f7ff ffe3 	bl	8001b10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b4a:	f005 f86b 	bl	8006c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4e:	f7ff f82d 	bl	8000bac <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   r0, =_estack
 8001b54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001b60:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8001b64:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b68:	200003f0 	.word	0x200003f0

08001b6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_COMP_IRQHandler>
	...

08001b70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_Init+0x24>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_Init+0x24>)
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f809 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b86:	f7ff fcdf 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40022000 	.word	0x40022000

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001ba2:	681c      	ldr	r4, [r3, #0]
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_InitTick+0x60>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	0019      	movs	r1, r3
 8001baa:	23fa      	movs	r3, #250	; 0xfa
 8001bac:	0098      	lsls	r0, r3, #2
 8001bae:	f7fe faab 	bl	8000108 <__udivsi3>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	0020      	movs	r0, r4
 8001bb8:	f7fe faa6 	bl	8000108 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 fd09 	bl	80025d6 <HAL_SYSTICK_Config>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00f      	b.n	8001bec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d80b      	bhi.n	8001bea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 fcd6 	bl	800258c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_InitTick+0x64>)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b003      	add	sp, #12
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	20000024 	.word	0x20000024
 8001bf8:	2000002c 	.word	0x2000002c
 8001bfc:	20000028 	.word	0x20000028

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	001a      	movs	r2, r3
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x20>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	18d2      	adds	r2, r2, r3
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_IncTick+0x20>)
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	2000002c 	.word	0x2000002c
 8001c20:	200003ec 	.word	0x200003ec

08001c24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_GetTick+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	200003ec 	.word	0x200003ec

08001c38 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_SuspendTick+0x18>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_SuspendTick+0x18>)
 8001c42:	2102      	movs	r1, #2
 8001c44:	438a      	bics	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e125      	b.n	8001ebe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2234      	movs	r2, #52	; 0x34
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff fc80 	bl	8001590 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d000      	beq.n	8001c9c <HAL_ADC_Init+0x48>
 8001c9a:	e103      	b.n	8001ea4 <HAL_ADC_Init+0x250>
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d000      	beq.n	8001ca8 <HAL_ADC_Init+0x54>
 8001ca6:	e0fd      	b.n	8001ea4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001cb2:	d000      	beq.n	8001cb6 <HAL_ADC_Init+0x62>
 8001cb4:	e0f6      	b.n	8001ea4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	4a83      	ldr	r2, [pc, #524]	; (8001ec8 <HAL_ADC_Init+0x274>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d112      	bne.n	8001cfa <HAL_ADC_Init+0xa6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d009      	beq.n	8001cf6 <HAL_ADC_Init+0xa2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	401a      	ands	r2, r3
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Init+0xa6>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_ADC_Init+0xa8>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d116      	bne.n	8001d2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2218      	movs	r2, #24
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	0899      	lsrs	r1, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4964      	ldr	r1, [pc, #400]	; (8001ecc <HAL_ADC_Init+0x278>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7e1b      	ldrb	r3, [r3, #24]
 8001d42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e5b      	ldrb	r3, [r3, #25]
 8001d48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e9b      	ldrb	r3, [r3, #26]
 8001d50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d002      	beq.n	8001d62 <HAL_ADC_Init+0x10e>
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_Init+0x110>
 8001d62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_Init+0x124>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_Init+0x126>
 8001d78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2124      	movs	r1, #36	; 0x24
 8001d80:	5c5b      	ldrb	r3, [r3, r1]
 8001d82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7edb      	ldrb	r3, [r3, #27]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d115      	bne.n	8001dc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e9b      	ldrb	r3, [r3, #26]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	0252      	lsls	r2, r2, #9
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e00b      	b.n	8001dc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	2220      	movs	r2, #32
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	2201      	movs	r2, #1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	23c2      	movs	r3, #194	; 0xc2
 8001dc6:	33ff      	adds	r3, #255	; 0xff
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d007      	beq.n	8001ddc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68d9      	ldr	r1, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	055b      	lsls	r3, r3, #21
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d01b      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d017      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d013      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d00f      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d00b      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d003      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d112      	bne.n	8001e56 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2107      	movs	r1, #7
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6959      	ldr	r1, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_ADC_Init+0x27c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10b      	bne.n	8001e7e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2203      	movs	r2, #3
 8001e72:	4393      	bics	r3, r2
 8001e74:	2201      	movs	r2, #1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e7c:	e01c      	b.n	8001eb8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	2212      	movs	r2, #18
 8001e84:	4393      	bics	r3, r2
 8001e86:	2210      	movs	r2, #16
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	2201      	movs	r2, #1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ea2:	e009      	b.n	8001eb8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb8:	230f      	movs	r3, #15
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b004      	add	sp, #16
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	fffffefd 	.word	0xfffffefd
 8001ecc:	fffe0219 	.word	0xfffe0219
 8001ed0:	833fffe7 	.word	0x833fffe7

08001ed4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d15e      	bne.n	8001fb2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2234      	movs	r2, #52	; 0x34
 8001ef8:	5c9b      	ldrb	r3, [r3, r2]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Start_DMA+0x2e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e05e      	b.n	8001fc0 <HAL_ADC_Start_DMA+0xec>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2234      	movs	r2, #52	; 0x34
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	7e5b      	ldrb	r3, [r3, #25]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f12:	2317      	movs	r3, #23
 8001f14:	18fc      	adds	r4, r7, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 f983 	bl	8002224 <ADC_Enable>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f22:	2317      	movs	r3, #23
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d146      	bne.n	8001fba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <HAL_ADC_Start_DMA+0xf4>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2234      	movs	r2, #52	; 0x34
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_ADC_Start_DMA+0xf8>)
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_ADC_Start_DMA+0xfc>)
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_ADC_Start_DMA+0x100>)
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	221c      	movs	r2, #28
 8001f6a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2110      	movs	r1, #16
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3340      	adds	r3, #64	; 0x40
 8001f96:	0019      	movs	r1, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f000 fc0a 	bl	80027b4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2104      	movs	r1, #4
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e003      	b.n	8001fba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fb2:	2317      	movs	r3, #23
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fba:	2317      	movs	r3, #23
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b007      	add	sp, #28
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	fffff0fe 	.word	0xfffff0fe
 8001fcc:	0800232d 	.word	0x0800232d
 8001fd0:	080023e1 	.word	0x080023e1
 8001fd4:	080023ff 	.word	0x080023ff

08001fd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	230f      	movs	r3, #15
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	429a      	cmp	r2, r3
 8002028:	d011      	beq.n	800204e <HAL_ADC_ConfigChannel+0x46>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d00d      	beq.n	800204e <HAL_ADC_ConfigChannel+0x46>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	2b02      	cmp	r3, #2
 8002038:	d009      	beq.n	800204e <HAL_ADC_ConfigChannel+0x46>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	2b03      	cmp	r3, #3
 8002040:	d005      	beq.n	800204e <HAL_ADC_ConfigChannel+0x46>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	2b04      	cmp	r3, #4
 8002048:	d001      	beq.n	800204e <HAL_ADC_ConfigChannel+0x46>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2234      	movs	r2, #52	; 0x34
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x54>
 8002058:	2302      	movs	r3, #2
 800205a:	e0d0      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1f6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2234      	movs	r2, #52	; 0x34
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d000      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x6a>
 8002070:	e0b4      	b.n	80021dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a64      	ldr	r2, [pc, #400]	; (8002208 <HAL_ADC_ConfigChannel+0x200>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_ADC_ConfigChannel+0x76>
 800207c:	e082      	b.n	8002184 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	409a      	lsls	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	429a      	cmp	r2, r3
 800209e:	d037      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d033      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d02f      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d02b      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d027      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d023      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d01f      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	2b07      	cmp	r3, #7
 80020d6:	d01b      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2107      	movs	r1, #7
 80020e4:	400b      	ands	r3, r1
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d012      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2107      	movs	r1, #7
 80020f6:	438a      	bics	r2, r1
 80020f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6959      	ldr	r1, [r3, #20]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2207      	movs	r2, #7
 8002106:	401a      	ands	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b10      	cmp	r3, #16
 8002116:	d007      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x120>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b11      	cmp	r3, #17
 800211e:	d003      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x120>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d163      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_ADC_ConfigChannel+0x204>)
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b10      	cmp	r3, #16
 8002132:	d009      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x140>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b11      	cmp	r3, #17
 800213a:	d102      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x13a>
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	03db      	lsls	r3, r3, #15
 8002140:	e004      	b.n	800214c <HAL_ADC_ConfigChannel+0x144>
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	045b      	lsls	r3, r3, #17
 8002146:	e001      	b.n	800214c <HAL_ADC_ConfigChannel+0x144>
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	4a2f      	ldr	r2, [pc, #188]	; (800220c <HAL_ADC_ConfigChannel+0x204>)
 800214e:	430b      	orrs	r3, r1
 8002150:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d14a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_ADC_ConfigChannel+0x208>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	492d      	ldr	r1, [pc, #180]	; (8002214 <HAL_ADC_ConfigChannel+0x20c>)
 8002160:	0018      	movs	r0, r3
 8002162:	f7fd ffd1 	bl	8000108 <__udivsi3>
 8002166:	0003      	movs	r3, r0
 8002168:	001a      	movs	r2, r3
 800216a:	0013      	movs	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	189b      	adds	r3, r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002174:	e002      	b.n	800217c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x16e>
 8002182:	e035      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	4099      	lsls	r1, r3
 8002192:	000b      	movs	r3, r1
 8002194:	43d9      	mvns	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	400a      	ands	r2, r1
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d007      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x1ae>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x1ae>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d11c      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_ADC_ConfigChannel+0x204>)
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_ConfigChannel+0x1ca>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x1c6>
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_ADC_ConfigChannel+0x210>)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_ADC_ConfigChannel+0x214>)
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_ADC_ConfigChannel+0x218>)
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_ADC_ConfigChannel+0x204>)
 80021d6:	400b      	ands	r3, r1
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e009      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	2220      	movs	r2, #32
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80021e8:	230f      	movs	r3, #15
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2234      	movs	r2, #52	; 0x34
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80021f8:	230f      	movs	r3, #15
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	781b      	ldrb	r3, [r3, #0]
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b004      	add	sp, #16
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	00001001 	.word	0x00001001
 800220c:	40012708 	.word	0x40012708
 8002210:	20000024 	.word	0x20000024
 8002214:	000f4240 	.word	0x000f4240
 8002218:	ffbfffff 	.word	0xffbfffff
 800221c:	feffffff 	.word	0xfeffffff
 8002220:	ff7fffff 	.word	0xff7fffff

08002224 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2203      	movs	r2, #3
 800223c:	4013      	ands	r3, r2
 800223e:	2b01      	cmp	r3, #1
 8002240:	d112      	bne.n	8002268 <ADC_Enable+0x44>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	2b01      	cmp	r3, #1
 800224e:	d009      	beq.n	8002264 <ADC_Enable+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	401a      	ands	r2, r3
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	429a      	cmp	r2, r3
 8002262:	d101      	bne.n	8002268 <ADC_Enable+0x44>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <ADC_Enable+0x46>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d152      	bne.n	8002314 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <ADC_Enable+0xfc>)
 8002276:	4013      	ands	r3, r2
 8002278:	d00d      	beq.n	8002296 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	2210      	movs	r2, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	2201      	movs	r2, #1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <ADC_Enable+0x100>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	491f      	ldr	r1, [pc, #124]	; (8002328 <ADC_Enable+0x104>)
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fd ff2b 	bl	8000108 <__udivsi3>
 80022b2:	0003      	movs	r3, r0
 80022b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022b6:	e002      	b.n	80022be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80022c4:	f7ff fcae 	bl	8001c24 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022cc:	e01b      	b.n	8002306 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ce:	f7ff fca9 	bl	8001c24 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d914      	bls.n	8002306 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	2210      	movs	r2, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2201      	movs	r2, #1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d1dc      	bne.n	80022ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	80000017 	.word	0x80000017
 8002324:	20000024 	.word	0x20000024
 8002328:	000f4240 	.word	0x000f4240

0800232c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	2250      	movs	r2, #80	; 0x50
 8002340:	4013      	ands	r3, r2
 8002342:	d140      	bne.n	80023c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d12d      	bne.n	80023bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002364:	2b00      	cmp	r3, #0
 8002366:	d129      	bne.n	80023bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2208      	movs	r2, #8
 8002370:	4013      	ands	r3, r2
 8002372:	2b08      	cmp	r3, #8
 8002374:	d122      	bne.n	80023bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d110      	bne.n	80023a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	210c      	movs	r1, #12
 800238e:	438a      	bics	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <ADC_DMAConvCplt+0xb0>)
 8002398:	4013      	ands	r3, r2
 800239a:	2201      	movs	r2, #1
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
 80023a2:	e00b      	b.n	80023bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	2220      	movs	r2, #32
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2201      	movs	r2, #1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fe0a 	bl	8001fd8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80023c4:	e005      	b.n	80023d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	0010      	movs	r0, r2
 80023d0:	4798      	blx	r3
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	fffffefe 	.word	0xfffffefe

080023e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff fdf9 	bl	8001fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	431a      	orrs	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2204      	movs	r2, #4
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	0018      	movs	r0, r3
 8002428:	f7ff fde6 	bl	8001ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b004      	add	sp, #16
 8002432:	bd80      	pop	{r7, pc}

08002434 <__NVIC_EnableIRQ>:
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	0002      	movs	r2, r0
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b7f      	cmp	r3, #127	; 0x7f
 8002446:	d809      	bhi.n	800245c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	001a      	movs	r2, r3
 800244e:	231f      	movs	r3, #31
 8002450:	401a      	ands	r2, r3
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_EnableIRQ+0x30>)
 8002454:	2101      	movs	r1, #1
 8002456:	4091      	lsls	r1, r2
 8002458:	000a      	movs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	0002      	movs	r2, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b7f      	cmp	r3, #127	; 0x7f
 800247c:	d828      	bhi.n	80024d0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247e:	4a2f      	ldr	r2, [pc, #188]	; (800253c <__NVIC_SetPriority+0xd4>)
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	33c0      	adds	r3, #192	; 0xc0
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	589b      	ldr	r3, [r3, r2]
 800248e:	1dfa      	adds	r2, r7, #7
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	0011      	movs	r1, r2
 8002494:	2203      	movs	r2, #3
 8002496:	400a      	ands	r2, r1
 8002498:	00d2      	lsls	r2, r2, #3
 800249a:	21ff      	movs	r1, #255	; 0xff
 800249c:	4091      	lsls	r1, r2
 800249e:	000a      	movs	r2, r1
 80024a0:	43d2      	mvns	r2, r2
 80024a2:	401a      	ands	r2, r3
 80024a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	401a      	ands	r2, r3
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	2303      	movs	r3, #3
 80024b6:	4003      	ands	r3, r0
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024bc:	481f      	ldr	r0, [pc, #124]	; (800253c <__NVIC_SetPriority+0xd4>)
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	430a      	orrs	r2, r1
 80024c8:	33c0      	adds	r3, #192	; 0xc0
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	501a      	str	r2, [r3, r0]
}
 80024ce:	e031      	b.n	8002534 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <__NVIC_SetPriority+0xd8>)
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	0019      	movs	r1, r3
 80024d8:	230f      	movs	r3, #15
 80024da:	400b      	ands	r3, r1
 80024dc:	3b08      	subs	r3, #8
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3306      	adds	r3, #6
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	18d3      	adds	r3, r2, r3
 80024e6:	3304      	adds	r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1dfa      	adds	r2, r7, #7
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	0011      	movs	r1, r2
 80024f0:	2203      	movs	r2, #3
 80024f2:	400a      	ands	r2, r1
 80024f4:	00d2      	lsls	r2, r2, #3
 80024f6:	21ff      	movs	r1, #255	; 0xff
 80024f8:	4091      	lsls	r1, r2
 80024fa:	000a      	movs	r2, r1
 80024fc:	43d2      	mvns	r2, r2
 80024fe:	401a      	ands	r2, r3
 8002500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	401a      	ands	r2, r3
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	0018      	movs	r0, r3
 8002510:	2303      	movs	r3, #3
 8002512:	4003      	ands	r3, r0
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <__NVIC_SetPriority+0xd8>)
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	001c      	movs	r4, r3
 8002520:	230f      	movs	r3, #15
 8002522:	4023      	ands	r3, r4
 8002524:	3b08      	subs	r3, #8
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	430a      	orrs	r2, r1
 800252a:	3306      	adds	r3, #6
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	18c3      	adds	r3, r0, r3
 8002530:	3304      	adds	r3, #4
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b003      	add	sp, #12
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	045b      	lsls	r3, r3, #17
 8002554:	429a      	cmp	r2, r3
 8002556:	d301      	bcc.n	800255c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002558:	2301      	movs	r3, #1
 800255a:	e010      	b.n	800257e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <SysTick_Config+0x44>)
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	3a01      	subs	r2, #1
 8002562:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002564:	2301      	movs	r3, #1
 8002566:	425b      	negs	r3, r3
 8002568:	2103      	movs	r1, #3
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff ff7c 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x44>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x44>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	210f      	movs	r1, #15
 8002598:	187b      	adds	r3, r7, r1
 800259a:	1c02      	adds	r2, r0, #0
 800259c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	0011      	movs	r1, r2
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff ff5d 	bl	8002468 <__NVIC_SetPriority>
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	0002      	movs	r2, r0
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff ff33 	bl	8002434 <__NVIC_EnableIRQ>
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ffaf 	bl	8002544 <SysTick_Config>
 80025e6:	0003      	movs	r3, r0
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e015      	b.n	800262e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff f86b 	bl	80016f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	795b      	ldrb	r3, [r3, #5]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_DAC_ConfigChannel+0x20>
 8002652:	2302      	movs	r3, #2
 8002654:	e029      	b.n	80026aa <HAL_DAC_ConfigChannel+0x74>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2202      	movs	r2, #2
 8002660:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800266a:	223e      	movs	r2, #62	; 0x3e
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	409a      	lsls	r2, r3
 8002670:	0013      	movs	r3, r2
 8002672:	43da      	mvns	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4013      	ands	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	409a      	lsls	r2, r3
 800268c:	0013      	movs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	795b      	ldrb	r3, [r3, #5]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_DAC_Start+0x16>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e028      	b.n	800271a <HAL_DAC_Start+0x68>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	409a      	lsls	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10e      	bne.n	800270c <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	223c      	movs	r2, #60	; 0x3c
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b3c      	cmp	r3, #60	; 0x3c
 80026fa:	d107      	bne.n	800270c <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e036      	b.n	80027a8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2221      	movs	r2, #33	; 0x21
 800273e:	2102      	movs	r1, #2
 8002740:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_DMA_Init+0x8c>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800275a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f9c4 	bl	8002b18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}  
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ffffc00f 	.word	0xffffc00f

080027b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2317      	movs	r3, #23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x24>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e04f      	b.n	8002878 <HAL_DMA_Start_IT+0xc4>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	5c9b      	ldrb	r3, [r3, r2]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d13a      	bne.n	8002862 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2221      	movs	r2, #33	; 0x21
 80027f0:	2102      	movs	r1, #2
 80027f2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f954 	bl	8002abe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	210e      	movs	r1, #14
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00f      	b.n	8002850 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	210a      	movs	r1, #10
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e007      	b.n	8002872 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800286a:	2317      	movs	r3, #23
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002872:	2317      	movs	r3, #23
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
} 
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b006      	add	sp, #24
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	5c9b      	ldrb	r3, [r3, r2]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e020      	b.n	80028e8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	210e      	movs	r1, #14
 80028b2:	438a      	bics	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	438a      	bics	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2101      	movs	r1, #1
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2221      	movs	r2, #33	; 0x21
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	210f      	movs	r1, #15
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2221      	movs	r2, #33	; 0x21
 8002904:	5c9b      	ldrb	r3, [r3, r2]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d006      	beq.n	800291a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e028      	b.n	800296c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	210e      	movs	r1, #14
 8002926:	438a      	bics	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	438a      	bics	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2101      	movs	r1, #1
 8002944:	4091      	lsls	r1, r2
 8002946:	000a      	movs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2221      	movs	r2, #33	; 0x21
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	0010      	movs	r0, r2
 800296a:	4798      	blx	r3
    } 
  }
  return status;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	781b      	ldrb	r3, [r3, #0]
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2204      	movs	r2, #4
 8002998:	409a      	lsls	r2, r3
 800299a:	0013      	movs	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	d024      	beq.n	80029ec <HAL_DMA_IRQHandler+0x72>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d020      	beq.n	80029ec <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2220      	movs	r2, #32
 80029b2:	4013      	ands	r3, r2
 80029b4:	d107      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2104      	movs	r1, #4
 80029c2:	438a      	bics	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2104      	movs	r1, #4
 80029d0:	4091      	lsls	r1, r2
 80029d2:	000a      	movs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d100      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x66>
 80029de:	e06a      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	0010      	movs	r0, r2
 80029e8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	e064      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2202      	movs	r2, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	d02b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xda>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d027      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d10b      	bne.n	8002a28 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	210a      	movs	r1, #10
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2221      	movs	r2, #33	; 0x21
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	2102      	movs	r1, #2
 8002a32:	4091      	lsls	r1, r2
 8002a34:	000a      	movs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d036      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	0010      	movs	r0, r2
 8002a50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a52:	e030      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2208      	movs	r2, #8
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	d028      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2208      	movs	r2, #8
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d024      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	210e      	movs	r1, #14
 8002a78:	438a      	bics	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	2101      	movs	r1, #1
 8002a86:	4091      	lsls	r1, r2
 8002a88:	000a      	movs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2221      	movs	r2, #33	; 0x21
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	4798      	blx	r3
    }
   }
}  
 8002ab4:	e7ff      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x13c>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}

08002abe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4091      	lsls	r1, r2
 8002ad8:	000a      	movs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d108      	bne.n	8002afe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002afc:	e007      	b.n	8002b0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <DMA_CalcBaseAndBitshift+0x30>)
 8002b26:	4694      	mov	ip, r2
 8002b28:	4463      	add	r3, ip
 8002b2a:	2114      	movs	r1, #20
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd faeb 	bl	8000108 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	009a      	lsls	r2, r3, #2
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <DMA_CalcBaseAndBitshift+0x34>)
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b002      	add	sp, #8
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	bffdfff8 	.word	0xbffdfff8
 8002b4c:	40020000 	.word	0x40020000

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5e:	e14f      	b.n	8002e00 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4091      	lsls	r1, r2
 8002b6a:	000a      	movs	r2, r1
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <HAL_GPIO_Init+0x28>
 8002b76:	e140      	b.n	8002dfa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	0013      	movs	r3, r2
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	2201      	movs	r2, #1
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d017      	beq.n	8002c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2203      	movs	r2, #3
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d123      	bne.n	8002c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	58d3      	ldr	r3, [r2, r3]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	409a      	lsls	r2, r3
 8002c54:	0013      	movs	r3, r2
 8002c56:	43da      	mvns	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2107      	movs	r1, #7
 8002c66:	400b      	ands	r3, r1
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	6939      	ldr	r1, [r7, #16]
 8002c80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	43da      	mvns	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	23c0      	movs	r3, #192	; 0xc0
 8002cbc:	029b      	lsls	r3, r3, #10
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d100      	bne.n	8002cc4 <HAL_GPIO_Init+0x174>
 8002cc2:	e09a      	b.n	8002dfa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc4:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_GPIO_Init+0x2c8>)
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x2c8>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	619a      	str	r2, [r3, #24]
 8002cd0:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_GPIO_Init+0x2c8>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_GPIO_Init+0x2cc>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	589b      	ldr	r3, [r3, r2]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2203      	movs	r2, #3
 8002cee:	4013      	ands	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	0013      	movs	r3, r2
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	2390      	movs	r3, #144	; 0x90
 8002d04:	05db      	lsls	r3, r3, #23
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d013      	beq.n	8002d32 <HAL_GPIO_Init+0x1e2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00d      	beq.n	8002d2e <HAL_GPIO_Init+0x1de>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_GPIO_Init+0x2d4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <HAL_GPIO_Init+0x1da>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a42      	ldr	r2, [pc, #264]	; (8002e28 <HAL_GPIO_Init+0x2d8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_GPIO_Init+0x1d6>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d32:	2300      	movs	r3, #0
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	2103      	movs	r1, #3
 8002d38:	400a      	ands	r2, r1
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d44:	4935      	ldr	r1, [pc, #212]	; (8002e1c <HAL_GPIO_Init+0x2cc>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	4013      	ands	r3, r2
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	035b      	lsls	r3, r3, #13
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	039b      	lsls	r3, r3, #14
 8002de8:	4013      	ands	r3, r2
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_GPIO_Init+0x2dc>)
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	40da      	lsrs	r2, r3
 8002e08:	1e13      	subs	r3, r2, #0
 8002e0a:	d000      	beq.n	8002e0e <HAL_GPIO_Init+0x2be>
 8002e0c:	e6a8      	b.n	8002b60 <HAL_GPIO_Init+0x10>
  } 
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b006      	add	sp, #24
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	48000800 	.word	0x48000800
 8002e28:	48000c00 	.word	0x48000c00
 8002e2c:	40010400 	.word	0x40010400

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	0008      	movs	r0, r1
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	1cbb      	adds	r3, r7, #2
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	1c7b      	adds	r3, r7, #1
 8002e44:	1c0a      	adds	r2, r1, #0
 8002e46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e48:	1c7b      	adds	r3, r7, #1
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e50:	1cbb      	adds	r3, r7, #2
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5a:	1cbb      	adds	r3, r7, #2
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e082      	b.n	8002f84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2241      	movs	r2, #65	; 0x41
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fe fc71 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2241      	movs	r2, #65	; 0x41
 8002e9e:	2124      	movs	r1, #36	; 0x24
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	438a      	bics	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_I2C_Init+0x120>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4931      	ldr	r1, [pc, #196]	; (8002f90 <HAL_I2C_Init+0x124>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0209      	lsls	r1, r1, #8
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e007      	b.n	8002efa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2184      	movs	r1, #132	; 0x84
 8002ef4:	0209      	lsls	r1, r1, #8
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d104      	bne.n	8002f0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	491f      	ldr	r1, [pc, #124]	; (8002f94 <HAL_I2C_Init+0x128>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	491a      	ldr	r1, [pc, #104]	; (8002f90 <HAL_I2C_Init+0x124>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69d9      	ldr	r1, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2241      	movs	r2, #65	; 0x41
 8002f70:	2120      	movs	r1, #32
 8002f72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2242      	movs	r2, #66	; 0x42
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	f0ffffff 	.word	0xf0ffffff
 8002f90:	ffff7fff 	.word	0xffff7fff
 8002f94:	02008000 	.word	0x02008000

08002f98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	0008      	movs	r0, r1
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	1c02      	adds	r2, r0, #0
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	2308      	movs	r3, #8
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	1c0a      	adds	r2, r1, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2241      	movs	r2, #65	; 0x41
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d000      	beq.n	8002fc4 <HAL_I2C_Master_Transmit+0x2c>
 8002fc2:	e0e7      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	5c9b      	ldrb	r3, [r3, r2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Master_Transmit+0x3a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0e1      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fda:	f7fe fe23 	bl	8001c24 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	0219      	lsls	r1, r3, #8
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f000 fa04 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2241      	movs	r2, #65	; 0x41
 8003000:	2121      	movs	r1, #33	; 0x21
 8003002:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2242      	movs	r2, #66	; 0x42
 8003008:	2110      	movs	r1, #16
 800300a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2208      	movs	r2, #8
 800301c:	18ba      	adds	r2, r7, r2
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d911      	bls.n	8003056 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	045c      	lsls	r4, r3, #17
 8003042:	230a      	movs	r3, #10
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	8819      	ldrh	r1, [r3, #0]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_I2C_Master_Transmit+0x208>)
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	0023      	movs	r3, r4
 8003050:	f000 fb74 	bl	800373c <I2C_TransferConfig>
 8003054:	e075      	b.n	8003142 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	049c      	lsls	r4, r3, #18
 800306a:	230a      	movs	r3, #10
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	8819      	ldrh	r1, [r3, #0]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_I2C_Master_Transmit+0x208>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	0023      	movs	r3, r4
 8003078:	f000 fb60 	bl	800373c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800307c:	e061      	b.n	8003142 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f9f8 	bl	800347a <I2C_WaitOnTXISFlagUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e081      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03a      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x1aa>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d136      	bne.n	8003142 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	0013      	movs	r3, r2
 80030de:	2200      	movs	r2, #0
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	f000 f98b 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80030e6:	1e03      	subs	r3, r0, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e053      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2bff      	cmp	r3, #255	; 0xff
 80030f6:	d911      	bls.n	800311c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	22ff      	movs	r2, #255	; 0xff
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	b2da      	uxtb	r2, r3
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	045c      	lsls	r4, r3, #17
 8003108:	230a      	movs	r3, #10
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	8819      	ldrh	r1, [r3, #0]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	0023      	movs	r3, r4
 8003116:	f000 fb11 	bl	800373c <I2C_TransferConfig>
 800311a:	e012      	b.n	8003142 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	b2da      	uxtb	r2, r3
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	049c      	lsls	r4, r3, #18
 8003130:	230a      	movs	r3, #10
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	8819      	ldrh	r1, [r3, #0]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	2300      	movs	r3, #0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	0023      	movs	r3, r4
 800313e:	f000 fafd 	bl	800373c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d198      	bne.n	800307e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f9d0 	bl	80034f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01a      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2220      	movs	r2, #32
 8003166:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	490c      	ldr	r1, [pc, #48]	; (80031a4 <HAL_I2C_Master_Transmit+0x20c>)
 8003174:	400a      	ands	r2, r1
 8003176:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2241      	movs	r2, #65	; 0x41
 800317c:	2120      	movs	r1, #32
 800317e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2242      	movs	r2, #66	; 0x42
 8003184:	2100      	movs	r1, #0
 8003186:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b007      	add	sp, #28
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	80002000 	.word	0x80002000
 80031a4:	fe00e800 	.word	0xfe00e800

080031a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	0008      	movs	r0, r1
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	0019      	movs	r1, r3
 80031b6:	230a      	movs	r3, #10
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	1c02      	adds	r2, r0, #0
 80031bc:	801a      	strh	r2, [r3, #0]
 80031be:	2308      	movs	r3, #8
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	1c0a      	adds	r2, r1, #0
 80031c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2241      	movs	r2, #65	; 0x41
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d000      	beq.n	80031d4 <HAL_I2C_Master_Receive+0x2c>
 80031d2:	e0e8      	b.n	80033a6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	5c9b      	ldrb	r3, [r3, r2]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Master_Receive+0x3a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0e2      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031ea:	f7fe fd1b 	bl	8001c24 <HAL_GetTick>
 80031ee:	0003      	movs	r3, r0
 80031f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	0219      	lsls	r1, r3, #8
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	f000 f8fc 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cd      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2241      	movs	r2, #65	; 0x41
 8003210:	2122      	movs	r1, #34	; 0x22
 8003212:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2242      	movs	r2, #66	; 0x42
 8003218:	2110      	movs	r1, #16
 800321a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2208      	movs	r2, #8
 800322c:	18ba      	adds	r2, r7, r2
 800322e:	8812      	ldrh	r2, [r2, #0]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d911      	bls.n	8003266 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	045c      	lsls	r4, r3, #17
 8003252:	230a      	movs	r3, #10
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	8819      	ldrh	r1, [r3, #0]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <HAL_I2C_Master_Receive+0x208>)
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	0023      	movs	r3, r4
 8003260:	f000 fa6c 	bl	800373c <I2C_TransferConfig>
 8003264:	e076      	b.n	8003354 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	049c      	lsls	r4, r3, #18
 800327a:	230a      	movs	r3, #10
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	8819      	ldrh	r1, [r3, #0]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_I2C_Master_Receive+0x208>)
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0023      	movs	r3, r4
 8003288:	f000 fa58 	bl	800373c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800328c:	e062      	b.n	8003354 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 f96b 	bl	8003570 <I2C_WaitOnRXNEFlagUntilTimeout>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e082      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03a      	beq.n	8003354 <HAL_I2C_Master_Receive+0x1ac>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d136      	bne.n	8003354 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	0013      	movs	r3, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	f000 f882 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e053      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2bff      	cmp	r3, #255	; 0xff
 8003308:	d911      	bls.n	800332e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	b2da      	uxtb	r2, r3
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	045c      	lsls	r4, r3, #17
 800331a:	230a      	movs	r3, #10
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	8819      	ldrh	r1, [r3, #0]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	0023      	movs	r3, r4
 8003328:	f000 fa08 	bl	800373c <I2C_TransferConfig>
 800332c:	e012      	b.n	8003354 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	b2da      	uxtb	r2, r3
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	049c      	lsls	r4, r3, #18
 8003342:	230a      	movs	r3, #10
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	8819      	ldrh	r1, [r3, #0]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	0023      	movs	r3, r4
 8003350:	f000 f9f4 	bl	800373c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d197      	bne.n	800328e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f8c7 	bl	80034f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e01a      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2220      	movs	r2, #32
 8003378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	490b      	ldr	r1, [pc, #44]	; (80033b4 <HAL_I2C_Master_Receive+0x20c>)
 8003386:	400a      	ands	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2241      	movs	r2, #65	; 0x41
 800338e:	2120      	movs	r1, #32
 8003390:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2242      	movs	r2, #66	; 0x42
 8003396:	2100      	movs	r1, #0
 8003398:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b007      	add	sp, #28
 80033ae:	bd90      	pop	{r4, r7, pc}
 80033b0:	80002400 	.word	0x80002400
 80033b4:	fe00e800 	.word	0xfe00e800

080033b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d007      	beq.n	80033f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]
  }
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	e021      	b.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	d01e      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe fc06 	bl	8001c24 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	2220      	movs	r2, #32
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2241      	movs	r2, #65	; 0x41
 800343a:	2120      	movs	r1, #32
 800343c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2242      	movs	r2, #66	; 0x42
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	425a      	negs	r2, r3
 8003462:	4153      	adcs	r3, r2
 8003464:	b2db      	uxtb	r3, r3
 8003466:	001a      	movs	r2, r3
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d0ce      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003486:	e02b      	b.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f8da 	bl	8003648 <I2C_IsAcknowledgeFailed>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e029      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	d01e      	beq.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fbbf 	bl	8001c24 <HAL_GetTick>
 80034a6:	0002      	movs	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	2220      	movs	r2, #32
 80034be:	431a      	orrs	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2241      	movs	r2, #65	; 0x41
 80034c8:	2120      	movs	r1, #32
 80034ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2242      	movs	r2, #66	; 0x42
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d1cc      	bne.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003504:	e028      	b.n	8003558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f89b 	bl	8003648 <I2C_IsAcknowledgeFailed>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e026      	b.n	8003568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fb83 	bl	8001c24 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	2220      	movs	r2, #32
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2241      	movs	r2, #65	; 0x41
 8003540:	2120      	movs	r1, #32
 8003542:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2242      	movs	r2, #66	; 0x42
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2220      	movs	r2, #32
 8003560:	4013      	ands	r3, r2
 8003562:	2b20      	cmp	r3, #32
 8003564:	d1cf      	bne.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b004      	add	sp, #16
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800357c:	e055      	b.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f85f 	bl	8003648 <I2C_IsAcknowledgeFailed>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e053      	b.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2220      	movs	r2, #32
 800359a:	4013      	ands	r3, r2
 800359c:	2b20      	cmp	r3, #32
 800359e:	d129      	bne.n	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2204      	movs	r2, #4
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d105      	bne.n	80035ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e03f      	b.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2220      	movs	r2, #32
 80035c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	491d      	ldr	r1, [pc, #116]	; (8003644 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2241      	movs	r2, #65	; 0x41
 80035dc:	2120      	movs	r1, #32
 80035de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2242      	movs	r2, #66	; 0x42
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e022      	b.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fb16 	bl	8001c24 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	2220      	movs	r2, #32
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2241      	movs	r2, #65	; 0x41
 800361a:	2120      	movs	r1, #32
 800361c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	2100      	movs	r1, #0
 8003624:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e007      	b.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	2b04      	cmp	r3, #4
 8003636:	d1a2      	bne.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	fe00e800 	.word	0xfe00e800

08003648 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2210      	movs	r2, #16
 800365c:	4013      	ands	r3, r2
 800365e:	2b10      	cmp	r3, #16
 8003660:	d164      	bne.n	800372c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	049b      	lsls	r3, r3, #18
 800366c:	401a      	ands	r2, r3
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	049b      	lsls	r3, r3, #18
 8003672:	429a      	cmp	r2, r3
 8003674:	d02b      	beq.n	80036ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	01c9      	lsls	r1, r1, #7
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003688:	e021      	b.n	80036ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	d01e      	beq.n	80036ce <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe fac8 	bl	8001c24 <HAL_GetTick>
 8003694:	0002      	movs	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_IsAcknowledgeFailed+0x5e>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d113      	bne.n	80036ce <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	2220      	movs	r2, #32
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2241      	movs	r2, #65	; 0x41
 80036b6:	2120      	movs	r1, #32
 80036b8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2242      	movs	r2, #66	; 0x42
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e02f      	b.n	800372e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2220      	movs	r2, #32
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d1d6      	bne.n	800368a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2220      	movs	r2, #32
 80036ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7ff fe62 	bl	80033b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	490e      	ldr	r1, [pc, #56]	; (8003738 <I2C_IsAcknowledgeFailed+0xf0>)
 8003700:	400a      	ands	r2, r1
 8003702:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	2204      	movs	r2, #4
 800370a:	431a      	orrs	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2241      	movs	r2, #65	; 0x41
 8003714:	2120      	movs	r1, #32
 8003716:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2242      	movs	r2, #66	; 0x42
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	fe00e800 	.word	0xfe00e800

0800373c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	0008      	movs	r0, r1
 8003746:	0011      	movs	r1, r2
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	240a      	movs	r4, #10
 800374c:	193b      	adds	r3, r7, r4
 800374e:	1c02      	adds	r2, r0, #0
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	2009      	movs	r0, #9
 8003754:	183b      	adds	r3, r7, r0
 8003756:	1c0a      	adds	r2, r1, #0
 8003758:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	0d51      	lsrs	r1, r2, #21
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	00d2      	lsls	r2, r2, #3
 8003768:	400a      	ands	r2, r1
 800376a:	490e      	ldr	r1, [pc, #56]	; (80037a4 <I2C_TransferConfig+0x68>)
 800376c:	430a      	orrs	r2, r1
 800376e:	43d2      	mvns	r2, r2
 8003770:	401a      	ands	r2, r3
 8003772:	0011      	movs	r1, r2
 8003774:	193b      	adds	r3, r7, r4
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	059b      	lsls	r3, r3, #22
 800377a:	0d9a      	lsrs	r2, r3, #22
 800377c:	183b      	adds	r3, r7, r0
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	0418      	lsls	r0, r3, #16
 8003782:	23ff      	movs	r3, #255	; 0xff
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	4003      	ands	r3, r0
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	431a      	orrs	r2, r3
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b005      	add	sp, #20
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	03ff63ff 	.word	0x03ff63ff

080037a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2241      	movs	r2, #65	; 0x41
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d138      	bne.n	8003830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e032      	b.n	8003832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2241      	movs	r2, #65	; 0x41
 80037d8:	2124      	movs	r1, #36	; 0x24
 80037da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4911      	ldr	r1, [pc, #68]	; (800383c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2101      	movs	r1, #1
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2241      	movs	r2, #65	; 0x41
 8003820:	2120      	movs	r1, #32
 8003822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	2100      	movs	r1, #0
 800382a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	ffffefff 	.word	0xffffefff

08003840 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2241      	movs	r2, #65	; 0x41
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d139      	bne.n	80038ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003860:	2302      	movs	r3, #2
 8003862:	e033      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2241      	movs	r2, #65	; 0x41
 8003870:	2124      	movs	r1, #36	; 0x24
 8003872:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2241      	movs	r2, #65	; 0x41
 80038ba:	2120      	movs	r1, #32
 80038bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	2100      	movs	r1, #0
 80038c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fffff0ff 	.word	0xfffff0ff

080038d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	000a      	movs	r2, r1
 80038e2:	1cfb      	adds	r3, r7, #3
 80038e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_PWR_EnterSTOPMode+0x60>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2203      	movs	r2, #3
 80038f4:	4393      	bics	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_PWR_EnterSTOPMode+0x60>)
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_PWR_EnterSTOPMode+0x64>)
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_PWR_EnterSTOPMode+0x64>)
 800390c:	2104      	movs	r1, #4
 800390e:	430a      	orrs	r2, r1
 8003910:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003912:	1cfb      	adds	r3, r7, #3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800391a:	bf30      	wfi
 800391c:	e002      	b.n	8003924 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800391e:	bf40      	sev
    __WFE();
 8003920:	bf20      	wfe
    __WFE();
 8003922:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_PWR_EnterSTOPMode+0x64>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <HAL_PWR_EnterSTOPMode+0x64>)
 800392a:	2104      	movs	r1, #4
 800392c:	438a      	bics	r2, r1
 800392e:	611a      	str	r2, [r3, #16]
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40007000 	.word	0x40007000
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e301      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	4013      	ands	r3, r2
 800395a:	d100      	bne.n	800395e <HAL_RCC_OscConfig+0x1e>
 800395c:	e08d      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800395e:	4bc3      	ldr	r3, [pc, #780]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	220c      	movs	r2, #12
 8003964:	4013      	ands	r3, r2
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00e      	beq.n	8003988 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800396a:	4bc0      	ldr	r3, [pc, #768]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	220c      	movs	r2, #12
 8003970:	4013      	ands	r3, r2
 8003972:	2b08      	cmp	r3, #8
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x64>
 8003976:	4bbd      	ldr	r3, [pc, #756]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	401a      	ands	r2, r3
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	429a      	cmp	r2, r3
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4bb8      	ldr	r3, [pc, #736]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	4013      	ands	r3, r2
 8003992:	d100      	bne.n	8003996 <HAL_RCC_OscConfig+0x56>
 8003994:	e070      	b.n	8003a78 <HAL_RCC_OscConfig+0x138>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d000      	beq.n	80039a0 <HAL_RCC_OscConfig+0x60>
 800399e:	e06b      	b.n	8003a78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e2d8      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x7c>
 80039ac:	4baf      	ldr	r3, [pc, #700]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4bae      	ldr	r3, [pc, #696]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	0249      	lsls	r1, r1, #9
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e02f      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <HAL_RCC_OscConfig+0x9e>
 80039c4:	4ba9      	ldr	r3, [pc, #676]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4ba8      	ldr	r3, [pc, #672]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039ca:	49a9      	ldr	r1, [pc, #676]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	4ba6      	ldr	r3, [pc, #664]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039d6:	49a7      	ldr	r1, [pc, #668]	; (8003c74 <HAL_RCC_OscConfig+0x334>)
 80039d8:	400a      	ands	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e01e      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d10e      	bne.n	8003a04 <HAL_RCC_OscConfig+0xc4>
 80039e6:	4ba1      	ldr	r3, [pc, #644]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	02c9      	lsls	r1, r1, #11
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	4b9d      	ldr	r3, [pc, #628]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b9c      	ldr	r3, [pc, #624]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0249      	lsls	r1, r1, #9
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 8003a04:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b98      	ldr	r3, [pc, #608]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	4999      	ldr	r1, [pc, #612]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	4b96      	ldr	r3, [pc, #600]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b95      	ldr	r3, [pc, #596]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a16:	4997      	ldr	r1, [pc, #604]	; (8003c74 <HAL_RCC_OscConfig+0x334>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d014      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe f8fe 	bl	8001c24 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2e:	f7fe f8f9 	bl	8001c24 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e28a      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0xee>
 8003a4c:	e015      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f8e9 	bl	8001c24 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe f8e4 	bl	8001c24 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e275      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b80      	ldr	r3, [pc, #512]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x118>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d100      	bne.n	8003a86 <HAL_RCC_OscConfig+0x146>
 8003a84:	e069      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a86:	4b79      	ldr	r3, [pc, #484]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	220c      	movs	r2, #12
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x196>
 8003a9c:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	025b      	lsls	r3, r3, #9
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x17e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e24b      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	22f8      	movs	r2, #248	; 0xf8
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	00da      	lsls	r2, r3, #3
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad4:	e041      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f89b 	bl	8001c24 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fe f896 	bl	8001c24 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e227      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d0f1      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	22f8      	movs	r2, #248	; 0xf8
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00da      	lsls	r2, r3, #3
 8003b20:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e018      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	438a      	bics	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe f876 	bl	8001c24 <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fe f871 	bl	8001c24 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e202      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d1f1      	bne.n	8003b3e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4013      	ands	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe f854 	bl	8001c24 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe f84f 	bl	8001c24 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1e0      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0f1      	beq.n	8003b82 <HAL_RCC_OscConfig+0x242>
 8003b9e:	e018      	b.n	8003bd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	438a      	bics	r2, r1
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bac:	f7fe f83a 	bl	8001c24 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fe f835 	bl	8001c24 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e1c6      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f1      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d100      	bne.n	8003bde <HAL_RCC_OscConfig+0x29e>
 8003bdc:	e0b4      	b.n	8003d48 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	201f      	movs	r0, #31
 8003be0:	183b      	adds	r3, r7, r0
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	055b      	lsls	r3, r3, #21
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d110      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0549      	lsls	r1, r1, #21
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	055b      	lsls	r3, r3, #21
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d11a      	bne.n	8003c56 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0049      	lsls	r1, r1, #1
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fff9 	bl	8001c24 <HAL_GetTick>
 8003c32:	0003      	movs	r3, r0
 8003c34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c38:	f7fd fff4 	bl	8001c24 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e185      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10e      	bne.n	8003c7c <HAL_RCC_OscConfig+0x33c>
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <HAL_RCC_OscConfig+0x32c>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	430a      	orrs	r2, r1
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	e035      	b.n	8003cd8 <HAL_RCC_OscConfig+0x398>
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	fffbffff 	.word	0xfffbffff
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x35e>
 8003c84:	4bb6      	ldr	r3, [pc, #728]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	4bb5      	ldr	r3, [pc, #724]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	621a      	str	r2, [r3, #32]
 8003c90:	4bb3      	ldr	r3, [pc, #716]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	4bb2      	ldr	r3, [pc, #712]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003c96:	2104      	movs	r1, #4
 8003c98:	438a      	bics	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x398>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x380>
 8003ca6:	4bae      	ldr	r3, [pc, #696]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003ca8:	6a1a      	ldr	r2, [r3, #32]
 8003caa:	4bad      	ldr	r3, [pc, #692]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cac:	2104      	movs	r1, #4
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	621a      	str	r2, [r3, #32]
 8003cb2:	4bab      	ldr	r3, [pc, #684]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	4baa      	ldr	r3, [pc, #680]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	621a      	str	r2, [r3, #32]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x398>
 8003cc0:	4ba7      	ldr	r3, [pc, #668]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	4ba6      	ldr	r3, [pc, #664]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	438a      	bics	r2, r1
 8003cca:	621a      	str	r2, [r3, #32]
 8003ccc:	4ba4      	ldr	r3, [pc, #656]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	4ba3      	ldr	r3, [pc, #652]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d014      	beq.n	8003d0a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fd ffa0 	bl	8001c24 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e009      	b.n	8003cfe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd ff9b 	bl	8001c24 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	4a9b      	ldr	r2, [pc, #620]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e12b      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b98      	ldr	r3, [pc, #608]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2202      	movs	r2, #2
 8003d04:	4013      	ands	r3, r2
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x3aa>
 8003d08:	e013      	b.n	8003d32 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd ff8b 	bl	8001c24 <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e009      	b.n	8003d28 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd ff86 	bl	8001c24 <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	4a91      	ldr	r2, [pc, #580]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e116      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d28:	4b8d      	ldr	r3, [pc, #564]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d32:	231f      	movs	r3, #31
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	4b87      	ldr	r3, [pc, #540]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d42:	4989      	ldr	r1, [pc, #548]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d12a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5e:	4b80      	ldr	r3, [pc, #512]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d60:	2104      	movs	r1, #4
 8003d62:	430a      	orrs	r2, r1
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d66:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fd ff57 	bl	8001c24 <HAL_GetTick>
 8003d76:	0003      	movs	r3, r0
 8003d78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d7c:	f7fd ff52 	bl	8001c24 <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0e3      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d8e:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	2202      	movs	r2, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0f1      	beq.n	8003d7c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d98:	4b71      	ldr	r3, [pc, #452]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	22f8      	movs	r2, #248	; 0xf8
 8003d9e:	4393      	bics	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	00da      	lsls	r2, r3, #3
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34
 8003dae:	e034      	b.n	8003e1a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	3305      	adds	r3, #5
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003db8:	4b69      	ldr	r3, [pc, #420]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dc4:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	22f8      	movs	r2, #248	; 0xf8
 8003dca:	4393      	bics	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	00da      	lsls	r2, r3, #3
 8003dd4:	4b62      	ldr	r3, [pc, #392]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dda:	e01e      	b.n	8003e1a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ddc:	4b60      	ldr	r3, [pc, #384]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de0:	4b5f      	ldr	r3, [pc, #380]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003de2:	2104      	movs	r1, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003de8:	4b5d      	ldr	r3, [pc, #372]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dec:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7fd ff16 	bl	8001c24 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dfe:	f7fd ff11 	bl	8001c24 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0a2      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e10:	4b53      	ldr	r3, [pc, #332]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2202      	movs	r2, #2
 8003e16:	4013      	ands	r3, r2
 8003e18:	d1f1      	bne.n	8003dfe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d100      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4e4>
 8003e22:	e097      	b.n	8003f54 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e24:	4b4e      	ldr	r3, [pc, #312]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	220c      	movs	r2, #12
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d100      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4f2>
 8003e30:	e06b      	b.n	8003f0a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d14c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b48      	ldr	r3, [pc, #288]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e40:	494a      	ldr	r1, [pc, #296]	; (8003f6c <HAL_RCC_OscConfig+0x62c>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fd feed 	bl	8001c24 <HAL_GetTick>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd fee8 	bl	8001c24 <HAL_GetTick>
 8003e54:	0002      	movs	r2, r0
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e079      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	049b      	lsls	r3, r3, #18
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	220f      	movs	r2, #15
 8003e74:	4393      	bics	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4a3a      	ldr	r2, [pc, #232]	; (8003f70 <HAL_RCC_OscConfig+0x630>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	431a      	orrs	r2, r3
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	0449      	lsls	r1, r1, #17
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd febb 	bl	8001c24 <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd feb6 	bl	8001c24 <HAL_GetTick>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e047      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	049b      	lsls	r3, r3, #18
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x574>
 8003ed2:	e03f      	b.n	8003f54 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003eda:	4924      	ldr	r1, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x62c>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fea0 	bl	8001c24 <HAL_GetTick>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fd fe9b 	bl	8001c24 <HAL_GetTick>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e02c      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	049b      	lsls	r3, r3, #18
 8003f04:	4013      	ands	r3, r2
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x5aa>
 8003f08:	e024      	b.n	8003f54 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e01f      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	025b      	lsls	r3, r3, #9
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d10e      	bne.n	8003f50 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	220f      	movs	r2, #15
 8003f36:	401a      	ands	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	23f0      	movs	r3, #240	; 0xf0
 8003f44:	039b      	lsls	r3, r3, #14
 8003f46:	401a      	ands	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b008      	add	sp, #32
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	40021000 	.word	0x40021000
 8003f64:	00001388 	.word	0x00001388
 8003f68:	efffffff 	.word	0xefffffff
 8003f6c:	feffffff 	.word	0xfeffffff
 8003f70:	ffc2ffff 	.word	0xffc2ffff

08003f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b3      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d911      	bls.n	8003fba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e09a      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d006      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fce:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8003fd4:	21e0      	movs	r1, #224	; 0xe0
 8003fd6:	00c9      	lsls	r1, r1, #3
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fdc:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	22f0      	movs	r2, #240	; 0xf0
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	4013      	ands	r3, r2
 800400c:	d114      	bne.n	8004038 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06e      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	049b      	lsls	r3, r3, #18
 8004022:	4013      	ands	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e062      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	4013      	ands	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e05b      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004038:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	4393      	bics	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404c:	f7fd fdea 	bl	8001c24 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e009      	b.n	800406a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd fde5 	bl	8001c24 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <HAL_RCC_ClockConfig+0x18c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e042      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	220c      	movs	r2, #12
 8004070:	401a      	ands	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1ec      	bne.n	8004056 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d211      	bcs.n	80040ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2201      	movs	r2, #1
 8004090:	4393      	bics	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409c:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x184>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e020      	b.n	80040f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2204      	movs	r2, #4
 80040b4:	4013      	ands	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <HAL_RCC_ClockConfig+0x190>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040cc:	f000 f820 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040d0:	0001      	movs	r1, r0
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x188>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	220f      	movs	r2, #15
 80040da:	4013      	ands	r3, r2
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x194>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	000a      	movs	r2, r1
 80040e2:	40da      	lsrs	r2, r3
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x198>)
 80040e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040e8:	2003      	movs	r0, #3
 80040ea:	f7fd fd55 	bl	8001b98 <HAL_InitTick>
  
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40022000 	.word	0x40022000
 80040fc:	40021000 	.word	0x40021000
 8004100:	00001388 	.word	0x00001388
 8004104:	fffff8ff 	.word	0xfffff8ff
 8004108:	08006e1c 	.word	0x08006e1c
 800410c:	20000024 	.word	0x20000024

08004110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b08f      	sub	sp, #60	; 0x3c
 8004114:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004116:	2314      	movs	r3, #20
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800411c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800411e:	c313      	stmia	r3!, {r0, r1, r4}
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004124:	1d3b      	adds	r3, r7, #4
 8004126:	4a29      	ldr	r2, [pc, #164]	; (80041cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004128:	ca13      	ldmia	r2!, {r0, r1, r4}
 800412a:	c313      	stmia	r3!, {r0, r1, r4}
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004134:	2300      	movs	r3, #0
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
 8004138:	2300      	movs	r3, #0
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	220c      	movs	r2, #12
 800414e:	4013      	ands	r3, r2
 8004150:	2b04      	cmp	r3, #4
 8004152:	d002      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x4a>
 8004154:	2b08      	cmp	r3, #8
 8004156:	d003      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x50>
 8004158:	e02d      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800415e:	e02d      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	220f      	movs	r2, #15
 8004166:	4013      	ands	r3, r2
 8004168:	2214      	movs	r2, #20
 800416a:	18ba      	adds	r2, r7, r2
 800416c:	5cd3      	ldrb	r3, [r2, r3]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	220f      	movs	r2, #15
 8004176:	4013      	ands	r3, r2
 8004178:	1d3a      	adds	r2, r7, #4
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	4013      	ands	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	4812      	ldr	r0, [pc, #72]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800418c:	f7fb ffbc 	bl	8000108 <__udivsi3>
 8004190:	0003      	movs	r3, r0
 8004192:	001a      	movs	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	4353      	muls	r3, r2
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	e009      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800419c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800419e:	000a      	movs	r2, r1
 80041a0:	0152      	lsls	r2, r2, #5
 80041a2:	1a52      	subs	r2, r2, r1
 80041a4:	0193      	lsls	r3, r2, #6
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	185b      	adds	r3, r3, r1
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b00f      	add	sp, #60	; 0x3c
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	08006cac 	.word	0x08006cac
 80041cc:	08006cbc 	.word	0x08006cbc
 80041d0:	40021000 	.word	0x40021000
 80041d4:	007a1200 	.word	0x007a1200

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000024 	.word	0x20000024

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041f0:	f7ff fff2 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f4:	0001      	movs	r1, r0
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	2207      	movs	r2, #7
 80041fe:	4013      	ands	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	40d9      	lsrs	r1, r3
 8004206:	000b      	movs	r3, r1
}    
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40021000 	.word	0x40021000
 8004214:	08006e2c 	.word	0x08006e2c

08004218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	025b      	lsls	r3, r3, #9
 8004230:	4013      	ands	r3, r2
 8004232:	d100      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004234:	e08e      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2017      	movs	r0, #23
 8004238:	183b      	adds	r3, r7, r0
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	055b      	lsls	r3, r3, #21
 8004246:	4013      	ands	r3, r2
 8004248:	d110      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	0549      	lsls	r1, r1, #21
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	055b      	lsls	r3, r3, #21
 8004260:	4013      	ands	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	183b      	adds	r3, r7, r0
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4013      	ands	r3, r2
 8004276:	d11a      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004278:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	0049      	lsls	r1, r1, #1
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fd fccd 	bl	8001c24 <HAL_GetTick>
 800428a:	0003      	movs	r3, r0
 800428c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fd fcc8 	bl	8001c24 <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e087      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4013      	ands	r3, r2
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	23c0      	movs	r3, #192	; 0xc0
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d034      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	23c0      	movs	r3, #192	; 0xc0
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d02c      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d0:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042dc:	6a1a      	ldr	r2, [r3, #32]
 80042de:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	0249      	lsls	r1, r1, #9
 80042e4:	430a      	orrs	r2, r1
 80042e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042ee:	4936      	ldr	r1, [pc, #216]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd fc8f 	bl	8001c24 <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	e009      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd fc8a 	bl	8001c24 <HAL_GetTick>
 8004310:	0002      	movs	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e048      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	2202      	movs	r2, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d0f0      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004330:	4013      	ands	r3, r2
 8004332:	0019      	movs	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800433a:	430a      	orrs	r2, r1
 800433c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800433e:	2317      	movs	r3, #23
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800434e:	4920      	ldr	r1, [pc, #128]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004350:	400a      	ands	r2, r1
 8004352:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4013      	ands	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	2203      	movs	r2, #3
 8004364:	4393      	bics	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436e:	430a      	orrs	r2, r1
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2220      	movs	r2, #32
 8004378:	4013      	ands	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2210      	movs	r2, #16
 8004382:	4393      	bics	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438c:	430a      	orrs	r2, r1
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4013      	ands	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800439c:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	2240      	movs	r2, #64	; 0x40
 80043a2:	4393      	bics	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	fffffcff 	.word	0xfffffcff
 80043c8:	fffeffff 	.word	0xfffeffff
 80043cc:	00001388 	.word	0x00001388
 80043d0:	efffffff 	.word	0xefffffff

080043d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0a8      	b.n	8004538 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	2382      	movs	r3, #130	; 0x82
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d009      	beq.n	800440e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	e005      	b.n	800440e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	225d      	movs	r2, #93	; 0x5d
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	225c      	movs	r2, #92	; 0x5c
 8004424:	2100      	movs	r1, #0
 8004426:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0018      	movs	r0, r3
 800442c:	f7fd f9f4 	bl	8001818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	225d      	movs	r2, #93	; 0x5d
 8004434:	2102      	movs	r1, #2
 8004436:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	438a      	bics	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	23e0      	movs	r3, #224	; 0xe0
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	429a      	cmp	r2, r3
 8004452:	d902      	bls.n	800445a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	015b      	lsls	r3, r3, #5
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	23f0      	movs	r3, #240	; 0xf0
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	429a      	cmp	r2, r3
 800446a:	d008      	beq.n	800447e <HAL_SPI_Init+0xaa>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	23e0      	movs	r3, #224	; 0xe0
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	429a      	cmp	r2, r3
 8004476:	d002      	beq.n	800447e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	2382      	movs	r3, #130	; 0x82
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6899      	ldr	r1, [r3, #8]
 800448c:	2384      	movs	r3, #132	; 0x84
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	400b      	ands	r3, r1
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2102      	movs	r1, #2
 800449a:	400b      	ands	r3, r1
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2101      	movs	r1, #1
 80044a4:	400b      	ands	r3, r1
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6999      	ldr	r1, [r3, #24]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	400b      	ands	r3, r1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2138      	movs	r1, #56	; 0x38
 80044ba:	400b      	ands	r3, r1
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	400b      	ands	r3, r1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	0011      	movs	r1, r2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	401a      	ands	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	2204      	movs	r2, #4
 80044e4:	401a      	ands	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2110      	movs	r1, #16
 80044ec:	400b      	ands	r3, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	2108      	movs	r1, #8
 80044f6:	400b      	ands	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	23f0      	movs	r3, #240	; 0xf0
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	400b      	ands	r3, r1
 8004504:	431a      	orrs	r2, r3
 8004506:	0011      	movs	r1, r2
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	015b      	lsls	r3, r3, #5
 800450e:	401a      	ands	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4907      	ldr	r1, [pc, #28]	; (8004540 <HAL_SPI_Init+0x16c>)
 8004524:	400a      	ands	r2, r1
 8004526:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	225d      	movs	r2, #93	; 0x5d
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b004      	add	sp, #16
 800453e:	bd80      	pop	{r7, pc}
 8004540:	fffff7ff 	.word	0xfffff7ff

08004544 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	1dbb      	adds	r3, r7, #6
 8004552:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004554:	231f      	movs	r3, #31
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	225c      	movs	r2, #92	; 0x5c
 8004560:	5c9b      	ldrb	r3, [r3, r2]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_SPI_Transmit+0x26>
 8004566:	2302      	movs	r3, #2
 8004568:	e140      	b.n	80047ec <HAL_SPI_Transmit+0x2a8>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	225c      	movs	r2, #92	; 0x5c
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004572:	f7fd fb57 	bl	8001c24 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800457a:	2316      	movs	r3, #22
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	1dba      	adds	r2, r7, #6
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	225d      	movs	r2, #93	; 0x5d
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d004      	beq.n	800459a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004590:	231f      	movs	r3, #31
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	2202      	movs	r2, #2
 8004596:	701a      	strb	r2, [r3, #0]
    goto error;
 8004598:	e11d      	b.n	80047d6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_SPI_Transmit+0x64>
 80045a0:	1dbb      	adds	r3, r7, #6
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80045a8:	231f      	movs	r3, #31
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80045b0:	e111      	b.n	80047d6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	225d      	movs	r2, #93	; 0x5d
 80045b6:	2103      	movs	r1, #3
 80045b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1dba      	adds	r2, r7, #6
 80045ca:	8812      	ldrh	r2, [r2, #0]
 80045cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1dba      	adds	r2, r7, #6
 80045d2:	8812      	ldrh	r2, [r2, #0]
 80045d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2244      	movs	r2, #68	; 0x44
 80045e0:	2100      	movs	r1, #0
 80045e2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2246      	movs	r2, #70	; 0x46
 80045e8:	2100      	movs	r1, #0
 80045ea:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	429a      	cmp	r2, r3
 8004602:	d110      	bne.n	8004626 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	438a      	bics	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2180      	movs	r1, #128	; 0x80
 8004620:	01c9      	lsls	r1, r1, #7
 8004622:	430a      	orrs	r2, r1
 8004624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	4013      	ands	r3, r2
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d007      	beq.n	8004644 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2140      	movs	r1, #64	; 0x40
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	23e0      	movs	r3, #224	; 0xe0
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	429a      	cmp	r2, r3
 800464e:	d94e      	bls.n	80046ee <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <HAL_SPI_Transmit+0x11e>
 8004658:	2316      	movs	r3, #22
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d13f      	bne.n	80046e2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004686:	e02c      	b.n	80046e2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2202      	movs	r2, #2
 8004690:	4013      	ands	r3, r2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d112      	bne.n	80046bc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ba:	e012      	b.n	80046e2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046bc:	f7fd fab2 	bl	8001c24 <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d802      	bhi.n	80046d2 <HAL_SPI_Transmit+0x18e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Transmit+0x194>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	231f      	movs	r3, #31
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2203      	movs	r2, #3
 80046de:	701a      	strb	r2, [r3, #0]
          goto error;
 80046e0:	e079      	b.n	80047d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1cd      	bne.n	8004688 <HAL_SPI_Transmit+0x144>
 80046ec:	e04f      	b.n	800478e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <HAL_SPI_Transmit+0x1bc>
 80046f6:	2316      	movs	r3, #22
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d141      	bne.n	8004784 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	7812      	ldrb	r2, [r2, #0]
 800470c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004726:	e02d      	b.n	8004784 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2202      	movs	r2, #2
 8004730:	4013      	ands	r3, r2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d113      	bne.n	800475e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800475c:	e012      	b.n	8004784 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475e:	f7fd fa61 	bl	8001c24 <HAL_GetTick>
 8004762:	0002      	movs	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d802      	bhi.n	8004774 <HAL_SPI_Transmit+0x230>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	d102      	bne.n	800477a <HAL_SPI_Transmit+0x236>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800477a:	231f      	movs	r3, #31
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2203      	movs	r2, #3
 8004780:	701a      	strb	r2, [r3, #0]
          goto error;
 8004782:	e028      	b.n	80047d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1cc      	bne.n	8004728 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f95d 	bl	8004a54 <SPI_EndRxTxTransaction>
 800479a:	1e03      	subs	r3, r0, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80047ca:	231f      	movs	r3, #31
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	e000      	b.n	80047d6 <HAL_SPI_Transmit+0x292>
  }

error:
 80047d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	225d      	movs	r2, #93	; 0x5d
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	225c      	movs	r2, #92	; 0x5c
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047e6:	231f      	movs	r3, #31
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b008      	add	sp, #32
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004804:	f7fd fa0e 	bl	8001c24 <HAL_GetTick>
 8004808:	0002      	movs	r2, r0
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	18d3      	adds	r3, r2, r3
 8004812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004814:	f7fd fa06 	bl	8001c24 <HAL_GetTick>
 8004818:	0003      	movs	r3, r0
 800481a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800481c:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	015b      	lsls	r3, r3, #5
 8004822:	0d1b      	lsrs	r3, r3, #20
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	4353      	muls	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800482a:	e058      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	d055      	beq.n	80048de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004832:	f7fd f9f7 	bl	8001c24 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d142      	bne.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	21e0      	movs	r1, #224	; 0xe0
 8004854:	438a      	bics	r2, r1
 8004856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2382      	movs	r3, #130	; 0x82
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	429a      	cmp	r2, r3
 8004862:	d113      	bne.n	800488c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	429a      	cmp	r2, r3
 800486e:	d005      	beq.n	800487c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	438a      	bics	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	019b      	lsls	r3, r3, #6
 8004894:	429a      	cmp	r2, r3
 8004896:	d110      	bne.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	491a      	ldr	r1, [pc, #104]	; (800490c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	0189      	lsls	r1, r1, #6
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	225d      	movs	r2, #93	; 0x5d
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	225c      	movs	r2, #92	; 0x5c
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e017      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	425a      	negs	r2, r3
 80048ee:	4153      	adcs	r3, r2
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	001a      	movs	r2, r3
 80048f4:	1dfb      	adds	r3, r7, #7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d197      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b008      	add	sp, #32
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	20000024 	.word	0x20000024
 800490c:	ffffdfff 	.word	0xffffdfff

08004910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800491e:	2317      	movs	r3, #23
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004926:	f7fd f97d 	bl	8001c24 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	18d3      	adds	r3, r2, r3
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004936:	f7fd f975 	bl	8001c24 <HAL_GetTick>
 800493a:	0003      	movs	r3, r0
 800493c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	0013      	movs	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	189b      	adds	r3, r3, r2
 8004950:	00da      	lsls	r2, r3, #3
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	0d1b      	lsrs	r3, r3, #20
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	4353      	muls	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800495c:	e068      	b.n	8004a30 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	23c0      	movs	r3, #192	; 0xc0
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	429a      	cmp	r2, r3
 8004966:	d10a      	bne.n	800497e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	2117      	movs	r1, #23
 8004976:	187b      	adds	r3, r7, r1
 8004978:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800497a:	187b      	adds	r3, r7, r1
 800497c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	d055      	beq.n	8004a30 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004984:	f7fd f94e 	bl	8001c24 <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	429a      	cmp	r2, r3
 8004992:	d902      	bls.n	800499a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d142      	bne.n	8004a20 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	21e0      	movs	r1, #224	; 0xe0
 80049a6:	438a      	bics	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	2382      	movs	r3, #130	; 0x82
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d113      	bne.n	80049de <SPI_WaitFifoStateUntilTimeout+0xce>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	429a      	cmp	r2, r3
 80049c0:	d005      	beq.n	80049ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d107      	bne.n	80049de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2140      	movs	r1, #64	; 0x40
 80049da:	438a      	bics	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d110      	bne.n	8004a0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0189      	lsls	r1, r1, #6
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	225d      	movs	r2, #93	; 0x5d
 8004a10:	2101      	movs	r1, #1
 8004a12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	225c      	movs	r2, #92	; 0x5c
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e010      	b.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d18e      	bne.n	800495e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b00a      	add	sp, #40	; 0x28
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000024 	.word	0x20000024
 8004a50:	ffffdfff 	.word	0xffffdfff

08004a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	23c0      	movs	r3, #192	; 0xc0
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f7ff ff4e 	bl	8004910 <SPI_WaitFifoStateUntilTimeout>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d007      	beq.n	8004a88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e027      	b.n	8004ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	0013      	movs	r3, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	f7ff fead 	bl	80047f4 <SPI_WaitFlagStateUntilTimeout>
 8004a9a:	1e03      	subs	r3, r0, #0
 8004a9c:	d007      	beq.n	8004aae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e014      	b.n	8004ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	23c0      	movs	r3, #192	; 0xc0
 8004ab2:	00d9      	lsls	r1, r3, #3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	0013      	movs	r3, r2
 8004abc:	2200      	movs	r2, #0
 8004abe:	f7ff ff27 	bl	8004910 <SPI_WaitFifoStateUntilTimeout>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d007      	beq.n	8004ad6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aca:	2220      	movs	r2, #32
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e000      	b.n	8004ad8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b004      	add	sp, #16
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e042      	b.n	8004b78 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	223d      	movs	r2, #61	; 0x3d
 8004af6:	5c9b      	ldrb	r3, [r3, r2]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d107      	bne.n	8004b0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	223c      	movs	r2, #60	; 0x3c
 8004b02:	2100      	movs	r1, #0
 8004b04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fc ff0d 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	223d      	movs	r2, #61	; 0x3d
 8004b12:	2102      	movs	r1, #2
 8004b14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	0019      	movs	r1, r3
 8004b20:	0010      	movs	r0, r2
 8004b22:	f000 fb37 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2246      	movs	r2, #70	; 0x46
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	223e      	movs	r2, #62	; 0x3e
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	223f      	movs	r2, #63	; 0x3f
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	2101      	movs	r1, #1
 8004b44:	5499      	strb	r1, [r3, r2]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2241      	movs	r2, #65	; 0x41
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2242      	movs	r2, #66	; 0x42
 8004b52:	2101      	movs	r1, #1
 8004b54:	5499      	strb	r1, [r3, r2]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2243      	movs	r2, #67	; 0x43
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2244      	movs	r2, #68	; 0x44
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2245      	movs	r2, #69	; 0x45
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223d      	movs	r2, #61	; 0x3d
 8004b72:	2101      	movs	r1, #1
 8004b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	230f      	movs	r3, #15
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <HAL_TIM_OC_Start_IT+0x2a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	223e      	movs	r2, #62	; 0x3e
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	4193      	sbcs	r3, r2
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e01f      	b.n	8004bea <HAL_TIM_OC_Start_IT+0x6a>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d108      	bne.n	8004bc2 <HAL_TIM_OC_Start_IT+0x42>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	223f      	movs	r2, #63	; 0x3f
 8004bb4:	5c9b      	ldrb	r3, [r3, r2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	1e5a      	subs	r2, r3, #1
 8004bbc:	4193      	sbcs	r3, r2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_OC_Start_IT+0x6a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d108      	bne.n	8004bda <HAL_TIM_OC_Start_IT+0x5a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	5c9b      	ldrb	r3, [r3, r2]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	4193      	sbcs	r3, r2
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e007      	b.n	8004bea <HAL_TIM_OC_Start_IT+0x6a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	4193      	sbcs	r3, r2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0b7      	b.n	8004d62 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_OC_Start_IT+0x82>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223e      	movs	r2, #62	; 0x3e
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	5499      	strb	r1, [r3, r2]
 8004c00:	e013      	b.n	8004c2a <HAL_TIM_OC_Start_IT+0xaa>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_OC_Start_IT+0x92>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	223f      	movs	r2, #63	; 0x3f
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	5499      	strb	r1, [r3, r2]
 8004c10:	e00b      	b.n	8004c2a <HAL_TIM_OC_Start_IT+0xaa>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_OC_Start_IT+0xa2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2240      	movs	r2, #64	; 0x40
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]
 8004c20:	e003      	b.n	8004c2a <HAL_TIM_OC_Start_IT+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2241      	movs	r2, #65	; 0x41
 8004c26:	2102      	movs	r1, #2
 8004c28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	d02a      	beq.n	8004c86 <HAL_TIM_OC_Start_IT+0x106>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d830      	bhi.n	8004c98 <HAL_TIM_OC_Start_IT+0x118>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d01b      	beq.n	8004c74 <HAL_TIM_OC_Start_IT+0xf4>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d82a      	bhi.n	8004c98 <HAL_TIM_OC_Start_IT+0x118>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_TIM_OC_Start_IT+0xd0>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_OC_Start_IT+0xe2>
 8004c4e:	e023      	b.n	8004c98 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]
      break;
 8004c60:	e01f      	b.n	8004ca2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	60da      	str	r2, [r3, #12]
      break;
 8004c72:	e016      	b.n	8004ca2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2108      	movs	r1, #8
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]
      break;
 8004c84:	e00d      	b.n	8004ca2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2110      	movs	r1, #16
 8004c92:	430a      	orrs	r2, r1
 8004c94:	60da      	str	r2, [r3, #12]
      break;
 8004c96:	e004      	b.n	8004ca2 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004c98:	230f      	movs	r3, #15
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
      break;
 8004ca0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004ca2:	230f      	movs	r3, #15
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d157      	bne.n	8004d5c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 fb87 	bl	80053c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <HAL_TIM_OC_Start_IT+0x1ec>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIM_OC_Start_IT+0x162>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIM_OC_Start_IT+0x162>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a28      	ldr	r2, [pc, #160]	; (8004d74 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIM_OC_Start_IT+0x162>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_OC_Start_IT+0x166>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_OC_Start_IT+0x168>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	0209      	lsls	r1, r1, #8
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1a      	ldr	r2, [pc, #104]	; (8004d6c <HAL_TIM_OC_Start_IT+0x1ec>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	05db      	lsls	r3, r3, #23
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d009      	beq.n	8004d28 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <HAL_TIM_OC_Start_IT+0x1fc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d111      	bne.n	8004d4c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2207      	movs	r2, #7
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	d010      	beq.n	8004d5c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	430a      	orrs	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	e007      	b.n	8004d5c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2101      	movs	r1, #1
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d5c:	230f      	movs	r3, #15
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800
 8004d7c:	40000400 	.word	0x40000400

08004d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d124      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d11d      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2203      	movs	r2, #3
 8004daa:	4252      	negs	r2, r2
 8004dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2203      	movs	r2, #3
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f9ce 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e007      	b.n	8004dda <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7fb fa39 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 f9cd 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2204      	movs	r2, #4
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d125      	bne.n	8004e3a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2204      	movs	r2, #4
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d11e      	bne.n	8004e3a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2205      	movs	r2, #5
 8004e02:	4252      	negs	r2, r2
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	23c0      	movs	r3, #192	; 0xc0
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4013      	ands	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f9a1 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004e22:	e007      	b.n	8004e34 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7fb fa0c 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 f9a0 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2208      	movs	r2, #8
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d124      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d11d      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2209      	movs	r2, #9
 8004e5c:	4252      	negs	r2, r2
 8004e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2204      	movs	r2, #4
 8004e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f975 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004e7a:	e007      	b.n	8004e8c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fb f9e0 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 f974 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2210      	movs	r2, #16
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d125      	bne.n	8004eec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d11e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2211      	movs	r2, #17
 8004eb4:	4252      	negs	r2, r2
 8004eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2208      	movs	r2, #8
 8004ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	23c0      	movs	r3, #192	; 0xc0
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 f948 	bl	8005164 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e007      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fb f9b3 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 f947 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10f      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d108      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	4252      	negs	r2, r2
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f000 f91d 	bl	8005154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d10f      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d108      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2281      	movs	r2, #129	; 0x81
 8004f3c:	4252      	negs	r2, r2
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 faca 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d10f      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2240      	movs	r2, #64	; 0x40
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d108      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2241      	movs	r2, #65	; 0x41
 8004f6a:	4252      	negs	r2, r2
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 f907 	bl	8005184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d10f      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d108      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2221      	movs	r2, #33	; 0x21
 8004f98:	4252      	negs	r2, r2
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fa94 	bl	80054cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	223c      	movs	r2, #60	; 0x3c
 8004fc2:	5c9b      	ldrb	r3, [r3, r2]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x20>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0bc      	b.n	8005146 <HAL_TIM_ConfigClockSource+0x19a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	223c      	movs	r2, #60	; 0x3c
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	223d      	movs	r2, #61	; 0x3d
 8004fd8:	2102      	movs	r1, #2
 8004fda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2277      	movs	r2, #119	; 0x77
 8004fe8:	4393      	bics	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	0192      	lsls	r2, r2, #6
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xde>
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	0192      	lsls	r2, r2, #6
 800500c:	4293      	cmp	r3, r2
 800500e:	d900      	bls.n	8005012 <HAL_TIM_ConfigClockSource+0x66>
 8005010:	e088      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	0152      	lsls	r2, r2, #5
 8005016:	4293      	cmp	r3, r2
 8005018:	d100      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x70>
 800501a:	e088      	b.n	800512e <HAL_TIM_ConfigClockSource+0x182>
 800501c:	2280      	movs	r2, #128	; 0x80
 800501e:	0152      	lsls	r2, r2, #5
 8005020:	4293      	cmp	r3, r2
 8005022:	d900      	bls.n	8005026 <HAL_TIM_ConfigClockSource+0x7a>
 8005024:	e07e      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 8005026:	2b70      	cmp	r3, #112	; 0x70
 8005028:	d018      	beq.n	800505c <HAL_TIM_ConfigClockSource+0xb0>
 800502a:	d900      	bls.n	800502e <HAL_TIM_ConfigClockSource+0x82>
 800502c:	e07a      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 800502e:	2b60      	cmp	r3, #96	; 0x60
 8005030:	d04f      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x126>
 8005032:	d900      	bls.n	8005036 <HAL_TIM_ConfigClockSource+0x8a>
 8005034:	e076      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 8005036:	2b50      	cmp	r3, #80	; 0x50
 8005038:	d03b      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x106>
 800503a:	d900      	bls.n	800503e <HAL_TIM_ConfigClockSource+0x92>
 800503c:	e072      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d057      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x146>
 8005042:	d900      	bls.n	8005046 <HAL_TIM_ConfigClockSource+0x9a>
 8005044:	e06e      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 8005046:	2b30      	cmp	r3, #48	; 0x30
 8005048:	d063      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x166>
 800504a:	d86b      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d060      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x166>
 8005050:	d868      	bhi.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d05d      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x166>
 8005056:	2b10      	cmp	r3, #16
 8005058:	d05b      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x166>
 800505a:	e063      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f000 f98c 	bl	8005388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2277      	movs	r2, #119	; 0x77
 800507c:	4313      	orrs	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
      break;
 8005088:	e052      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 f975 	bl	8005388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	01c9      	lsls	r1, r1, #7
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
      break;
 80050b0:	e03e      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	001a      	movs	r2, r3
 80050c0:	f000 f8e8 	bl	8005294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2150      	movs	r1, #80	; 0x50
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 f942 	bl	8005354 <TIM_ITRx_SetConfig>
      break;
 80050d0:	e02e      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	001a      	movs	r2, r3
 80050e0:	f000 f906 	bl	80052f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2160      	movs	r1, #96	; 0x60
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f932 	bl	8005354 <TIM_ITRx_SetConfig>
      break;
 80050f0:	e01e      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	001a      	movs	r2, r3
 8005100:	f000 f8c8 	bl	8005294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	0018      	movs	r0, r3
 800510c:	f000 f922 	bl	8005354 <TIM_ITRx_SetConfig>
      break;
 8005110:	e00e      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	0019      	movs	r1, r3
 800511c:	0010      	movs	r0, r2
 800511e:	f000 f919 	bl	8005354 <TIM_ITRx_SetConfig>
      break;
 8005122:	e005      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005124:	230f      	movs	r3, #15
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800512e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223d      	movs	r2, #61	; 0x3d
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	223c      	movs	r2, #60	; 0x3c
 800513c:	2100      	movs	r1, #0
 800513e:	5499      	strb	r1, [r3, r2]

  return status;
 8005140:	230f      	movs	r3, #15
 8005142:	18fb      	adds	r3, r7, r3
 8005144:	781b      	ldrb	r3, [r3, #0]
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	ffff00ff 	.word	0xffff00ff

08005154 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	46bd      	mov	sp, r7
 8005170:	b002      	add	sp, #8
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b002      	add	sp, #8
 8005192:	bd80      	pop	{r7, pc}

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a34      	ldr	r2, [pc, #208]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d008      	beq.n	80051be <TIM_Base_SetConfig+0x2a>
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	05db      	lsls	r3, r3, #23
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x2a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <TIM_Base_SetConfig+0xe8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2270      	movs	r2, #112	; 0x70
 80051c2:	4393      	bics	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a29      	ldr	r2, [pc, #164]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d018      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	05db      	lsls	r3, r3, #23
 80051de:	429a      	cmp	r2, r3
 80051e0:	d013      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <TIM_Base_SetConfig+0xe8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a24      	ldr	r2, [pc, #144]	; (8005280 <TIM_Base_SetConfig+0xec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <TIM_Base_SetConfig+0xf0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <TIM_Base_SetConfig+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0x76>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <TIM_Base_SetConfig+0xf8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <TIM_Base_SetConfig+0xfc>)
 800520e:	4013      	ands	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	4393      	bics	r3, r2
 8005222:	001a      	movs	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <TIM_Base_SetConfig+0xe4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0xce>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <TIM_Base_SetConfig+0xf0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0xce>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <TIM_Base_SetConfig+0xf4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0xce>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a0b      	ldr	r2, [pc, #44]	; (800528c <TIM_Base_SetConfig+0xf8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d103      	bne.n	800526a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	615a      	str	r2, [r3, #20]
}
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b004      	add	sp, #16
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40000400 	.word	0x40000400
 8005280:	40002000 	.word	0x40002000
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800
 8005290:	fffffcff 	.word	0xfffffcff

08005294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4393      	bics	r3, r2
 80052ae:	001a      	movs	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	22f0      	movs	r2, #240	; 0xf0
 80052be:	4393      	bics	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	220a      	movs	r2, #10
 80052d0:	4393      	bics	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b006      	add	sp, #24
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	2210      	movs	r2, #16
 8005302:	4393      	bics	r3, r2
 8005304:	001a      	movs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4a0d      	ldr	r2, [pc, #52]	; (8005350 <TIM_TI2_ConfigInputStage+0x60>)
 800531a:	4013      	ands	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	22a0      	movs	r2, #160	; 0xa0
 800532c:	4393      	bics	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b006      	add	sp, #24
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	ffff0fff 	.word	0xffff0fff

08005354 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2270      	movs	r2, #112	; 0x70
 8005368:	4393      	bics	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	2207      	movs	r2, #7
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <TIM_ETR_SetConfig+0x3c>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	609a      	str	r2, [r3, #8]
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b006      	add	sp, #24
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	ffff00ff 	.word	0xffff00ff

080053c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	221f      	movs	r2, #31
 80053d8:	4013      	ands	r3, r2
 80053da:	2201      	movs	r2, #1
 80053dc:	409a      	lsls	r2, r3
 80053de:	0013      	movs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	43d2      	mvns	r2, r2
 80053ea:	401a      	ands	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	211f      	movs	r1, #31
 80053f8:	400b      	ands	r3, r1
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4099      	lsls	r1, r3
 80053fe:	000b      	movs	r3, r1
 8005400:	431a      	orrs	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b006      	add	sp, #24
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	223c      	movs	r2, #60	; 0x3c
 800541e:	5c9b      	ldrb	r3, [r3, r2]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e047      	b.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	223c      	movs	r2, #60	; 0x3c
 800542c:	2101      	movs	r1, #1
 800542e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	223d      	movs	r2, #61	; 0x3d
 8005434:	2102      	movs	r1, #2
 8005436:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2270      	movs	r2, #112	; 0x70
 800544c:	4393      	bics	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	05db      	lsls	r3, r3, #23
 8005474:	429a      	cmp	r2, r3
 8005476:	d009      	beq.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d10c      	bne.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	4393      	bics	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	223d      	movs	r2, #61	; 0x3d
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223c      	movs	r2, #60	; 0x3c
 80054b2:	2100      	movs	r1, #0
 80054b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40014000 	.word	0x40014000

080054cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e044      	b.n	8005588 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005502:	2b00      	cmp	r3, #0
 8005504:	d107      	bne.n	8005516 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2274      	movs	r2, #116	; 0x74
 800550a:	2100      	movs	r1, #0
 800550c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f7fc fa53 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2224      	movs	r2, #36	; 0x24
 800551a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2101      	movs	r1, #1
 8005528:	438a      	bics	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0018      	movs	r0, r3
 8005530:	f000 fd0c 	bl	8005f4c <UART_SetConfig>
 8005534:	0003      	movs	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e024      	b.n	8005588 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0018      	movs	r0, r3
 800554a:	f000 fe3f 	bl	80061cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	490d      	ldr	r1, [pc, #52]	; (8005590 <HAL_UART_Init+0xa4>)
 800555a:	400a      	ands	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	212a      	movs	r1, #42	; 0x2a
 800556a:	438a      	bics	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2101      	movs	r1, #1
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 fed7 	bl	8006334 <UART_CheckIdleState>
 8005586:	0003      	movs	r3, r0
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b002      	add	sp, #8
 800558e:	bd80      	pop	{r7, pc}
 8005590:	ffffb7ff 	.word	0xffffb7ff

08005594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	1dbb      	adds	r3, r7, #6
 80055a2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d000      	beq.n	80055ae <HAL_UART_Transmit+0x1a>
 80055ac:	e096      	b.n	80056dc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_UART_Transmit+0x28>
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e08e      	b.n	80056de <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	015b      	lsls	r3, r3, #5
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d109      	bne.n	80055e0 <HAL_UART_Transmit+0x4c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2201      	movs	r2, #1
 80055d8:	4013      	ands	r3, r2
 80055da:	d001      	beq.n	80055e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e07e      	b.n	80056de <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2274      	movs	r2, #116	; 0x74
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Transmit+0x5a>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e077      	b.n	80056de <HAL_UART_Transmit+0x14a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2274      	movs	r2, #116	; 0x74
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2280      	movs	r2, #128	; 0x80
 80055fa:	2100      	movs	r1, #0
 80055fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2221      	movs	r2, #33	; 0x21
 8005602:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005604:	f7fc fb0e 	bl	8001c24 <HAL_GetTick>
 8005608:	0003      	movs	r3, r0
 800560a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1dba      	adds	r2, r7, #6
 8005610:	2150      	movs	r1, #80	; 0x50
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1dba      	adds	r2, r7, #6
 800561a:	2152      	movs	r1, #82	; 0x52
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	015b      	lsls	r3, r3, #5
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <HAL_UART_Transmit+0xaa>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e003      	b.n	8005646 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2274      	movs	r2, #116	; 0x74
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800564e:	e02d      	b.n	80056ac <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	0013      	movs	r3, r2
 800565a:	2200      	movs	r2, #0
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	f000 feb1 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8005662:	1e03      	subs	r3, r0, #0
 8005664:	d001      	beq.n	800566a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e039      	b.n	80056de <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	881a      	ldrh	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	05d2      	lsls	r2, r2, #23
 800567a:	0dd2      	lsrs	r2, r2, #23
 800567c:	b292      	uxth	r2, r2
 800567e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	3302      	adds	r3, #2
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e008      	b.n	800569a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b292      	uxth	r2, r2
 8005692:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2252      	movs	r2, #82	; 0x52
 800569e:	5a9b      	ldrh	r3, [r3, r2]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b299      	uxth	r1, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2252      	movs	r2, #82	; 0x52
 80056aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2252      	movs	r2, #82	; 0x52
 80056b0:	5a9b      	ldrh	r3, [r3, r2]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1cb      	bne.n	8005650 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	0013      	movs	r3, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	f000 fe7d 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 80056ca:	1e03      	subs	r3, r0, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e005      	b.n	80056de <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b008      	add	sp, #32
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	1dbb      	adds	r3, r7, #6
 80056f6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d000      	beq.n	8005702 <HAL_UART_Receive+0x1a>
 8005700:	e0c6      	b.n	8005890 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_UART_Receive+0x28>
 8005708:	1dbb      	adds	r3, r7, #6
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0be      	b.n	8005892 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	015b      	lsls	r3, r3, #5
 800571c:	429a      	cmp	r2, r3
 800571e:	d109      	bne.n	8005734 <HAL_UART_Receive+0x4c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2201      	movs	r2, #1
 800572c:	4013      	ands	r3, r2
 800572e:	d001      	beq.n	8005734 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0ae      	b.n	8005892 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2274      	movs	r2, #116	; 0x74
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive+0x5a>
 800573e:	2302      	movs	r3, #2
 8005740:	e0a7      	b.n	8005892 <HAL_UART_Receive+0x1aa>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2274      	movs	r2, #116	; 0x74
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	2100      	movs	r1, #0
 8005750:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2222      	movs	r2, #34	; 0x22
 8005756:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575e:	f7fc fa61 	bl	8001c24 <HAL_GetTick>
 8005762:	0003      	movs	r3, r0
 8005764:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1dba      	adds	r2, r7, #6
 800576a:	2158      	movs	r1, #88	; 0x58
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1dba      	adds	r2, r7, #6
 8005774:	215a      	movs	r1, #90	; 0x5a
 8005776:	8812      	ldrh	r2, [r2, #0]
 8005778:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	015b      	lsls	r3, r3, #5
 8005782:	429a      	cmp	r2, r3
 8005784:	d10d      	bne.n	80057a2 <HAL_UART_Receive+0xba>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_UART_Receive+0xb0>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	225c      	movs	r2, #92	; 0x5c
 8005792:	4942      	ldr	r1, [pc, #264]	; (800589c <HAL_UART_Receive+0x1b4>)
 8005794:	5299      	strh	r1, [r3, r2]
 8005796:	e01a      	b.n	80057ce <HAL_UART_Receive+0xe6>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	225c      	movs	r2, #92	; 0x5c
 800579c:	21ff      	movs	r1, #255	; 0xff
 800579e:	5299      	strh	r1, [r3, r2]
 80057a0:	e015      	b.n	80057ce <HAL_UART_Receive+0xe6>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10d      	bne.n	80057c6 <HAL_UART_Receive+0xde>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_UART_Receive+0xd4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	225c      	movs	r2, #92	; 0x5c
 80057b6:	21ff      	movs	r1, #255	; 0xff
 80057b8:	5299      	strh	r1, [r3, r2]
 80057ba:	e008      	b.n	80057ce <HAL_UART_Receive+0xe6>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	225c      	movs	r2, #92	; 0x5c
 80057c0:	217f      	movs	r1, #127	; 0x7f
 80057c2:	5299      	strh	r1, [r3, r2]
 80057c4:	e003      	b.n	80057ce <HAL_UART_Receive+0xe6>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	225c      	movs	r2, #92	; 0x5c
 80057ca:	2100      	movs	r1, #0
 80057cc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80057ce:	2312      	movs	r3, #18
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	215c      	movs	r1, #92	; 0x5c
 80057d6:	5a52      	ldrh	r2, [r2, r1]
 80057d8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	015b      	lsls	r3, r3, #5
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d108      	bne.n	80057f8 <HAL_UART_Receive+0x110>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e003      	b.n	8005800 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2274      	movs	r2, #116	; 0x74
 8005804:	2100      	movs	r1, #0
 8005806:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005808:	e037      	b.n	800587a <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	0013      	movs	r3, r2
 8005814:	2200      	movs	r2, #0
 8005816:	2120      	movs	r1, #32
 8005818:	f000 fdd4 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d001      	beq.n	8005824 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e036      	b.n	8005892 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10e      	bne.n	8005848 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005830:	b29b      	uxth	r3, r3
 8005832:	2212      	movs	r2, #18
 8005834:	18ba      	adds	r2, r7, r2
 8005836:	8812      	ldrh	r2, [r2, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	b29a      	uxth	r2, r3
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	3302      	adds	r3, #2
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e00f      	b.n	8005868 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800584e:	b29b      	uxth	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2212      	movs	r2, #18
 8005854:	18ba      	adds	r2, r7, r2
 8005856:	8812      	ldrh	r2, [r2, #0]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4013      	ands	r3, r2
 800585c:	b2da      	uxtb	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3301      	adds	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	225a      	movs	r2, #90	; 0x5a
 800586c:	5a9b      	ldrh	r3, [r3, r2]
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b299      	uxth	r1, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	225a      	movs	r2, #90	; 0x5a
 8005878:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	225a      	movs	r2, #90	; 0x5a
 800587e:	5a9b      	ldrh	r3, [r3, r2]
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1c1      	bne.n	800580a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b008      	add	sp, #32
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	000001ff 	.word	0x000001ff

080058a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	1dbb      	adds	r3, r7, #6
 80058ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d150      	bne.n	8005958 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_UART_Receive_IT+0x24>
 80058bc:	1dbb      	adds	r3, r7, #6
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e048      	b.n	800595a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	015b      	lsls	r3, r3, #5
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d109      	bne.n	80058e8 <HAL_UART_Receive_IT+0x48>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2201      	movs	r2, #1
 80058e0:	4013      	ands	r3, r2
 80058e2:	d001      	beq.n	80058e8 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e038      	b.n	800595a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2274      	movs	r2, #116	; 0x74
 80058ec:	5c9b      	ldrb	r3, [r3, r2]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Receive_IT+0x56>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e031      	b.n	800595a <HAL_UART_Receive_IT+0xba>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2274      	movs	r2, #116	; 0x74
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	4013      	ands	r3, r2
 8005910:	d019      	beq.n	8005946 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005912:	f3ef 8310 	mrs	r3, PRIMASK
 8005916:	613b      	str	r3, [r7, #16]
  return(result);
 8005918:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f383 8810 	msr	PRIMASK, r3
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	04c9      	lsls	r1, r1, #19
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f383 8810 	msr	PRIMASK, r3
}
 8005944:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005946:	1dbb      	adds	r3, r7, #6
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	0018      	movs	r0, r3
 8005950:	f000 fdfc 	bl	800654c <UART_Start_Receive_IT>
 8005954:	0003      	movs	r3, r0
 8005956:	e000      	b.n	800595a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
  }
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b008      	add	sp, #32
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b0ab      	sub	sp, #172	; 0xac
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	22a4      	movs	r2, #164	; 0xa4
 8005974:	18b9      	adds	r1, r7, r2
 8005976:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	20a0      	movs	r0, #160	; 0xa0
 8005980:	1839      	adds	r1, r7, r0
 8005982:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	219c      	movs	r1, #156	; 0x9c
 800598c:	1879      	adds	r1, r7, r1
 800598e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005990:	0011      	movs	r1, r2
 8005992:	18bb      	adds	r3, r7, r2
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a99      	ldr	r2, [pc, #612]	; (8005bfc <HAL_UART_IRQHandler+0x298>)
 8005998:	4013      	ands	r3, r2
 800599a:	2298      	movs	r2, #152	; 0x98
 800599c:	18bc      	adds	r4, r7, r2
 800599e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80059a0:	18bb      	adds	r3, r7, r2
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d114      	bne.n	80059d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2220      	movs	r2, #32
 80059ae:	4013      	ands	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2220      	movs	r2, #32
 80059b8:	4013      	ands	r3, r2
 80059ba:	d00a      	beq.n	80059d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d100      	bne.n	80059c6 <HAL_UART_IRQHandler+0x62>
 80059c4:	e296      	b.n	8005ef4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	0010      	movs	r0, r2
 80059ce:	4798      	blx	r3
      }
      return;
 80059d0:	e290      	b.n	8005ef4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059d2:	2398      	movs	r3, #152	; 0x98
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d100      	bne.n	80059de <HAL_UART_IRQHandler+0x7a>
 80059dc:	e114      	b.n	8005c08 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059de:	239c      	movs	r3, #156	; 0x9c
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d106      	bne.n	80059f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059ea:	23a0      	movs	r3, #160	; 0xa0
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a83      	ldr	r2, [pc, #524]	; (8005c00 <HAL_UART_IRQHandler+0x29c>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	d100      	bne.n	80059f8 <HAL_UART_IRQHandler+0x94>
 80059f6:	e107      	b.n	8005c08 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059f8:	23a4      	movs	r3, #164	; 0xa4
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d012      	beq.n	8005a2a <HAL_UART_IRQHandler+0xc6>
 8005a04:	23a0      	movs	r3, #160	; 0xa0
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	589b      	ldr	r3, [r3, r2]
 8005a20:	2201      	movs	r2, #1
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2180      	movs	r1, #128	; 0x80
 8005a28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2a:	23a4      	movs	r3, #164	; 0xa4
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2202      	movs	r2, #2
 8005a32:	4013      	ands	r3, r2
 8005a34:	d011      	beq.n	8005a5a <HAL_UART_IRQHandler+0xf6>
 8005a36:	239c      	movs	r3, #156	; 0x9c
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2202      	movs	r2, #2
 8005a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	589b      	ldr	r3, [r3, r2]
 8005a50:	2204      	movs	r2, #4
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a5a:	23a4      	movs	r3, #164	; 0xa4
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2204      	movs	r2, #4
 8005a62:	4013      	ands	r3, r2
 8005a64:	d011      	beq.n	8005a8a <HAL_UART_IRQHandler+0x126>
 8005a66:	239c      	movs	r3, #156	; 0x9c
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2204      	movs	r2, #4
 8005a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2280      	movs	r2, #128	; 0x80
 8005a7e:	589b      	ldr	r3, [r3, r2]
 8005a80:	2202      	movs	r2, #2
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a8a:	23a4      	movs	r3, #164	; 0xa4
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2208      	movs	r2, #8
 8005a92:	4013      	ands	r3, r2
 8005a94:	d017      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a96:	23a0      	movs	r3, #160	; 0xa0
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d105      	bne.n	8005aae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005aa2:	239c      	movs	r3, #156	; 0x9c
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aac:	d00b      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	589b      	ldr	r3, [r3, r2]
 8005abc:	2208      	movs	r2, #8
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ac6:	23a4      	movs	r3, #164	; 0xa4
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d013      	beq.n	8005afc <HAL_UART_IRQHandler+0x198>
 8005ad4:	23a0      	movs	r3, #160	; 0xa0
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	04db      	lsls	r3, r3, #19
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d00c      	beq.n	8005afc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2280      	movs	r2, #128	; 0x80
 8005af0:	589b      	ldr	r3, [r3, r2]
 8005af2:	2220      	movs	r2, #32
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	589b      	ldr	r3, [r3, r2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d100      	bne.n	8005b08 <HAL_UART_IRQHandler+0x1a4>
 8005b06:	e1f7      	b.n	8005ef8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b08:	23a4      	movs	r3, #164	; 0xa4
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	4013      	ands	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b14:	23a0      	movs	r3, #160	; 0xa0
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d008      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	0010      	movs	r0, r2
 8005b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	589b      	ldr	r3, [r3, r2]
 8005b38:	2194      	movs	r1, #148	; 0x94
 8005b3a:	187a      	adds	r2, r7, r1
 8005b3c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2240      	movs	r2, #64	; 0x40
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d004      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2228      	movs	r2, #40	; 0x28
 8005b52:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b54:	d047      	beq.n	8005be6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 fd93 	bl	8006684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2240      	movs	r2, #64	; 0x40
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d137      	bne.n	8005bdc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b74:	2090      	movs	r0, #144	; 0x90
 8005b76:	183a      	adds	r2, r7, r0
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b80:	f383 8810 	msr	PRIMASK, r3
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2140      	movs	r1, #64	; 0x40
 8005b92:	438a      	bics	r2, r1
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	183b      	adds	r3, r7, r0
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ba2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <HAL_UART_IRQHandler+0x2a0>)
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7fc fe99 	bl	80028f0 <HAL_DMA_Abort_IT>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d01a      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	0018      	movs	r0, r3
 8005bce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e012      	b.n	8005bf8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 f9a5 	bl	8005f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	e00d      	b.n	8005bf8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 f9a0 	bl	8005f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	e008      	b.n	8005bf8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f000 f99b 	bl	8005f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005bf6:	e17f      	b.n	8005ef8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	46c0      	nop			; (mov r8, r8)
    return;
 8005bfa:	e17d      	b.n	8005ef8 <HAL_UART_IRQHandler+0x594>
 8005bfc:	0000080f 	.word	0x0000080f
 8005c00:	04000120 	.word	0x04000120
 8005c04:	08006749 	.word	0x08006749

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d000      	beq.n	8005c12 <HAL_UART_IRQHandler+0x2ae>
 8005c10:	e131      	b.n	8005e76 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c12:	23a4      	movs	r3, #164	; 0xa4
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2210      	movs	r2, #16
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d100      	bne.n	8005c20 <HAL_UART_IRQHandler+0x2bc>
 8005c1e:	e12a      	b.n	8005e76 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c20:	23a0      	movs	r3, #160	; 0xa0
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2210      	movs	r2, #16
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <HAL_UART_IRQHandler+0x2ca>
 8005c2c:	e123      	b.n	8005e76 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2210      	movs	r2, #16
 8005c34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2240      	movs	r2, #64	; 0x40
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d000      	beq.n	8005c46 <HAL_UART_IRQHandler+0x2e2>
 8005c44:	e09b      	b.n	8005d7e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	217e      	movs	r1, #126	; 0x7e
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d100      	bne.n	8005c5e <HAL_UART_IRQHandler+0x2fa>
 8005c5c:	e14e      	b.n	8005efc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2258      	movs	r2, #88	; 0x58
 8005c62:	5a9b      	ldrh	r3, [r3, r2]
 8005c64:	187a      	adds	r2, r7, r1
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d300      	bcc.n	8005c6e <HAL_UART_IRQHandler+0x30a>
 8005c6c:	e146      	b.n	8005efc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	187a      	adds	r2, r7, r1
 8005c72:	215a      	movs	r1, #90	; 0x5a
 8005c74:	8812      	ldrh	r2, [r2, #0]
 8005c76:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d06e      	beq.n	8005d60 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c82:	f3ef 8310 	mrs	r3, PRIMASK
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	499a      	ldr	r1, [pc, #616]	; (8005f0c <HAL_UART_IRQHandler+0x5a8>)
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	677b      	str	r3, [r7, #116]	; 0x74
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cee:	673b      	str	r3, [r7, #112]	; 0x70
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2140      	movs	r1, #64	; 0x40
 8005d08:	438a      	bics	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d2e:	2301      	movs	r3, #1
 8005d30:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2110      	movs	r1, #16
 8005d46:	438a      	bics	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7fc fd90 	bl	8002880 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2258      	movs	r2, #88	; 0x58
 8005d64:	5a9a      	ldrh	r2, [r3, r2]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	215a      	movs	r1, #90	; 0x5a
 8005d6a:	5a5b      	ldrh	r3, [r3, r1]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f8dc 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d7c:	e0be      	b.n	8005efc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2258      	movs	r2, #88	; 0x58
 8005d82:	5a99      	ldrh	r1, [r3, r2]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	225a      	movs	r2, #90	; 0x5a
 8005d88:	5a9b      	ldrh	r3, [r3, r2]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	208e      	movs	r0, #142	; 0x8e
 8005d8e:	183b      	adds	r3, r7, r0
 8005d90:	1a8a      	subs	r2, r1, r2
 8005d92:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	225a      	movs	r2, #90	; 0x5a
 8005d98:	5a9b      	ldrh	r3, [r3, r2]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d100      	bne.n	8005da2 <HAL_UART_IRQHandler+0x43e>
 8005da0:	e0ae      	b.n	8005f00 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005da2:	183b      	adds	r3, r7, r0
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d100      	bne.n	8005dac <HAL_UART_IRQHandler+0x448>
 8005daa:	e0a9      	b.n	8005f00 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dac:	f3ef 8310 	mrs	r3, PRIMASK
 8005db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005db2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db4:	2488      	movs	r4, #136	; 0x88
 8005db6:	193a      	adds	r2, r7, r4
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	2301      	movs	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f383 8810 	msr	PRIMASK, r3
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	494f      	ldr	r1, [pc, #316]	; (8005f10 <HAL_UART_IRQHandler+0x5ac>)
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	193b      	adds	r3, r7, r4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f383 8810 	msr	PRIMASK, r3
}
 8005de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de4:	f3ef 8310 	mrs	r3, PRIMASK
 8005de8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dec:	2484      	movs	r4, #132	; 0x84
 8005dee:	193a      	adds	r2, r7, r4
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	2301      	movs	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	438a      	bics	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	193b      	adds	r3, r7, r4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	f383 8810 	msr	PRIMASK, r3
}
 8005e1a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	2480      	movs	r4, #128	; 0x80
 8005e38:	193a      	adds	r2, r7, r4
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	f383 8810 	msr	PRIMASK, r3
}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2110      	movs	r1, #16
 8005e54:	438a      	bics	r2, r1
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	193b      	adds	r3, r7, r4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	f383 8810 	msr	PRIMASK, r3
}
 8005e64:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e66:	183b      	adds	r3, r7, r0
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0011      	movs	r1, r2
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 f860 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e74:	e044      	b.n	8005f00 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e76:	23a4      	movs	r3, #164	; 0xa4
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	035b      	lsls	r3, r3, #13
 8005e80:	4013      	ands	r3, r2
 8005e82:	d010      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x542>
 8005e84:	239c      	movs	r3, #156	; 0x9c
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	03db      	lsls	r3, r3, #15
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	0352      	lsls	r2, r2, #13
 8005e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 fdfc 	bl	8006a9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ea4:	e02f      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ea6:	23a4      	movs	r3, #164	; 0xa4
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eb2:	23a0      	movs	r3, #160	; 0xa0
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01e      	beq.n	8005f04 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	0010      	movs	r0, r2
 8005ece:	4798      	blx	r3
    }
    return;
 8005ed0:	e018      	b.n	8005f04 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ed2:	23a4      	movs	r3, #164	; 0xa4
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2240      	movs	r2, #64	; 0x40
 8005eda:	4013      	ands	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
 8005ede:	23a0      	movs	r3, #160	; 0xa0
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2240      	movs	r2, #64	; 0x40
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d00d      	beq.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 fc42 	bl	8006776 <UART_EndTransmit_IT>
    return;
 8005ef2:	e008      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	e006      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	e004      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	e002      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
      return;
 8005f00:	46c0      	nop			; (mov r8, r8)
 8005f02:	e000      	b.n	8005f06 <HAL_UART_IRQHandler+0x5a2>
    return;
 8005f04:	46c0      	nop			; (mov r8, r8)
  }

}
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b02b      	add	sp, #172	; 0xac
 8005f0a:	bd90      	pop	{r4, r7, pc}
 8005f0c:	fffffeff 	.word	0xfffffeff
 8005f10:	fffffedf 	.word	0xfffffedf

08005f14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b002      	add	sp, #8
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	1cbb      	adds	r3, r7, #2
 8005f40:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b002      	add	sp, #8
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f54:	231e      	movs	r3, #30
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a8d      	ldr	r2, [pc, #564]	; (80061b0 <UART_SetConfig+0x264>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a88      	ldr	r2, [pc, #544]	; (80061b4 <UART_SetConfig+0x268>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	0019      	movs	r1, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a7f      	ldr	r2, [pc, #508]	; (80061b8 <UART_SetConfig+0x26c>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a7b      	ldr	r2, [pc, #492]	; (80061bc <UART_SetConfig+0x270>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d127      	bne.n	8006022 <UART_SetConfig+0xd6>
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <UART_SetConfig+0x274>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d00d      	beq.n	8005ffa <UART_SetConfig+0xae>
 8005fde:	d81b      	bhi.n	8006018 <UART_SetConfig+0xcc>
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d014      	beq.n	800600e <UART_SetConfig+0xc2>
 8005fe4:	d818      	bhi.n	8006018 <UART_SetConfig+0xcc>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <UART_SetConfig+0xa4>
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d00a      	beq.n	8006004 <UART_SetConfig+0xb8>
 8005fee:	e013      	b.n	8006018 <UART_SetConfig+0xcc>
 8005ff0:	231f      	movs	r3, #31
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e021      	b.n	800603e <UART_SetConfig+0xf2>
 8005ffa:	231f      	movs	r3, #31
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	2202      	movs	r2, #2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e01c      	b.n	800603e <UART_SetConfig+0xf2>
 8006004:	231f      	movs	r3, #31
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	2204      	movs	r2, #4
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e017      	b.n	800603e <UART_SetConfig+0xf2>
 800600e:	231f      	movs	r3, #31
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	2208      	movs	r2, #8
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e012      	b.n	800603e <UART_SetConfig+0xf2>
 8006018:	231f      	movs	r3, #31
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2210      	movs	r2, #16
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0xf2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <UART_SetConfig+0x278>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d104      	bne.n	8006036 <UART_SetConfig+0xea>
 800602c:	231f      	movs	r3, #31
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	2200      	movs	r2, #0
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e003      	b.n	800603e <UART_SetConfig+0xf2>
 8006036:	231f      	movs	r3, #31
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	2210      	movs	r2, #16
 800603c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69da      	ldr	r2, [r3, #28]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	429a      	cmp	r2, r3
 8006048:	d15d      	bne.n	8006106 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800604a:	231f      	movs	r3, #31
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d015      	beq.n	8006080 <UART_SetConfig+0x134>
 8006054:	dc18      	bgt.n	8006088 <UART_SetConfig+0x13c>
 8006056:	2b04      	cmp	r3, #4
 8006058:	d00d      	beq.n	8006076 <UART_SetConfig+0x12a>
 800605a:	dc15      	bgt.n	8006088 <UART_SetConfig+0x13c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <UART_SetConfig+0x11a>
 8006060:	2b02      	cmp	r3, #2
 8006062:	d005      	beq.n	8006070 <UART_SetConfig+0x124>
 8006064:	e010      	b.n	8006088 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006066:	f7fe f8c1 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 800606a:	0003      	movs	r3, r0
 800606c:	61bb      	str	r3, [r7, #24]
        break;
 800606e:	e012      	b.n	8006096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006070:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <UART_SetConfig+0x27c>)
 8006072:	61bb      	str	r3, [r7, #24]
        break;
 8006074:	e00f      	b.n	8006096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fe f84b 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800607a:	0003      	movs	r3, r0
 800607c:	61bb      	str	r3, [r7, #24]
        break;
 800607e:	e00a      	b.n	8006096 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	61bb      	str	r3, [r7, #24]
        break;
 8006086:	e006      	b.n	8006096 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800608c:	231e      	movs	r3, #30
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
        break;
 8006094:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d100      	bne.n	800609e <UART_SetConfig+0x152>
 800609c:	e07b      	b.n	8006196 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	005a      	lsls	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	18d2      	adds	r2, r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	0019      	movs	r1, r3
 80060b0:	0010      	movs	r0, r2
 80060b2:	f7fa f829 	bl	8000108 <__udivsi3>
 80060b6:	0003      	movs	r3, r0
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d91c      	bls.n	80060fc <UART_SetConfig+0x1b0>
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	025b      	lsls	r3, r3, #9
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d217      	bcs.n	80060fc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	200e      	movs	r0, #14
 80060d2:	183b      	adds	r3, r7, r0
 80060d4:	210f      	movs	r1, #15
 80060d6:	438a      	bics	r2, r1
 80060d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2207      	movs	r2, #7
 80060e2:	4013      	ands	r3, r2
 80060e4:	b299      	uxth	r1, r3
 80060e6:	183b      	adds	r3, r7, r0
 80060e8:	183a      	adds	r2, r7, r0
 80060ea:	8812      	ldrh	r2, [r2, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	183a      	adds	r2, r7, r0
 80060f6:	8812      	ldrh	r2, [r2, #0]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e04c      	b.n	8006196 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80060fc:	231e      	movs	r3, #30
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e047      	b.n	8006196 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006106:	231f      	movs	r3, #31
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d015      	beq.n	800613c <UART_SetConfig+0x1f0>
 8006110:	dc18      	bgt.n	8006144 <UART_SetConfig+0x1f8>
 8006112:	2b04      	cmp	r3, #4
 8006114:	d00d      	beq.n	8006132 <UART_SetConfig+0x1e6>
 8006116:	dc15      	bgt.n	8006144 <UART_SetConfig+0x1f8>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <UART_SetConfig+0x1d6>
 800611c:	2b02      	cmp	r3, #2
 800611e:	d005      	beq.n	800612c <UART_SetConfig+0x1e0>
 8006120:	e010      	b.n	8006144 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006122:	f7fe f863 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8006126:	0003      	movs	r3, r0
 8006128:	61bb      	str	r3, [r7, #24]
        break;
 800612a:	e012      	b.n	8006152 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800612c:	4b26      	ldr	r3, [pc, #152]	; (80061c8 <UART_SetConfig+0x27c>)
 800612e:	61bb      	str	r3, [r7, #24]
        break;
 8006130:	e00f      	b.n	8006152 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006132:	f7fd ffed 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 8006136:	0003      	movs	r3, r0
 8006138:	61bb      	str	r3, [r7, #24]
        break;
 800613a:	e00a      	b.n	8006152 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	61bb      	str	r3, [r7, #24]
        break;
 8006142:	e006      	b.n	8006152 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006148:	231e      	movs	r3, #30
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
        break;
 8006150:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01e      	beq.n	8006196 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	085a      	lsrs	r2, r3, #1
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	18d2      	adds	r2, r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	0019      	movs	r1, r3
 8006168:	0010      	movs	r0, r2
 800616a:	f7f9 ffcd 	bl	8000108 <__udivsi3>
 800616e:	0003      	movs	r3, r0
 8006170:	b29b      	uxth	r3, r3
 8006172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d909      	bls.n	800618e <UART_SetConfig+0x242>
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	025b      	lsls	r3, r3, #9
 8006180:	429a      	cmp	r2, r3
 8006182:	d204      	bcs.n	800618e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	e003      	b.n	8006196 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800618e:	231e      	movs	r3, #30
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061a2:	231e      	movs	r3, #30
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	781b      	ldrb	r3, [r3, #0]
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b008      	add	sp, #32
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	ffff69f3 	.word	0xffff69f3
 80061b4:	ffffcfff 	.word	0xffffcfff
 80061b8:	fffff4ff 	.word	0xfffff4ff
 80061bc:	40013800 	.word	0x40013800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	007a1200 	.word	0x007a1200

080061cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	2201      	movs	r2, #1
 80061da:	4013      	ands	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a4a      	ldr	r2, [pc, #296]	; (8006310 <UART_AdvFeatureConfig+0x144>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	0019      	movs	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2202      	movs	r2, #2
 80061fc:	4013      	ands	r3, r2
 80061fe:	d00b      	beq.n	8006218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4a43      	ldr	r2, [pc, #268]	; (8006314 <UART_AdvFeatureConfig+0x148>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2204      	movs	r2, #4
 800621e:	4013      	ands	r3, r2
 8006220:	d00b      	beq.n	800623a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a3b      	ldr	r2, [pc, #236]	; (8006318 <UART_AdvFeatureConfig+0x14c>)
 800622a:	4013      	ands	r3, r2
 800622c:	0019      	movs	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2208      	movs	r2, #8
 8006240:	4013      	ands	r3, r2
 8006242:	d00b      	beq.n	800625c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4a34      	ldr	r2, [pc, #208]	; (800631c <UART_AdvFeatureConfig+0x150>)
 800624c:	4013      	ands	r3, r2
 800624e:	0019      	movs	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2210      	movs	r2, #16
 8006262:	4013      	ands	r3, r2
 8006264:	d00b      	beq.n	800627e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <UART_AdvFeatureConfig+0x154>)
 800626e:	4013      	ands	r3, r2
 8006270:	0019      	movs	r1, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2220      	movs	r2, #32
 8006284:	4013      	ands	r3, r2
 8006286:	d00b      	beq.n	80062a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	4a25      	ldr	r2, [pc, #148]	; (8006324 <UART_AdvFeatureConfig+0x158>)
 8006290:	4013      	ands	r3, r2
 8006292:	0019      	movs	r1, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2240      	movs	r2, #64	; 0x40
 80062a6:	4013      	ands	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <UART_AdvFeatureConfig+0x15c>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	0019      	movs	r1, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	035b      	lsls	r3, r3, #13
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d10b      	bne.n	80062e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a15      	ldr	r2, [pc, #84]	; (800632c <UART_AdvFeatureConfig+0x160>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	4013      	ands	r3, r2
 80062ee:	d00b      	beq.n	8006308 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <UART_AdvFeatureConfig+0x164>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	0019      	movs	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}
 8006310:	fffdffff 	.word	0xfffdffff
 8006314:	fffeffff 	.word	0xfffeffff
 8006318:	fffbffff 	.word	0xfffbffff
 800631c:	ffff7fff 	.word	0xffff7fff
 8006320:	ffffefff 	.word	0xffffefff
 8006324:	ffffdfff 	.word	0xffffdfff
 8006328:	ffefffff 	.word	0xffefffff
 800632c:	ff9fffff 	.word	0xff9fffff
 8006330:	fff7ffff 	.word	0xfff7ffff

08006334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2280      	movs	r2, #128	; 0x80
 8006340:	2100      	movs	r1, #0
 8006342:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006344:	f7fb fc6e 	bl	8001c24 <HAL_GetTick>
 8006348:	0003      	movs	r3, r0
 800634a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2208      	movs	r2, #8
 8006354:	4013      	ands	r3, r2
 8006356:	2b08      	cmp	r3, #8
 8006358:	d10c      	bne.n	8006374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	0391      	lsls	r1, r2, #14
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <UART_CheckIdleState+0x8c>)
 8006364:	9200      	str	r2, [sp, #0]
 8006366:	2200      	movs	r2, #0
 8006368:	f000 f82c 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 800636c:	1e03      	subs	r3, r0, #0
 800636e:	d001      	beq.n	8006374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e021      	b.n	80063b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2204      	movs	r2, #4
 800637c:	4013      	ands	r3, r2
 800637e:	2b04      	cmp	r3, #4
 8006380:	d10c      	bne.n	800639c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	03d1      	lsls	r1, r2, #15
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <UART_CheckIdleState+0x8c>)
 800638c:	9200      	str	r2, [sp, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	f000 f818 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8006394:	1e03      	subs	r3, r0, #0
 8006396:	d001      	beq.n	800639c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e00d      	b.n	80063b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2274      	movs	r2, #116	; 0x74
 80063b2:	2100      	movs	r1, #0
 80063b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b004      	add	sp, #16
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	01ffffff 	.word	0x01ffffff

080063c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b094      	sub	sp, #80	; 0x50
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	1dfb      	adds	r3, r7, #7
 80063d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	e0a3      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063d8:	3301      	adds	r3, #1
 80063da:	d100      	bne.n	80063de <UART_WaitOnFlagUntilTimeout+0x1a>
 80063dc:	e09f      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fb fc21 	bl	8001c24 <HAL_GetTick>
 80063e2:	0002      	movs	r2, r0
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d13d      	bne.n	8006470 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f4:	f3ef 8310 	mrs	r3, PRIMASK
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	2301      	movs	r3, #1
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	f383 8810 	msr	PRIMASK, r3
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	494c      	ldr	r1, [pc, #304]	; (8006548 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006416:	400a      	ands	r2, r1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	f383 8810 	msr	PRIMASK, r3
}
 8006424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006426:	f3ef 8310 	mrs	r3, PRIMASK
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642e:	643b      	str	r3, [r7, #64]	; 0x40
 8006430:	2301      	movs	r3, #1
 8006432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	f383 8810 	msr	PRIMASK, r3
}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2101      	movs	r1, #1
 8006448:	438a      	bics	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2274      	movs	r2, #116	; 0x74
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e067      	b.n	8006540 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2204      	movs	r2, #4
 8006478:	4013      	ands	r3, r2
 800647a:	d050      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	401a      	ands	r2, r3
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	429a      	cmp	r2, r3
 800648e:	d146      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2280      	movs	r2, #128	; 0x80
 8006496:	0112      	lsls	r2, r2, #4
 8006498:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649a:	f3ef 8310 	mrs	r3, PRIMASK
 800649e:	613b      	str	r3, [r7, #16]
  return(result);
 80064a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4923      	ldr	r1, [pc, #140]	; (8006548 <UART_WaitOnFlagUntilTimeout+0x184>)
 80064bc:	400a      	ands	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064cc:	f3ef 8310 	mrs	r3, PRIMASK
 80064d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80064d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d6:	2301      	movs	r3, #1
 80064d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	438a      	bics	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	2120      	movs	r1, #32
 8006510:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2274      	movs	r2, #116	; 0x74
 8006516:	2100      	movs	r1, #0
 8006518:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e010      	b.n	8006540 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	4013      	ands	r3, r2
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	425a      	negs	r2, r3
 800652e:	4153      	adcs	r3, r2
 8006530:	b2db      	uxtb	r3, r3
 8006532:	001a      	movs	r2, r3
 8006534:	1dfb      	adds	r3, r7, #7
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d100      	bne.n	800653e <UART_WaitOnFlagUntilTimeout+0x17a>
 800653c:	e74b      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	0018      	movs	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	b014      	add	sp, #80	; 0x50
 8006546:	bd80      	pop	{r7, pc}
 8006548:	fffffe5f 	.word	0xfffffe5f

0800654c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08c      	sub	sp, #48	; 0x30
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	1dbb      	adds	r3, r7, #6
 8006558:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	1dba      	adds	r2, r7, #6
 8006564:	2158      	movs	r1, #88	; 0x58
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1dba      	adds	r2, r7, #6
 800656e:	215a      	movs	r1, #90	; 0x5a
 8006570:	8812      	ldrh	r2, [r2, #0]
 8006572:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	015b      	lsls	r3, r3, #5
 8006582:	429a      	cmp	r2, r3
 8006584:	d10d      	bne.n	80065a2 <UART_Start_Receive_IT+0x56>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <UART_Start_Receive_IT+0x4c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	225c      	movs	r2, #92	; 0x5c
 8006592:	4939      	ldr	r1, [pc, #228]	; (8006678 <UART_Start_Receive_IT+0x12c>)
 8006594:	5299      	strh	r1, [r3, r2]
 8006596:	e01a      	b.n	80065ce <UART_Start_Receive_IT+0x82>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	225c      	movs	r2, #92	; 0x5c
 800659c:	21ff      	movs	r1, #255	; 0xff
 800659e:	5299      	strh	r1, [r3, r2]
 80065a0:	e015      	b.n	80065ce <UART_Start_Receive_IT+0x82>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10d      	bne.n	80065c6 <UART_Start_Receive_IT+0x7a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <UART_Start_Receive_IT+0x70>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	225c      	movs	r2, #92	; 0x5c
 80065b6:	21ff      	movs	r1, #255	; 0xff
 80065b8:	5299      	strh	r1, [r3, r2]
 80065ba:	e008      	b.n	80065ce <UART_Start_Receive_IT+0x82>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	225c      	movs	r2, #92	; 0x5c
 80065c0:	217f      	movs	r1, #127	; 0x7f
 80065c2:	5299      	strh	r1, [r3, r2]
 80065c4:	e003      	b.n	80065ce <UART_Start_Receive_IT+0x82>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	225c      	movs	r2, #92	; 0x5c
 80065ca:	2100      	movs	r1, #0
 80065cc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2280      	movs	r2, #128	; 0x80
 80065d2:	2100      	movs	r1, #0
 80065d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2222      	movs	r2, #34	; 0x22
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065dc:	f3ef 8310 	mrs	r3, PRIMASK
 80065e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065e2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	2301      	movs	r3, #1
 80065e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	f383 8810 	msr	PRIMASK, r3
}
 80065f0:	46c0      	nop			; (mov r8, r8)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f383 8810 	msr	PRIMASK, r3
}
 800660c:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	015b      	lsls	r3, r3, #5
 8006616:	429a      	cmp	r2, r3
 8006618:	d107      	bne.n	800662a <UART_Start_Receive_IT+0xde>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <UART_Start_Receive_IT+0x130>)
 8006626:	665a      	str	r2, [r3, #100]	; 0x64
 8006628:	e002      	b.n	8006630 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <UART_Start_Receive_IT+0x134>)
 800662e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2274      	movs	r2, #116	; 0x74
 8006634:	2100      	movs	r1, #0
 8006636:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006638:	f3ef 8310 	mrs	r3, PRIMASK
 800663c:	613b      	str	r3, [r7, #16]
  return(result);
 800663e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f383 8810 	msr	PRIMASK, r3
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2190      	movs	r1, #144	; 0x90
 800665a:	0049      	lsls	r1, r1, #1
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b00c      	add	sp, #48	; 0x30
 8006674:	bd80      	pop	{r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	000001ff 	.word	0x000001ff
 800667c:	08006935 	.word	0x08006935
 8006680:	080067cd 	.word	0x080067cd

08006684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08e      	sub	sp, #56	; 0x38
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668c:	f3ef 8310 	mrs	r3, PRIMASK
 8006690:	617b      	str	r3, [r7, #20]
  return(result);
 8006692:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	2301      	movs	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f383 8810 	msr	PRIMASK, r3
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4925      	ldr	r1, [pc, #148]	; (8006744 <UART_EndRxTransfer+0xc0>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066be:	f3ef 8310 	mrs	r3, PRIMASK
 80066c2:	623b      	str	r3, [r7, #32]
  return(result);
 80066c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30
 80066c8:	2301      	movs	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	f383 8810 	msr	PRIMASK, r3
}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2101      	movs	r1, #1
 80066e0:	438a      	bics	r2, r1
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	f383 8810 	msr	PRIMASK, r3
}
 80066ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d118      	bne.n	800672a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f8:	f3ef 8310 	mrs	r3, PRIMASK
 80066fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006702:	2301      	movs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f383 8810 	msr	PRIMASK, r3
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2110      	movs	r1, #16
 800671a:	438a      	bics	r2, r1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f383 8810 	msr	PRIMASK, r3
}
 8006728:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b00e      	add	sp, #56	; 0x38
 8006742:	bd80      	pop	{r7, pc}
 8006744:	fffffedf 	.word	0xfffffedf

08006748 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	225a      	movs	r2, #90	; 0x5a
 800675a:	2100      	movs	r1, #0
 800675c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2252      	movs	r2, #82	; 0x52
 8006762:	2100      	movs	r1, #0
 8006764:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	0018      	movs	r0, r3
 800676a:	f7ff fbdb 	bl	8005f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b004      	add	sp, #16
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	60bb      	str	r3, [r7, #8]
  return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	2301      	movs	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2140      	movs	r1, #64	; 0x40
 80067a0:	438a      	bics	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff fba8 	bl	8005f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b006      	add	sp, #24
 80067ca:	bd80      	pop	{r7, pc}

080067cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b090      	sub	sp, #64	; 0x40
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067d4:	203e      	movs	r0, #62	; 0x3e
 80067d6:	183b      	adds	r3, r7, r0
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	215c      	movs	r1, #92	; 0x5c
 80067dc:	5a52      	ldrh	r2, [r2, r1]
 80067de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e4:	2b22      	cmp	r3, #34	; 0x22
 80067e6:	d000      	beq.n	80067ea <UART_RxISR_8BIT+0x1e>
 80067e8:	e095      	b.n	8006916 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	213c      	movs	r1, #60	; 0x3c
 80067f0:	187b      	adds	r3, r7, r1
 80067f2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80067f4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067f6:	187b      	adds	r3, r7, r1
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	183b      	adds	r3, r7, r0
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b2d9      	uxtb	r1, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	400a      	ands	r2, r1
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	225a      	movs	r2, #90	; 0x5a
 800681a:	5a9b      	ldrh	r3, [r3, r2]
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b299      	uxth	r1, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	225a      	movs	r2, #90	; 0x5a
 8006826:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	225a      	movs	r2, #90	; 0x5a
 800682c:	5a9b      	ldrh	r3, [r3, r2]
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d178      	bne.n	8006926 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006834:	f3ef 8310 	mrs	r3, PRIMASK
 8006838:	61bb      	str	r3, [r7, #24]
  return(result);
 800683a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683c:	63bb      	str	r3, [r7, #56]	; 0x38
 800683e:	2301      	movs	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f383 8810 	msr	PRIMASK, r3
}
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4936      	ldr	r1, [pc, #216]	; (8006930 <UART_RxISR_8BIT+0x164>)
 8006856:	400a      	ands	r2, r1
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	f383 8810 	msr	PRIMASK, r3
}
 8006864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006866:	f3ef 8310 	mrs	r3, PRIMASK
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
 8006870:	2301      	movs	r3, #1
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	f383 8810 	msr	PRIMASK, r3
}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2101      	movs	r1, #1
 8006888:	438a      	bics	r2, r1
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	f383 8810 	msr	PRIMASK, r3
}
 8006896:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d12f      	bne.n	800690c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b2:	f3ef 8310 	mrs	r3, PRIMASK
 80068b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
 80068bc:	2301      	movs	r3, #1
 80068be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f383 8810 	msr	PRIMASK, r3
}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2110      	movs	r1, #16
 80068d4:	438a      	bics	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	2210      	movs	r2, #16
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d103      	bne.n	80068fa <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2210      	movs	r2, #16
 80068f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2258      	movs	r2, #88	; 0x58
 80068fe:	5a9a      	ldrh	r2, [r3, r2]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	0011      	movs	r1, r2
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff fb15 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800690a:	e00c      	b.n	8006926 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	0018      	movs	r0, r3
 8006910:	f7fa f852 	bl	80009b8 <HAL_UART_RxCpltCallback>
}
 8006914:	e007      	b.n	8006926 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2108      	movs	r1, #8
 8006922:	430a      	orrs	r2, r1
 8006924:	619a      	str	r2, [r3, #24]
}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	b010      	add	sp, #64	; 0x40
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	fffffedf 	.word	0xfffffedf

08006934 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b090      	sub	sp, #64	; 0x40
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800693c:	203e      	movs	r0, #62	; 0x3e
 800693e:	183b      	adds	r3, r7, r0
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	215c      	movs	r1, #92	; 0x5c
 8006944:	5a52      	ldrh	r2, [r2, r1]
 8006946:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800694c:	2b22      	cmp	r3, #34	; 0x22
 800694e:	d000      	beq.n	8006952 <UART_RxISR_16BIT+0x1e>
 8006950:	e095      	b.n	8006a7e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	213c      	movs	r1, #60	; 0x3c
 8006958:	187b      	adds	r3, r7, r1
 800695a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800695c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006964:	187b      	adds	r3, r7, r1
 8006966:	183a      	adds	r2, r7, r0
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	8812      	ldrh	r2, [r2, #0]
 800696c:	4013      	ands	r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	1c9a      	adds	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	225a      	movs	r2, #90	; 0x5a
 8006982:	5a9b      	ldrh	r3, [r3, r2]
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b299      	uxth	r1, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	225a      	movs	r2, #90	; 0x5a
 800698e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	225a      	movs	r2, #90	; 0x5a
 8006994:	5a9b      	ldrh	r3, [r3, r2]
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d178      	bne.n	8006a8e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	617b      	str	r3, [r7, #20]
  return(result);
 80069a2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	2301      	movs	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4936      	ldr	r1, [pc, #216]	; (8006a98 <UART_RxISR_16BIT+0x164>)
 80069be:	400a      	ands	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ce:	f3ef 8310 	mrs	r3, PRIMASK
 80069d2:	623b      	str	r3, [r7, #32]
  return(result);
 80069d4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
 80069d8:	2301      	movs	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f383 8810 	msr	PRIMASK, r3
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2101      	movs	r1, #1
 80069f0:	438a      	bics	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d12f      	bne.n	8006a74 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a20:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f383 8810 	msr	PRIMASK, r3
}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2110      	movs	r1, #16
 8006a3c:	438a      	bics	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2210      	movs	r2, #16
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d103      	bne.n	8006a62 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2258      	movs	r2, #88	; 0x58
 8006a66:	5a9a      	ldrh	r2, [r3, r2]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0011      	movs	r1, r2
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7ff fa61 	bl	8005f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a72:	e00c      	b.n	8006a8e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f7f9 ff9e 	bl	80009b8 <HAL_UART_RxCpltCallback>
}
 8006a7c:	e007      	b.n	8006a8e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2108      	movs	r1, #8
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	619a      	str	r2, [r3, #24]
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b010      	add	sp, #64	; 0x40
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	fffffedf 	.word	0xfffffedf

08006a9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006aa4:	46c0      	nop			; (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	6019      	str	r1, [r3, #0]
 8006ab8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aba:	2317      	movs	r3, #23
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2274      	movs	r2, #116	; 0x74
 8006ac6:	5c9b      	ldrb	r3, [r3, r2]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e04a      	b.n	8006b66 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2274      	movs	r2, #116	; 0x74
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2224      	movs	r2, #36	; 0x24
 8006adc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	438a      	bics	r2, r1
 8006aec:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a1e      	ldr	r2, [pc, #120]	; (8006b70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	0019      	movs	r1, r3
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006b06:	1d3b      	adds	r3, r7, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	f000 f860 	bl	8006bda <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2101      	movs	r1, #1
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b2a:	f7fb f87b 	bl	8001c24 <HAL_GetTick>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	03d1      	lsls	r1, r2, #15
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	4a0e      	ldr	r2, [pc, #56]	; (8006b74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8006b3c:	9200      	str	r2, [sp, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f7ff fc40 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 8006b48:	2317      	movs	r3, #23
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2203      	movs	r2, #3
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e002      	b.n	8006b58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2274      	movs	r2, #116	; 0x74
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	5499      	strb	r1, [r3, r2]

  return status;
 8006b60:	2317      	movs	r3, #23
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b006      	add	sp, #24
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	ffcfffff 	.word	0xffcfffff
 8006b74:	01ffffff 	.word	0x01ffffff

08006b78 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2274      	movs	r2, #116	; 0x74
 8006b84:	5c9b      	ldrb	r3, [r3, r2]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_UARTEx_EnableStopMode+0x16>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e021      	b.n	8006bd2 <HAL_UARTEx_EnableStopMode+0x5a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2274      	movs	r2, #116	; 0x74
 8006b92:	2101      	movs	r1, #1
 8006b94:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b96:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f383 8810 	msr	PRIMASK, r3
}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2102      	movs	r1, #2
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f383 8810 	msr	PRIMASK, r3
}
 8006bc6:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2274      	movs	r2, #116	; 0x74
 8006bcc:	2100      	movs	r1, #0
 8006bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b006      	add	sp, #24
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	4393      	bics	r3, r2
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	889b      	ldrh	r3, [r3, #4]
 8006bf8:	0019      	movs	r1, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	0a19      	lsrs	r1, r3, #8
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	799b      	ldrb	r3, [r3, #6]
 8006c10:	061a      	lsls	r2, r3, #24
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b004      	add	sp, #16
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <__libc_init_array>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	2600      	movs	r6, #0
 8006c28:	4d0c      	ldr	r5, [pc, #48]	; (8006c5c <__libc_init_array+0x38>)
 8006c2a:	4c0d      	ldr	r4, [pc, #52]	; (8006c60 <__libc_init_array+0x3c>)
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	d109      	bne.n	8006c48 <__libc_init_array+0x24>
 8006c34:	2600      	movs	r6, #0
 8006c36:	f000 f821 	bl	8006c7c <_init>
 8006c3a:	4d0a      	ldr	r5, [pc, #40]	; (8006c64 <__libc_init_array+0x40>)
 8006c3c:	4c0a      	ldr	r4, [pc, #40]	; (8006c68 <__libc_init_array+0x44>)
 8006c3e:	1b64      	subs	r4, r4, r5
 8006c40:	10a4      	asrs	r4, r4, #2
 8006c42:	42a6      	cmp	r6, r4
 8006c44:	d105      	bne.n	8006c52 <__libc_init_array+0x2e>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	00b3      	lsls	r3, r6, #2
 8006c4a:	58eb      	ldr	r3, [r5, r3]
 8006c4c:	4798      	blx	r3
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7ee      	b.n	8006c30 <__libc_init_array+0xc>
 8006c52:	00b3      	lsls	r3, r6, #2
 8006c54:	58eb      	ldr	r3, [r5, r3]
 8006c56:	4798      	blx	r3
 8006c58:	3601      	adds	r6, #1
 8006c5a:	e7f2      	b.n	8006c42 <__libc_init_array+0x1e>
 8006c5c:	08006e34 	.word	0x08006e34
 8006c60:	08006e34 	.word	0x08006e34
 8006c64:	08006e34 	.word	0x08006e34
 8006c68:	08006e38 	.word	0x08006e38

08006c6c <memset>:
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	1882      	adds	r2, r0, r2
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	7019      	strb	r1, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
