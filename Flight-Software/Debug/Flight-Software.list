
Flight-Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006580  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066ec  080066ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066ec  080066ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066ec  080066ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08006764  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006764  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e12  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b02  00000000  00000000  00035eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000389b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00039d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c59  00000000  00000000  0003af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e2a  00000000  00000000  0004ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077c0b  00000000  00000000  000669fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  000de658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006628 	.word	0x08006628

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006628 	.word	0x08006628

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000224:	f3bf 8f4f 	dsb	sy
}
 8000228:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <__NVIC_SystemReset+0x1c>)
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SystemReset+0x20>)
 800022e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	e7fd      	b.n	8000236 <__NVIC_SystemReset+0x16>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	e000ed00 	.word	0xe000ed00
 8000240:	05fa0004 	.word	0x05fa0004

08000244 <HAL_TIM_OC_DelayElapsedCallback>:
// #define TS_CAL2 *((uint16_t*) 0x1FFFF7C2)



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	b095      	sub	sp, #84	; 0x54
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4bdb      	ldr	r3, [pc, #876]	; (80005bc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d001      	beq.n	8000258 <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000254:	f000 fc69 	bl	8000b2a <HAL_TIM_OC_DelayElapsedCallback+0x8e6>
  {
	if (1)
	{ // check pin state
	  if (ERPA_ON)
 8000258:	4bd9      	ldr	r3, [pc, #868]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d100      	bne.n	8000262 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
 8000260:	e09f      	b.n	80003a2 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
		 * +/- 0.5v Every 100ms
		 */

		/* Write to SPI (begin transfer?) */

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11));
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	011b      	lsls	r3, r3, #4
 8000268:	4ad6      	ldr	r2, [pc, #856]	; (80005c4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800026a:	0019      	movs	r1, r3
 800026c:	0010      	movs	r0, r2
 800026e:	f002 fe0f 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d1f6      	bne.n	8000264 <HAL_TIM_OC_DelayElapsedCallback+0x20>
		 * Steps DAC
		 * +/- 0.5v Every 100ms
		*/

		  /* Write to SPI (begin transfer?) */
		HAL_SPI_Transmit(&hspi2, (uint8_t * ) &WRITE, 1, 1);
 8000276:	49d4      	ldr	r1, [pc, #848]	; (80005c8 <HAL_TIM_OC_DelayElapsedCallback+0x384>)
 8000278:	48d4      	ldr	r0, [pc, #848]	; (80005cc <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800027a:	2301      	movs	r3, #1
 800027c:	2201      	movs	r2, #1
 800027e:	f004 f979 	bl	8004574 <HAL_SPI_Transmit>
		SPI2->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000282:	4bd3      	ldr	r3, [pc, #844]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4bd2      	ldr	r3, [pc, #840]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000288:	49d2      	ldr	r1, [pc, #840]	; (80005d4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800028a:	400a      	ands	r2, r1
 800028c:	601a      	str	r2, [r3, #0]
		while (!(SPI2->SR));
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	4bcf      	ldr	r3, [pc, #828]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0fb      	beq.n	8000290 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
		erpa_raw = SPI2->DR;
 8000298:	4bcd      	ldr	r3, [pc, #820]	; (80005d0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	001a      	movs	r2, r3
 800029e:	4bce      	ldr	r3, [pc, #824]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 80002a0:	601a      	str	r2, [r3, #0]


		DAC->DHR12R1 = DAC_OUT[step];
 80002a2:	4bce      	ldr	r3, [pc, #824]	; (80005dc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	0019      	movs	r1, r3
 80002a8:	4bcd      	ldr	r3, [pc, #820]	; (80005e0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 80002aa:	4ace      	ldr	r2, [pc, #824]	; (80005e4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 80002ac:	0089      	lsls	r1, r1, #2
 80002ae:	588a      	ldr	r2, [r1, r2]
 80002b0:	609a      	str	r2, [r3, #8]

		HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 80002b2:	2311      	movs	r3, #17
 80002b4:	001a      	movs	r2, r3
 80002b6:	49cc      	ldr	r1, [pc, #816]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002b8:	4bcc      	ldr	r3, [pc, #816]	; (80005ec <HAL_TIM_OC_DelayElapsedCallback+0x3a8>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fe3a 	bl	8001f34 <HAL_ADC_Start_DMA>
						  adcChannelCount);
		uint16_t PA0 = adcResultsDMA[0]; 				// ADC_IN0, END_mon: entrance/collimator monitor
 80002c0:	213a      	movs	r1, #58	; 0x3a
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	4ac8      	ldr	r2, [pc, #800]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002c6:	8812      	ldrh	r2, [r2, #0]
 80002c8:	801a      	strh	r2, [r3, #0]
		uint16_t PA7 = adcResultsDMA[6]; 				// ADC_IN7, SWP_mon: Sweep voltage monitor
 80002ca:	2038      	movs	r0, #56	; 0x38
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	4ac6      	ldr	r2, [pc, #792]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002d0:	8992      	ldrh	r2, [r2, #12]
 80002d2:	801a      	strh	r2, [r3, #0]
		uint16_t PB0 = adcResultsDMA[7]; 				// ADC_IN8, TMP 1: Sweep temperature
 80002d4:	2436      	movs	r4, #54	; 0x36
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	4ac3      	ldr	r2, [pc, #780]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002da:	89d2      	ldrh	r2, [r2, #14]
 80002dc:	801a      	strh	r2, [r3, #0]
		uint16_t PB1 = adcResultsDMA[8]; 				// ADC_IN9, TMP 2: feedbacks
 80002de:	2534      	movs	r5, #52	; 0x34
 80002e0:	197b      	adds	r3, r7, r5
 80002e2:	4ac1      	ldr	r2, [pc, #772]	; (80005e8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 80002e4:	8a12      	ldrh	r2, [r2, #16]
 80002e6:	801a      	strh	r2, [r3, #0]

		erpa_buf[0] = erpa_sync;                  		// ERPA SYNC 0xAA MSB
 80002e8:	22aa      	movs	r2, #170	; 0xaa
 80002ea:	4bc1      	ldr	r3, [pc, #772]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002ec:	701a      	strb	r2, [r3, #0]
		erpa_buf[1] = erpa_sync;                  		// ERPA SYNC 0xAA LSB
 80002ee:	22aa      	movs	r2, #170	; 0xaa
 80002f0:	4bbf      	ldr	r3, [pc, #764]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 80002f2:	705a      	strb	r2, [r3, #1]
		erpa_buf[2] = ((erpa_seq & 0xFF00) >> 8); 		// ERPA SEQ # MSB
 80002f4:	4bbf      	ldr	r3, [pc, #764]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4bbc      	ldr	r3, [pc, #752]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000300:	709a      	strb	r2, [r3, #2]
		erpa_buf[3] = (erpa_seq & 0xFF);          		// ERPA SEQ # MSB
 8000302:	4bbc      	ldr	r3, [pc, #752]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	4bb9      	ldr	r3, [pc, #740]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800030a:	70da      	strb	r2, [r3, #3]
		erpa_buf[4] = ((PA0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 800030c:	187b      	adds	r3, r7, r1
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4bb6      	ldr	r3, [pc, #728]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000318:	711a      	strb	r2, [r3, #4]
		erpa_buf[5] = (PA0 & 0xFF);               		// ENDmon LSB
 800031a:	187b      	adds	r3, r7, r1
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4bb3      	ldr	r3, [pc, #716]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000322:	715a      	strb	r2, [r3, #5]
		erpa_buf[6] = ((PA7 & 0xFF00) >> 8);      		// SWP Monitored MSB
 8000324:	183b      	adds	r3, r7, r0
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	b29b      	uxth	r3, r3
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4bb0      	ldr	r3, [pc, #704]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000330:	719a      	strb	r2, [r3, #6]
		erpa_buf[7] = (PA7 & 0xFF);               		// SWP Monitored LSB
 8000332:	183b      	adds	r3, r7, r0
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4bad      	ldr	r3, [pc, #692]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800033a:	71da      	strb	r2, [r3, #7]
		erpa_buf[8] = ((PB0 & 0xFF00) >> 8);      		// TEMPURATURE 1 MSB
 800033c:	193b      	adds	r3, r7, r4
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	b29b      	uxth	r3, r3
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4baa      	ldr	r3, [pc, #680]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000348:	721a      	strb	r2, [r3, #8]
		erpa_buf[9] = (PB0 & 0xFF);               		// TEMPURATURE 1 LSB
 800034a:	193b      	adds	r3, r7, r4
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4ba7      	ldr	r3, [pc, #668]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000352:	725a      	strb	r2, [r3, #9]
		erpa_buf[10] = ((PB1 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8000354:	197b      	adds	r3, r7, r5
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	0a1b      	lsrs	r3, r3, #8
 800035a:	b29b      	uxth	r3, r3
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4ba4      	ldr	r3, [pc, #656]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000360:	729a      	strb	r2, [r3, #10]
		erpa_buf[11] = (PB1 & 0xFF);                    // TEMPURATURE 2 LSB
 8000362:	197b      	adds	r3, r7, r5
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4ba1      	ldr	r3, [pc, #644]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800036a:	72da      	strb	r2, [r3, #11]
		erpa_buf[12] = ((erpa_raw & 0xFF00) >> 8);      // ERPA eADC MSB
 800036c:	4b9a      	ldr	r3, [pc, #616]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	121b      	asrs	r3, r3, #8
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b9e      	ldr	r3, [pc, #632]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000376:	731a      	strb	r2, [r3, #12]
		erpa_buf[13] = (erpa_raw & 0xFF);               // ERPA eADC LSB
 8000378:	4b97      	ldr	r3, [pc, #604]	; (80005d8 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b9c      	ldr	r3, [pc, #624]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000380:	735a      	strb	r2, [r3, #13]

		erpa_seq++;
 8000382:	4b9c      	ldr	r3, [pc, #624]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	b29a      	uxth	r2, r3
 800038a:	4b9a      	ldr	r3, [pc, #616]	; (80005f4 <HAL_TIM_OC_DelayElapsedCallback+0x3b0>)
 800038c:	801a      	strh	r2, [r3, #0]
		if (ERPA_ON)
 800038e:	4b8c      	ldr	r3, [pc, #560]	; (80005c0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <HAL_TIM_OC_DelayElapsedCallback+0x15e>
		{
		  HAL_UART_Transmit(&huart1, erpa_buf, sizeof(erpa_buf), 100);
 8000396:	4996      	ldr	r1, [pc, #600]	; (80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 8000398:	4897      	ldr	r0, [pc, #604]	; (80005f8 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	220e      	movs	r2, #14
 800039e:	f005 f911 	bl	80055c4 <HAL_UART_Transmit>
		}
	  }
	  if (HK_ON)
 80003a2:	4b96      	ldr	r3, [pc, #600]	; (80005fc <HAL_TIM_OC_DelayElapsedCallback+0x3b8>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d101      	bne.n	80003ae <HAL_TIM_OC_DelayElapsedCallback+0x16a>
 80003aa:	f000 fc13 	bl	8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x990>
	  {
		if (hk_counter == HK_CADENCE)
 80003ae:	4b94      	ldr	r3, [pc, #592]	; (8000600 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2201      	movs	r2, #1
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d001      	beq.n	80003bc <HAL_TIM_OC_DelayElapsedCallback+0x178>
 80003b8:	f000 fbb1 	bl	8000b1e <HAL_TIM_OC_DelayElapsedCallback+0x8da>
		  int16_t output1;
		  int16_t output2;
		  int16_t output3;
		  int16_t output4;

		  buf[0] = REG_TEMP;
 80003bc:	2200      	movs	r2, #0
 80003be:	2514      	movs	r5, #20
 80003c0:	197b      	adds	r3, r7, r5
 80003c2:	701a      	strb	r2, [r3, #0]
		  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_1, buf, 1,
 80003c4:	2390      	movs	r3, #144	; 0x90
 80003c6:	b299      	uxth	r1, r3
 80003c8:	2633      	movs	r6, #51	; 0x33
 80003ca:	19bc      	adds	r4, r7, r6
 80003cc:	197a      	adds	r2, r7, r5
 80003ce:	488d      	ldr	r0, [pc, #564]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80003d0:	23fa      	movs	r3, #250	; 0xfa
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2301      	movs	r3, #1
 80003d8:	f002 fe2a 	bl	8003030 <HAL_I2C_Master_Transmit>
 80003dc:	0003      	movs	r3, r0
 80003de:	7023      	strb	r3, [r4, #0]
										1000);
		  if (ret != HAL_OK)
 80003e0:	19bb      	adds	r3, r7, r6
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <HAL_TIM_OC_DelayElapsedCallback+0x1b6>
		  {
			strcpy((char *)buf, "Error Tx\r\n");
 80003e8:	197b      	adds	r3, r7, r5
 80003ea:	4a87      	ldr	r2, [pc, #540]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80003ec:	ca03      	ldmia	r2!, {r0, r1}
 80003ee:	c303      	stmia	r3!, {r0, r1}
 80003f0:	8811      	ldrh	r1, [r2, #0]
 80003f2:	8019      	strh	r1, [r3, #0]
 80003f4:	7892      	ldrb	r2, [r2, #2]
 80003f6:	709a      	strb	r2, [r3, #2]
 80003f8:	e02b      	b.n	8000452 <HAL_TIM_OC_DelayElapsedCallback+0x20e>
		  }
		  else
		  {

			/* Read 2 bytes from the temperature register */
			ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_1, buf, 2,
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	b299      	uxth	r1, r3
 80003fe:	2533      	movs	r5, #51	; 0x33
 8000400:	197c      	adds	r4, r7, r5
 8000402:	2614      	movs	r6, #20
 8000404:	19ba      	adds	r2, r7, r6
 8000406:	487f      	ldr	r0, [pc, #508]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000408:	23fa      	movs	r3, #250	; 0xfa
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2302      	movs	r3, #2
 8000410:	f002 ff16 	bl	8003240 <HAL_I2C_Master_Receive>
 8000414:	0003      	movs	r3, r0
 8000416:	7023      	strb	r3, [r4, #0]
										 1000);
			if (ret != HAL_OK)
 8000418:	197b      	adds	r3, r7, r5
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d008      	beq.n	8000432 <HAL_TIM_OC_DelayElapsedCallback+0x1ee>
			{
			  strcpy((char *)buf, "Error Rx\r\n");
 8000420:	19bb      	adds	r3, r7, r6
 8000422:	4a7a      	ldr	r2, [pc, #488]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000424:	ca03      	ldmia	r2!, {r0, r1}
 8000426:	c303      	stmia	r3!, {r0, r1}
 8000428:	8811      	ldrh	r1, [r2, #0]
 800042a:	8019      	strh	r1, [r3, #0]
 800042c:	7892      	ldrb	r2, [r2, #2]
 800042e:	709a      	strb	r2, [r3, #2]
 8000430:	e00f      	b.n	8000452 <HAL_TIM_OC_DelayElapsedCallback+0x20e>
			}
			else
			{
			  output1 = (int16_t)(buf[0] << 8);
 8000432:	2014      	movs	r0, #20
 8000434:	183b      	adds	r3, r7, r0
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	021a      	lsls	r2, r3, #8
 800043a:	2146      	movs	r1, #70	; 0x46
 800043c:	187b      	adds	r3, r7, r1
 800043e:	801a      	strh	r2, [r3, #0]
			  output1 = (output1 | buf[1]) >> 3;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2200      	movs	r2, #0
 8000444:	5e9b      	ldrsh	r3, [r3, r2]
 8000446:	183a      	adds	r2, r7, r0
 8000448:	7852      	ldrb	r2, [r2, #1]
 800044a:	4313      	orrs	r3, r2
 800044c:	10da      	asrs	r2, r3, #3
 800044e:	187b      	adds	r3, r7, r1
 8000450:	801a      	strh	r2, [r3, #0]
			}
		  }

		  /* Tell ADT7410_2 that we want to read from the temperature register */
		  buf[0] = REG_TEMP;
 8000452:	2200      	movs	r2, #0
 8000454:	2514      	movs	r5, #20
 8000456:	197b      	adds	r3, r7, r5
 8000458:	701a      	strb	r2, [r3, #0]
		  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_2, buf, 1,
 800045a:	2394      	movs	r3, #148	; 0x94
 800045c:	b299      	uxth	r1, r3
 800045e:	2633      	movs	r6, #51	; 0x33
 8000460:	19bc      	adds	r4, r7, r6
 8000462:	197a      	adds	r2, r7, r5
 8000464:	4867      	ldr	r0, [pc, #412]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000466:	23fa      	movs	r3, #250	; 0xfa
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2301      	movs	r3, #1
 800046e:	f002 fddf 	bl	8003030 <HAL_I2C_Master_Transmit>
 8000472:	0003      	movs	r3, r0
 8000474:	7023      	strb	r3, [r4, #0]
										1000);
		  /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
		  if (ret != HAL_OK)
 8000476:	19bb      	adds	r3, r7, r6
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d008      	beq.n	8000490 <HAL_TIM_OC_DelayElapsedCallback+0x24c>
		  {
			strcpy((char *)buf, "Error Tx\r\n");
 800047e:	197b      	adds	r3, r7, r5
 8000480:	4a61      	ldr	r2, [pc, #388]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000482:	ca03      	ldmia	r2!, {r0, r1}
 8000484:	c303      	stmia	r3!, {r0, r1}
 8000486:	8811      	ldrh	r1, [r2, #0]
 8000488:	8019      	strh	r1, [r3, #0]
 800048a:	7892      	ldrb	r2, [r2, #2]
 800048c:	709a      	strb	r2, [r3, #2]
 800048e:	e02b      	b.n	80004e8 <HAL_TIM_OC_DelayElapsedCallback+0x2a4>
		  }
		  else
		  {

			/* Read 2 bytes from the temperature register */
			ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_2, buf, 2,
 8000490:	2394      	movs	r3, #148	; 0x94
 8000492:	b299      	uxth	r1, r3
 8000494:	2533      	movs	r5, #51	; 0x33
 8000496:	197c      	adds	r4, r7, r5
 8000498:	2614      	movs	r6, #20
 800049a:	19ba      	adds	r2, r7, r6
 800049c:	4859      	ldr	r0, [pc, #356]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 800049e:	23fa      	movs	r3, #250	; 0xfa
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2302      	movs	r3, #2
 80004a6:	f002 fecb 	bl	8003240 <HAL_I2C_Master_Receive>
 80004aa:	0003      	movs	r3, r0
 80004ac:	7023      	strb	r3, [r4, #0]
										 1000);
			if (ret != HAL_OK)
 80004ae:	197b      	adds	r3, r7, r5
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d008      	beq.n	80004c8 <HAL_TIM_OC_DelayElapsedCallback+0x284>
			{
			  strcpy((char *)buf, "Error Rx\r\n");
 80004b6:	19bb      	adds	r3, r7, r6
 80004b8:	4a54      	ldr	r2, [pc, #336]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 80004ba:	ca03      	ldmia	r2!, {r0, r1}
 80004bc:	c303      	stmia	r3!, {r0, r1}
 80004be:	8811      	ldrh	r1, [r2, #0]
 80004c0:	8019      	strh	r1, [r3, #0]
 80004c2:	7892      	ldrb	r2, [r2, #2]
 80004c4:	709a      	strb	r2, [r3, #2]
 80004c6:	e00f      	b.n	80004e8 <HAL_TIM_OC_DelayElapsedCallback+0x2a4>
			}
			else
			{

			  output2 = (int16_t)(buf[0] << 8);
 80004c8:	2014      	movs	r0, #20
 80004ca:	183b      	adds	r3, r7, r0
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	021a      	lsls	r2, r3, #8
 80004d0:	2144      	movs	r1, #68	; 0x44
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	801a      	strh	r2, [r3, #0]
			  output2 = (output2 | buf[1]) >> 3;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	5e9b      	ldrsh	r3, [r3, r2]
 80004dc:	183a      	adds	r2, r7, r0
 80004de:	7852      	ldrb	r2, [r2, #1]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	10da      	asrs	r2, r3, #3
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	801a      	strh	r2, [r3, #0]
			}
		  }
		  // TEMP SENSOR 3
		  buf[0] = REG_TEMP;
 80004e8:	2200      	movs	r2, #0
 80004ea:	2514      	movs	r5, #20
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	701a      	strb	r2, [r3, #0]
		  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_3, buf, 1,
 80004f0:	2392      	movs	r3, #146	; 0x92
 80004f2:	b299      	uxth	r1, r3
 80004f4:	2633      	movs	r6, #51	; 0x33
 80004f6:	19bc      	adds	r4, r7, r6
 80004f8:	197a      	adds	r2, r7, r5
 80004fa:	4842      	ldr	r0, [pc, #264]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 80004fc:	23fa      	movs	r3, #250	; 0xfa
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2301      	movs	r3, #1
 8000504:	f002 fd94 	bl	8003030 <HAL_I2C_Master_Transmit>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
										1000);
		  /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
		  if (ret != HAL_OK)
 800050c:	19bb      	adds	r3, r7, r6
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <HAL_TIM_OC_DelayElapsedCallback+0x2e2>
		  {
			strcpy((char *)buf, "Error Tx\r\n");
 8000514:	197b      	adds	r3, r7, r5
 8000516:	4a3c      	ldr	r2, [pc, #240]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 8000518:	ca03      	ldmia	r2!, {r0, r1}
 800051a:	c303      	stmia	r3!, {r0, r1}
 800051c:	8811      	ldrh	r1, [r2, #0]
 800051e:	8019      	strh	r1, [r3, #0]
 8000520:	7892      	ldrb	r2, [r2, #2]
 8000522:	709a      	strb	r2, [r3, #2]
 8000524:	e02b      	b.n	800057e <HAL_TIM_OC_DelayElapsedCallback+0x33a>
		  }
		  else
		  {

			/* Read 2 bytes from the temperature register */
			ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_3, buf, 2,
 8000526:	2392      	movs	r3, #146	; 0x92
 8000528:	b299      	uxth	r1, r3
 800052a:	2533      	movs	r5, #51	; 0x33
 800052c:	197c      	adds	r4, r7, r5
 800052e:	2614      	movs	r6, #20
 8000530:	19ba      	adds	r2, r7, r6
 8000532:	4834      	ldr	r0, [pc, #208]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000534:	23fa      	movs	r3, #250	; 0xfa
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2302      	movs	r3, #2
 800053c:	f002 fe80 	bl	8003240 <HAL_I2C_Master_Receive>
 8000540:	0003      	movs	r3, r0
 8000542:	7023      	strb	r3, [r4, #0]
										 1000);
			if (ret != HAL_OK)
 8000544:	197b      	adds	r3, r7, r5
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d008      	beq.n	800055e <HAL_TIM_OC_DelayElapsedCallback+0x31a>
			{
			  strcpy((char *)buf, "Error Rx\r\n");
 800054c:	19bb      	adds	r3, r7, r6
 800054e:	4a2f      	ldr	r2, [pc, #188]	; (800060c <HAL_TIM_OC_DelayElapsedCallback+0x3c8>)
 8000550:	ca03      	ldmia	r2!, {r0, r1}
 8000552:	c303      	stmia	r3!, {r0, r1}
 8000554:	8811      	ldrh	r1, [r2, #0]
 8000556:	8019      	strh	r1, [r3, #0]
 8000558:	7892      	ldrb	r2, [r2, #2]
 800055a:	709a      	strb	r2, [r3, #2]
 800055c:	e00f      	b.n	800057e <HAL_TIM_OC_DelayElapsedCallback+0x33a>
			}
			else
			{

			  output3 = (int16_t)(buf[0] << 8);
 800055e:	2014      	movs	r0, #20
 8000560:	183b      	adds	r3, r7, r0
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	021a      	lsls	r2, r3, #8
 8000566:	2142      	movs	r1, #66	; 0x42
 8000568:	187b      	adds	r3, r7, r1
 800056a:	801a      	strh	r2, [r3, #0]
			  output3 = (output3 | buf[1]) >> 3;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	5e9b      	ldrsh	r3, [r3, r2]
 8000572:	183a      	adds	r2, r7, r0
 8000574:	7852      	ldrb	r2, [r2, #1]
 8000576:	4313      	orrs	r3, r2
 8000578:	10da      	asrs	r2, r3, #3
 800057a:	187b      	adds	r3, r7, r1
 800057c:	801a      	strh	r2, [r3, #0]
			}
		  }
		  /* TEMP SENSOR 4 */
		  buf[0] = REG_TEMP;
 800057e:	2200      	movs	r2, #0
 8000580:	2514      	movs	r5, #20
 8000582:	197b      	adds	r3, r7, r5
 8000584:	701a      	strb	r2, [r3, #0]
		  ret = HAL_I2C_Master_Transmit(&hi2c1, ADT7410_4, buf, 1,
 8000586:	2396      	movs	r3, #150	; 0x96
 8000588:	b299      	uxth	r1, r3
 800058a:	2633      	movs	r6, #51	; 0x33
 800058c:	19bc      	adds	r4, r7, r6
 800058e:	197a      	adds	r2, r7, r5
 8000590:	481c      	ldr	r0, [pc, #112]	; (8000604 <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 8000592:	23fa      	movs	r3, #250	; 0xfa
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2301      	movs	r3, #1
 800059a:	f002 fd49 	bl	8003030 <HAL_I2C_Master_Transmit>
 800059e:	0003      	movs	r3, r0
 80005a0:	7023      	strb	r3, [r4, #0]
										1000);
		  /* I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) */
		  if (ret != HAL_OK)
 80005a2:	19bb      	adds	r3, r7, r6
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d032      	beq.n	8000610 <HAL_TIM_OC_DelayElapsedCallback+0x3cc>
		  {
			strcpy((char *)buf, "Error Tx\r\n");
 80005aa:	197b      	adds	r3, r7, r5
 80005ac:	4a16      	ldr	r2, [pc, #88]	; (8000608 <HAL_TIM_OC_DelayElapsedCallback+0x3c4>)
 80005ae:	ca03      	ldmia	r2!, {r0, r1}
 80005b0:	c303      	stmia	r3!, {r0, r1}
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	709a      	strb	r2, [r3, #2]
 80005ba:	e055      	b.n	8000668 <HAL_TIM_OC_DelayElapsedCallback+0x424>
 80005bc:	20000280 	.word	0x20000280
 80005c0:	20000061 	.word	0x20000061
 80005c4:	48000400 	.word	0x48000400
 80005c8:	080066d0 	.word	0x080066d0
 80005cc:	200001d4 	.word	0x200001d4
 80005d0:	40003800 	.word	0x40003800
 80005d4:	fffffbff 	.word	0xfffffbff
 80005d8:	2000037c 	.word	0x2000037c
 80005dc:	20000376 	.word	0x20000376
 80005e0:	40007400 	.word	0x40007400
 80005e4:	20000040 	.word	0x20000040
 80005e8:	20000354 	.word	0x20000354
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	20000380 	.word	0x20000380
 80005f4:	2000038e 	.word	0x2000038e
 80005f8:	200002c8 	.word	0x200002c8
 80005fc:	20000062 	.word	0x20000062
 8000600:	200003c0 	.word	0x200003c0
 8000604:	20000124 	.word	0x20000124
 8000608:	08006640 	.word	0x08006640
 800060c:	0800664c 	.word	0x0800664c
		  }
		  else
		  {

			/* Read 2 bytes from the temperature register */
			ret = HAL_I2C_Master_Receive(&hi2c1, ADT7410_4, buf, 2,
 8000610:	2396      	movs	r3, #150	; 0x96
 8000612:	b299      	uxth	r1, r3
 8000614:	2533      	movs	r5, #51	; 0x33
 8000616:	197c      	adds	r4, r7, r5
 8000618:	2614      	movs	r6, #20
 800061a:	19ba      	adds	r2, r7, r6
 800061c:	48a3      	ldr	r0, [pc, #652]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0x668>)
 800061e:	23fa      	movs	r3, #250	; 0xfa
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2302      	movs	r3, #2
 8000626:	f002 fe0b 	bl	8003240 <HAL_I2C_Master_Receive>
 800062a:	0003      	movs	r3, r0
 800062c:	7023      	strb	r3, [r4, #0]
										 1000);
			if (ret != HAL_OK)
 800062e:	197b      	adds	r3, r7, r5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <HAL_TIM_OC_DelayElapsedCallback+0x404>
			{
			  strcpy((char *)buf, "Error Rx\r\n");
 8000636:	19bb      	adds	r3, r7, r6
 8000638:	4a9d      	ldr	r2, [pc, #628]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0x66c>)
 800063a:	ca03      	ldmia	r2!, {r0, r1}
 800063c:	c303      	stmia	r3!, {r0, r1}
 800063e:	8811      	ldrh	r1, [r2, #0]
 8000640:	8019      	strh	r1, [r3, #0]
 8000642:	7892      	ldrb	r2, [r2, #2]
 8000644:	709a      	strb	r2, [r3, #2]
 8000646:	e00f      	b.n	8000668 <HAL_TIM_OC_DelayElapsedCallback+0x424>
			}
			else
			{

			  output4 = (int16_t)(buf[0] << 8);
 8000648:	2014      	movs	r0, #20
 800064a:	183b      	adds	r3, r7, r0
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	021a      	lsls	r2, r3, #8
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	187b      	adds	r3, r7, r1
 8000654:	801a      	strh	r2, [r3, #0]
			  output4 = (output4 | buf[1]) >> 3;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	5e9b      	ldrsh	r3, [r3, r2]
 800065c:	183a      	adds	r2, r7, r0
 800065e:	7852      	ldrb	r2, [r2, #1]
 8000660:	4313      	orrs	r3, r2
 8000662:	10da      	asrs	r2, r3, #3
 8000664:	187b      	adds	r3, r7, r1
 8000666:	801a      	strh	r2, [r3, #0]
			}
		  }

		  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcResultsDMA,
 8000668:	2311      	movs	r3, #17
 800066a:	001a      	movs	r2, r3
 800066c:	4991      	ldr	r1, [pc, #580]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800066e:	4b92      	ldr	r3, [pc, #584]	; (80008b8 <HAL_TIM_OC_DelayElapsedCallback+0x674>)
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fc5f 	bl	8001f34 <HAL_ADC_Start_DMA>
							adcChannelCount);

		  uint16_t MCU_TEMP = adcResultsDMA[15]; //(internally connected) ADC_IN16, VSENSE
 8000676:	2330      	movs	r3, #48	; 0x30
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	4a8e      	ldr	r2, [pc, #568]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800067c:	8bd2      	ldrh	r2, [r2, #30]
 800067e:	801a      	strh	r2, [r3, #0]
		  uint16_t MCU_VREF = adcResultsDMA[16]; //(internally connected) ADC_IN17, VREFINT
 8000680:	232e      	movs	r3, #46	; 0x2e
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	4a8b      	ldr	r2, [pc, #556]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000686:	8c12      	ldrh	r2, [r2, #32]
 8000688:	801a      	strh	r2, [r3, #0]


		  uint16_t PA1 = adcResultsDMA[1];       // ADC_IN1, BUS_Vmon: instrument bus voltage monitor
 800068a:	212c      	movs	r1, #44	; 0x2c
 800068c:	187b      	adds	r3, r7, r1
 800068e:	4a89      	ldr	r2, [pc, #548]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000690:	8852      	ldrh	r2, [r2, #2]
 8000692:	801a      	strh	r2, [r3, #0]
		  if (PA1 < PA1_MIN || PA1 > PA1_MAX) {
 8000694:	187b      	adds	r3, r7, r1
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4a88      	ldr	r2, [pc, #544]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d905      	bls.n	80006aa <HAL_TIM_OC_DelayElapsedCallback+0x466>
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	881a      	ldrh	r2, [r3, #0]
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	015b      	lsls	r3, r3, #5
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d909      	bls.n	80006be <HAL_TIM_OC_DelayElapsedCallback+0x47a>
			  // Turn off corresponding GPIO --> SYS_ON --> PB5
			  HAL_GPIO_WritePin(_SYS_ON.gpio, _SYS_ON.pin, GPIO_PIN_RESET);
 80006aa:	4b85      	ldr	r3, [pc, #532]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	4b84      	ldr	r3, [pc, #528]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 80006b0:	889b      	ldrh	r3, [r3, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	0019      	movs	r1, r3
 80006b6:	f002 fc08 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 80006ba:	f7ff fdb1 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PA2 = adcResultsDMA[2];       // ADC_IN2, BUS_Imon: instrument bus current monitor
 80006be:	232a      	movs	r3, #42	; 0x2a
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	4a7c      	ldr	r2, [pc, #496]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80006c4:	8892      	ldrh	r2, [r2, #4]
 80006c6:	801a      	strh	r2, [r3, #0]
		  if (PA2 < PA2_MIN || PA1 > PA2_MAX) {
 80006c8:	232c      	movs	r3, #44	; 0x2c
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d009      	beq.n	80006e6 <HAL_TIM_OC_DelayElapsedCallback+0x4a2>
			  // Turn off corresponding GPIO --> SYS_ON --> PB5
			  HAL_GPIO_WritePin(_SYS_ON.gpio, _SYS_ON.pin, GPIO_PIN_RESET);
 80006d2:	4b7b      	ldr	r3, [pc, #492]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	0019      	movs	r1, r3
 80006de:	f002 fbf4 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 80006e2:	f7ff fd9d 	bl	8000220 <__NVIC_SystemReset>
		   }
		  uint16_t PA3 = adcResultsDMA[3];       // ADC_IN3, 3v3_mon: Accurate 5V for ADC monitor
 80006e6:	2128      	movs	r1, #40	; 0x28
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	4a72      	ldr	r2, [pc, #456]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80006ec:	88d2      	ldrh	r2, [r2, #6]
 80006ee:	801a      	strh	r2, [r3, #0]
		  if (PA3 < PA3_MIN || PA3 > PA3_MAX) {
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	4a71      	ldr	r2, [pc, #452]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d905      	bls.n	8000706 <HAL_TIM_OC_DelayElapsedCallback+0x4c2>
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	881a      	ldrh	r2, [r3, #0]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	015b      	lsls	r3, r3, #5
 8000702:	429a      	cmp	r2, r3
 8000704:	d309      	bcc.n	800071a <HAL_TIM_OC_DelayElapsedCallback+0x4d6>
			  // Turn off corresponding GPIO --> 3v3_EN --> PC7
			  HAL_GPIO_WritePin(_3V3_EN.gpio, _3V3_EN.pin, GPIO_PIN_RESET);
 8000706:	4b6f      	ldr	r3, [pc, #444]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	4b6e      	ldr	r3, [pc, #440]	; (80008c4 <HAL_TIM_OC_DelayElapsedCallback+0x680>)
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	0019      	movs	r1, r3
 8000712:	f002 fbda 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 8000716:	f7ff fd83 	bl	8000220 <__NVIC_SystemReset>
		   }
		  uint16_t PA5 = adcResultsDMA[4];       // ADC_IN5, n200v_mon: n200 voltage monitor
 800071a:	2126      	movs	r1, #38	; 0x26
 800071c:	187b      	adds	r3, r7, r1
 800071e:	4a65      	ldr	r2, [pc, #404]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000720:	8912      	ldrh	r2, [r2, #8]
 8000722:	801a      	strh	r2, [r3, #0]
		  if (PA5 < PA5_MIN || PA5 > PA5_MAX) {
 8000724:	187b      	adds	r3, r7, r1
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4a67      	ldr	r2, [pc, #412]	; (80008c8 <HAL_TIM_OC_DelayElapsedCallback+0x684>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d904      	bls.n	8000738 <HAL_TIM_OC_DelayElapsedCallback+0x4f4>
 800072e:	187b      	adds	r3, r7, r1
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	4a66      	ldr	r2, [pc, #408]	; (80008cc <HAL_TIM_OC_DelayElapsedCallback+0x688>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d909      	bls.n	800074c <HAL_TIM_OC_DelayElapsedCallback+0x508>
			  // Turn off corresponding GPIO --> n200v_EN --> PC13
			  HAL_GPIO_WritePin(_N200V_EN.gpio, _N200V_EN.pin, GPIO_PIN_RESET);
 8000738:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	4b64      	ldr	r3, [pc, #400]	; (80008d0 <HAL_TIM_OC_DelayElapsedCallback+0x68c>)
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	0019      	movs	r1, r3
 8000744:	f002 fbc1 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 8000748:	f7ff fd6a 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PA6 = adcResultsDMA[5];       // ADC_IN6, n800v_mon: n800 voltage monitor
 800074c:	2124      	movs	r1, #36	; 0x24
 800074e:	187b      	adds	r3, r7, r1
 8000750:	4a58      	ldr	r2, [pc, #352]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000752:	8952      	ldrh	r2, [r2, #10]
 8000754:	801a      	strh	r2, [r3, #0]
		  if (PA6 < PA6_MIN || PA6 > PA6_MAX) {
 8000756:	187b      	adds	r3, r7, r1
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	4a5e      	ldr	r2, [pc, #376]	; (80008d4 <HAL_TIM_OC_DelayElapsedCallback+0x690>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d904      	bls.n	800076a <HAL_TIM_OC_DelayElapsedCallback+0x526>
 8000760:	187b      	adds	r3, r7, r1
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	4a5c      	ldr	r2, [pc, #368]	; (80008d8 <HAL_TIM_OC_DelayElapsedCallback+0x694>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d909      	bls.n	800077e <HAL_TIM_OC_DelayElapsedCallback+0x53a>
			  // Turn off corresponding GPIO --> 800HVON --> PB6
			  HAL_GPIO_WritePin(_N800V_EN.gpio, _N800V_EN.pin, GPIO_PIN_RESET);
 800076a:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x698>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <HAL_TIM_OC_DelayElapsedCallback+0x698>)
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	0019      	movs	r1, r3
 8000776:	f002 fba8 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 800077a:	f7ff fd51 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC0 = adcResultsDMA[9];       // ADC_IN10, 2v5_mon: 2.5v voltage monitor
 800077e:	2122      	movs	r1, #34	; 0x22
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000784:	8a52      	ldrh	r2, [r2, #18]
 8000786:	801a      	strh	r2, [r3, #0]
		  if (PC0 < PC0_MIN || PC0 > PC0_MAX) {
 8000788:	187b      	adds	r3, r7, r1
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4a54      	ldr	r2, [pc, #336]	; (80008e0 <HAL_TIM_OC_DelayElapsedCallback+0x69c>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d904      	bls.n	800079c <HAL_TIM_OC_DelayElapsedCallback+0x558>
 8000792:	187b      	adds	r3, r7, r1
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4a53      	ldr	r2, [pc, #332]	; (80008e4 <HAL_TIM_OC_DelayElapsedCallback+0x6a0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d909      	bls.n	80007b0 <HAL_TIM_OC_DelayElapsedCallback+0x56c>
			  // Turn off corresponding GPIO --> SYS_ON (No corresponding EN) --> PB5
			  HAL_GPIO_WritePin(_SYS_ON.gpio, _SYS_ON.pin, GPIO_PIN_RESET);
 800079c:	4b48      	ldr	r3, [pc, #288]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	4b47      	ldr	r3, [pc, #284]	; (80008c0 <HAL_TIM_OC_DelayElapsedCallback+0x67c>)
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	0019      	movs	r1, r3
 80007a8:	f002 fb8f 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 80007ac:	f7ff fd38 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC1 = adcResultsDMA[10];      // ADC_IN11, n5v_mon: n5v voltage monitor
 80007b0:	2120      	movs	r1, #32
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80007b6:	8a92      	ldrh	r2, [r2, #20]
 80007b8:	801a      	strh	r2, [r3, #0]
		  if (PC1 < PC1_MIN || PC1 > PC1_MAX) {
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4a4a      	ldr	r2, [pc, #296]	; (80008e8 <HAL_TIM_OC_DelayElapsedCallback+0x6a4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d905      	bls.n	80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x58c>
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	881a      	ldrh	r2, [r3, #0]
 80007c8:	2383      	movs	r3, #131	; 0x83
 80007ca:	015b      	lsls	r3, r3, #5
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d309      	bcc.n	80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x5a0>
			  // Turn off corresponding GPIO --> n5v_EN --> PC8
			  HAL_GPIO_WritePin(_N5V_EN.gpio, _N5V_EN.pin, GPIO_PIN_RESET);
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4b45      	ldr	r3, [pc, #276]	; (80008ec <HAL_TIM_OC_DelayElapsedCallback+0x6a8>)
 80007d6:	889b      	ldrh	r3, [r3, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	0019      	movs	r1, r3
 80007dc:	f002 fb75 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 80007e0:	f7ff fd1e 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC2 = adcResultsDMA[11];      // ADC_IN12, 5v_mon: 5v voltage monitor
 80007e4:	211e      	movs	r1, #30
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 80007ea:	8ad2      	ldrh	r2, [r2, #22]
 80007ec:	801a      	strh	r2, [r3, #0]
		  if (PC2 < PC2_MIN || PC2 > PC2_MAX) {
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d905      	bls.n	8000804 <HAL_TIM_OC_DelayElapsedCallback+0x5c0>
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	2386      	movs	r3, #134	; 0x86
 80007fe:	015b      	lsls	r3, r3, #5
 8000800:	429a      	cmp	r2, r3
 8000802:	d909      	bls.n	8000818 <HAL_TIM_OC_DelayElapsedCallback+0x5d4>
			  // Turn off corresponding GPIO --> 5v_EN --> PC10
			  HAL_GPIO_WritePin(_5V_EN.gpio, _5V_EN.pin, GPIO_PIN_RESET);
 8000804:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6ac>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <HAL_TIM_OC_DelayElapsedCallback+0x6ac>)
 800080a:	889b      	ldrh	r3, [r3, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	0019      	movs	r1, r3
 8000810:	f002 fb5b 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 8000814:	f7ff fd04 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC3 = adcResultsDMA[12];      // ADC_IN13, n3v3_mon: n3v3 voltage monitor
 8000818:	211c      	movs	r1, #28
 800081a:	187b      	adds	r3, r7, r1
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 800081e:	8b12      	ldrh	r2, [r2, #24]
 8000820:	801a      	strh	r2, [r3, #0]
		  if (PC3 < PC3_MIN || PC3 > PC3_MAX) {
 8000822:	187b      	adds	r3, r7, r1
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6b0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d905      	bls.n	8000838 <HAL_TIM_OC_DelayElapsedCallback+0x5f4>
 800082c:	187b      	adds	r3, r7, r1
 800082e:	881a      	ldrh	r2, [r3, #0]
 8000830:	2386      	movs	r3, #134	; 0x86
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	429a      	cmp	r2, r3
 8000836:	d909      	bls.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x608>
			  // Turn off corresponding GPIO --> n3v3_EN --> PC6
			  HAL_GPIO_WritePin(_N3V3_EN.gpio, _N3V3_EN.pin, GPIO_PIN_RESET);
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x6b4>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <HAL_TIM_OC_DelayElapsedCallback+0x6b4>)
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	0019      	movs	r1, r3
 8000844:	f002 fb41 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 8000848:	f7ff fcea 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC4 = adcResultsDMA[13];      // ADC_IN14, 5vref_mon: 5v reference voltage monitor
 800084c:	211a      	movs	r1, #26
 800084e:	187b      	adds	r3, r7, r1
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000852:	8b52      	ldrh	r2, [r2, #26]
 8000854:	801a      	strh	r2, [r3, #0]
		  if (PC4 < PC4_MIN || PC4 > PC4_MAX) {
 8000856:	187b      	adds	r3, r7, r1
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <HAL_TIM_OC_DelayElapsedCallback+0x678>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d905      	bls.n	800086c <HAL_TIM_OC_DelayElapsedCallback+0x628>
 8000860:	187b      	adds	r3, r7, r1
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	015b      	lsls	r3, r3, #5
 8000868:	429a      	cmp	r2, r3
 800086a:	d309      	bcc.n	8000880 <HAL_TIM_OC_DelayElapsedCallback+0x63c>
			  // Turn off corresponding GPIO --> 15v_EN --> PC9
			  HAL_GPIO_WritePin(_15V_EN.gpio, _15V_EN.pin, GPIO_PIN_RESET);
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x6b8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <HAL_TIM_OC_DelayElapsedCallback+0x6b8>)
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	0019      	movs	r1, r3
 8000878:	f002 fb27 	bl	8002eca <HAL_GPIO_WritePin>
			  // Reset system
			  NVIC_SystemReset();
 800087c:	f7ff fcd0 	bl	8000220 <__NVIC_SystemReset>
		  }
		  uint16_t PC5 = adcResultsDMA[14];      // ADC_IN15, 15v_mon: 15v voltage monitor
 8000880:	2118      	movs	r1, #24
 8000882:	187b      	adds	r3, r7, r1
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_TIM_OC_DelayElapsedCallback+0x670>)
 8000886:	8b92      	ldrh	r2, [r2, #28]
 8000888:	801a      	strh	r2, [r3, #0]
		  if (PC5 < PC5_MIN || PC5 > PC5_MAX) {
 800088a:	187b      	adds	r3, r7, r1
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <HAL_TIM_OC_DelayElapsedCallback+0x6bc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d904      	bls.n	800089e <HAL_TIM_OC_DelayElapsedCallback+0x65a>
 8000894:	187b      	adds	r3, r7, r1
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <HAL_TIM_OC_DelayElapsedCallback+0x6c0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d936      	bls.n	800090c <HAL_TIM_OC_DelayElapsedCallback+0x6c8>
			  // Turn off corresponding GPIO --> 15v_EN --> PC9
			  gpio _3V3_EN = {GPIOC, GPIO_PIN_7};
 800089e:	230c      	movs	r3, #12
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_TIM_OC_DelayElapsedCallback+0x6c4>)
 80008a4:	ca03      	ldmia	r2!, {r0, r1}
 80008a6:	c303      	stmia	r3!, {r0, r1}
			  // Reset system
			  NVIC_SystemReset();
 80008a8:	f7ff fcba 	bl	8000220 <__NVIC_SystemReset>
 80008ac:	20000124 	.word	0x20000124
 80008b0:	0800664c 	.word	0x0800664c
 80008b4:	20000354 	.word	0x20000354
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	00000d15 	.word	0x00000d15
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	00000dd3 	.word	0x00000dd3
 80008cc:	000010e7 	.word	0x000010e7
 80008d0:	20000030 	.word	0x20000030
 80008d4:	00000b2a 	.word	0x00000b2a
 80008d8:	00000da6 	.word	0x00000da6
 80008dc:	20000038 	.word	0x20000038
 80008e0:	00000ae7 	.word	0x00000ae7
 80008e4:	00000d54 	.word	0x00000d54
 80008e8:	00000d63 	.word	0x00000d63
 80008ec:	20000020 	.word	0x20000020
 80008f0:	20000010 	.word	0x20000010
 80008f4:	00000db3 	.word	0x00000db3
 80008f8:	20000018 	.word	0x20000018
 80008fc:	20000028 	.word	0x20000028
 8000900:	00000d0b 	.word	0x00000d0b
 8000904:	00000ff2 	.word	0x00000ff2
 8000908:	08006658 	.word	0x08006658
		  }




		  hk_buf[0] = hk_sync;                     // HK SYNC 0xCC MSB					0 SYNC
 800090c:	22cc      	movs	r2, #204	; 0xcc
 800090e:	4bb3      	ldr	r3, [pc, #716]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000910:	701a      	strb	r2, [r3, #0]
		  hk_buf[1] = hk_sync;                     // HK SYNC 0xCC LSB
 8000912:	22cc      	movs	r2, #204	; 0xcc
 8000914:	4bb1      	ldr	r3, [pc, #708]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000916:	705a      	strb	r2, [r3, #1]
		  hk_buf[2] = ((hk_seq & 0xFF00) >> 8);    // HK SEQ # MSB		1 SEQUENCE
 8000918:	4bb1      	ldr	r3, [pc, #708]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x99c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	b29b      	uxth	r3, r3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4bae      	ldr	r3, [pc, #696]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000924:	709a      	strb	r2, [r3, #2]
		  hk_buf[3] = (hk_seq & 0xFF);             // HK SEQ # LSB
 8000926:	4bae      	ldr	r3, [pc, #696]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x99c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4bab      	ldr	r3, [pc, #684]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 800092e:	70da      	strb	r2, [r3, #3]
		  hk_buf[4] = ((MCU_TEMP & 0xFF00) >> 8); // VSENSE MSB		13 VSENSE
 8000930:	2130      	movs	r1, #48	; 0x30
 8000932:	187b      	adds	r3, r7, r1
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4ba7      	ldr	r3, [pc, #668]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 800093e:	711a      	strb	r2, [r3, #4]
		  hk_buf[5] = (MCU_TEMP & 0xFF);          // VSENSE LSB
 8000940:	187b      	adds	r3, r7, r1
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4ba5      	ldr	r3, [pc, #660]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000948:	715a      	strb	r2, [r3, #5]
		  hk_buf[6] = ((MCU_VREF & 0xFF00) >> 8);
 800094a:	212e      	movs	r1, #46	; 0x2e
 800094c:	187b      	adds	r3, r7, r1
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4ba1      	ldr	r3, [pc, #644]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000958:	719a      	strb	r2, [r3, #6]
		  hk_buf[7] = (MCU_VREF & 0xFF);
 800095a:	187b      	adds	r3, r7, r1
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b9e      	ldr	r3, [pc, #632]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000962:	71da      	strb	r2, [r3, #7]
		  hk_buf[8] = ((output1 & 0xFF00) >> 8);
 8000964:	2146      	movs	r1, #70	; 0x46
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	5e9b      	ldrsh	r3, [r3, r2]
 800096c:	121b      	asrs	r3, r3, #8
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b9a      	ldr	r3, [pc, #616]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000972:	721a      	strb	r2, [r3, #8]
		  hk_buf[9] = (output1 & 0xFF);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b98      	ldr	r3, [pc, #608]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 800097c:	725a      	strb	r2, [r3, #9]
		  hk_buf[10] = ((output2 & 0xFF00) >> 8);
 800097e:	2144      	movs	r1, #68	; 0x44
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	5e9b      	ldrsh	r3, [r3, r2]
 8000986:	121b      	asrs	r3, r3, #8
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b94      	ldr	r3, [pc, #592]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 800098c:	729a      	strb	r2, [r3, #10]
		  hk_buf[11] = (output2 & 0xFF);
 800098e:	187b      	adds	r3, r7, r1
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b91      	ldr	r3, [pc, #580]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000996:	72da      	strb	r2, [r3, #11]
		  hk_buf[12] = ((output3 & 0xFF00) >> 8);
 8000998:	2142      	movs	r1, #66	; 0x42
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	5e9b      	ldrsh	r3, [r3, r2]
 80009a0:	121b      	asrs	r3, r3, #8
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b8d      	ldr	r3, [pc, #564]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009a6:	731a      	strb	r2, [r3, #12]
		  hk_buf[13] = (output3 & 0xFF);
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b8b      	ldr	r3, [pc, #556]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009b0:	735a      	strb	r2, [r3, #13]
		  hk_buf[14] = ((output4 & 0xFF00) >> 8);
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	5e9b      	ldrsh	r3, [r3, r2]
 80009ba:	121b      	asrs	r3, r3, #8
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b87      	ldr	r3, [pc, #540]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009c0:	739a      	strb	r2, [r3, #14]
		  hk_buf[15] = (output4 & 0xFF);
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b84      	ldr	r3, [pc, #528]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009ca:	73da      	strb	r2, [r3, #15]
		  hk_buf[16] = ((PA1 & 0xFF00) >> 8);       // BUS_Vmon MSB			2 BUS_VMON PA1
 80009cc:	212c      	movs	r1, #44	; 0x2c
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b80      	ldr	r3, [pc, #512]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009da:	741a      	strb	r2, [r3, #16]
		  hk_buf[17] = (PA1 & 0xFF);                // BUS_Vmon LSB
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b7e      	ldr	r3, [pc, #504]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009e4:	745a      	strb	r2, [r3, #17]
		  hk_buf[18] = ((PA2 & 0xFF00) >> 8);       // BUS_Imon MSB			3 BUS_IMON PA2
 80009e6:	212a      	movs	r1, #42	; 0x2a
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b7a      	ldr	r3, [pc, #488]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009f4:	749a      	strb	r2, [r3, #18]
		  hk_buf[19] = (PA2 & 0xFF);                // BUS_Imon LSB
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 80009fe:	74da      	strb	r2, [r3, #19]
		  hk_buf[20] = ((PC0 & 0xFF00) >> 8);      	// 2v5_mon MSB			7 2V5_MON PC0
 8000a00:	2122      	movs	r1, #34	; 0x22
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b73      	ldr	r3, [pc, #460]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a0e:	751a      	strb	r2, [r3, #20]
		  hk_buf[21] = (PC0 & 0xFF);               	// 2v5_mon LSB
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a18:	755a      	strb	r2, [r3, #21]
		  hk_buf[22] = ((PA3 & 0xFF00) >> 8);       // 3v3_mon MSB			4 3v3_MON PA3
 8000a1a:	2128      	movs	r1, #40	; 0x28
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a28:	759a      	strb	r2, [r3, #22]
		  hk_buf[23] = (PA3 & 0xFF);                // 3v3_mon LSB
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b6a      	ldr	r3, [pc, #424]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a32:	75da      	strb	r2, [r3, #23]
		  hk_buf[24] = ((PC2 & 0xFF00) >> 8);      	// 5v_mon MSB			9 5V_MON PC2
 8000a34:	211e      	movs	r1, #30
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a42:	761a      	strb	r2, [r3, #24]
		  hk_buf[25] = (PC2 & 0xFF);               	// 5v_mon LSB
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a4c:	765a      	strb	r2, [r3, #25]
		  hk_buf[26] = ((PC3 & 0xFF00) >> 8);      	// n3v3_mon MSB			10 N3V3_MON PC3
 8000a4e:	211c      	movs	r1, #28
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a5c:	769a      	strb	r2, [r3, #26]
		  hk_buf[27] = (PC3 & 0xFF);               	// n3v3_mon LSB
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b5d      	ldr	r3, [pc, #372]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a66:	76da      	strb	r2, [r3, #27]
		  hk_buf[28] = ((PC1 & 0xFF00) >> 8);      	// n5v_mon MSB			8 N5V_MON PC1
 8000a68:	2120      	movs	r1, #32
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	0a1b      	lsrs	r3, r3, #8
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a76:	771a      	strb	r2, [r3, #28]
		  hk_buf[29] = (PC1 & 0xFF);               	// n5v_mon LSB
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b57      	ldr	r3, [pc, #348]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a80:	775a      	strb	r2, [r3, #29]
		  hk_buf[30] = ((PC5 & 0xFF00) >> 8);      	// 15v_mon MSB			12 15V_MON PC5
 8000a82:	2118      	movs	r1, #24
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a90:	779a      	strb	r2, [r3, #30]
		  hk_buf[31] = (PC5 & 0xFF);               	// 15v_mon LSB
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000a9a:	77da      	strb	r2, [r3, #31]
		  hk_buf[32] = ((PC4 & 0xFF00) >> 8);      	// 5vref_mon MSB		11 5VREF_MON PC4
 8000a9c:	201a      	movs	r0, #26
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2d9      	uxtb	r1, r3
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	5499      	strb	r1, [r3, r2]
		  hk_buf[33] = (PC4 & 0xFF);               	// 5vref_mon LSB
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b2d9      	uxtb	r1, r3
 8000ab4:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000ab6:	2221      	movs	r2, #33	; 0x21
 8000ab8:	5499      	strb	r1, [r3, r2]
		  hk_buf[34] = ((PA5 & 0xFF00) >> 8);      	// n150v_mon MSB		5 N150V_MON PA5
 8000aba:	2026      	movs	r0, #38	; 0x26
 8000abc:	183b      	adds	r3, r7, r0
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2d9      	uxtb	r1, r3
 8000ac6:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000ac8:	2222      	movs	r2, #34	; 0x22
 8000aca:	5499      	strb	r1, [r3, r2]
		  hk_buf[35] = (PA5 & 0xFF);               	// n150v_mon LSB
 8000acc:	183b      	adds	r3, r7, r0
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000ad4:	2223      	movs	r2, #35	; 0x23
 8000ad6:	5499      	strb	r1, [r3, r2]
		  hk_buf[36] = ((PA6 & 0xFF00) >> 8);      	// n800v_mon MSB		6 N800V_MON PA6
 8000ad8:	2024      	movs	r0, #36	; 0x24
 8000ada:	183b      	adds	r3, r7, r0
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2d9      	uxtb	r1, r3
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000ae6:	2224      	movs	r2, #36	; 0x24
 8000ae8:	5499      	strb	r1, [r3, r2]
		  hk_buf[37] = (PA6 & 0xFF);               	// n800v_mon LSB
 8000aea:	183b      	adds	r3, r7, r0
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2d9      	uxtb	r1, r3
 8000af0:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000af2:	2225      	movs	r2, #37	; 0x25
 8000af4:	5499      	strb	r1, [r3, r2]

		  if (HK_ON)
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <HAL_TIM_OC_DelayElapsedCallback+0x9a0>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <HAL_TIM_OC_DelayElapsedCallback+0x8c6>
		  {
		   HAL_UART_Transmit(&huart1, hk_buf, sizeof(hk_buf), 100);
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_TIM_OC_DelayElapsedCallback+0x998>)
 8000b00:	4839      	ldr	r0, [pc, #228]	; (8000be8 <HAL_TIM_OC_DelayElapsedCallback+0x9a4>)
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2226      	movs	r2, #38	; 0x26
 8000b06:	f004 fd5d 	bl	80055c4 <HAL_UART_Transmit>
		  }
		  hk_counter = 1;
 8000b0a:	4b38      	ldr	r3, [pc, #224]	; (8000bec <HAL_TIM_OC_DelayElapsedCallback+0x9a8>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
		  hk_seq++;
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x99c>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <HAL_TIM_OC_DelayElapsedCallback+0x99c>)
 8000b1a:	801a      	strh	r2, [r3, #0]
	  }
	}
  }

  /* Timer 3 also called but doesn't need to do anything on IT */
}
 8000b1c:	e05a      	b.n	8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x990>
		  hk_counter++;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <HAL_TIM_OC_DelayElapsedCallback+0x9a8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_TIM_OC_DelayElapsedCallback+0x9a8>)
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	e054      	b.n	8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x990>
  else if (htim == &htim1)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_TIM_OC_DelayElapsedCallback+0x9ac>)
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d150      	bne.n	8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x990>
	  if (PMT_ON)
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_TIM_OC_DelayElapsedCallback+0x9b0>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04c      	beq.n	8000bd4 <HAL_TIM_OC_DelayElapsedCallback+0x990>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	005a      	lsls	r2, r3, #1
 8000b40:	2390      	movs	r3, #144	; 0x90
 8000b42:	05db      	lsls	r3, r3, #23
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f002 f9a2 	bl	8002e90 <HAL_GPIO_ReadPin>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d1f5      	bne.n	8000b3c <HAL_TIM_OC_DelayElapsedCallback+0x8f8>
		HAL_SPI_Transmit(&hspi1, (uint8_t * ) &WRITE, 1, 1);
 8000b50:	4929      	ldr	r1, [pc, #164]	; (8000bf8 <HAL_TIM_OC_DelayElapsedCallback+0x9b4>)
 8000b52:	482a      	ldr	r0, [pc, #168]	; (8000bfc <HAL_TIM_OC_DelayElapsedCallback+0x9b8>)
 8000b54:	2301      	movs	r3, #1
 8000b56:	2201      	movs	r2, #1
 8000b58:	f003 fd0c 	bl	8004574 <HAL_SPI_Transmit>
		SPI1->CR1 &= ~(1<<10); // THIS IS NEEDED TO STOP SPI1_SCK FROM GENERATING CLOCK PULSES
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x9bc>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x9bc>)
 8000b62:	4928      	ldr	r1, [pc, #160]	; (8000c04 <HAL_TIM_OC_DelayElapsedCallback+0x9c0>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
		while (!(SPI1->SR));
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x9bc>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0fb      	beq.n	8000b6a <HAL_TIM_OC_DelayElapsedCallback+0x926>
		pmt_raw = SPI1->DR;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <HAL_TIM_OC_DelayElapsedCallback+0x9bc>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	001a      	movs	r2, r3
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x9c4>)
 8000b7a:	601a      	str	r2, [r3, #0]
		int r = pmt_raw;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x9c4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
		  pmt_buf[0] = pmt_sync;
 8000b82:	22bb      	movs	r2, #187	; 0xbb
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000b86:	701a      	strb	r2, [r3, #0]
		  pmt_buf[1] = pmt_sync;
 8000b88:	22bb      	movs	r2, #187	; 0xbb
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000b8c:	705a      	strb	r2, [r3, #1]
		  pmt_buf[2] = ((pmt_seq & 0xFF00) >> 8);
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x9cc>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000b9a:	709a      	strb	r2, [r3, #2]
		  pmt_buf[3] = (pmt_seq & 0xFF);
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x9cc>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000ba4:	70da      	strb	r2, [r3, #3]
		  pmt_buf[4] = ((pmt_raw & 0xFF00) >> 8);
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x9c4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	121b      	asrs	r3, r3, #8
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000bb0:	711a      	strb	r2, [r3, #4]
		  pmt_buf[5] = (pmt_raw & 0xFF);
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_TIM_OC_DelayElapsedCallback+0x9c4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000bba:	715a      	strb	r2, [r3, #5]
		  pmt_seq++;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x9cc>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x9cc>)
 8000bc6:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, pmt_buf, sizeof(pmt_buf), 100);
 8000bc8:	4910      	ldr	r1, [pc, #64]	; (8000c0c <HAL_TIM_OC_DelayElapsedCallback+0x9c8>)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <HAL_TIM_OC_DelayElapsedCallback+0x9a4>)
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	2206      	movs	r2, #6
 8000bd0:	f004 fcf8 	bl	80055c4 <HAL_UART_Transmit>
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b013      	add	sp, #76	; 0x4c
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	20000398 	.word	0x20000398
 8000be0:	200003be 	.word	0x200003be
 8000be4:	20000062 	.word	0x20000062
 8000be8:	200002c8 	.word	0x200002c8
 8000bec:	200003c0 	.word	0x200003c0
 8000bf0:	20000238 	.word	0x20000238
 8000bf4:	20000060 	.word	0x20000060
 8000bf8:	080066d0 	.word	0x080066d0
 8000bfc:	20000170 	.word	0x20000170
 8000c00:	40013000 	.word	0x40013000
 8000c04:	fffffbff 	.word	0xfffffbff
 8000c08:	20000378 	.word	0x20000378
 8000c0c:	20000390 	.word	0x20000390
 8000c10:	20000396 	.word	0x20000396

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f000 ffe7 	bl	8001bec <HAL_Init>
  int16_t val;
  float temp_c;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 f87d 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f000 fc0d 	bl	8001440 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c26:	f000 fbed 	bl	8001404 <MX_DMA_Init>
  MX_SPI2_Init();
 8000c2a:	f000 fabf 	bl	80011ac <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c2e:	f000 fafd 	bl	800122c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c32:	f000 fb53 	bl	80012dc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c36:	f000 fa79 	bl	800112c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c3a:	f000 fba3 	bl	8001384 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000c3e:	f000 fa03 	bl	8001048 <MX_DAC1_Init>
  MX_ADC_Init();
 8000c42:	f000 f8d5 	bl	8000df0 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c46:	f000 fa31 	bl	80010ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <main+0xf0>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 fd5f 	bl	8002712 <HAL_DAC_Start>

  /* Pull All GPIOS Low at the begin */
  for (int i = 0; i < (sizeof(gpios) / sizeof(gpios[0])); i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	e010      	b.n	8000c7c <main+0x68>
	  HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <main+0xf4>)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	00d2      	lsls	r2, r2, #3
 8000c60:	58d0      	ldr	r0, [r2, r3]
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <main+0xf4>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0019      	movs	r1, r3
 8000c72:	f002 f92a 	bl	8002eca <HAL_GPIO_WritePin>
  for (int i = 0; i < (sizeof(gpios) / sizeof(gpios[0])); i++) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d9eb      	bls.n	8000c5a <main+0x46>
  }

  /* Start Timers with OC & Interrupt */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <main+0xf8>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 ff92 	bl	8004bb0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <main+0xfc>)
 8000c8e:	210c      	movs	r1, #12
 8000c90:	0018      	movs	r0, r3
 8000c92:	f003 ff8d 	bl	8004bb0 <HAL_TIM_OC_Start_IT>

  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <main+0x100>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	69da      	ldr	r2, [r3, #28]
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	025b      	lsls	r3, r3, #9
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	025b      	lsls	r3, r3, #9
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d0f5      	beq.n	8000c98 <main+0x84>
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <main+0x100>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	03db      	lsls	r3, r3, #15
 8000cb8:	401a      	ands	r2, r3
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	03db      	lsls	r3, r3, #15
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d1f5      	bne.n	8000cae <main+0x9a>

  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_ADDRESS;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <main+0x104>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  WakeUpSelection.AddressLength = UART_ADDRESS_DETECT_7B;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <main+0x104>)
 8000cca:	2210      	movs	r2, #16
 8000ccc:	809a      	strh	r2, [r3, #4]
  WakeUpSelection.Address = 0x23; // send "£"
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <main+0x104>)
 8000cd0:	2223      	movs	r2, #35	; 0x23
 8000cd2:	719a      	strb	r2, [r3, #6]

  if (HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection) != HAL_OK) {
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <main+0x104>)
 8000cd6:	480f      	ldr	r0, [pc, #60]	; (8000d14 <main+0x100>)
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	f005 fbbc 	bl	8006458 <HAL_UARTEx_StopModeWakeUpSourceConfig>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <main+0xd4>
      Error_Handler();
 8000ce4:	f000 fc68 	bl	80015b8 <Error_Handler>
  }
  /* Enable the LPUART Wake UP from stop mode Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <main+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <main+0x100>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	03c9      	lsls	r1, r1, #15
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	609a      	str	r2, [r3, #8]

  /* enable MCU wake-up by LPUART */
  HAL_UARTEx_EnableStopMode(&huart1);
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <main+0x100>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f005 fc11 	bl	8006524 <HAL_UARTEx_EnableStopMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <main+0xee>
 8000d04:	20000110 	.word	0x20000110
 8000d08:	08006680 	.word	0x08006680
 8000d0c:	20000238 	.word	0x20000238
 8000d10:	20000280 	.word	0x20000280
 8000d14:	200002c8 	.word	0x200002c8
 8000d18:	2000034c 	.word	0x2000034c

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b097      	sub	sp, #92	; 0x5c
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	2428      	movs	r4, #40	; 0x28
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	0018      	movs	r0, r3
 8000d28:	2330      	movs	r3, #48	; 0x30
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f005 fc73 	bl	8006618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d32:	2318      	movs	r3, #24
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	2310      	movs	r3, #16
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f005 fc6b 	bl	8006618 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f005 fc64 	bl	8006618 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000d50:	0021      	movs	r1, r4
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2212      	movs	r2, #18
 8000d56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2201      	movs	r2, #1
 8000d62:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2210      	movs	r2, #16
 8000d68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2202      	movs	r2, #2
 8000d74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	22a0      	movs	r2, #160	; 0xa0
 8000d80:	0392      	lsls	r2, r2, #14
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 fdef 	bl	8003970 <HAL_RCC_OscConfig>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d96:	f000 fc0f 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	2118      	movs	r1, #24
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2207      	movs	r2, #7
 8000da0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2101      	movs	r1, #1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f003 f8f3 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dc2:	f000 fbf9 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2221      	movs	r2, #33	; 0x21
 8000dca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2203      	movs	r2, #3
 8000dd0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f003 fa34 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000de4:	f000 fbe8 	bl	80015b8 <Error_Handler>
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b017      	add	sp, #92	; 0x5c
 8000dee:	bd90      	pop	{r4, r7, pc}

08000df0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f005 fc0a 	bl	8006618 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e04:	4b8e      	ldr	r3, [pc, #568]	; (8001040 <MX_ADC_Init+0x250>)
 8000e06:	4a8f      	ldr	r2, [pc, #572]	; (8001044 <MX_ADC_Init+0x254>)
 8000e08:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0a:	4b8d      	ldr	r3, [pc, #564]	; (8001040 <MX_ADC_Init+0x250>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e10:	4b8b      	ldr	r3, [pc, #556]	; (8001040 <MX_ADC_Init+0x250>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b8a      	ldr	r3, [pc, #552]	; (8001040 <MX_ADC_Init+0x250>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e1c:	4b88      	ldr	r3, [pc, #544]	; (8001040 <MX_ADC_Init+0x250>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b87      	ldr	r3, [pc, #540]	; (8001040 <MX_ADC_Init+0x250>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e28:	4b85      	ldr	r3, [pc, #532]	; (8001040 <MX_ADC_Init+0x250>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e2e:	4b84      	ldr	r3, [pc, #528]	; (8001040 <MX_ADC_Init+0x250>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e34:	4b82      	ldr	r3, [pc, #520]	; (8001040 <MX_ADC_Init+0x250>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b81      	ldr	r3, [pc, #516]	; (8001040 <MX_ADC_Init+0x250>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b7f      	ldr	r3, [pc, #508]	; (8001040 <MX_ADC_Init+0x250>)
 8000e42:	22c2      	movs	r2, #194	; 0xc2
 8000e44:	32ff      	adds	r2, #255	; 0xff
 8000e46:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e48:	4b7d      	ldr	r3, [pc, #500]	; (8001040 <MX_ADC_Init+0x250>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e4e:	4b7c      	ldr	r3, [pc, #496]	; (8001040 <MX_ADC_Init+0x250>)
 8000e50:	2224      	movs	r2, #36	; 0x24
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e56:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <MX_ADC_Init+0x250>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e5c:	4b78      	ldr	r3, [pc, #480]	; (8001040 <MX_ADC_Init+0x250>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 ff28 	bl	8001cb4 <HAL_ADC_Init>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 fba6 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0152      	lsls	r2, r2, #5
 8000e78:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0552      	lsls	r2, r2, #21
 8000e80:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e82:	1d3a      	adds	r2, r7, #4
 8000e84:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <MX_ADC_Init+0x250>)
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 f8ed 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e92:	f000 fb91 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e9c:	1d3a      	adds	r2, r7, #4
 8000e9e:	4b68      	ldr	r3, [pc, #416]	; (8001040 <MX_ADC_Init+0x250>)
 8000ea0:	0011      	movs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 f8e0 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000eac:	f000 fb84 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb6:	1d3a      	adds	r2, r7, #4
 8000eb8:	4b61      	ldr	r3, [pc, #388]	; (8001040 <MX_ADC_Init+0x250>)
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 f8d3 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000ec6:	f000 fb77 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2203      	movs	r2, #3
 8000ece:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed0:	1d3a      	adds	r2, r7, #4
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <MX_ADC_Init+0x250>)
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 f8c6 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000ee0:	f000 fb6a 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	4b54      	ldr	r3, [pc, #336]	; (8001040 <MX_ADC_Init+0x250>)
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 f8b9 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000efa:	f000 fb5d 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2206      	movs	r2, #6
 8000f02:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	4b4e      	ldr	r3, [pc, #312]	; (8001040 <MX_ADC_Init+0x250>)
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 f8ac 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000f14:	f000 fb50 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f1e:	1d3a      	adds	r2, r7, #4
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <MX_ADC_Init+0x250>)
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 f89f 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000f2e:	f000 fb43 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2208      	movs	r2, #8
 8000f36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f38:	1d3a      	adds	r2, r7, #4
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <MX_ADC_Init+0x250>)
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 f892 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000f48:	f000 fb36 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2209      	movs	r2, #9
 8000f50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f52:	1d3a      	adds	r2, r7, #4
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <MX_ADC_Init+0x250>)
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f001 f885 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000f62:	f000 fb29 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	220a      	movs	r2, #10
 8000f6a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6c:	1d3a      	adds	r2, r7, #4
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_ADC_Init+0x250>)
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 f878 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000f7c:	f000 fb1c 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	220b      	movs	r2, #11
 8000f84:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_ADC_Init+0x250>)
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 f86b 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000f96:	f000 fb0f 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fa0:	1d3a      	adds	r2, r7, #4
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC_Init+0x250>)
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 f85e 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000fb0:	f000 fb02 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	220d      	movs	r2, #13
 8000fb8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fba:	1d3a      	adds	r2, r7, #4
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_ADC_Init+0x250>)
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f001 f851 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000fca:	f000 faf5 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fd4:	1d3a      	adds	r2, r7, #4
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC_Init+0x250>)
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 f844 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000fe4:	f000 fae8 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	220f      	movs	r2, #15
 8000fec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_ADC_Init+0x250>)
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 f837 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000ffe:	f000 fadb 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2210      	movs	r2, #16
 8001006:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_ADC_Init+0x250>)
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f001 f82a 	bl	8002068 <HAL_ADC_ConfigChannel>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8001018:	f000 face 	bl	80015b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2211      	movs	r2, #17
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_ADC_Init+0x250>)
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f001 f81d 	bl	8002068 <HAL_ADC_ConfigChannel>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC_Init+0x246>
  {
    Error_Handler();
 8001032:	f000 fac1 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	2000008c 	.word	0x2000008c
 8001044:	40012400 	.word	0x40012400

08001048 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  step = 0;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_DAC1_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001054:	003b      	movs	r3, r7
 8001056:	0018      	movs	r0, r3
 8001058:	2308      	movs	r3, #8
 800105a:	001a      	movs	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f005 fadb 	bl	8006618 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_DAC1_Init+0x5c>)
 8001064:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <MX_DAC1_Init+0x60>)
 8001066:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_DAC1_Init+0x5c>)
 800106a:	0018      	movs	r0, r3
 800106c:	f001 faf0 	bl	8002650 <HAL_DAC_Init>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <MX_DAC1_Init+0x30>
  {
    Error_Handler();
 8001074:	f000 faa0 	bl	80015b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001078:	003b      	movs	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800107e:	003b      	movs	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001084:	0039      	movs	r1, r7
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_DAC1_Init+0x5c>)
 8001088:	2200      	movs	r2, #0
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fb03 	bl	8002696 <HAL_DAC_ConfigChannel>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <MX_DAC1_Init+0x50>
  {
    Error_Handler();
 8001094:	f000 fa90 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000376 	.word	0x20000376
 80010a4:	20000110 	.word	0x20000110
 80010a8:	40007400 	.word	0x40007400

080010ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_I2C1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_I2C1_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_I2C1_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 ff0b 	bl	8002f04 <HAL_I2C_Init>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 fa61 	bl	80015b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_I2C1_Init+0x74>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 fba0 	bl	8003840 <HAL_I2CEx_ConfigAnalogFilter>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 fa58 	bl	80015b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <MX_I2C1_Init+0x74>)
 800110a:	2100      	movs	r1, #0
 800110c:	0018      	movs	r0, r3
 800110e:	f002 fbe3 	bl	80038d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fa4f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000124 	.word	0x20000124
 8001124:	40005400 	.word	0x40005400
 8001128:	2000090e 	.word	0x2000090e

0800112c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <MX_SPI1_Init+0x7c>)
 8001134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001138:	2282      	movs	r2, #130	; 0x82
 800113a:	0052      	lsls	r2, r2, #1
 800113c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	00d2      	lsls	r2, r2, #3
 8001144:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001148:	22f0      	movs	r2, #240	; 0xf0
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_SPI1_Init+0x78>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001164:	2218      	movs	r2, #24
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_SPI1_Init+0x78>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_SPI1_Init+0x78>)
 800117c:	2207      	movs	r2, #7
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001188:	2208      	movs	r2, #8
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <MX_SPI1_Init+0x78>)
 800118e:	0018      	movs	r0, r3
 8001190:	f003 f938 	bl	8004404 <HAL_SPI_Init>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 fa0e 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000170 	.word	0x20000170
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_SPI2_Init+0x78>)
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <MX_SPI2_Init+0x7c>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_SPI2_Init+0x78>)
 80011b8:	2282      	movs	r2, #130	; 0x82
 80011ba:	0052      	lsls	r2, r2, #1
 80011bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_SPI2_Init+0x78>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	00d2      	lsls	r2, r2, #3
 80011c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI2_Init+0x78>)
 80011c8:	22f0      	movs	r2, #240	; 0xf0
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_SPI2_Init+0x78>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_SPI2_Init+0x78>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI2_Init+0x78>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_SPI2_Init+0x78>)
 80011e4:	2218      	movs	r2, #24
 80011e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI2_Init+0x78>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_SPI2_Init+0x78>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_SPI2_Init+0x78>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI2_Init+0x78>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_SPI2_Init+0x78>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI2_Init+0x78>)
 8001208:	2208      	movs	r2, #8
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <MX_SPI2_Init+0x78>)
 800120e:	0018      	movs	r0, r3
 8001210:	f003 f8f8 	bl	8004404 <HAL_SPI_Init>
 8001214:	1e03      	subs	r3, r0, #0
 8001216:	d001      	beq.n	800121c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 f9ce 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	200001d4 	.word	0x200001d4
 8001228:	40003800 	.word	0x40003800

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	2308      	movs	r3, #8
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	0018      	movs	r0, r3
 8001238:	2310      	movs	r3, #16
 800123a:	001a      	movs	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f005 f9eb 	bl	8006618 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	003b      	movs	r3, r7
 8001244:	0018      	movs	r0, r3
 8001246:	2308      	movs	r3, #8
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f005 f9e4 	bl	8006618 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <MX_TIM1_Init+0xa8>)
 8001254:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100 - 1;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001258:	2263      	movs	r2, #99	; 0x63
 800125a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM1_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000 - 1;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_TIM1_Init+0xac>)
 8001266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM1_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM1_Init+0xa4>)
 800127c:	0018      	movs	r0, r3
 800127e:	f003 fc47 	bl	8004b10 <HAL_TIM_Base_Init>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001286:	f000 f997 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	2108      	movs	r1, #8
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001294:	187a      	adds	r2, r7, r1
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_TIM1_Init+0xa4>)
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f003 fe9e 	bl	8004fdc <HAL_TIM_ConfigClockSource>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 f988 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	003b      	movs	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	003b      	movs	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b4:	003a      	movs	r2, r7
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_TIM1_Init+0xa4>)
 80012b8:	0011      	movs	r1, r2
 80012ba:	0018      	movs	r0, r3
 80012bc:	f004 f8c0 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80012c4:	f000 f978 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b006      	add	sp, #24
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000238 	.word	0x20000238
 80012d4:	40012c00 	.word	0x40012c00
 80012d8:	00005dbf 	.word	0x00005dbf

080012dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	2308      	movs	r3, #8
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	0018      	movs	r0, r3
 80012e8:	2310      	movs	r3, #16
 80012ea:	001a      	movs	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f005 f993 	bl	8006618 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	003b      	movs	r3, r7
 80012f4:	0018      	movs	r0, r3
 80012f6:	2308      	movs	r3, #8
 80012f8:	001a      	movs	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f005 f98c 	bl	8006618 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_TIM2_Init+0xa0>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	05d2      	lsls	r2, r2, #23
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_TIM2_Init+0xa0>)
 800130a:	2263      	movs	r2, #99	; 0x63
 800130c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_TIM2_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000 - 1;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_TIM2_Init+0xa0>)
 8001316:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <MX_TIM2_Init+0xa4>)
 8001318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_TIM2_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_TIM2_Init+0xa0>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_TIM2_Init+0xa0>)
 8001328:	0018      	movs	r0, r3
 800132a:	f003 fbf1 	bl	8004b10 <HAL_TIM_Base_Init>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001332:	f000 f941 	bl	80015b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001336:	2108      	movs	r1, #8
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0152      	lsls	r2, r2, #5
 800133e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001340:	187a      	adds	r2, r7, r1
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_TIM2_Init+0xa0>)
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f003 fe48 	bl	8004fdc <HAL_TIM_ConfigClockSource>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001350:	f000 f932 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	003b      	movs	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	003b      	movs	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001360:	003a      	movs	r2, r7
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_TIM2_Init+0xa0>)
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f004 f86a 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001370:	f000 f922 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000280 	.word	0x20000280
 8001380:	00005dbf 	.word	0x00005dbf

08001384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  erpa_seq = 0;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_USART1_UART_Init+0x6c>)
 800138a:	2200      	movs	r2, #0
 800138c:	801a      	strh	r2, [r3, #0]
  pmt_seq = 0;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_USART1_UART_Init+0x70>)
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
  hk_seq = 0;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_USART1_UART_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_USART1_UART_Init+0x78>)
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <MX_USART1_UART_Init+0x7c>)
 800139e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013a2:	22e1      	movs	r2, #225	; 0xe1
 80013a4:	0212      	lsls	r2, r2, #8
 80013a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013bc:	220c      	movs	r2, #12
 80013be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_USART1_UART_Init+0x78>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f004 f89e 	bl	800551c <HAL_UART_Init>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80013e4:	f000 f8e8 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	2000038e 	.word	0x2000038e
 80013f4:	20000396 	.word	0x20000396
 80013f8:	200003be 	.word	0x200003be
 80013fc:	200002c8 	.word	0x200002c8
 8001400:	40013800 	.word	0x40013800

08001404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_DMA_Init+0x38>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_DMA_Init+0x38>)
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_DMA_Init+0x38>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2201      	movs	r2, #1
 800141c:	4013      	ands	r3, r2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2009      	movs	r0, #9
 8001428:	f001 f8e0 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800142c:	2009      	movs	r0, #9
 800142e:	f001 f8f2 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40021000 	.word	0x40021000

08001440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	2414      	movs	r4, #20
 8001448:	193b      	adds	r3, r7, r4
 800144a:	0018      	movs	r0, r3
 800144c:	2314      	movs	r3, #20
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f005 f8e1 	bl	8006618 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <MX_GPIO_Init+0x168>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0309      	lsls	r1, r1, #12
 8001460:	430a      	orrs	r2, r1
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	031b      	lsls	r3, r3, #12
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	03c9      	lsls	r1, r1, #15
 800147c:	430a      	orrs	r2, r1
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	03db      	lsls	r3, r3, #15
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <MX_GPIO_Init+0x168>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0289      	lsls	r1, r1, #10
 8001498:	430a      	orrs	r2, r1
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <MX_GPIO_Init+0x168>)
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	029b      	lsls	r3, r3, #10
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	02c9      	lsls	r1, r1, #11
 80014b4:	430a      	orrs	r2, r1
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_GPIO_Init+0x168>)
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	02db      	lsls	r3, r3, #11
 80014c0:	4013      	ands	r3, r2
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014c6:	239f      	movs	r3, #159	; 0x9f
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	4838      	ldr	r0, [pc, #224]	; (80015ac <MX_GPIO_Init+0x16c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	0019      	movs	r1, r3
 80014d0:	f001 fcfb 	bl	8002eca <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80014d4:	2386      	movs	r3, #134	; 0x86
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4835      	ldr	r0, [pc, #212]	; (80015b0 <MX_GPIO_Init+0x170>)
 80014da:	2200      	movs	r2, #0
 80014dc:	0019      	movs	r1, r3
 80014de:	f001 fcf4 	bl	8002eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	0059      	lsls	r1, r3, #1
 80014e6:	2390      	movs	r3, #144	; 0x90
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	2200      	movs	r2, #0
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 fcec 	bl	8002eca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <MX_GPIO_Init+0x174>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	21c0      	movs	r1, #192	; 0xc0
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 fce6 	bl	8002eca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	229f      	movs	r2, #159	; 0x9f
 8001502:	0192      	lsls	r2, r2, #6
 8001504:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2201      	movs	r2, #1
 800150a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	193b      	adds	r3, r7, r4
 800151a:	4a24      	ldr	r2, [pc, #144]	; (80015ac <MX_GPIO_Init+0x16c>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f001 fb46 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_5|GPIO_PIN_6;
 8001524:	0021      	movs	r1, r4
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2286      	movs	r2, #134	; 0x86
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	000c      	movs	r4, r1
 8001530:	193b      	adds	r3, r7, r4
 8001532:	2201      	movs	r2, #1
 8001534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	193b      	adds	r3, r7, r4
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	193b      	adds	r3, r7, r4
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <MX_GPIO_Init+0x170>)
 8001546:	0019      	movs	r1, r3
 8001548:	0010      	movs	r0, r2
 800154a:	f001 fb31 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800154e:	0021      	movs	r1, r4
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0052      	lsls	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	000c      	movs	r4, r1
 800155a:	193b      	adds	r3, r7, r4
 800155c:	2201      	movs	r2, #1
 800155e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	193b      	adds	r3, r7, r4
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	193b      	adds	r3, r7, r4
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	193a      	adds	r2, r7, r4
 800156e:	2390      	movs	r3, #144	; 0x90
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f001 fb1b 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	0021      	movs	r1, r4
 800157c:	187b      	adds	r3, r7, r1
 800157e:	22c0      	movs	r2, #192	; 0xc0
 8001580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2201      	movs	r2, #1
 8001586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001594:	187b      	adds	r3, r7, r1
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <MX_GPIO_Init+0x174>)
 8001598:	0019      	movs	r1, r3
 800159a:	0010      	movs	r0, r2
 800159c:	f001 fb08 	bl	8002bb0 <HAL_GPIO_Init>

}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b00b      	add	sp, #44	; 0x2c
 80015a6:	bd90      	pop	{r4, r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48001400 	.word	0x48001400

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x44>)
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_MspInit+0x44>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x44>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2201      	movs	r2, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x44>)
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_MspInit+0x44>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0549      	lsls	r1, r1, #21
 80015ec:	430a      	orrs	r2, r1
 80015ee:	61da      	str	r2, [r3, #28]
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_MspInit+0x44>)
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	4013      	ands	r3, r2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08d      	sub	sp, #52	; 0x34
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	241c      	movs	r4, #28
 8001616:	193b      	adds	r3, r7, r4
 8001618:	0018      	movs	r0, r3
 800161a:	2314      	movs	r3, #20
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f004 fffa 	bl	8006618 <memset>
  if(hadc->Instance==ADC1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a4a      	ldr	r2, [pc, #296]	; (8001754 <HAL_ADC_MspInit+0x148>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_ADC_MspInit+0x24>
 800162e:	e08d      	b.n	800174c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0089      	lsls	r1, r1, #2
 800163a:	430a      	orrs	r2, r1
 800163c:	619a      	str	r2, [r3, #24]
 800163e:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0309      	lsls	r1, r1, #12
 8001656:	430a      	orrs	r2, r1
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	031b      	lsls	r3, r3, #12
 8001662:	4013      	ands	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0289      	lsls	r1, r1, #10
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	02c9      	lsls	r1, r1, #11
 800168e:	430a      	orrs	r2, r1
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_ADC_MspInit+0x14c>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	02db      	lsls	r3, r3, #11
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	223f      	movs	r2, #63	; 0x3f
 80016a4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2203      	movs	r2, #3
 80016aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_ADC_MspInit+0x150>)
 80016b6:	0019      	movs	r1, r3
 80016b8:	0010      	movs	r0, r2
 80016ba:	f001 fa79 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	22ef      	movs	r2, #239	; 0xef
 80016c2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	2203      	movs	r2, #3
 80016c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	2390      	movs	r3, #144	; 0x90
 80016d4:	05db      	lsls	r3, r3, #23
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 fa69 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2203      	movs	r2, #3
 80016e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2203      	movs	r2, #3
 80016e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <HAL_ADC_MspInit+0x154>)
 80016f4:	0019      	movs	r1, r3
 80016f6:	0010      	movs	r0, r2
 80016f8:	f001 fa5a 	bl	8002bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0x158>)
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_ADC_MspInit+0x15c>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_ADC_MspInit+0x158>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_ADC_MspInit+0x158>)
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_ADC_MspInit+0x158>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001732:	0018      	movs	r0, r3
 8001734:	f001 f826 	bl	8002784 <HAL_DMA_Init>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800173c:	f7ff ff3c 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001744:	631a      	str	r2, [r3, #48]	; 0x30
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <HAL_ADC_MspInit+0x158>)
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b00d      	add	sp, #52	; 0x34
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	40012400 	.word	0x40012400
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	48000400 	.word	0x48000400
 8001764:	200000cc 	.word	0x200000cc
 8001768:	40020008 	.word	0x40020008

0800176c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b08b      	sub	sp, #44	; 0x2c
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	2414      	movs	r4, #20
 8001776:	193b      	adds	r3, r7, r4
 8001778:	0018      	movs	r0, r3
 800177a:	2314      	movs	r3, #20
 800177c:	001a      	movs	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	f004 ff4a 	bl	8006618 <memset>
  if(hdac->Instance==DAC)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_DAC_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	0589      	lsls	r1, r1, #22
 8001798:	430a      	orrs	r2, r1
 800179a:	61da      	str	r2, [r3, #28]
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	059b      	lsls	r3, r3, #22
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0289      	lsls	r1, r1, #10
 80017b4:	430a      	orrs	r2, r1
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_DAC_MspInit+0x88>)
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2210      	movs	r2, #16
 80017ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	2203      	movs	r2, #3
 80017d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	193a      	adds	r2, r7, r4
 80017da:	2390      	movs	r3, #144	; 0x90
 80017dc:	05db      	lsls	r3, r3, #23
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 f9e5 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b00b      	add	sp, #44	; 0x2c
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40007400 	.word	0x40007400
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	2414      	movs	r4, #20
 8001802:	193b      	adds	r3, r7, r4
 8001804:	0018      	movs	r0, r3
 8001806:	2314      	movs	r3, #20
 8001808:	001a      	movs	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	f004 ff04 	bl	8006618 <memset>
  if(hi2c->Instance==I2C1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_I2C_MspInit+0x90>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d132      	bne.n	8001880 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_I2C_MspInit+0x94>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	02c9      	lsls	r1, r1, #11
 8001824:	430a      	orrs	r2, r1
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_I2C_MspInit+0x94>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	02db      	lsls	r3, r3, #11
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	22c0      	movs	r2, #192	; 0xc0
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183e:	0021      	movs	r1, r4
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2212      	movs	r2, #18
 8001844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2203      	movs	r2, #3
 8001850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	2201      	movs	r2, #1
 8001856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	187b      	adds	r3, r7, r1
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_I2C_MspInit+0x98>)
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f001 f9a6 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001866:	69da      	ldr	r2, [r3, #28]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0x94>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0389      	lsls	r1, r1, #14
 800186e:	430a      	orrs	r2, r1
 8001870:	61da      	str	r2, [r3, #28]
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_I2C_MspInit+0x94>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	039b      	lsls	r3, r3, #14
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b00b      	add	sp, #44	; 0x2c
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40021000 	.word	0x40021000
 8001890:	48000400 	.word	0x48000400

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08d      	sub	sp, #52	; 0x34
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	241c      	movs	r4, #28
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	0018      	movs	r0, r3
 80018a2:	2314      	movs	r3, #20
 80018a4:	001a      	movs	r2, r3
 80018a6:	2100      	movs	r1, #0
 80018a8:	f004 feb6 	bl	8006618 <memset>
  if(hspi->Instance==SPI1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_SPI_MspInit+0x100>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d132      	bne.n	800191c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0149      	lsls	r1, r1, #5
 80018c0:	430a      	orrs	r2, r1
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	02c9      	lsls	r1, r1, #11
 80018dc:	430a      	orrs	r2, r1
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_SPI_MspInit+0x104>)
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	02db      	lsls	r3, r3, #11
 80018e8:	4013      	ands	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018ee:	0021      	movs	r1, r4
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2218      	movs	r2, #24
 80018f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2202      	movs	r2, #2
 80018fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2203      	movs	r2, #3
 8001906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	187b      	adds	r3, r7, r1
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_SPI_MspInit+0x108>)
 8001912:	0019      	movs	r1, r3
 8001914:	0010      	movs	r0, r2
 8001916:	f001 f94b 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800191a:	e037      	b.n	800198c <HAL_SPI_MspInit+0xf8>
  else if(hspi->Instance==SPI2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_SPI_MspInit+0x10c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d132      	bne.n	800198c <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_SPI_MspInit+0x104>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_SPI_MspInit+0x104>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	01c9      	lsls	r1, r1, #7
 8001930:	430a      	orrs	r2, r1
 8001932:	61da      	str	r2, [r3, #28]
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_SPI_MspInit+0x104>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	01db      	lsls	r3, r3, #7
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_SPI_MspInit+0x104>)
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_SPI_MspInit+0x104>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	02c9      	lsls	r1, r1, #11
 800194c:	430a      	orrs	r2, r1
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_SPI_MspInit+0x104>)
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	02db      	lsls	r3, r3, #11
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800195e:	211c      	movs	r1, #28
 8001960:	187b      	adds	r3, r7, r1
 8001962:	22c0      	movs	r2, #192	; 0xc0
 8001964:	01d2      	lsls	r2, r2, #7
 8001966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2202      	movs	r2, #2
 800196c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2203      	movs	r2, #3
 8001978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	187b      	adds	r3, r7, r1
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_SPI_MspInit+0x108>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f001 f912 	bl	8002bb0 <HAL_GPIO_Init>
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b00d      	add	sp, #52	; 0x34
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	40013000 	.word	0x40013000
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400
 80019a0:	40003800 	.word	0x40003800

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_TIM_Base_MspInit+0x8c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0109      	lsls	r1, r1, #4
 80019c0:	430a      	orrs	r2, r1
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2101      	movs	r1, #1
 80019d6:	200d      	movs	r0, #13
 80019d8:	f000 fe08 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80019dc:	200d      	movs	r0, #13
 80019de:	f000 fe1a 	bl	8002616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	200e      	movs	r0, #14
 80019e8:	f000 fe00 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019ec:	200e      	movs	r0, #14
 80019ee:	f000 fe12 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019f2:	e019      	b.n	8001a28 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d113      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_Base_MspInit+0x90>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	200f      	movs	r0, #15
 8001a1e:	f000 fde5 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 fdf7 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b08b      	sub	sp, #44	; 0x2c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	2414      	movs	r4, #20
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	0018      	movs	r0, r3
 8001a46:	2314      	movs	r3, #20
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f004 fde4 	bl	8006618 <memset>
  if(huart->Instance==USART1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_UART_MspInit+0xa4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d13b      	bne.n	8001ad2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	01c9      	lsls	r1, r1, #7
 8001a64:	430a      	orrs	r2, r1
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	01db      	lsls	r3, r3, #7
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0289      	lsls	r1, r1, #10
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	22c0      	movs	r2, #192	; 0xc0
 8001a96:	00d2      	lsls	r2, r2, #3
 8001a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	187a      	adds	r2, r7, r1
 8001ab6:	2390      	movs	r3, #144	; 0x90
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 f877 	bl	8002bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	201b      	movs	r0, #27
 8001ac8:	f000 fd90 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001acc:	201b      	movs	r0, #27
 8001ace:	f000 fda2 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b00b      	add	sp, #44	; 0x2c
 8001ad8:	bd90      	pop	{r4, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f8b8 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <DMA1_Channel1_IRQHandler+0x14>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 ff5d 	bl	80029da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	200000cc 	.word	0x200000cc

08001b2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f003 f93c 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	20000238 	.word	0x20000238

08001b44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <TIM1_CC_IRQHandler+0x14>)
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f003 f930 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000238 	.word	0x20000238

08001b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <TIM2_IRQHandler+0x14>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f003 f924 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	20000280 	.word	0x20000280

08001b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <USART1_IRQHandler+0x14>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f003 fdcc 	bl	8005718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	200002c8 	.word	0x200002c8

08001b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bc2:	f7ff ffe3 	bl	8001b8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bc6:	f004 fd03 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff f823 	bl	8000c14 <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   r0, =_estack
 8001bd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bdc:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8001be0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be4:	200003c8 	.word	0x200003c8

08001be8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_COMP_IRQHandler>
	...

08001bec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_Init+0x24>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_Init+0x24>)
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f809 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c02:	f7ff fcdf 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c1e:	681c      	ldr	r4, [r3, #0]
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_InitTick+0x60>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	0019      	movs	r1, r3
 8001c26:	23fa      	movs	r3, #250	; 0xfa
 8001c28:	0098      	lsls	r0, r3, #2
 8001c2a:	f7fe fa6d 	bl	8000108 <__udivsi3>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	0019      	movs	r1, r3
 8001c32:	0020      	movs	r0, r4
 8001c34:	f7fe fa68 	bl	8000108 <__udivsi3>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 fcfb 	bl	8002636 <HAL_SYSTICK_Config>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00f      	b.n	8001c68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d80b      	bhi.n	8001c66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	2301      	movs	r3, #1
 8001c52:	425b      	negs	r3, r3
 8001c54:	2200      	movs	r2, #0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fcc8 	bl	80025ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_InitTick+0x64>)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b003      	add	sp, #12
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	20000064 	.word	0x20000064
 8001c74:	2000006c 	.word	0x2000006c
 8001c78:	20000068 	.word	0x20000068

08001c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x1c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	001a      	movs	r2, r3
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	18d2      	adds	r2, r2, r3
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_IncTick+0x20>)
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	2000006c 	.word	0x2000006c
 8001c9c:	200003c4 	.word	0x200003c4

08001ca0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_GetTick+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200003c4 	.word	0x200003c4

08001cb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e125      	b.n	8001f1e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2234      	movs	r2, #52	; 0x34
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7ff fc8e 	bl	800160c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d000      	beq.n	8001cfc <HAL_ADC_Init+0x48>
 8001cfa:	e103      	b.n	8001f04 <HAL_ADC_Init+0x250>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d000      	beq.n	8001d08 <HAL_ADC_Init+0x54>
 8001d06:	e0fd      	b.n	8001f04 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001d12:	d000      	beq.n	8001d16 <HAL_ADC_Init+0x62>
 8001d14:	e0f6      	b.n	8001f04 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	4a83      	ldr	r2, [pc, #524]	; (8001f28 <HAL_ADC_Init+0x274>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2202      	movs	r2, #2
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d112      	bne.n	8001d5a <HAL_ADC_Init+0xa6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d009      	beq.n	8001d56 <HAL_ADC_Init+0xa2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0xa6>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_ADC_Init+0xa8>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d116      	bne.n	8001d8e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2218      	movs	r2, #24
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	0899      	lsrs	r1, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4964      	ldr	r1, [pc, #400]	; (8001f2c <HAL_ADC_Init+0x278>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7e1b      	ldrb	r3, [r3, #24]
 8001da2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e5b      	ldrb	r3, [r3, #25]
 8001da8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001daa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e9b      	ldrb	r3, [r3, #26]
 8001db0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001db2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d002      	beq.n	8001dc2 <HAL_ADC_Init+0x10e>
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_Init+0x110>
 8001dc2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dc4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001dca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_Init+0x124>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_Init+0x126>
 8001dd8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001dda:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2124      	movs	r1, #36	; 0x24
 8001de0:	5c5b      	ldrb	r3, [r3, r1]
 8001de2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001de4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7edb      	ldrb	r3, [r3, #27]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d115      	bne.n	8001e20 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e9b      	ldrb	r3, [r3, #26]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	0252      	lsls	r2, r2, #9
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	e00b      	b.n	8001e20 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	2201      	movs	r2, #1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	23c2      	movs	r3, #194	; 0xc2
 8001e26:	33ff      	adds	r3, #255	; 0xff
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d007      	beq.n	8001e3c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68d9      	ldr	r1, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d01b      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d017      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d013      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d00f      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00b      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d007      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d003      	beq.n	8001e90 <HAL_ADC_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	d112      	bne.n	8001eb6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2107      	movs	r1, #7
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6959      	ldr	r1, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	2207      	movs	r2, #7
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_ADC_Init+0x27c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10b      	bne.n	8001ede <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001edc:	e01c      	b.n	8001f18 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	2212      	movs	r2, #18
 8001ee4:	4393      	bics	r3, r2
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f02:	e009      	b.n	8001f18 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	2210      	movs	r2, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001f10:	230f      	movs	r3, #15
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	fffffefd 	.word	0xfffffefd
 8001f2c:	fffe0219 	.word	0xfffe0219
 8001f30:	833fffe7 	.word	0x833fffe7

08001f34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2317      	movs	r3, #23
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	4013      	ands	r3, r2
 8001f52:	d15e      	bne.n	8002012 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2234      	movs	r2, #52	; 0x34
 8001f58:	5c9b      	ldrb	r3, [r3, r2]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x2e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e05e      	b.n	8002020 <HAL_ADC_Start_DMA+0xec>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2234      	movs	r2, #52	; 0x34
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	7e5b      	ldrb	r3, [r3, #25]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d007      	beq.n	8001f82 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f72:	2317      	movs	r3, #23
 8001f74:	18fc      	adds	r4, r7, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f983 	bl	8002284 <ADC_Enable>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f82:	2317      	movs	r3, #23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d146      	bne.n	800201a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_ADC_Start_DMA+0xf4>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	0052      	lsls	r2, r2, #1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2234      	movs	r2, #52	; 0x34
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_ADC_Start_DMA+0xf8>)
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADC_Start_DMA+0xfc>)
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_ADC_Start_DMA+0x100>)
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	221c      	movs	r2, #28
 8001fca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3340      	adds	r3, #64	; 0x40
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f000 fc0a 	bl	8002814 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2104      	movs	r1, #4
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e003      	b.n	800201a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002012:	2317      	movs	r3, #23
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2202      	movs	r2, #2
 8002018:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800201a:	2317      	movs	r3, #23
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b007      	add	sp, #28
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	fffff0fe 	.word	0xfffff0fe
 800202c:	0800238d 	.word	0x0800238d
 8002030:	08002441 	.word	0x08002441
 8002034:	0800245f 	.word	0x0800245f

08002038 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	230f      	movs	r3, #15
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	055b      	lsls	r3, r3, #21
 8002086:	429a      	cmp	r2, r3
 8002088:	d011      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x46>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d00d      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x46>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	2b02      	cmp	r3, #2
 8002098:	d009      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x46>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d005      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x46>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d001      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x46>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2234      	movs	r2, #52	; 0x34
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x54>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0d0      	b.n	800225e <HAL_ADC_ConfigChannel+0x1f6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2234      	movs	r2, #52	; 0x34
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2204      	movs	r2, #4
 80020cc:	4013      	ands	r3, r2
 80020ce:	d000      	beq.n	80020d2 <HAL_ADC_ConfigChannel+0x6a>
 80020d0:	e0b4      	b.n	800223c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_ADC_ConfigChannel+0x200>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <HAL_ADC_ConfigChannel+0x76>
 80020dc:	e082      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d037      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d033      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b02      	cmp	r3, #2
 800210e:	d02f      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b03      	cmp	r3, #3
 8002116:	d02b      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	2b04      	cmp	r3, #4
 800211e:	d027      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	2b05      	cmp	r3, #5
 8002126:	d023      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2b06      	cmp	r3, #6
 800212e:	d01f      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2b07      	cmp	r3, #7
 8002136:	d01b      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2107      	movs	r1, #7
 8002144:	400b      	ands	r3, r1
 8002146:	429a      	cmp	r2, r3
 8002148:	d012      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2107      	movs	r1, #7
 8002156:	438a      	bics	r2, r1
 8002158:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6959      	ldr	r1, [r3, #20]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2207      	movs	r2, #7
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b10      	cmp	r3, #16
 8002176:	d007      	beq.n	8002188 <HAL_ADC_ConfigChannel+0x120>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b11      	cmp	r3, #17
 800217e:	d003      	beq.n	8002188 <HAL_ADC_ConfigChannel+0x120>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d163      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_ADC_ConfigChannel+0x204>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b10      	cmp	r3, #16
 8002192:	d009      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0x140>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b11      	cmp	r3, #17
 800219a:	d102      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x13a>
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	03db      	lsls	r3, r3, #15
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x144>
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	045b      	lsls	r3, r3, #17
 80021a6:	e001      	b.n	80021ac <HAL_ADC_ConfigChannel+0x144>
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_ADC_ConfigChannel+0x204>)
 80021ae:	430b      	orrs	r3, r1
 80021b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d14a      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_ADC_ConfigChannel+0x208>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	492d      	ldr	r1, [pc, #180]	; (8002274 <HAL_ADC_ConfigChannel+0x20c>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fd ffa1 	bl	8000108 <__udivsi3>
 80021c6:	0003      	movs	r3, r0
 80021c8:	001a      	movs	r2, r3
 80021ca:	0013      	movs	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x16e>
 80021e2:	e035      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4099      	lsls	r1, r3
 80021f2:	000b      	movs	r3, r1
 80021f4:	43d9      	mvns	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d007      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x1ae>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b11      	cmp	r3, #17
 800220c:	d003      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x1ae>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b12      	cmp	r3, #18
 8002214:	d11c      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_ADC_ConfigChannel+0x204>)
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d007      	beq.n	8002232 <HAL_ADC_ConfigChannel+0x1ca>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b11      	cmp	r3, #17
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1c6>
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_ADC_ConfigChannel+0x210>)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_ADC_ConfigChannel+0x214>)
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_ADC_ConfigChannel+0x218>)
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_ADC_ConfigChannel+0x204>)
 8002236:	400b      	ands	r3, r1
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e009      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	2220      	movs	r2, #32
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2234      	movs	r2, #52	; 0x34
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	781b      	ldrb	r3, [r3, #0]
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b004      	add	sp, #16
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	00001001 	.word	0x00001001
 800226c:	40012708 	.word	0x40012708
 8002270:	20000064 	.word	0x20000064
 8002274:	000f4240 	.word	0x000f4240
 8002278:	ffbfffff 	.word	0xffbfffff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	ff7fffff 	.word	0xff7fffff

08002284 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2203      	movs	r2, #3
 800229c:	4013      	ands	r3, r2
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d112      	bne.n	80022c8 <ADC_Enable+0x44>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d009      	beq.n	80022c4 <ADC_Enable+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	401a      	ands	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d101      	bne.n	80022c8 <ADC_Enable+0x44>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <ADC_Enable+0x46>
 80022c8:	2300      	movs	r3, #0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d152      	bne.n	8002374 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <ADC_Enable+0xfc>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	2210      	movs	r2, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2201      	movs	r2, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e03f      	b.n	8002376 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <ADC_Enable+0x100>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	491f      	ldr	r1, [pc, #124]	; (8002388 <ADC_Enable+0x104>)
 800230c:	0018      	movs	r0, r3
 800230e:	f7fd fefb 	bl	8000108 <__udivsi3>
 8002312:	0003      	movs	r3, r0
 8002314:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002316:	e002      	b.n	800231e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3b01      	subs	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002324:	f7ff fcbc 	bl	8001ca0 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800232c:	e01b      	b.n	8002366 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800232e:	f7ff fcb7 	bl	8001ca0 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d914      	bls.n	8002366 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	4013      	ands	r3, r2
 8002346:	2b01      	cmp	r3, #1
 8002348:	d00d      	beq.n	8002366 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	2210      	movs	r2, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2201      	movs	r2, #1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	2b01      	cmp	r3, #1
 8002372:	d1dc      	bne.n	800232e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	80000017 	.word	0x80000017
 8002384:	20000064 	.word	0x20000064
 8002388:	000f4240 	.word	0x000f4240

0800238c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	2250      	movs	r2, #80	; 0x50
 80023a0:	4013      	ands	r3, r2
 80023a2:	d140      	bne.n	8002426 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	23c0      	movs	r3, #192	; 0xc0
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	d12d      	bne.n	800241c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d129      	bne.n	800241c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d122      	bne.n	800241c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2204      	movs	r2, #4
 80023de:	4013      	ands	r3, r2
 80023e0:	d110      	bne.n	8002404 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	210c      	movs	r1, #12
 80023ee:	438a      	bics	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <ADC_DMAConvCplt+0xb0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	2201      	movs	r2, #1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
 8002402:	e00b      	b.n	800241c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	2220      	movs	r2, #32
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	2201      	movs	r2, #1
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff fe0a 	bl	8002038 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002424:	e005      	b.n	8002432 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	0010      	movs	r0, r2
 8002430:	4798      	blx	r3
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	fffffefe 	.word	0xfffffefe

08002440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fdf9 	bl	8002048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}

0800245e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	2204      	movs	r2, #4
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff fde6 	bl	8002058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b004      	add	sp, #16
 8002492:	bd80      	pop	{r7, pc}

08002494 <__NVIC_EnableIRQ>:
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	0002      	movs	r2, r0
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	1dfb      	adds	r3, r7, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b7f      	cmp	r3, #127	; 0x7f
 80024a6:	d809      	bhi.n	80024bc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	001a      	movs	r2, r3
 80024ae:	231f      	movs	r3, #31
 80024b0:	401a      	ands	r2, r3
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_EnableIRQ+0x30>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	4091      	lsls	r1, r2
 80024b8:	000a      	movs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	0002      	movs	r2, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b7f      	cmp	r3, #127	; 0x7f
 80024dc:	d828      	bhi.n	8002530 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024de:	4a2f      	ldr	r2, [pc, #188]	; (800259c <__NVIC_SetPriority+0xd4>)
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	33c0      	adds	r3, #192	; 0xc0
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	589b      	ldr	r3, [r3, r2]
 80024ee:	1dfa      	adds	r2, r7, #7
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	0011      	movs	r1, r2
 80024f4:	2203      	movs	r2, #3
 80024f6:	400a      	ands	r2, r1
 80024f8:	00d2      	lsls	r2, r2, #3
 80024fa:	21ff      	movs	r1, #255	; 0xff
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	43d2      	mvns	r2, r2
 8002502:	401a      	ands	r2, r3
 8002504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	22ff      	movs	r2, #255	; 0xff
 800250c:	401a      	ands	r2, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	0018      	movs	r0, r3
 8002514:	2303      	movs	r3, #3
 8002516:	4003      	ands	r3, r0
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251c:	481f      	ldr	r0, [pc, #124]	; (800259c <__NVIC_SetPriority+0xd4>)
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b25b      	sxtb	r3, r3
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	430a      	orrs	r2, r1
 8002528:	33c0      	adds	r3, #192	; 0xc0
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	501a      	str	r2, [r3, r0]
}
 800252e:	e031      	b.n	8002594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <__NVIC_SetPriority+0xd8>)
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	0019      	movs	r1, r3
 8002538:	230f      	movs	r3, #15
 800253a:	400b      	ands	r3, r1
 800253c:	3b08      	subs	r3, #8
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3306      	adds	r3, #6
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1dfa      	adds	r2, r7, #7
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	0011      	movs	r1, r2
 8002550:	2203      	movs	r2, #3
 8002552:	400a      	ands	r2, r1
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	21ff      	movs	r1, #255	; 0xff
 8002558:	4091      	lsls	r1, r2
 800255a:	000a      	movs	r2, r1
 800255c:	43d2      	mvns	r2, r2
 800255e:	401a      	ands	r2, r3
 8002560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	22ff      	movs	r2, #255	; 0xff
 8002568:	401a      	ands	r2, r3
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	2303      	movs	r3, #3
 8002572:	4003      	ands	r3, r0
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <__NVIC_SetPriority+0xd8>)
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	001c      	movs	r4, r3
 8002580:	230f      	movs	r3, #15
 8002582:	4023      	ands	r3, r4
 8002584:	3b08      	subs	r3, #8
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	430a      	orrs	r2, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	18c3      	adds	r3, r0, r3
 8002590:	3304      	adds	r3, #4
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b003      	add	sp, #12
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	045b      	lsls	r3, r3, #17
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d301      	bcc.n	80025bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b8:	2301      	movs	r3, #1
 80025ba:	e010      	b.n	80025de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <SysTick_Config+0x44>)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3a01      	subs	r2, #1
 80025c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c4:	2301      	movs	r3, #1
 80025c6:	425b      	negs	r3, r3
 80025c8:	2103      	movs	r1, #3
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff7c 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x44>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x44>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	210f      	movs	r1, #15
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	187b      	adds	r3, r7, r1
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
 8002606:	0011      	movs	r1, r2
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	0002      	movs	r2, r0
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ff33 	bl	8002494 <__NVIC_EnableIRQ>
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ffaf 	bl	80025a4 <SysTick_Config>
 8002646:	0003      	movs	r3, r0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e015      	b.n	800268e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	791b      	ldrb	r3, [r3, #4]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff f879 	bl	800176c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	795b      	ldrb	r3, [r3, #5]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_DAC_ConfigChannel+0x20>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e029      	b.n	800270a <HAL_DAC_ConfigChannel+0x74>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2202      	movs	r2, #2
 80026c0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 80026ca:	223e      	movs	r2, #62	; 0x3e
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	43da      	mvns	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4013      	ands	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b006      	add	sp, #24
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	795b      	ldrb	r3, [r3, #5]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DAC_Start+0x16>
 8002724:	2302      	movs	r3, #2
 8002726:	e028      	b.n	800277a <HAL_DAC_Start+0x68>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	409a      	lsls	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	223c      	movs	r2, #60	; 0x3c
 8002756:	4013      	ands	r3, r2
 8002758:	2b3c      	cmp	r3, #60	; 0x3c
 800275a:	d107      	bne.n	800276c <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e036      	b.n	8002808 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2221      	movs	r2, #33	; 0x21
 800279e:	2102      	movs	r1, #2
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_DMA_Init+0x8c>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f9c4 	bl	8002b78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}  
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}
 8002810:	ffffc00f 	.word	0xffffc00f

08002814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002822:	2317      	movs	r3, #23
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_DMA_Start_IT+0x24>
 8002834:	2302      	movs	r3, #2
 8002836:	e04f      	b.n	80028d8 <HAL_DMA_Start_IT+0xc4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	2101      	movs	r1, #1
 800283e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d13a      	bne.n	80028c2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2221      	movs	r2, #33	; 0x21
 8002850:	2102      	movs	r1, #2
 8002852:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f954 	bl	8002b1e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	210e      	movs	r1, #14
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00f      	b.n	80028b0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	210a      	movs	r1, #10
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2104      	movs	r1, #4
 80028ac:	438a      	bics	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80028ca:	2317      	movs	r3, #23
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2202      	movs	r2, #2
 80028d0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80028d2:	2317      	movs	r3, #23
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	781b      	ldrb	r3, [r3, #0]
} 
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b006      	add	sp, #24
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d008      	beq.n	8002906 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2204      	movs	r2, #4
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e020      	b.n	8002948 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	210e      	movs	r1, #14
 8002912:	438a      	bics	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	438a      	bics	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2101      	movs	r1, #1
 8002930:	4091      	lsls	r1, r2
 8002932:	000a      	movs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2221      	movs	r2, #33	; 0x21
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	210f      	movs	r1, #15
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2221      	movs	r2, #33	; 0x21
 8002964:	5c9b      	ldrb	r3, [r3, r2]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d006      	beq.n	800297a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e028      	b.n	80029cc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	210e      	movs	r1, #14
 8002986:	438a      	bics	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	2101      	movs	r1, #1
 80029a4:	4091      	lsls	r1, r2
 80029a6:	000a      	movs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2221      	movs	r2, #33	; 0x21
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	0010      	movs	r0, r2
 80029ca:	4798      	blx	r3
    } 
  }
  return status;
 80029cc:	230f      	movs	r3, #15
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	781b      	ldrb	r3, [r3, #0]
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b004      	add	sp, #16
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2204      	movs	r2, #4
 80029f8:	409a      	lsls	r2, r3
 80029fa:	0013      	movs	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	d024      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x72>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2204      	movs	r2, #4
 8002a06:	4013      	ands	r3, r2
 8002a08:	d020      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2220      	movs	r2, #32
 8002a12:	4013      	ands	r3, r2
 8002a14:	d107      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2104      	movs	r1, #4
 8002a22:	438a      	bics	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	2104      	movs	r1, #4
 8002a30:	4091      	lsls	r1, r2
 8002a32:	000a      	movs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d100      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x66>
 8002a3e:	e06a      	b.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	0010      	movs	r0, r2
 8002a48:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002a4a:	e064      	b.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2202      	movs	r2, #2
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d02b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xda>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d027      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d10b      	bne.n	8002a88 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	210a      	movs	r1, #10
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2221      	movs	r2, #33	; 0x21
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2102      	movs	r1, #2
 8002a92:	4091      	lsls	r1, r2
 8002a94:	000a      	movs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d036      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	0010      	movs	r0, r2
 8002ab0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002ab2:	e030      	b.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2208      	movs	r2, #8
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d028      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d024      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	210e      	movs	r1, #14
 8002ad8:	438a      	bics	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4091      	lsls	r1, r2
 8002ae8:	000a      	movs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2221      	movs	r2, #33	; 0x21
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	0010      	movs	r0, r2
 8002b12:	4798      	blx	r3
    }
   }
}  
 8002b14:	e7ff      	b.n	8002b16 <HAL_DMA_IRQHandler+0x13c>
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	2101      	movs	r1, #1
 8002b36:	4091      	lsls	r1, r2
 8002b38:	000a      	movs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d108      	bne.n	8002b5e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b5c:	e007      	b.n	8002b6e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b004      	add	sp, #16
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x30>)
 8002b86:	4694      	mov	ip, r2
 8002b88:	4463      	add	r3, ip
 8002b8a:	2114      	movs	r1, #20
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fd fabb 	bl	8000108 <__udivsi3>
 8002b92:	0003      	movs	r3, r0
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <DMA_CalcBaseAndBitshift+0x34>)
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	bffdfff8 	.word	0xbffdfff8
 8002bac:	40020000 	.word	0x40020000

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bbe:	e14f      	b.n	8002e60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4091      	lsls	r1, r2
 8002bca:	000a      	movs	r2, r1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d100      	bne.n	8002bd8 <HAL_GPIO_Init+0x28>
 8002bd6:	e140      	b.n	8002e5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d005      	beq.n	8002bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d130      	bne.n	8002c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	0013      	movs	r3, r2
 8002c00:	43da      	mvns	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c26:	2201      	movs	r2, #1
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d017      	beq.n	8002c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2203      	movs	r2, #3
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d123      	bne.n	8002ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	58d3      	ldr	r3, [r2, r3]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2207      	movs	r2, #7
 8002cac:	4013      	ands	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2107      	movs	r1, #7
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	401a      	ands	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	409a      	lsls	r2, r3
 8002d08:	0013      	movs	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	23c0      	movs	r3, #192	; 0xc0
 8002d1c:	029b      	lsls	r3, r3, #10
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d100      	bne.n	8002d24 <HAL_GPIO_Init+0x174>
 8002d22:	e09a      	b.n	8002e5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d24:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <HAL_GPIO_Init+0x2c8>)
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_GPIO_Init+0x2c8>)
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <HAL_GPIO_Init+0x2c8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2201      	movs	r2, #1
 8002d36:	4013      	ands	r3, r2
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d3c:	4a4f      	ldr	r2, [pc, #316]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	589b      	ldr	r3, [r3, r2]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	409a      	lsls	r2, r3
 8002d56:	0013      	movs	r3, r2
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	2390      	movs	r3, #144	; 0x90
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0x1e2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00d      	beq.n	8002d8e <HAL_GPIO_Init+0x1de>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <HAL_GPIO_Init+0x2d4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <HAL_GPIO_Init+0x2d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_GPIO_Init+0x1d6>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e004      	b.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x1e4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	2103      	movs	r1, #3
 8002d98:	400a      	ands	r2, r1
 8002d9a:	0092      	lsls	r2, r2, #2
 8002d9c:	4093      	lsls	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002da4:	4935      	ldr	r1, [pc, #212]	; (8002e7c <HAL_GPIO_Init+0x2cc>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	025b      	lsls	r3, r3, #9
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	4013      	ands	r3, r2
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	035b      	lsls	r3, r3, #13
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	039b      	lsls	r3, r3, #14
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_GPIO_Init+0x2dc>)
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	40da      	lsrs	r2, r3
 8002e68:	1e13      	subs	r3, r2, #0
 8002e6a:	d000      	beq.n	8002e6e <HAL_GPIO_Init+0x2be>
 8002e6c:	e6a8      	b.n	8002bc0 <HAL_GPIO_Init+0x10>
  } 
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	48000400 	.word	0x48000400
 8002e84:	48000800 	.word	0x48000800
 8002e88:	48000c00 	.word	0x48000c00
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	000a      	movs	r2, r1
 8002e9a:	1cbb      	adds	r3, r7, #2
 8002e9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	1cba      	adds	r2, r7, #2
 8002ea4:	8812      	ldrh	r2, [r2, #0]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002eaa:	230f      	movs	r3, #15
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e003      	b.n	8002ebc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ebc:	230f      	movs	r3, #15
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
  }
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	1cbb      	adds	r3, r7, #2
 8002ed8:	1c02      	adds	r2, r0, #0
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	1c7b      	adds	r3, r7, #1
 8002ede:	1c0a      	adds	r2, r1, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee2:	1c7b      	adds	r3, r7, #1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eea:	1cbb      	adds	r3, r7, #2
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef2:	e003      	b.n	8002efc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef4:	1cbb      	adds	r3, r7, #2
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e082      	b.n	800301c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2241      	movs	r2, #65	; 0x41
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2240      	movs	r2, #64	; 0x40
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fe fc63 	bl	80017f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2241      	movs	r2, #65	; 0x41
 8002f36:	2124      	movs	r1, #36	; 0x24
 8002f38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_I2C_Init+0x120>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4931      	ldr	r1, [pc, #196]	; (8003028 <HAL_I2C_Init+0x124>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	0209      	lsls	r1, r1, #8
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e007      	b.n	8002f92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2184      	movs	r1, #132	; 0x84
 8002f8c:	0209      	lsls	r1, r1, #8
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d104      	bne.n	8002fa4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	491f      	ldr	r1, [pc, #124]	; (800302c <HAL_I2C_Init+0x128>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	491a      	ldr	r1, [pc, #104]	; (8003028 <HAL_I2C_Init+0x124>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69d9      	ldr	r1, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1a      	ldr	r2, [r3, #32]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2241      	movs	r2, #65	; 0x41
 8003008:	2120      	movs	r1, #32
 800300a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2242      	movs	r2, #66	; 0x42
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	f0ffffff 	.word	0xf0ffffff
 8003028:	ffff7fff 	.word	0xffff7fff
 800302c:	02008000 	.word	0x02008000

08003030 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	0008      	movs	r0, r1
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	0019      	movs	r1, r3
 800303e:	230a      	movs	r3, #10
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	1c02      	adds	r2, r0, #0
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	2308      	movs	r3, #8
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	1c0a      	adds	r2, r1, #0
 800304c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2241      	movs	r2, #65	; 0x41
 8003052:	5c9b      	ldrb	r3, [r3, r2]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	d000      	beq.n	800305c <HAL_I2C_Master_Transmit+0x2c>
 800305a:	e0e7      	b.n	800322c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	5c9b      	ldrb	r3, [r3, r2]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_I2C_Master_Transmit+0x3a>
 8003066:	2302      	movs	r3, #2
 8003068:	e0e1      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003072:	f7fe fe15 	bl	8001ca0 <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	0219      	lsls	r1, r3, #8
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2319      	movs	r3, #25
 8003086:	2201      	movs	r2, #1
 8003088:	f000 fa04 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0cc      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2241      	movs	r2, #65	; 0x41
 8003098:	2121      	movs	r1, #33	; 0x21
 800309a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2242      	movs	r2, #66	; 0x42
 80030a0:	2110      	movs	r1, #16
 80030a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2208      	movs	r2, #8
 80030b4:	18ba      	adds	r2, r7, r2
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d911      	bls.n	80030ee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	045c      	lsls	r4, r3, #17
 80030da:	230a      	movs	r3, #10
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	8819      	ldrh	r1, [r3, #0]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	4b55      	ldr	r3, [pc, #340]	; (8003238 <HAL_I2C_Master_Transmit+0x208>)
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	0023      	movs	r3, r4
 80030e8:	f000 fb74 	bl	80037d4 <I2C_TransferConfig>
 80030ec:	e075      	b.n	80031da <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	049c      	lsls	r4, r3, #18
 8003102:	230a      	movs	r3, #10
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	8819      	ldrh	r1, [r3, #0]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <HAL_I2C_Master_Transmit+0x208>)
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	0023      	movs	r3, r4
 8003110:	f000 fb60 	bl	80037d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003114:	e061      	b.n	80031da <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f9f8 	bl	8003512 <I2C_WaitOnTXISFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e081      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d03a      	beq.n	80031da <HAL_I2C_Master_Transmit+0x1aa>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d136      	bne.n	80031da <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	0013      	movs	r3, r2
 8003176:	2200      	movs	r2, #0
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	f000 f98b 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e053      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2bff      	cmp	r3, #255	; 0xff
 800318e:	d911      	bls.n	80031b4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	b2da      	uxtb	r2, r3
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	045c      	lsls	r4, r3, #17
 80031a0:	230a      	movs	r3, #10
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	8819      	ldrh	r1, [r3, #0]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	0023      	movs	r3, r4
 80031ae:	f000 fb11 	bl	80037d4 <I2C_TransferConfig>
 80031b2:	e012      	b.n	80031da <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	049c      	lsls	r4, r3, #18
 80031c8:	230a      	movs	r3, #10
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	8819      	ldrh	r1, [r3, #0]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	0023      	movs	r3, r4
 80031d6:	f000 fafd 	bl	80037d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d198      	bne.n	8003116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f9d0 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e01a      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2220      	movs	r2, #32
 80031fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	490c      	ldr	r1, [pc, #48]	; (800323c <HAL_I2C_Master_Transmit+0x20c>)
 800320c:	400a      	ands	r2, r1
 800320e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2241      	movs	r2, #65	; 0x41
 8003214:	2120      	movs	r1, #32
 8003216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2242      	movs	r2, #66	; 0x42
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	2100      	movs	r1, #0
 8003226:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b007      	add	sp, #28
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	80002000 	.word	0x80002000
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	0008      	movs	r0, r1
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	0019      	movs	r1, r3
 800324e:	230a      	movs	r3, #10
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	1c02      	adds	r2, r0, #0
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	2308      	movs	r3, #8
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	1c0a      	adds	r2, r1, #0
 800325c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2241      	movs	r2, #65	; 0x41
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d000      	beq.n	800326c <HAL_I2C_Master_Receive+0x2c>
 800326a:	e0e8      	b.n	800343e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	5c9b      	ldrb	r3, [r3, r2]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Master_Receive+0x3a>
 8003276:	2302      	movs	r3, #2
 8003278:	e0e2      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2240      	movs	r2, #64	; 0x40
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003282:	f7fe fd0d 	bl	8001ca0 <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	0219      	lsls	r1, r3, #8
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2319      	movs	r3, #25
 8003296:	2201      	movs	r2, #1
 8003298:	f000 f8fc 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cd      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2241      	movs	r2, #65	; 0x41
 80032a8:	2122      	movs	r1, #34	; 0x22
 80032aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2242      	movs	r2, #66	; 0x42
 80032b0:	2110      	movs	r1, #16
 80032b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2208      	movs	r2, #8
 80032c4:	18ba      	adds	r2, r7, r2
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2bff      	cmp	r3, #255	; 0xff
 80032d8:	d911      	bls.n	80032fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	045c      	lsls	r4, r3, #17
 80032ea:	230a      	movs	r3, #10
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	8819      	ldrh	r1, [r3, #0]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <HAL_I2C_Master_Receive+0x208>)
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	0023      	movs	r3, r4
 80032f8:	f000 fa6c 	bl	80037d4 <I2C_TransferConfig>
 80032fc:	e076      	b.n	80033ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	b2da      	uxtb	r2, r3
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	049c      	lsls	r4, r3, #18
 8003312:	230a      	movs	r3, #10
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	8819      	ldrh	r1, [r3, #0]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <HAL_I2C_Master_Receive+0x208>)
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	0023      	movs	r3, r4
 8003320:	f000 fa58 	bl	80037d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003324:	e062      	b.n	80033ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f96b 	bl	8003608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e082      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03a      	beq.n	80033ec <HAL_I2C_Master_Receive+0x1ac>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d136      	bne.n	80033ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800337e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	0013      	movs	r3, r2
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	f000 f882 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e053      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2bff      	cmp	r3, #255	; 0xff
 80033a0:	d911      	bls.n	80033c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	22ff      	movs	r2, #255	; 0xff
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	045c      	lsls	r4, r3, #17
 80033b2:	230a      	movs	r3, #10
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	8819      	ldrh	r1, [r3, #0]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	0023      	movs	r3, r4
 80033c0:	f000 fa08 	bl	80037d4 <I2C_TransferConfig>
 80033c4:	e012      	b.n	80033ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	049c      	lsls	r4, r3, #18
 80033da:	230a      	movs	r3, #10
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	8819      	ldrh	r1, [r3, #0]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	0023      	movs	r3, r4
 80033e8:	f000 f9f4 	bl	80037d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d197      	bne.n	8003326 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f8c7 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e01a      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2220      	movs	r2, #32
 8003410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <HAL_I2C_Master_Receive+0x20c>)
 800341e:	400a      	ands	r2, r1
 8003420:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2241      	movs	r2, #65	; 0x41
 8003426:	2120      	movs	r1, #32
 8003428:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2242      	movs	r2, #66	; 0x42
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b007      	add	sp, #28
 8003446:	bd90      	pop	{r4, r7, pc}
 8003448:	80002400 	.word	0x80002400
 800344c:	fe00e800 	.word	0xfe00e800

08003450 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2202      	movs	r2, #2
 8003460:	4013      	ands	r3, r2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d103      	bne.n	800346e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2101      	movs	r1, #1
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]
  }
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	e021      	b.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d01e      	beq.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ac:	f7fe fbf8 	bl	8001ca0 <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	2220      	movs	r2, #32
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2241      	movs	r2, #65	; 0x41
 80034d2:	2120      	movs	r1, #32
 80034d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2242      	movs	r2, #66	; 0x42
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2240      	movs	r2, #64	; 0x40
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	425a      	negs	r2, r3
 80034fa:	4153      	adcs	r3, r2
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	001a      	movs	r2, r3
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d0ce      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351e:	e02b      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f8da 	bl	80036e0 <I2C_IsAcknowledgeFailed>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d001      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e029      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3301      	adds	r3, #1
 8003538:	d01e      	beq.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fbb1 	bl	8001ca0 <HAL_GetTick>
 800353e:	0002      	movs	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	2220      	movs	r2, #32
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2241      	movs	r2, #65	; 0x41
 8003560:	2120      	movs	r1, #32
 8003562:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2242      	movs	r2, #66	; 0x42
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	; 0x40
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2202      	movs	r2, #2
 8003580:	4013      	ands	r3, r2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d1cc      	bne.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	e028      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 f89b 	bl	80036e0 <I2C_IsAcknowledgeFailed>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e026      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fb75 	bl	8001ca0 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d113      	bne.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	2220      	movs	r2, #32
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2241      	movs	r2, #65	; 0x41
 80035d8:	2120      	movs	r1, #32
 80035da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2242      	movs	r2, #66	; 0x42
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2220      	movs	r2, #32
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d1cf      	bne.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b004      	add	sp, #16
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003614:	e055      	b.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f85f 	bl	80036e0 <I2C_IsAcknowledgeFailed>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e053      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2220      	movs	r2, #32
 8003632:	4013      	ands	r3, r2
 8003634:	2b20      	cmp	r3, #32
 8003636:	d129      	bne.n	800368c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	2b04      	cmp	r3, #4
 8003644:	d105      	bne.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e03f      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2220      	movs	r2, #32
 8003658:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	491d      	ldr	r1, [pc, #116]	; (80036dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003666:	400a      	ands	r2, r1
 8003668:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2241      	movs	r2, #65	; 0x41
 8003674:	2120      	movs	r1, #32
 8003676:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2242      	movs	r2, #66	; 0x42
 800367c:	2100      	movs	r1, #0
 800367e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e022      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fe fb08 	bl	8001ca0 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	2220      	movs	r2, #32
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2241      	movs	r2, #65	; 0x41
 80036b2:	2120      	movs	r1, #32
 80036b4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e007      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2204      	movs	r2, #4
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d1a2      	bne.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	fe00e800 	.word	0xfe00e800

080036e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2210      	movs	r2, #16
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d164      	bne.n	80037c4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	049b      	lsls	r3, r3, #18
 8003704:	401a      	ands	r2, r3
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	049b      	lsls	r3, r3, #18
 800370a:	429a      	cmp	r2, r3
 800370c:	d02b      	beq.n	8003766 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	01c9      	lsls	r1, r1, #7
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003720:	e021      	b.n	8003766 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3301      	adds	r3, #1
 8003726:	d01e      	beq.n	8003766 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003728:	f7fe faba 	bl	8001ca0 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <I2C_IsAcknowledgeFailed+0x5e>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d113      	bne.n	8003766 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	2220      	movs	r2, #32
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2241      	movs	r2, #65	; 0x41
 800374e:	2120      	movs	r1, #32
 8003750:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2242      	movs	r2, #66	; 0x42
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e02f      	b.n	80037c6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2220      	movs	r2, #32
 800376e:	4013      	ands	r3, r2
 8003770:	2b20      	cmp	r3, #32
 8003772:	d1d6      	bne.n	8003722 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2210      	movs	r2, #16
 800377a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2220      	movs	r2, #32
 8003782:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff fe62 	bl	8003450 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003798:	400a      	ands	r2, r1
 800379a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	2204      	movs	r2, #4
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2241      	movs	r2, #65	; 0x41
 80037ac:	2120      	movs	r1, #32
 80037ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2242      	movs	r2, #66	; 0x42
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b004      	add	sp, #16
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	0008      	movs	r0, r1
 80037de:	0011      	movs	r1, r2
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	240a      	movs	r4, #10
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	801a      	strh	r2, [r3, #0]
 80037ea:	2009      	movs	r0, #9
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	1c0a      	adds	r2, r1, #0
 80037f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	0d51      	lsrs	r1, r2, #21
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	00d2      	lsls	r2, r2, #3
 8003800:	400a      	ands	r2, r1
 8003802:	490e      	ldr	r1, [pc, #56]	; (800383c <I2C_TransferConfig+0x68>)
 8003804:	430a      	orrs	r2, r1
 8003806:	43d2      	mvns	r2, r2
 8003808:	401a      	ands	r2, r3
 800380a:	0011      	movs	r1, r2
 800380c:	193b      	adds	r3, r7, r4
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	059b      	lsls	r3, r3, #22
 8003812:	0d9a      	lsrs	r2, r3, #22
 8003814:	183b      	adds	r3, r7, r0
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	0418      	lsls	r0, r3, #16
 800381a:	23ff      	movs	r3, #255	; 0xff
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	4003      	ands	r3, r0
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	431a      	orrs	r2, r3
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	431a      	orrs	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b005      	add	sp, #20
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	03ff63ff 	.word	0x03ff63ff

08003840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2241      	movs	r2, #65	; 0x41
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d138      	bne.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003860:	2302      	movs	r3, #2
 8003862:	e032      	b.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2240      	movs	r2, #64	; 0x40
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2241      	movs	r2, #65	; 0x41
 8003870:	2124      	movs	r1, #36	; 0x24
 8003872:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4911      	ldr	r1, [pc, #68]	; (80038d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003890:	400a      	ands	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2241      	movs	r2, #65	; 0x41
 80038b8:	2120      	movs	r1, #32
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	ffffefff 	.word	0xffffefff

080038d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2241      	movs	r2, #65	; 0x41
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d139      	bne.n	8003962 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2240      	movs	r2, #64	; 0x40
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e033      	b.n	8003964 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2241      	movs	r2, #65	; 0x41
 8003908:	2124      	movs	r1, #36	; 0x24
 800390a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	438a      	bics	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2241      	movs	r2, #65	; 0x41
 8003952:	2120      	movs	r1, #32
 8003954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	fffff0ff 	.word	0xfffff0ff

08003970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e301      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	4013      	ands	r3, r2
 800398a:	d100      	bne.n	800398e <HAL_RCC_OscConfig+0x1e>
 800398c:	e08d      	b.n	8003aaa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800398e:	4bc3      	ldr	r3, [pc, #780]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	220c      	movs	r2, #12
 8003994:	4013      	ands	r3, r2
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00e      	beq.n	80039b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800399a:	4bc0      	ldr	r3, [pc, #768]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	220c      	movs	r2, #12
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d116      	bne.n	80039d4 <HAL_RCC_OscConfig+0x64>
 80039a6:	4bbd      	ldr	r3, [pc, #756]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	401a      	ands	r2, r3
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4bb8      	ldr	r3, [pc, #736]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	4013      	ands	r3, r2
 80039c2:	d100      	bne.n	80039c6 <HAL_RCC_OscConfig+0x56>
 80039c4:	e070      	b.n	8003aa8 <HAL_RCC_OscConfig+0x138>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d000      	beq.n	80039d0 <HAL_RCC_OscConfig+0x60>
 80039ce:	e06b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2d8      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x7c>
 80039dc:	4baf      	ldr	r3, [pc, #700]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4bae      	ldr	r3, [pc, #696]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	0249      	lsls	r1, r1, #9
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e02f      	b.n	8003a4c <HAL_RCC_OscConfig+0xdc>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x9e>
 80039f4:	4ba9      	ldr	r3, [pc, #676]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4ba8      	ldr	r3, [pc, #672]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039fa:	49a9      	ldr	r1, [pc, #676]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	4ba6      	ldr	r3, [pc, #664]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4ba5      	ldr	r3, [pc, #660]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a06:	49a7      	ldr	r1, [pc, #668]	; (8003ca4 <HAL_RCC_OscConfig+0x334>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e01e      	b.n	8003a4c <HAL_RCC_OscConfig+0xdc>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d10e      	bne.n	8003a34 <HAL_RCC_OscConfig+0xc4>
 8003a16:	4ba1      	ldr	r3, [pc, #644]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4ba0      	ldr	r3, [pc, #640]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	02c9      	lsls	r1, r1, #11
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	4b9d      	ldr	r3, [pc, #628]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b9c      	ldr	r3, [pc, #624]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	0249      	lsls	r1, r1, #9
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xdc>
 8003a34:	4b99      	ldr	r3, [pc, #612]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b98      	ldr	r3, [pc, #608]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	4999      	ldr	r1, [pc, #612]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b95      	ldr	r3, [pc, #596]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a46:	4997      	ldr	r1, [pc, #604]	; (8003ca4 <HAL_RCC_OscConfig+0x334>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d014      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe f924 	bl	8001ca0 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5e:	f7fe f91f 	bl	8001ca0 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b64      	cmp	r3, #100	; 0x64
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e28a      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a70:	4b8a      	ldr	r3, [pc, #552]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0xee>
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fe f90f 	bl	8001ca0 <HAL_GetTick>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fe f90a 	bl	8001ca0 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e275      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b80      	ldr	r3, [pc, #512]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	029b      	lsls	r3, r3, #10
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x118>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x146>
 8003ab4:	e069      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ab6:	4b79      	ldr	r3, [pc, #484]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	220c      	movs	r2, #12
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ac0:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	220c      	movs	r2, #12
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x196>
 8003acc:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d116      	bne.n	8003b06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad8:	4b70      	ldr	r3, [pc, #448]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2202      	movs	r2, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e24b      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	22f8      	movs	r2, #248	; 0xf8
 8003af4:	4393      	bics	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00da      	lsls	r2, r3, #3
 8003afe:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b04:	e041      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0e:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe f8c1 	bl	8001ca0 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe f8bc 	bl	8001ca0 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e227      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d0f1      	beq.n	8003b24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	22f8      	movs	r2, #248	; 0xf8
 8003b46:	4393      	bics	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	4b52      	ldr	r3, [pc, #328]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e018      	b.n	8003b8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fe f89c 	bl	8001ca0 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe f897 	bl	8001ca0 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e202      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d1f1      	bne.n	8003b6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	4013      	ands	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe f87a 	bl	8001ca0 <HAL_GetTick>
 8003bac:	0003      	movs	r3, r0
 8003bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f875 	bl	8001ca0 <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1e0      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2202      	movs	r2, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d0f1      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x242>
 8003bce:	e018      	b.n	8003c02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7fe f860 	bl	8001ca0 <HAL_GetTick>
 8003be0:	0003      	movs	r3, r0
 8003be2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fe f85b 	bl	8001ca0 <HAL_GetTick>
 8003bea:	0002      	movs	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1c6      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d1f1      	bne.n	8003be6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2204      	movs	r2, #4
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCC_OscConfig+0x29e>
 8003c0c:	e0b4      	b.n	8003d78 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	201f      	movs	r0, #31
 8003c10:	183b      	adds	r3, r7, r0
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	055b      	lsls	r3, r3, #21
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d110      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	0549      	lsls	r1, r1, #21
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	61da      	str	r2, [r3, #28]
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	055b      	lsls	r3, r3, #21
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	2201      	movs	r2, #1
 8003c42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d11a      	bne.n	8003c86 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0049      	lsls	r1, r1, #1
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f81f 	bl	8001ca0 <HAL_GetTick>
 8003c62:	0003      	movs	r3, r0
 8003c64:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fe f81a 	bl	8001ca0 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e185      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_RCC_OscConfig+0x33c>
 8003c8e:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	621a      	str	r2, [r3, #32]
 8003c9a:	e035      	b.n	8003d08 <HAL_RCC_OscConfig+0x398>
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	fffbffff 	.word	0xfffbffff
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_OscConfig+0x35e>
 8003cb4:	4bb6      	ldr	r3, [pc, #728]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cb6:	6a1a      	ldr	r2, [r3, #32]
 8003cb8:	4bb5      	ldr	r3, [pc, #724]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	621a      	str	r2, [r3, #32]
 8003cc0:	4bb3      	ldr	r3, [pc, #716]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	4bb2      	ldr	r3, [pc, #712]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	438a      	bics	r2, r1
 8003cca:	621a      	str	r2, [r3, #32]
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x398>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x380>
 8003cd6:	4bae      	ldr	r3, [pc, #696]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	4bad      	ldr	r3, [pc, #692]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cdc:	2104      	movs	r1, #4
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	4bab      	ldr	r3, [pc, #684]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	4baa      	ldr	r3, [pc, #680]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	621a      	str	r2, [r3, #32]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x398>
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	4ba6      	ldr	r3, [pc, #664]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	4ba4      	ldr	r3, [pc, #656]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	4ba3      	ldr	r3, [pc, #652]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d02:	2104      	movs	r1, #4
 8003d04:	438a      	bics	r2, r1
 8003d06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d014      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fd ffc6 	bl	8001ca0 <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e009      	b.n	8003d2e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd ffc1 	bl	8001ca0 <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	4a9b      	ldr	r2, [pc, #620]	; (8003f94 <HAL_RCC_OscConfig+0x624>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e12b      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b98      	ldr	r3, [pc, #608]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x3aa>
 8003d38:	e013      	b.n	8003d62 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd ffb1 	bl	8001ca0 <HAL_GetTick>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e009      	b.n	8003d58 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd ffac 	bl	8001ca0 <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	4a91      	ldr	r2, [pc, #580]	; (8003f94 <HAL_RCC_OscConfig+0x624>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e116      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d62:	231f      	movs	r3, #31
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d72:	4989      	ldr	r1, [pc, #548]	; (8003f98 <HAL_RCC_OscConfig+0x628>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d063      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d12a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8e:	4b80      	ldr	r3, [pc, #512]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d90:	2104      	movs	r1, #4
 8003d92:	430a      	orrs	r2, r1
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d96:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd ff7d 	bl	8001ca0 <HAL_GetTick>
 8003da6:	0003      	movs	r3, r0
 8003da8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003dac:	f7fd ff78 	bl	8001ca0 <HAL_GetTick>
 8003db0:	0002      	movs	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0e3      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dbe:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0f1      	beq.n	8003dac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dc8:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	22f8      	movs	r2, #248	; 0xf8
 8003dce:	4393      	bics	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	00da      	lsls	r2, r3, #3
 8003dd8:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dde:	e034      	b.n	8003e4a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	3305      	adds	r3, #5
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003de8:	4b69      	ldr	r3, [pc, #420]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dec:	4b68      	ldr	r3, [pc, #416]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dee:	2104      	movs	r1, #4
 8003df0:	438a      	bics	r2, r1
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003df4:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	22f8      	movs	r2, #248	; 0xf8
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	00da      	lsls	r2, r3, #3
 8003e04:	4b62      	ldr	r3, [pc, #392]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0a:	e01e      	b.n	8003e4a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e0c:	4b60      	ldr	r3, [pc, #384]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e10:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e12:	2104      	movs	r1, #4
 8003e14:	430a      	orrs	r2, r1
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e18:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1c:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fd ff3c 	bl	8001ca0 <HAL_GetTick>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e2e:	f7fd ff37 	bl	8001ca0 <HAL_GetTick>
 8003e32:	0002      	movs	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0a2      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	2202      	movs	r2, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d1f1      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d100      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4e4>
 8003e52:	e097      	b.n	8003f84 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e54:	4b4e      	ldr	r3, [pc, #312]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	220c      	movs	r2, #12
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d100      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4f2>
 8003e60:	e06b      	b.n	8003f3a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d14c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e70:	494a      	ldr	r1, [pc, #296]	; (8003f9c <HAL_RCC_OscConfig+0x62c>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fd ff13 	bl	8001ca0 <HAL_GetTick>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fd ff0e 	bl	8001ca0 <HAL_GetTick>
 8003e84:	0002      	movs	r2, r0
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e079      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	049b      	lsls	r3, r3, #18
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9e:	4b3c      	ldr	r3, [pc, #240]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb2:	4b37      	ldr	r3, [pc, #220]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <HAL_RCC_OscConfig+0x630>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	0019      	movs	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	0449      	lsls	r1, r1, #17
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fee1 	bl	8001ca0 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fedc 	bl	8001ca0 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e047      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef6:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	049b      	lsls	r3, r3, #18
 8003efe:	4013      	ands	r3, r2
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x574>
 8003f02:	e03f      	b.n	8003f84 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	4924      	ldr	r1, [pc, #144]	; (8003f9c <HAL_RCC_OscConfig+0x62c>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd fec6 	bl	8001ca0 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fd fec1 	bl	8001ca0 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e02c      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	049b      	lsls	r3, r3, #18
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x5aa>
 8003f38:	e024      	b.n	8003f84 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e01f      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	025b      	lsls	r3, r3, #9
 8003f58:	401a      	ands	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d10e      	bne.n	8003f80 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	220f      	movs	r2, #15
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	23f0      	movs	r3, #240	; 0xf0
 8003f74:	039b      	lsls	r3, r3, #14
 8003f76:	401a      	ands	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b008      	add	sp, #32
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40021000 	.word	0x40021000
 8003f94:	00001388 	.word	0x00001388
 8003f98:	efffffff 	.word	0xefffffff
 8003f9c:	feffffff 	.word	0xfeffffff
 8003fa0:	ffc2ffff 	.word	0xffc2ffff

08003fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b3      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d911      	bls.n	8003fea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b58      	ldr	r3, [pc, #352]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4393      	bics	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	4b55      	ldr	r3, [pc, #340]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd8:	4b53      	ldr	r3, [pc, #332]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4013      	ands	r3, r2
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e09a      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d015      	beq.n	8004020 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d006      	beq.n	800400c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 8004004:	21e0      	movs	r1, #224	; 0xe0
 8004006:	00c9      	lsls	r1, r1, #3
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	22f0      	movs	r2, #240	; 0xf0
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	4013      	ands	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	4013      	ands	r3, r2
 800403c:	d114      	bne.n	8004068 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06e      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	049b      	lsls	r3, r3, #18
 8004052:	4013      	ands	r3, r2
 8004054:	d108      	bne.n	8004068 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e062      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e05b      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	4393      	bics	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800407c:	f7fd fe10 	bl	8001ca0 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004084:	e009      	b.n	800409a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004086:	f7fd fe0b 	bl	8001ca0 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	4a27      	ldr	r2, [pc, #156]	; (8004130 <HAL_RCC_ClockConfig+0x18c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e042      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	220c      	movs	r2, #12
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1ec      	bne.n	8004086 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d211      	bcs.n	80040de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	4393      	bics	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_RCC_ClockConfig+0x184>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e020      	b.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2204      	movs	r2, #4
 80040e4:	4013      	ands	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_RCC_ClockConfig+0x190>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040fc:	f000 f820 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8004100:	0001      	movs	r1, r0
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_ClockConfig+0x188>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	220f      	movs	r2, #15
 800410a:	4013      	ands	r3, r2
 800410c:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_RCC_ClockConfig+0x194>)
 800410e:	5cd3      	ldrb	r3, [r2, r3]
 8004110:	000a      	movs	r2, r1
 8004112:	40da      	lsrs	r2, r3
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x198>)
 8004116:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004118:	2003      	movs	r0, #3
 800411a:	f7fd fd7b 	bl	8001c14 <HAL_InitTick>
  
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b004      	add	sp, #16
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
 8004130:	00001388 	.word	0x00001388
 8004134:	fffff8ff 	.word	0xfffff8ff
 8004138:	080066d4 	.word	0x080066d4
 800413c:	20000064 	.word	0x20000064

08004140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b08f      	sub	sp, #60	; 0x3c
 8004144:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004146:	2314      	movs	r3, #20
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	4a2b      	ldr	r2, [pc, #172]	; (80041f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800414c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800414e:	c313      	stmia	r3!, {r0, r1, r4}
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	4a29      	ldr	r2, [pc, #164]	; (80041fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004158:	ca13      	ldmia	r2!, {r0, r1, r4}
 800415a:	c313      	stmia	r3!, {r0, r1, r4}
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	2300      	movs	r3, #0
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
 8004168:	2300      	movs	r3, #0
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	220c      	movs	r2, #12
 800417e:	4013      	ands	r3, r2
 8004180:	2b04      	cmp	r3, #4
 8004182:	d002      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x4a>
 8004184:	2b08      	cmp	r3, #8
 8004186:	d003      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x50>
 8004188:	e02d      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_GetSysClockFreq+0xc4>)
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800418e:	e02d      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	0c9b      	lsrs	r3, r3, #18
 8004194:	220f      	movs	r2, #15
 8004196:	4013      	ands	r3, r2
 8004198:	2214      	movs	r2, #20
 800419a:	18ba      	adds	r2, r7, r2
 800419c:	5cd3      	ldrb	r3, [r2, r3]
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	220f      	movs	r2, #15
 80041a6:	4013      	ands	r3, r2
 80041a8:	1d3a      	adds	r2, r7, #4
 80041aa:	5cd3      	ldrb	r3, [r2, r3]
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	025b      	lsls	r3, r3, #9
 80041b4:	4013      	ands	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ba:	4812      	ldr	r0, [pc, #72]	; (8004204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041bc:	f7fb ffa4 	bl	8000108 <__udivsi3>
 80041c0:	0003      	movs	r3, r0
 80041c2:	001a      	movs	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	4353      	muls	r3, r2
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ca:	e009      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ce:	000a      	movs	r2, r1
 80041d0:	0152      	lsls	r2, r2, #5
 80041d2:	1a52      	subs	r2, r2, r1
 80041d4:	0193      	lsls	r3, r2, #6
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	185b      	adds	r3, r3, r1
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041e4:	e002      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b00f      	add	sp, #60	; 0x3c
 80041f4:	bd90      	pop	{r4, r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	08006660 	.word	0x08006660
 80041fc:	08006670 	.word	0x08006670
 8004200:	40021000 	.word	0x40021000
 8004204:	007a1200 	.word	0x007a1200

08004208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800420c:	4b02      	ldr	r3, [pc, #8]	; (8004218 <HAL_RCC_GetHCLKFreq+0x10>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	20000064 	.word	0x20000064

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004220:	f7ff fff2 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004224:	0001      	movs	r1, r0
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	40d9      	lsrs	r1, r3
 8004236:	000b      	movs	r3, r1
}    
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	40021000 	.word	0x40021000
 8004244:	080066e4 	.word	0x080066e4

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	025b      	lsls	r3, r3, #9
 8004260:	4013      	ands	r3, r2
 8004262:	d100      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004264:	e08e      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2017      	movs	r0, #23
 8004268:	183b      	adds	r3, r7, r0
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b5f      	ldr	r3, [pc, #380]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	055b      	lsls	r3, r3, #21
 8004276:	4013      	ands	r3, r2
 8004278:	d110      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	0549      	lsls	r1, r1, #21
 8004284:	430a      	orrs	r2, r1
 8004286:	61da      	str	r2, [r3, #28]
 8004288:	4b58      	ldr	r3, [pc, #352]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	055b      	lsls	r3, r3, #21
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	183b      	adds	r3, r7, r0
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b54      	ldr	r3, [pc, #336]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4013      	ands	r3, r2
 80042a6:	d11a      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a8:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	0049      	lsls	r1, r1, #1
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fd fcf3 	bl	8001ca0 <HAL_GetTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	e008      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c0:	f7fd fcee 	bl	8001ca0 <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e087      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042de:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	23c0      	movs	r3, #192	; 0xc0
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4013      	ands	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d034      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	23c0      	movs	r3, #192	; 0xc0
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4013      	ands	r3, r2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d02c      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004300:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4a3b      	ldr	r2, [pc, #236]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004306:	4013      	ands	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	0249      	lsls	r1, r1, #9
 8004314:	430a      	orrs	r2, r1
 8004316:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	4b33      	ldr	r3, [pc, #204]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431e:	4936      	ldr	r1, [pc, #216]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004320:	400a      	ands	r2, r1
 8004322:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd fcb5 	bl	8001ca0 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	e009      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd fcb0 	bl	8001ca0 <HAL_GetTick>
 8004340:	0002      	movs	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e048      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	2202      	movs	r2, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d0f0      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a25      	ldr	r2, [pc, #148]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800436a:	430a      	orrs	r2, r1
 800436c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800436e:	2317      	movs	r3, #23
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b1c      	ldr	r3, [pc, #112]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800437e:	4920      	ldr	r1, [pc, #128]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004380:	400a      	ands	r2, r1
 8004382:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	4013      	ands	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	2203      	movs	r2, #3
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2220      	movs	r2, #32
 80043a8:	4013      	ands	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2210      	movs	r2, #16
 80043b2:	4393      	bics	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4013      	ands	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2240      	movs	r2, #64	; 0x40
 80043d2:	4393      	bics	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b006      	add	sp, #24
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
 80043f4:	fffffcff 	.word	0xfffffcff
 80043f8:	fffeffff 	.word	0xfffeffff
 80043fc:	00001388 	.word	0x00001388
 8004400:	efffffff 	.word	0xefffffff

08004404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0a8      	b.n	8004568 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	2382      	movs	r3, #130	; 0x82
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	429a      	cmp	r2, r3
 8004428:	d009      	beq.n	800443e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	61da      	str	r2, [r3, #28]
 8004430:	e005      	b.n	800443e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	225d      	movs	r2, #93	; 0x5d
 8004448:	5c9b      	ldrb	r3, [r3, r2]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	225c      	movs	r2, #92	; 0x5c
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f7fd fa1a 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	225d      	movs	r2, #93	; 0x5d
 8004464:	2102      	movs	r1, #2
 8004466:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2140      	movs	r1, #64	; 0x40
 8004474:	438a      	bics	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	23e0      	movs	r3, #224	; 0xe0
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	429a      	cmp	r2, r3
 8004482:	d902      	bls.n	800448a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e002      	b.n	8004490 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	015b      	lsls	r3, r3, #5
 800448e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	23f0      	movs	r3, #240	; 0xf0
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	429a      	cmp	r2, r3
 800449a:	d008      	beq.n	80044ae <HAL_SPI_Init+0xaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	23e0      	movs	r3, #224	; 0xe0
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	2382      	movs	r3, #130	; 0x82
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	401a      	ands	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	2384      	movs	r3, #132	; 0x84
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	400b      	ands	r3, r1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2102      	movs	r1, #2
 80044ca:	400b      	ands	r3, r1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2101      	movs	r1, #1
 80044d4:	400b      	ands	r3, r1
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6999      	ldr	r1, [r3, #24]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	400b      	ands	r3, r1
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2138      	movs	r1, #56	; 0x38
 80044ea:	400b      	ands	r3, r1
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	400b      	ands	r3, r1
 80044f6:	431a      	orrs	r2, r3
 80044f8:	0011      	movs	r1, r2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	401a      	ands	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	2204      	movs	r2, #4
 8004514:	401a      	ands	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2110      	movs	r1, #16
 800451c:	400b      	ands	r3, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	2108      	movs	r1, #8
 8004526:	400b      	ands	r3, r1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	23f0      	movs	r3, #240	; 0xf0
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	400b      	ands	r3, r1
 8004534:	431a      	orrs	r2, r3
 8004536:	0011      	movs	r1, r2
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	015b      	lsls	r3, r3, #5
 800453e:	401a      	ands	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4907      	ldr	r1, [pc, #28]	; (8004570 <HAL_SPI_Init+0x16c>)
 8004554:	400a      	ands	r2, r1
 8004556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	225d      	movs	r2, #93	; 0x5d
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b004      	add	sp, #16
 800456e:	bd80      	pop	{r7, pc}
 8004570:	fffff7ff 	.word	0xfffff7ff

08004574 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004584:	231f      	movs	r3, #31
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	225c      	movs	r2, #92	; 0x5c
 8004590:	5c9b      	ldrb	r3, [r3, r2]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_SPI_Transmit+0x26>
 8004596:	2302      	movs	r3, #2
 8004598:	e140      	b.n	800481c <HAL_SPI_Transmit+0x2a8>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	225c      	movs	r2, #92	; 0x5c
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a2:	f7fd fb7d 	bl	8001ca0 <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045aa:	2316      	movs	r3, #22
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	1dba      	adds	r2, r7, #6
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	225d      	movs	r2, #93	; 0x5d
 80045b8:	5c9b      	ldrb	r3, [r3, r2]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d004      	beq.n	80045ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80045c0:	231f      	movs	r3, #31
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2202      	movs	r2, #2
 80045c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80045c8:	e11d      	b.n	8004806 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_SPI_Transmit+0x64>
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80045d8:	231f      	movs	r3, #31
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
    goto error;
 80045e0:	e111      	b.n	8004806 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	225d      	movs	r2, #93	; 0x5d
 80045e6:	2103      	movs	r1, #3
 80045e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1dba      	adds	r2, r7, #6
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1dba      	adds	r2, r7, #6
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2244      	movs	r2, #68	; 0x44
 8004610:	2100      	movs	r1, #0
 8004612:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2246      	movs	r2, #70	; 0x46
 8004618:	2100      	movs	r1, #0
 800461a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	429a      	cmp	r2, r3
 8004632:	d110      	bne.n	8004656 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2140      	movs	r1, #64	; 0x40
 8004640:	438a      	bics	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	01c9      	lsls	r1, r1, #7
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2240      	movs	r2, #64	; 0x40
 800465e:	4013      	ands	r3, r2
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d007      	beq.n	8004674 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	23e0      	movs	r3, #224	; 0xe0
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	429a      	cmp	r2, r3
 800467e:	d94e      	bls.n	800471e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_SPI_Transmit+0x11e>
 8004688:	2316      	movs	r3, #22
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d13f      	bne.n	8004712 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	881a      	ldrh	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046b6:	e02c      	b.n	8004712 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2202      	movs	r2, #2
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d112      	bne.n	80046ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ea:	e012      	b.n	8004712 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ec:	f7fd fad8 	bl	8001ca0 <HAL_GetTick>
 80046f0:	0002      	movs	r2, r0
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d802      	bhi.n	8004702 <HAL_SPI_Transmit+0x18e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x194>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	231f      	movs	r3, #31
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2203      	movs	r2, #3
 800470e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004710:	e079      	b.n	8004806 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1cd      	bne.n	80046b8 <HAL_SPI_Transmit+0x144>
 800471c:	e04f      	b.n	80047be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_SPI_Transmit+0x1bc>
 8004726:	2316      	movs	r3, #22
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d141      	bne.n	80047b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004756:	e02d      	b.n	80047b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2202      	movs	r2, #2
 8004760:	4013      	ands	r3, r2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d113      	bne.n	800478e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800478c:	e012      	b.n	80047b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800478e:	f7fd fa87 	bl	8001ca0 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d802      	bhi.n	80047a4 <HAL_SPI_Transmit+0x230>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x236>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80047aa:	231f      	movs	r3, #31
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2203      	movs	r2, #3
 80047b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80047b2:	e028      	b.n	8004806 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1cc      	bne.n	8004758 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 f95d 	bl	8004a84 <SPI_EndRxTxTransaction>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80047fa:	231f      	movs	r3, #31
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e000      	b.n	8004806 <HAL_SPI_Transmit+0x292>
  }

error:
 8004804:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	225d      	movs	r2, #93	; 0x5d
 800480a:	2101      	movs	r1, #1
 800480c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	225c      	movs	r2, #92	; 0x5c
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004816:	231f      	movs	r3, #31
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b008      	add	sp, #32
 8004822:	bd80      	pop	{r7, pc}

08004824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004834:	f7fd fa34 	bl	8001ca0 <HAL_GetTick>
 8004838:	0002      	movs	r2, r0
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	18d3      	adds	r3, r2, r3
 8004842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004844:	f7fd fa2c 	bl	8001ca0 <HAL_GetTick>
 8004848:	0003      	movs	r3, r0
 800484a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484c:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	015b      	lsls	r3, r3, #5
 8004852:	0d1b      	lsrs	r3, r3, #20
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	4353      	muls	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	e058      	b.n	800490e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	d055      	beq.n	800490e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004862:	f7fd fa1d 	bl	8001ca0 <HAL_GetTick>
 8004866:	0002      	movs	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	429a      	cmp	r2, r3
 8004870:	d902      	bls.n	8004878 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d142      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	21e0      	movs	r1, #224	; 0xe0
 8004884:	438a      	bics	r2, r1
 8004886:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	2382      	movs	r3, #130	; 0x82
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	429a      	cmp	r2, r3
 8004892:	d113      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	429a      	cmp	r2, r3
 800489e:	d005      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	438a      	bics	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	019b      	lsls	r3, r3, #6
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d110      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	491a      	ldr	r1, [pc, #104]	; (800493c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	0189      	lsls	r1, r1, #6
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	225d      	movs	r2, #93	; 0x5d
 80048ee:	2101      	movs	r1, #1
 80048f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	225c      	movs	r2, #92	; 0x5c
 80048f6:	2100      	movs	r1, #0
 80048f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e017      	b.n	800492e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3b01      	subs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	425a      	negs	r2, r3
 800491e:	4153      	adcs	r3, r2
 8004920:	b2db      	uxtb	r3, r3
 8004922:	001a      	movs	r2, r3
 8004924:	1dfb      	adds	r3, r7, #7
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d197      	bne.n	800485c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b008      	add	sp, #32
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	20000064 	.word	0x20000064
 800493c:	ffffdfff 	.word	0xffffdfff

08004940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800494e:	2317      	movs	r3, #23
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004956:	f7fd f9a3 	bl	8001ca0 <HAL_GetTick>
 800495a:	0002      	movs	r2, r0
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004966:	f7fd f99b 	bl	8001ca0 <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	0013      	movs	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	189b      	adds	r3, r3, r2
 8004980:	00da      	lsls	r2, r3, #3
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	0d1b      	lsrs	r3, r3, #20
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	4353      	muls	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800498c:	e068      	b.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	23c0      	movs	r3, #192	; 0xc0
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	429a      	cmp	r2, r3
 8004996:	d10a      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	2117      	movs	r1, #23
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	d055      	beq.n	8004a60 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049b4:	f7fd f974 	bl	8001ca0 <HAL_GetTick>
 80049b8:	0002      	movs	r2, r0
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d902      	bls.n	80049ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d142      	bne.n	8004a50 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	21e0      	movs	r1, #224	; 0xe0
 80049d6:	438a      	bics	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	2382      	movs	r3, #130	; 0x82
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d113      	bne.n	8004a0e <SPI_WaitFifoStateUntilTimeout+0xce>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d005      	beq.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d107      	bne.n	8004a0e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d110      	bne.n	8004a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004a26:	400a      	ands	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	0189      	lsls	r1, r1, #6
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	225d      	movs	r2, #93	; 0x5d
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	225c      	movs	r2, #92	; 0x5c
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e010      	b.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d18e      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b00a      	add	sp, #40	; 0x28
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20000064 	.word	0x20000064
 8004a80:	ffffdfff 	.word	0xffffdfff

08004a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	23c0      	movs	r3, #192	; 0xc0
 8004a94:	0159      	lsls	r1, r3, #5
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f7ff ff4e 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d007      	beq.n	8004ab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	2220      	movs	r2, #32
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e027      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	0013      	movs	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	f7ff fead 	bl	8004824 <SPI_WaitFlagStateUntilTimeout>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d007      	beq.n	8004ade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e014      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	23c0      	movs	r3, #192	; 0xc0
 8004ae2:	00d9      	lsls	r1, r3, #3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	0013      	movs	r3, r2
 8004aec:	2200      	movs	r2, #0
 8004aee:	f7ff ff27 	bl	8004940 <SPI_WaitFifoStateUntilTimeout>
 8004af2:	1e03      	subs	r3, r0, #0
 8004af4:	d007      	beq.n	8004b06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	2220      	movs	r2, #32
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e000      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b004      	add	sp, #16
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e042      	b.n	8004ba8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	223d      	movs	r2, #61	; 0x3d
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	223c      	movs	r2, #60	; 0x3c
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7fc ff33 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	223d      	movs	r2, #61	; 0x3d
 8004b42:	2102      	movs	r1, #2
 8004b44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	0019      	movs	r1, r3
 8004b50:	0010      	movs	r0, r2
 8004b52:	f000 fb37 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2246      	movs	r2, #70	; 0x46
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	223e      	movs	r2, #62	; 0x3e
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	5499      	strb	r1, [r3, r2]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	2101      	movs	r1, #1
 8004b74:	5499      	strb	r1, [r3, r2]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2241      	movs	r2, #65	; 0x41
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2242      	movs	r2, #66	; 0x42
 8004b82:	2101      	movs	r1, #1
 8004b84:	5499      	strb	r1, [r3, r2]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2243      	movs	r2, #67	; 0x43
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	5499      	strb	r1, [r3, r2]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2244      	movs	r2, #68	; 0x44
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2245      	movs	r2, #69	; 0x45
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223d      	movs	r2, #61	; 0x3d
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d108      	bne.n	8004bda <HAL_TIM_OC_Start_IT+0x2a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	223e      	movs	r2, #62	; 0x3e
 8004bcc:	5c9b      	ldrb	r3, [r3, r2]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	4193      	sbcs	r3, r2
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e01f      	b.n	8004c1a <HAL_TIM_OC_Start_IT+0x6a>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d108      	bne.n	8004bf2 <HAL_TIM_OC_Start_IT+0x42>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	223f      	movs	r2, #63	; 0x3f
 8004be4:	5c9b      	ldrb	r3, [r3, r2]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	4193      	sbcs	r3, r2
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e013      	b.n	8004c1a <HAL_TIM_OC_Start_IT+0x6a>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d108      	bne.n	8004c0a <HAL_TIM_OC_Start_IT+0x5a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2240      	movs	r2, #64	; 0x40
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	4193      	sbcs	r3, r2
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e007      	b.n	8004c1a <HAL_TIM_OC_Start_IT+0x6a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2241      	movs	r2, #65	; 0x41
 8004c0e:	5c9b      	ldrb	r3, [r3, r2]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	1e5a      	subs	r2, r3, #1
 8004c16:	4193      	sbcs	r3, r2
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0b7      	b.n	8004d92 <HAL_TIM_OC_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_OC_Start_IT+0x82>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	223e      	movs	r2, #62	; 0x3e
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	5499      	strb	r1, [r3, r2]
 8004c30:	e013      	b.n	8004c5a <HAL_TIM_OC_Start_IT+0xaa>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_OC_Start_IT+0x92>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	223f      	movs	r2, #63	; 0x3f
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	5499      	strb	r1, [r3, r2]
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_OC_Start_IT+0xaa>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_OC_Start_IT+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2240      	movs	r2, #64	; 0x40
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	5499      	strb	r1, [r3, r2]
 8004c50:	e003      	b.n	8004c5a <HAL_TIM_OC_Start_IT+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2241      	movs	r2, #65	; 0x41
 8004c56:	2102      	movs	r1, #2
 8004c58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d02a      	beq.n	8004cb6 <HAL_TIM_OC_Start_IT+0x106>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d830      	bhi.n	8004cc8 <HAL_TIM_OC_Start_IT+0x118>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d01b      	beq.n	8004ca4 <HAL_TIM_OC_Start_IT+0xf4>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d82a      	bhi.n	8004cc8 <HAL_TIM_OC_Start_IT+0x118>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_OC_Start_IT+0xd0>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_OC_Start_IT+0xe2>
 8004c7e:	e023      	b.n	8004cc8 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]
      break;
 8004c90:	e01f      	b.n	8004cd2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2104      	movs	r1, #4
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	60da      	str	r2, [r3, #12]
      break;
 8004ca2:	e016      	b.n	8004cd2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2108      	movs	r1, #8
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	60da      	str	r2, [r3, #12]
      break;
 8004cb4:	e00d      	b.n	8004cd2 <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	60da      	str	r2, [r3, #12]
      break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	230f      	movs	r3, #15
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
      break;
 8004cd0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004cd2:	230f      	movs	r3, #15
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d157      	bne.n	8004d8c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fb87 	bl	80053f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2b      	ldr	r2, [pc, #172]	; (8004d9c <HAL_TIM_OC_Start_IT+0x1ec>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIM_OC_Start_IT+0x162>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIM_OC_Start_IT+0x162>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_OC_Start_IT+0x162>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_OC_Start_IT+0x166>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_OC_Start_IT+0x168>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_TIM_OC_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	0209      	lsls	r1, r1, #8
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1a      	ldr	r2, [pc, #104]	; (8004d9c <HAL_TIM_OC_Start_IT+0x1ec>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00f      	beq.n	8004d58 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	05db      	lsls	r3, r3, #23
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d009      	beq.n	8004d58 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <HAL_TIM_OC_Start_IT+0x1fc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIM_OC_Start_IT+0x1a8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d111      	bne.n	8004d7c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2207      	movs	r2, #7
 8004d60:	4013      	ands	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d010      	beq.n	8004d8c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2101      	movs	r1, #1
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	e007      	b.n	8004d8c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2101      	movs	r1, #1
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	781b      	ldrb	r3, [r3, #0]
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	40000400 	.word	0x40000400

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d124      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11d      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4252      	negs	r2, r2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2203      	movs	r2, #3
 8004dec:	4013      	ands	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 f9ce 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e007      	b.n	8004e0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fb fa21 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f000 f9cd 	bl	80051a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2204      	movs	r2, #4
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d125      	bne.n	8004e6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2204      	movs	r2, #4
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11e      	bne.n	8004e6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2205      	movs	r2, #5
 8004e32:	4252      	negs	r2, r2
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	23c0      	movs	r3, #192	; 0xc0
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f9a1 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004e52:	e007      	b.n	8004e64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fb f9f4 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f000 f9a0 	bl	80051a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2208      	movs	r2, #8
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d124      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d11d      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2209      	movs	r2, #9
 8004e8c:	4252      	negs	r2, r2
 8004e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2204      	movs	r2, #4
 8004e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 f975 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004eaa:	e007      	b.n	8004ebc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fb f9c8 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f000 f974 	bl	80051a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d125      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d11e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2211      	movs	r2, #17
 8004ee4:	4252      	negs	r2, r2
 8004ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2208      	movs	r2, #8
 8004eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	23c0      	movs	r3, #192	; 0xc0
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f948 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e007      	b.n	8004f16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fb f99b 	bl	8000244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 f947 	bl	80051a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2201      	movs	r2, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10f      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4252      	negs	r2, r2
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f91d 	bl	8005184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d10f      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d108      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2281      	movs	r2, #129	; 0x81
 8004f6c:	4252      	negs	r2, r2
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0018      	movs	r0, r3
 8004f74:	f000 faca 	bl	800550c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d10f      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d108      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2241      	movs	r2, #65	; 0x41
 8004f9a:	4252      	negs	r2, r2
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 f907 	bl	80051b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2220      	movs	r2, #32
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d108      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2221      	movs	r2, #33	; 0x21
 8004fc8:	4252      	negs	r2, r2
 8004fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fa94 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	223c      	movs	r2, #60	; 0x3c
 8004ff2:	5c9b      	ldrb	r3, [r3, r2]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_ConfigClockSource+0x20>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e0bc      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x19a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	223c      	movs	r2, #60	; 0x3c
 8005000:	2101      	movs	r1, #1
 8005002:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	223d      	movs	r2, #61	; 0x3d
 8005008:	2102      	movs	r1, #2
 800500a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2277      	movs	r2, #119	; 0x77
 8005018:	4393      	bics	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4a58      	ldr	r2, [pc, #352]	; (8005180 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	0192      	lsls	r2, r2, #6
 8005034:	4293      	cmp	r3, r2
 8005036:	d040      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xde>
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	0192      	lsls	r2, r2, #6
 800503c:	4293      	cmp	r3, r2
 800503e:	d900      	bls.n	8005042 <HAL_TIM_ConfigClockSource+0x66>
 8005040:	e088      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	0152      	lsls	r2, r2, #5
 8005046:	4293      	cmp	r3, r2
 8005048:	d100      	bne.n	800504c <HAL_TIM_ConfigClockSource+0x70>
 800504a:	e088      	b.n	800515e <HAL_TIM_ConfigClockSource+0x182>
 800504c:	2280      	movs	r2, #128	; 0x80
 800504e:	0152      	lsls	r2, r2, #5
 8005050:	4293      	cmp	r3, r2
 8005052:	d900      	bls.n	8005056 <HAL_TIM_ConfigClockSource+0x7a>
 8005054:	e07e      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 8005056:	2b70      	cmp	r3, #112	; 0x70
 8005058:	d018      	beq.n	800508c <HAL_TIM_ConfigClockSource+0xb0>
 800505a:	d900      	bls.n	800505e <HAL_TIM_ConfigClockSource+0x82>
 800505c:	e07a      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 800505e:	2b60      	cmp	r3, #96	; 0x60
 8005060:	d04f      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x126>
 8005062:	d900      	bls.n	8005066 <HAL_TIM_ConfigClockSource+0x8a>
 8005064:	e076      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 8005066:	2b50      	cmp	r3, #80	; 0x50
 8005068:	d03b      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x106>
 800506a:	d900      	bls.n	800506e <HAL_TIM_ConfigClockSource+0x92>
 800506c:	e072      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d057      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x146>
 8005072:	d900      	bls.n	8005076 <HAL_TIM_ConfigClockSource+0x9a>
 8005074:	e06e      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d063      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x166>
 800507a:	d86b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d060      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x166>
 8005080:	d868      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d05d      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x166>
 8005086:	2b10      	cmp	r3, #16
 8005088:	d05b      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x166>
 800508a:	e063      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6899      	ldr	r1, [r3, #8]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f000 f98c 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2277      	movs	r2, #119	; 0x77
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	609a      	str	r2, [r3, #8]
      break;
 80050b8:	e052      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f000 f975 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	01c9      	lsls	r1, r1, #7
 80050dc:	430a      	orrs	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
      break;
 80050e0:	e03e      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	001a      	movs	r2, r3
 80050f0:	f000 f8e8 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2150      	movs	r1, #80	; 0x50
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 f942 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8005100:	e02e      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	001a      	movs	r2, r3
 8005110:	f000 f906 	bl	8005320 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2160      	movs	r1, #96	; 0x60
 800511a:	0018      	movs	r0, r3
 800511c:	f000 f932 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8005120:	e01e      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	001a      	movs	r2, r3
 8005130:	f000 f8c8 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	0018      	movs	r0, r3
 800513c:	f000 f922 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8005140:	e00e      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	0019      	movs	r1, r3
 800514c:	0010      	movs	r0, r2
 800514e:	f000 f919 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8005152:	e005      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005154:	230f      	movs	r3, #15
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
      break;
 800515c:	e000      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800515e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	223d      	movs	r2, #61	; 0x3d
 8005164:	2101      	movs	r1, #1
 8005166:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	223c      	movs	r2, #60	; 0x3c
 800516c:	2100      	movs	r1, #0
 800516e:	5499      	strb	r1, [r3, r2]

  return status;
 8005170:	230f      	movs	r3, #15
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	781b      	ldrb	r3, [r3, #0]
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b004      	add	sp, #16
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	ffff00ff 	.word	0xffff00ff

08005184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b002      	add	sp, #8
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d008      	beq.n	80051ee <TIM_Base_SetConfig+0x2a>
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	05db      	lsls	r3, r3, #23
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d003      	beq.n	80051ee <TIM_Base_SetConfig+0x2a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a30      	ldr	r2, [pc, #192]	; (80052ac <TIM_Base_SetConfig+0xe8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d108      	bne.n	8005200 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2270      	movs	r2, #112	; 0x70
 80051f2:	4393      	bics	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	05db      	lsls	r3, r3, #23
 800520e:	429a      	cmp	r2, r3
 8005210:	d013      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a25      	ldr	r2, [pc, #148]	; (80052ac <TIM_Base_SetConfig+0xe8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <TIM_Base_SetConfig+0xec>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <TIM_Base_SetConfig+0xf0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <TIM_Base_SetConfig+0xf4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x76>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a21      	ldr	r2, [pc, #132]	; (80052bc <TIM_Base_SetConfig+0xf8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <TIM_Base_SetConfig+0xfc>)
 800523e:	4013      	ands	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	4393      	bics	r3, r2
 8005252:	001a      	movs	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0xce>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <TIM_Base_SetConfig+0xf0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xce>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <TIM_Base_SetConfig+0xf4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xce>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0b      	ldr	r2, [pc, #44]	; (80052bc <TIM_Base_SetConfig+0xf8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d103      	bne.n	800529a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	615a      	str	r2, [r3, #20]
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40002000 	.word	0x40002000
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	fffffcff 	.word	0xfffffcff

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	2201      	movs	r2, #1
 80052dc:	4393      	bics	r3, r2
 80052de:	001a      	movs	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	22f0      	movs	r2, #240	; 0xf0
 80052ee:	4393      	bics	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	220a      	movs	r2, #10
 8005300:	4393      	bics	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b006      	add	sp, #24
 800531e:	bd80      	pop	{r7, pc}

08005320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	2210      	movs	r2, #16
 8005332:	4393      	bics	r3, r2
 8005334:	001a      	movs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <TIM_TI2_ConfigInputStage+0x60>)
 800534a:	4013      	ands	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	22a0      	movs	r2, #160	; 0xa0
 800535c:	4393      	bics	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b006      	add	sp, #24
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	ffff0fff 	.word	0xffff0fff

08005384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2270      	movs	r2, #112	; 0x70
 8005398:	4393      	bics	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	2207      	movs	r2, #7
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	609a      	str	r2, [r3, #8]
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <TIM_ETR_SetConfig+0x3c>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	431a      	orrs	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b006      	add	sp, #24
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	ffff00ff 	.word	0xffff00ff

080053f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	221f      	movs	r2, #31
 8005408:	4013      	ands	r3, r2
 800540a:	2201      	movs	r2, #1
 800540c:	409a      	lsls	r2, r3
 800540e:	0013      	movs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	43d2      	mvns	r2, r2
 800541a:	401a      	ands	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	211f      	movs	r1, #31
 8005428:	400b      	ands	r3, r1
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4099      	lsls	r1, r3
 800542e:	000b      	movs	r3, r1
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46bd      	mov	sp, r7
 800543a:	b006      	add	sp, #24
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	223c      	movs	r2, #60	; 0x3c
 800544e:	5c9b      	ldrb	r3, [r3, r2]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e047      	b.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	223c      	movs	r2, #60	; 0x3c
 800545c:	2101      	movs	r1, #1
 800545e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223d      	movs	r2, #61	; 0x3d
 8005464:	2102      	movs	r1, #2
 8005466:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2270      	movs	r2, #112	; 0x70
 800547c:	4393      	bics	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	05db      	lsls	r3, r3, #23
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d009      	beq.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10c      	bne.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	4393      	bics	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223d      	movs	r2, #61	; 0x3d
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	223c      	movs	r2, #60	; 0x3c
 80054e2:	2100      	movs	r1, #0
 80054e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b004      	add	sp, #16
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40014000 	.word	0x40014000

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e044      	b.n	80055b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2274      	movs	r2, #116	; 0x74
 800553a:	2100      	movs	r1, #0
 800553c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	0018      	movs	r0, r3
 8005542:	f7fc fa79 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2224      	movs	r2, #36	; 0x24
 800554a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2101      	movs	r1, #1
 8005558:	438a      	bics	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fbce 	bl	8005d00 <UART_SetConfig>
 8005564:	0003      	movs	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e024      	b.n	80055b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 fd01 	bl	8005f80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	490d      	ldr	r1, [pc, #52]	; (80055c0 <HAL_UART_Init+0xa4>)
 800558a:	400a      	ands	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	212a      	movs	r1, #42	; 0x2a
 800559a:	438a      	bics	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f000 fd99 	bl	80060e8 <UART_CheckIdleState>
 80055b6:	0003      	movs	r3, r0
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b002      	add	sp, #8
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	ffffb7ff 	.word	0xffffb7ff

080055c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	1dbb      	adds	r3, r7, #6
 80055d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d000      	beq.n	80055de <HAL_UART_Transmit+0x1a>
 80055dc:	e096      	b.n	800570c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_UART_Transmit+0x28>
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e08e      	b.n	800570e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d109      	bne.n	8005610 <HAL_UART_Transmit+0x4c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2201      	movs	r2, #1
 8005608:	4013      	ands	r3, r2
 800560a:	d001      	beq.n	8005610 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e07e      	b.n	800570e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2274      	movs	r2, #116	; 0x74
 8005614:	5c9b      	ldrb	r3, [r3, r2]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UART_Transmit+0x5a>
 800561a:	2302      	movs	r3, #2
 800561c:	e077      	b.n	800570e <HAL_UART_Transmit+0x14a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2274      	movs	r2, #116	; 0x74
 8005622:	2101      	movs	r1, #1
 8005624:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	2100      	movs	r1, #0
 800562c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2221      	movs	r2, #33	; 0x21
 8005632:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005634:	f7fc fb34 	bl	8001ca0 <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1dba      	adds	r2, r7, #6
 8005640:	2150      	movs	r1, #80	; 0x50
 8005642:	8812      	ldrh	r2, [r2, #0]
 8005644:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1dba      	adds	r2, r7, #6
 800564a:	2152      	movs	r1, #82	; 0x52
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	015b      	lsls	r3, r3, #5
 8005658:	429a      	cmp	r2, r3
 800565a:	d108      	bne.n	800566e <HAL_UART_Transmit+0xaa>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e003      	b.n	8005676 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2274      	movs	r2, #116	; 0x74
 800567a:	2100      	movs	r1, #0
 800567c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800567e:	e02d      	b.n	80056dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	0013      	movs	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	f000 fd73 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 8005692:	1e03      	subs	r3, r0, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e039      	b.n	800570e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	05d2      	lsls	r2, r2, #23
 80056aa:	0dd2      	lsrs	r2, r2, #23
 80056ac:	b292      	uxth	r2, r2
 80056ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	3302      	adds	r3, #2
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e008      	b.n	80056ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	b292      	uxth	r2, r2
 80056c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2252      	movs	r2, #82	; 0x52
 80056ce:	5a9b      	ldrh	r3, [r3, r2]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b299      	uxth	r1, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2252      	movs	r2, #82	; 0x52
 80056da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2252      	movs	r2, #82	; 0x52
 80056e0:	5a9b      	ldrh	r3, [r3, r2]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1cb      	bne.n	8005680 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	0013      	movs	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	f000 fd3f 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d001      	beq.n	8005702 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e005      	b.n	800570e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	0018      	movs	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	b008      	add	sp, #32
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b0ab      	sub	sp, #172	; 0xac
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	22a4      	movs	r2, #164	; 0xa4
 8005728:	18b9      	adds	r1, r7, r2
 800572a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	20a0      	movs	r0, #160	; 0xa0
 8005734:	1839      	adds	r1, r7, r0
 8005736:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	219c      	movs	r1, #156	; 0x9c
 8005740:	1879      	adds	r1, r7, r1
 8005742:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005744:	0011      	movs	r1, r2
 8005746:	18bb      	adds	r3, r7, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a99      	ldr	r2, [pc, #612]	; (80059b0 <HAL_UART_IRQHandler+0x298>)
 800574c:	4013      	ands	r3, r2
 800574e:	2298      	movs	r2, #152	; 0x98
 8005750:	18bc      	adds	r4, r7, r2
 8005752:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005754:	18bb      	adds	r3, r7, r2
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d114      	bne.n	8005786 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800575c:	187b      	adds	r3, r7, r1
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2220      	movs	r2, #32
 8005762:	4013      	ands	r3, r2
 8005764:	d00f      	beq.n	8005786 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005766:	183b      	adds	r3, r7, r0
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2220      	movs	r2, #32
 800576c:	4013      	ands	r3, r2
 800576e:	d00a      	beq.n	8005786 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005774:	2b00      	cmp	r3, #0
 8005776:	d100      	bne.n	800577a <HAL_UART_IRQHandler+0x62>
 8005778:	e296      	b.n	8005ca8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	0010      	movs	r0, r2
 8005782:	4798      	blx	r3
      }
      return;
 8005784:	e290      	b.n	8005ca8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005786:	2398      	movs	r3, #152	; 0x98
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d100      	bne.n	8005792 <HAL_UART_IRQHandler+0x7a>
 8005790:	e114      	b.n	80059bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005792:	239c      	movs	r3, #156	; 0x9c
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	4013      	ands	r3, r2
 800579c:	d106      	bne.n	80057ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800579e:	23a0      	movs	r3, #160	; 0xa0
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a83      	ldr	r2, [pc, #524]	; (80059b4 <HAL_UART_IRQHandler+0x29c>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	d100      	bne.n	80057ac <HAL_UART_IRQHandler+0x94>
 80057aa:	e107      	b.n	80059bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ac:	23a4      	movs	r3, #164	; 0xa4
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	4013      	ands	r3, r2
 80057b6:	d012      	beq.n	80057de <HAL_UART_IRQHandler+0xc6>
 80057b8:	23a0      	movs	r3, #160	; 0xa0
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d00b      	beq.n	80057de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2201      	movs	r2, #1
 80057cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	589b      	ldr	r3, [r3, r2]
 80057d4:	2201      	movs	r2, #1
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057de:	23a4      	movs	r3, #164	; 0xa4
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2202      	movs	r2, #2
 80057e6:	4013      	ands	r3, r2
 80057e8:	d011      	beq.n	800580e <HAL_UART_IRQHandler+0xf6>
 80057ea:	239c      	movs	r3, #156	; 0x9c
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	4013      	ands	r3, r2
 80057f4:	d00b      	beq.n	800580e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2202      	movs	r2, #2
 80057fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	589b      	ldr	r3, [r3, r2]
 8005804:	2204      	movs	r2, #4
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800580e:	23a4      	movs	r3, #164	; 0xa4
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2204      	movs	r2, #4
 8005816:	4013      	ands	r3, r2
 8005818:	d011      	beq.n	800583e <HAL_UART_IRQHandler+0x126>
 800581a:	239c      	movs	r3, #156	; 0x9c
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2201      	movs	r2, #1
 8005822:	4013      	ands	r3, r2
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2204      	movs	r2, #4
 800582c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2280      	movs	r2, #128	; 0x80
 8005832:	589b      	ldr	r3, [r3, r2]
 8005834:	2202      	movs	r2, #2
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800583e:	23a4      	movs	r3, #164	; 0xa4
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2208      	movs	r2, #8
 8005846:	4013      	ands	r3, r2
 8005848:	d017      	beq.n	800587a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800584a:	23a0      	movs	r3, #160	; 0xa0
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2220      	movs	r2, #32
 8005852:	4013      	ands	r3, r2
 8005854:	d105      	bne.n	8005862 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005856:	239c      	movs	r3, #156	; 0x9c
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005860:	d00b      	beq.n	800587a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2208      	movs	r2, #8
 8005868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	589b      	ldr	r3, [r3, r2]
 8005870:	2208      	movs	r2, #8
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800587a:	23a4      	movs	r3, #164	; 0xa4
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4013      	ands	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_UART_IRQHandler+0x198>
 8005888:	23a0      	movs	r3, #160	; 0xa0
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	04db      	lsls	r3, r3, #19
 8005892:	4013      	ands	r3, r2
 8005894:	d00c      	beq.n	80058b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	0112      	lsls	r2, r2, #4
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	589b      	ldr	r3, [r3, r2]
 80058a6:	2220      	movs	r2, #32
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2180      	movs	r1, #128	; 0x80
 80058ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	589b      	ldr	r3, [r3, r2]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d100      	bne.n	80058bc <HAL_UART_IRQHandler+0x1a4>
 80058ba:	e1f7      	b.n	8005cac <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058bc:	23a4      	movs	r3, #164	; 0xa4
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	4013      	ands	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c8:	23a0      	movs	r3, #160	; 0xa0
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2220      	movs	r2, #32
 80058d0:	4013      	ands	r3, r2
 80058d2:	d008      	beq.n	80058e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	0010      	movs	r0, r2
 80058e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	589b      	ldr	r3, [r3, r2]
 80058ec:	2194      	movs	r1, #148	; 0x94
 80058ee:	187a      	adds	r2, r7, r1
 80058f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d004      	beq.n	800590a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005900:	187b      	adds	r3, r7, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2228      	movs	r2, #40	; 0x28
 8005906:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005908:	d047      	beq.n	800599a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f000 fcf7 	bl	8006300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2240      	movs	r2, #64	; 0x40
 800591a:	4013      	ands	r3, r2
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d137      	bne.n	8005990 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005928:	2090      	movs	r0, #144	; 0x90
 800592a:	183a      	adds	r2, r7, r0
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	2301      	movs	r3, #1
 8005930:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005934:	f383 8810 	msr	PRIMASK, r3
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	438a      	bics	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
 800594a:	183b      	adds	r3, r7, r0
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	2b00      	cmp	r3, #0
 800595e:	d012      	beq.n	8005986 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_UART_IRQHandler+0x2a0>)
 8005966:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	0018      	movs	r0, r3
 800596e:	f7fc ffef 	bl	8002950 <HAL_DMA_Abort_IT>
 8005972:	1e03      	subs	r3, r0, #0
 8005974:	d01a      	beq.n	80059ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	0018      	movs	r0, r3
 8005982:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e012      	b.n	80059ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f000 f9a5 	bl	8005cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598e:	e00d      	b.n	80059ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f9a0 	bl	8005cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e008      	b.n	80059ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f99b 	bl	8005cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	2100      	movs	r1, #0
 80059a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059aa:	e17f      	b.n	8005cac <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	46c0      	nop			; (mov r8, r8)
    return;
 80059ae:	e17d      	b.n	8005cac <HAL_UART_IRQHandler+0x594>
 80059b0:	0000080f 	.word	0x0000080f
 80059b4:	04000120 	.word	0x04000120
 80059b8:	080063c5 	.word	0x080063c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d000      	beq.n	80059c6 <HAL_UART_IRQHandler+0x2ae>
 80059c4:	e131      	b.n	8005c2a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059c6:	23a4      	movs	r3, #164	; 0xa4
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	4013      	ands	r3, r2
 80059d0:	d100      	bne.n	80059d4 <HAL_UART_IRQHandler+0x2bc>
 80059d2:	e12a      	b.n	8005c2a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059d4:	23a0      	movs	r3, #160	; 0xa0
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2210      	movs	r2, #16
 80059dc:	4013      	ands	r3, r2
 80059de:	d100      	bne.n	80059e2 <HAL_UART_IRQHandler+0x2ca>
 80059e0:	e123      	b.n	8005c2a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2240      	movs	r2, #64	; 0x40
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d000      	beq.n	80059fa <HAL_UART_IRQHandler+0x2e2>
 80059f8:	e09b      	b.n	8005b32 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	217e      	movs	r1, #126	; 0x7e
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005a08:	187b      	adds	r3, r7, r1
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d100      	bne.n	8005a12 <HAL_UART_IRQHandler+0x2fa>
 8005a10:	e14e      	b.n	8005cb0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2258      	movs	r2, #88	; 0x58
 8005a16:	5a9b      	ldrh	r3, [r3, r2]
 8005a18:	187a      	adds	r2, r7, r1
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d300      	bcc.n	8005a22 <HAL_UART_IRQHandler+0x30a>
 8005a20:	e146      	b.n	8005cb0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	187a      	adds	r2, r7, r1
 8005a26:	215a      	movs	r1, #90	; 0x5a
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d06e      	beq.n	8005b14 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a36:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a40:	2301      	movs	r3, #1
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	499a      	ldr	r1, [pc, #616]	; (8005cc0 <HAL_UART_IRQHandler+0x5a8>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	677b      	str	r3, [r7, #116]	; 0x74
 8005a72:	2301      	movs	r3, #1
 8005a74:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2101      	movs	r1, #1
 8005a8a:	438a      	bics	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	673b      	str	r3, [r7, #112]	; 0x70
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2140      	movs	r1, #64	; 0x40
 8005abc:	438a      	bics	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8005adc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae8:	f383 8810 	msr	PRIMASK, r3
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2110      	movs	r1, #16
 8005afa:	438a      	bics	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7fc fee6 	bl	80028e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2258      	movs	r2, #88	; 0x58
 8005b18:	5a9a      	ldrh	r2, [r3, r2]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	215a      	movs	r1, #90	; 0x5a
 8005b1e:	5a5b      	ldrh	r3, [r3, r1]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0011      	movs	r1, r2
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f8dc 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b30:	e0be      	b.n	8005cb0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2258      	movs	r2, #88	; 0x58
 8005b36:	5a99      	ldrh	r1, [r3, r2]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	225a      	movs	r2, #90	; 0x5a
 8005b3c:	5a9b      	ldrh	r3, [r3, r2]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	208e      	movs	r0, #142	; 0x8e
 8005b42:	183b      	adds	r3, r7, r0
 8005b44:	1a8a      	subs	r2, r1, r2
 8005b46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	225a      	movs	r2, #90	; 0x5a
 8005b4c:	5a9b      	ldrh	r3, [r3, r2]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d100      	bne.n	8005b56 <HAL_UART_IRQHandler+0x43e>
 8005b54:	e0ae      	b.n	8005cb4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8005b56:	183b      	adds	r3, r7, r0
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d100      	bne.n	8005b60 <HAL_UART_IRQHandler+0x448>
 8005b5e:	e0a9      	b.n	8005cb4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b68:	2488      	movs	r4, #136	; 0x88
 8005b6a:	193a      	adds	r2, r7, r4
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	2301      	movs	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	494f      	ldr	r1, [pc, #316]	; (8005cc4 <HAL_UART_IRQHandler+0x5ac>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b98:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba0:	2484      	movs	r4, #132	; 0x84
 8005ba2:	193a      	adds	r2, r7, r4
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	438a      	bics	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be2:	f3ef 8310 	mrs	r3, PRIMASK
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bea:	2480      	movs	r4, #128	; 0x80
 8005bec:	193a      	adds	r2, r7, r4
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2110      	movs	r1, #16
 8005c08:	438a      	bics	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	193b      	adds	r3, r7, r4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	f383 8810 	msr	PRIMASK, r3
}
 8005c18:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c1a:	183b      	adds	r3, r7, r0
 8005c1c:	881a      	ldrh	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0011      	movs	r1, r2
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 f860 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c28:	e044      	b.n	8005cb4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c2a:	23a4      	movs	r3, #164	; 0xa4
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	035b      	lsls	r3, r3, #13
 8005c34:	4013      	ands	r3, r2
 8005c36:	d010      	beq.n	8005c5a <HAL_UART_IRQHandler+0x542>
 8005c38:	239c      	movs	r3, #156	; 0x9c
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	03db      	lsls	r3, r3, #15
 8005c42:	4013      	ands	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	0352      	lsls	r2, r2, #13
 8005c4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 fbf8 	bl	8006448 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c58:	e02f      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c5a:	23a4      	movs	r3, #164	; 0xa4
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	4013      	ands	r3, r2
 8005c64:	d00f      	beq.n	8005c86 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c66:	23a0      	movs	r3, #160	; 0xa0
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2280      	movs	r2, #128	; 0x80
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01e      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	0010      	movs	r0, r2
 8005c82:	4798      	blx	r3
    }
    return;
 8005c84:	e018      	b.n	8005cb8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c86:	23a4      	movs	r3, #164	; 0xa4
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_UART_IRQHandler+0x5a2>
 8005c92:	23a0      	movs	r3, #160	; 0xa0
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2240      	movs	r2, #64	; 0x40
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d00d      	beq.n	8005cba <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 fba6 	bl	80063f2 <UART_EndTransmit_IT>
    return;
 8005ca6:	e008      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
      return;
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	e006      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
    return;
 8005cac:	46c0      	nop			; (mov r8, r8)
 8005cae:	e004      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
      return;
 8005cb0:	46c0      	nop			; (mov r8, r8)
 8005cb2:	e002      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
      return;
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	e000      	b.n	8005cba <HAL_UART_IRQHandler+0x5a2>
    return;
 8005cb8:	46c0      	nop			; (mov r8, r8)
  }

}
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b02b      	add	sp, #172	; 0xac
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	fffffeff 	.word	0xfffffeff
 8005cc4:	fffffedf 	.word	0xfffffedf

08005cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cd0:	46c0      	nop			; (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	000a      	movs	r2, r1
 8005cf2:	1cbb      	adds	r3, r7, #2
 8005cf4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b002      	add	sp, #8
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d08:	231e      	movs	r3, #30
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a8d      	ldr	r2, [pc, #564]	; (8005f64 <UART_SetConfig+0x264>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4a88      	ldr	r2, [pc, #544]	; (8005f68 <UART_SetConfig+0x268>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	0019      	movs	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a7f      	ldr	r2, [pc, #508]	; (8005f6c <UART_SetConfig+0x26c>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	0019      	movs	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7b      	ldr	r2, [pc, #492]	; (8005f70 <UART_SetConfig+0x270>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d127      	bne.n	8005dd6 <UART_SetConfig+0xd6>
 8005d86:	4b7b      	ldr	r3, [pc, #492]	; (8005f74 <UART_SetConfig+0x274>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d00d      	beq.n	8005dae <UART_SetConfig+0xae>
 8005d92:	d81b      	bhi.n	8005dcc <UART_SetConfig+0xcc>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d014      	beq.n	8005dc2 <UART_SetConfig+0xc2>
 8005d98:	d818      	bhi.n	8005dcc <UART_SetConfig+0xcc>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <UART_SetConfig+0xa4>
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d00a      	beq.n	8005db8 <UART_SetConfig+0xb8>
 8005da2:	e013      	b.n	8005dcc <UART_SetConfig+0xcc>
 8005da4:	231f      	movs	r3, #31
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e021      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005dae:	231f      	movs	r3, #31
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	2202      	movs	r2, #2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e01c      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005db8:	231f      	movs	r3, #31
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e017      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005dc2:	231f      	movs	r3, #31
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e012      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005dcc:	231f      	movs	r3, #31
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e00d      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a67      	ldr	r2, [pc, #412]	; (8005f78 <UART_SetConfig+0x278>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d104      	bne.n	8005dea <UART_SetConfig+0xea>
 8005de0:	231f      	movs	r3, #31
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e003      	b.n	8005df2 <UART_SetConfig+0xf2>
 8005dea:	231f      	movs	r3, #31
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	2210      	movs	r2, #16
 8005df0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d15d      	bne.n	8005eba <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005dfe:	231f      	movs	r3, #31
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d015      	beq.n	8005e34 <UART_SetConfig+0x134>
 8005e08:	dc18      	bgt.n	8005e3c <UART_SetConfig+0x13c>
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d00d      	beq.n	8005e2a <UART_SetConfig+0x12a>
 8005e0e:	dc15      	bgt.n	8005e3c <UART_SetConfig+0x13c>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <UART_SetConfig+0x11a>
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d005      	beq.n	8005e24 <UART_SetConfig+0x124>
 8005e18:	e010      	b.n	8005e3c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7fe f9ff 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	61bb      	str	r3, [r7, #24]
        break;
 8005e22:	e012      	b.n	8005e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e24:	4b55      	ldr	r3, [pc, #340]	; (8005f7c <UART_SetConfig+0x27c>)
 8005e26:	61bb      	str	r3, [r7, #24]
        break;
 8005e28:	e00f      	b.n	8005e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2a:	f7fe f989 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	61bb      	str	r3, [r7, #24]
        break;
 8005e32:	e00a      	b.n	8005e4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	61bb      	str	r3, [r7, #24]
        break;
 8005e3a:	e006      	b.n	8005e4a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e40:	231e      	movs	r3, #30
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
        break;
 8005e48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d100      	bne.n	8005e52 <UART_SetConfig+0x152>
 8005e50:	e07b      	b.n	8005f4a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	005a      	lsls	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	18d2      	adds	r2, r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	0019      	movs	r1, r3
 8005e64:	0010      	movs	r0, r2
 8005e66:	f7fa f94f 	bl	8000108 <__udivsi3>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b0f      	cmp	r3, #15
 8005e74:	d91c      	bls.n	8005eb0 <UART_SetConfig+0x1b0>
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	025b      	lsls	r3, r3, #9
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d217      	bcs.n	8005eb0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	200e      	movs	r0, #14
 8005e86:	183b      	adds	r3, r7, r0
 8005e88:	210f      	movs	r1, #15
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2207      	movs	r2, #7
 8005e96:	4013      	ands	r3, r2
 8005e98:	b299      	uxth	r1, r3
 8005e9a:	183b      	adds	r3, r7, r0
 8005e9c:	183a      	adds	r2, r7, r0
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	183a      	adds	r2, r7, r0
 8005eaa:	8812      	ldrh	r2, [r2, #0]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e04c      	b.n	8005f4a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb0:	231e      	movs	r3, #30
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e047      	b.n	8005f4a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eba:	231f      	movs	r3, #31
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d015      	beq.n	8005ef0 <UART_SetConfig+0x1f0>
 8005ec4:	dc18      	bgt.n	8005ef8 <UART_SetConfig+0x1f8>
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d00d      	beq.n	8005ee6 <UART_SetConfig+0x1e6>
 8005eca:	dc15      	bgt.n	8005ef8 <UART_SetConfig+0x1f8>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <UART_SetConfig+0x1d6>
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d005      	beq.n	8005ee0 <UART_SetConfig+0x1e0>
 8005ed4:	e010      	b.n	8005ef8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed6:	f7fe f9a1 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8005eda:	0003      	movs	r3, r0
 8005edc:	61bb      	str	r3, [r7, #24]
        break;
 8005ede:	e012      	b.n	8005f06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b26      	ldr	r3, [pc, #152]	; (8005f7c <UART_SetConfig+0x27c>)
 8005ee2:	61bb      	str	r3, [r7, #24]
        break;
 8005ee4:	e00f      	b.n	8005f06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fe f92b 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8005eea:	0003      	movs	r3, r0
 8005eec:	61bb      	str	r3, [r7, #24]
        break;
 8005eee:	e00a      	b.n	8005f06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	61bb      	str	r3, [r7, #24]
        break;
 8005ef6:	e006      	b.n	8005f06 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005efc:	231e      	movs	r3, #30
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
        break;
 8005f04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	085a      	lsrs	r2, r3, #1
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	18d2      	adds	r2, r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	0010      	movs	r0, r2
 8005f1e:	f7fa f8f3 	bl	8000108 <__udivsi3>
 8005f22:	0003      	movs	r3, r0
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	d909      	bls.n	8005f42 <UART_SetConfig+0x242>
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	025b      	lsls	r3, r3, #9
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d204      	bcs.n	8005f42 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e003      	b.n	8005f4a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005f42:	231e      	movs	r3, #30
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f56:	231e      	movs	r3, #30
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b008      	add	sp, #32
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	ffff69f3 	.word	0xffff69f3
 8005f68:	ffffcfff 	.word	0xffffcfff
 8005f6c:	fffff4ff 	.word	0xfffff4ff
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40004400 	.word	0x40004400
 8005f7c:	007a1200 	.word	0x007a1200

08005f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d00b      	beq.n	8005faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <UART_AdvFeatureConfig+0x144>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	2202      	movs	r2, #2
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a43      	ldr	r2, [pc, #268]	; (80060c8 <UART_AdvFeatureConfig+0x148>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <UART_AdvFeatureConfig+0x14c>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <UART_AdvFeatureConfig+0x150>)
 8006000:	4013      	ands	r3, r2
 8006002:	0019      	movs	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2210      	movs	r2, #16
 8006016:	4013      	ands	r3, r2
 8006018:	d00b      	beq.n	8006032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <UART_AdvFeatureConfig+0x154>)
 8006022:	4013      	ands	r3, r2
 8006024:	0019      	movs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2220      	movs	r2, #32
 8006038:	4013      	ands	r3, r2
 800603a:	d00b      	beq.n	8006054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <UART_AdvFeatureConfig+0x158>)
 8006044:	4013      	ands	r3, r2
 8006046:	0019      	movs	r1, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2240      	movs	r2, #64	; 0x40
 800605a:	4013      	ands	r3, r2
 800605c:	d01d      	beq.n	800609a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <UART_AdvFeatureConfig+0x15c>)
 8006066:	4013      	ands	r3, r2
 8006068:	0019      	movs	r1, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	035b      	lsls	r3, r3, #13
 800607e:	429a      	cmp	r2, r3
 8006080:	d10b      	bne.n	800609a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <UART_AdvFeatureConfig+0x160>)
 800608a:	4013      	ands	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	2280      	movs	r2, #128	; 0x80
 80060a0:	4013      	ands	r3, r2
 80060a2:	d00b      	beq.n	80060bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a0e      	ldr	r2, [pc, #56]	; (80060e4 <UART_AdvFeatureConfig+0x164>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	0019      	movs	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b002      	add	sp, #8
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	fffdffff 	.word	0xfffdffff
 80060c8:	fffeffff 	.word	0xfffeffff
 80060cc:	fffbffff 	.word	0xfffbffff
 80060d0:	ffff7fff 	.word	0xffff7fff
 80060d4:	ffffefff 	.word	0xffffefff
 80060d8:	ffffdfff 	.word	0xffffdfff
 80060dc:	ffefffff 	.word	0xffefffff
 80060e0:	ff9fffff 	.word	0xff9fffff
 80060e4:	fff7ffff 	.word	0xfff7ffff

080060e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	2100      	movs	r1, #0
 80060f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060f8:	f7fb fdd2 	bl	8001ca0 <HAL_GetTick>
 80060fc:	0003      	movs	r3, r0
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2208      	movs	r2, #8
 8006108:	4013      	ands	r3, r2
 800610a:	2b08      	cmp	r3, #8
 800610c:	d10c      	bne.n	8006128 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2280      	movs	r2, #128	; 0x80
 8006112:	0391      	lsls	r1, r2, #14
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4a17      	ldr	r2, [pc, #92]	; (8006174 <UART_CheckIdleState+0x8c>)
 8006118:	9200      	str	r2, [sp, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	f000 f82c 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 8006120:	1e03      	subs	r3, r0, #0
 8006122:	d001      	beq.n	8006128 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e021      	b.n	800616c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2204      	movs	r2, #4
 8006130:	4013      	ands	r3, r2
 8006132:	2b04      	cmp	r3, #4
 8006134:	d10c      	bne.n	8006150 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	03d1      	lsls	r1, r2, #15
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4a0d      	ldr	r2, [pc, #52]	; (8006174 <UART_CheckIdleState+0x8c>)
 8006140:	9200      	str	r2, [sp, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	f000 f818 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d001      	beq.n	8006150 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00d      	b.n	800616c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2274      	movs	r2, #116	; 0x74
 8006166:	2100      	movs	r1, #0
 8006168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b004      	add	sp, #16
 8006172:	bd80      	pop	{r7, pc}
 8006174:	01ffffff 	.word	0x01ffffff

08006178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b094      	sub	sp, #80	; 0x50
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	1dfb      	adds	r3, r7, #7
 8006186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006188:	e0a3      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	3301      	adds	r3, #1
 800618e:	d100      	bne.n	8006192 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006190:	e09f      	b.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fb fd85 	bl	8001ca0 <HAL_GetTick>
 8006196:	0002      	movs	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d13d      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
 80061b2:	2301      	movs	r3, #1
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	f383 8810 	msr	PRIMASK, r3
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	494c      	ldr	r1, [pc, #304]	; (80062fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80061ca:	400a      	ands	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	f383 8810 	msr	PRIMASK, r3
}
 80061d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061da:	f3ef 8310 	mrs	r3, PRIMASK
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	643b      	str	r3, [r7, #64]	; 0x40
 80061e4:	2301      	movs	r3, #1
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	f383 8810 	msr	PRIMASK, r3
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2101      	movs	r1, #1
 80061fc:	438a      	bics	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	f383 8810 	msr	PRIMASK, r3
}
 800620a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2274      	movs	r2, #116	; 0x74
 800621c:	2100      	movs	r1, #0
 800621e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e067      	b.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2204      	movs	r2, #4
 800622c:	4013      	ands	r3, r2
 800622e:	d050      	beq.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	401a      	ands	r2, r3
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	429a      	cmp	r2, r3
 8006242:	d146      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2280      	movs	r2, #128	; 0x80
 800624a:	0112      	lsls	r2, r2, #4
 800624c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624e:	f3ef 8310 	mrs	r3, PRIMASK
 8006252:	613b      	str	r3, [r7, #16]
  return(result);
 8006254:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f383 8810 	msr	PRIMASK, r3
}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4923      	ldr	r1, [pc, #140]	; (80062fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006270:	400a      	ands	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006276:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	f383 8810 	msr	PRIMASK, r3
}
 800627e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006280:	f3ef 8310 	mrs	r3, PRIMASK
 8006284:	61fb      	str	r3, [r7, #28]
  return(result);
 8006286:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	64bb      	str	r3, [r7, #72]	; 0x48
 800628a:	2301      	movs	r3, #1
 800628c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	f383 8810 	msr	PRIMASK, r3
}
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2101      	movs	r1, #1
 80062a2:	438a      	bics	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]
 80062a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	f383 8810 	msr	PRIMASK, r3
}
 80062b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	2120      	movs	r1, #32
 80062c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2274      	movs	r2, #116	; 0x74
 80062ca:	2100      	movs	r1, #0
 80062cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e010      	b.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4013      	ands	r3, r2
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	425a      	negs	r2, r3
 80062e2:	4153      	adcs	r3, r2
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	001a      	movs	r2, r3
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d100      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80062f0:	e74b      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b014      	add	sp, #80	; 0x50
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	fffffe5f 	.word	0xfffffe5f

08006300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006308:	f3ef 8310 	mrs	r3, PRIMASK
 800630c:	617b      	str	r3, [r7, #20]
  return(result);
 800630e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	2301      	movs	r3, #1
 8006314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4925      	ldr	r1, [pc, #148]	; (80063c0 <UART_EndRxTransfer+0xc0>)
 800632a:	400a      	ands	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633a:	f3ef 8310 	mrs	r3, PRIMASK
 800633e:	623b      	str	r3, [r7, #32]
  return(result);
 8006340:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
 8006344:	2301      	movs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	438a      	bics	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006370:	2b01      	cmp	r3, #1
 8006372:	d118      	bne.n	80063a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006374:	f3ef 8310 	mrs	r3, PRIMASK
 8006378:	60bb      	str	r3, [r7, #8]
  return(result);
 800637a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637e:	2301      	movs	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2110      	movs	r1, #16
 8006396:	438a      	bics	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b00e      	add	sp, #56	; 0x38
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	fffffedf 	.word	0xfffffedf

080063c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	225a      	movs	r2, #90	; 0x5a
 80063d6:	2100      	movs	r1, #0
 80063d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2252      	movs	r2, #82	; 0x52
 80063de:	2100      	movs	r1, #0
 80063e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7ff fc77 	bl	8005cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b004      	add	sp, #16
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fa:	f3ef 8310 	mrs	r3, PRIMASK
 80063fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006400:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	2301      	movs	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f383 8810 	msr	PRIMASK, r3
}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2140      	movs	r1, #64	; 0x40
 800641c:	438a      	bics	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f383 8810 	msr	PRIMASK, r3
}
 800642a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	0018      	movs	r0, r3
 800643c:	f7ff fc44 	bl	8005cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	b006      	add	sp, #24
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	6019      	str	r1, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006466:	2317      	movs	r3, #23
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2274      	movs	r2, #116	; 0x74
 8006472:	5c9b      	ldrb	r3, [r3, r2]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 8006478:	2302      	movs	r3, #2
 800647a:	e04a      	b.n	8006512 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2274      	movs	r2, #116	; 0x74
 8006480:	2101      	movs	r1, #1
 8006482:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2224      	movs	r2, #36	; 0x24
 8006488:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2101      	movs	r1, #1
 8006496:	438a      	bics	r2, r1
 8006498:	601a      	str	r2, [r3, #0]

#if defined(USART_CR3_WUS)
  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a1e      	ldr	r2, [pc, #120]	; (800651c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_WUS */

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d105      	bne.n	80064c6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	f000 f860 	bl	8006586 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2101      	movs	r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d6:	f7fb fbe3 	bl	8001ca0 <HAL_GetTick>
 80064da:	0003      	movs	r3, r0
 80064dc:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	03d1      	lsls	r1, r2, #15
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	4a0e      	ldr	r2, [pc, #56]	; (8006520 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80064e8:	9200      	str	r2, [sp, #0]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7ff fe44 	bl	8006178 <UART_WaitOnFlagUntilTimeout>
 80064f0:	1e03      	subs	r3, r0, #0
 80064f2:	d004      	beq.n	80064fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 80064f4:	2317      	movs	r3, #23
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	2203      	movs	r2, #3
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e002      	b.n	8006504 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2274      	movs	r2, #116	; 0x74
 8006508:	2100      	movs	r1, #0
 800650a:	5499      	strb	r1, [r3, r2]

  return status;
 800650c:	2317      	movs	r3, #23
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	781b      	ldrb	r3, [r3, #0]
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b006      	add	sp, #24
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	ffcfffff 	.word	0xffcfffff
 8006520:	01ffffff 	.word	0x01ffffff

08006524 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2274      	movs	r2, #116	; 0x74
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_UARTEx_EnableStopMode+0x16>
 8006536:	2302      	movs	r3, #2
 8006538:	e021      	b.n	800657e <HAL_UARTEx_EnableStopMode+0x5a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2274      	movs	r2, #116	; 0x74
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006542:	f3ef 8310 	mrs	r3, PRIMASK
 8006546:	60bb      	str	r3, [r7, #8]
  return(result);
 8006548:	68bb      	ldr	r3, [r7, #8]

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	2301      	movs	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f383 8810 	msr	PRIMASK, r3
}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2102      	movs	r1, #2
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f383 8810 	msr	PRIMASK, r3
}
 8006572:	46c0      	nop			; (mov r8, r8)

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2274      	movs	r2, #116	; 0x74
 8006578:	2100      	movs	r1, #0
 800657a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b006      	add	sp, #24
 8006584:	bd80      	pop	{r7, pc}

08006586 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2210      	movs	r2, #16
 800659c:	4393      	bics	r3, r2
 800659e:	001a      	movs	r2, r3
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	889b      	ldrh	r3, [r3, #4]
 80065a4:	0019      	movs	r1, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	0a19      	lsrs	r1, r3, #8
 80065b8:	1d3b      	adds	r3, r7, #4
 80065ba:	799b      	ldrb	r3, [r3, #6]
 80065bc:	061a      	lsls	r2, r3, #24
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b004      	add	sp, #16
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	2600      	movs	r6, #0
 80065d4:	4d0c      	ldr	r5, [pc, #48]	; (8006608 <__libc_init_array+0x38>)
 80065d6:	4c0d      	ldr	r4, [pc, #52]	; (800660c <__libc_init_array+0x3c>)
 80065d8:	1b64      	subs	r4, r4, r5
 80065da:	10a4      	asrs	r4, r4, #2
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	2600      	movs	r6, #0
 80065e2:	f000 f821 	bl	8006628 <_init>
 80065e6:	4d0a      	ldr	r5, [pc, #40]	; (8006610 <__libc_init_array+0x40>)
 80065e8:	4c0a      	ldr	r4, [pc, #40]	; (8006614 <__libc_init_array+0x44>)
 80065ea:	1b64      	subs	r4, r4, r5
 80065ec:	10a4      	asrs	r4, r4, #2
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	00b3      	lsls	r3, r6, #2
 80065f6:	58eb      	ldr	r3, [r5, r3]
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	00b3      	lsls	r3, r6, #2
 8006600:	58eb      	ldr	r3, [r5, r3]
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	080066ec 	.word	0x080066ec
 800660c:	080066ec 	.word	0x080066ec
 8006610:	080066ec 	.word	0x080066ec
 8006614:	080066f0 	.word	0x080066f0

08006618 <memset>:
 8006618:	0003      	movs	r3, r0
 800661a:	1882      	adds	r2, r0, r2
 800661c:	4293      	cmp	r3, r2
 800661e:	d100      	bne.n	8006622 <memset+0xa>
 8006620:	4770      	bx	lr
 8006622:	7019      	strb	r1, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	e7f9      	b.n	800661c <memset+0x4>

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
