
Quick-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004124  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080042ac  080042ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ac  080042ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080042c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080042c0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a680  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aef  00000000  00000000  0002a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011420  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac3c  00000000  00000000  0003e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067c3b  00000000  00000000  0004911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b4c  00000000  00000000  000b0da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041cc 	.word	0x080041cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080041cc 	.word	0x080041cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4698      	mov	r8, r3
 800022e:	030c      	lsls	r4, r1, #12
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	0006      	movs	r6, r0
 8000234:	4692      	mov	sl, r2
 8000236:	b087      	sub	sp, #28
 8000238:	0b24      	lsrs	r4, r4, #12
 800023a:	0d5b      	lsrs	r3, r3, #21
 800023c:	0fcf      	lsrs	r7, r1, #31
 800023e:	2b00      	cmp	r3, #0
 8000240:	d100      	bne.n	8000244 <__aeabi_dmul+0x24>
 8000242:	e15c      	b.n	80004fe <__aeabi_dmul+0x2de>
 8000244:	4ad9      	ldr	r2, [pc, #868]	; (80005ac <__aeabi_dmul+0x38c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d100      	bne.n	800024c <__aeabi_dmul+0x2c>
 800024a:	e175      	b.n	8000538 <__aeabi_dmul+0x318>
 800024c:	0f42      	lsrs	r2, r0, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	4314      	orrs	r4, r2
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	0412      	lsls	r2, r2, #16
 8000256:	4314      	orrs	r4, r2
 8000258:	4ad5      	ldr	r2, [pc, #852]	; (80005b0 <__aeabi_dmul+0x390>)
 800025a:	00c5      	lsls	r5, r0, #3
 800025c:	4694      	mov	ip, r2
 800025e:	4463      	add	r3, ip
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	4699      	mov	r9, r3
 8000266:	469b      	mov	fp, r3
 8000268:	4643      	mov	r3, r8
 800026a:	4642      	mov	r2, r8
 800026c:	031e      	lsls	r6, r3, #12
 800026e:	0fd2      	lsrs	r2, r2, #31
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4650      	mov	r0, sl
 8000274:	4690      	mov	r8, r2
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e120      	b.n	80004c0 <__aeabi_dmul+0x2a0>
 800027e:	4acb      	ldr	r2, [pc, #812]	; (80005ac <__aeabi_dmul+0x38c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e162      	b.n	800054c <__aeabi_dmul+0x32c>
 8000286:	49ca      	ldr	r1, [pc, #808]	; (80005b0 <__aeabi_dmul+0x390>)
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	468c      	mov	ip, r1
 800028c:	9900      	ldr	r1, [sp, #0]
 800028e:	4463      	add	r3, ip
 8000290:	00f6      	lsls	r6, r6, #3
 8000292:	468c      	mov	ip, r1
 8000294:	4316      	orrs	r6, r2
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	449c      	add	ip, r3
 800029a:	0412      	lsls	r2, r2, #16
 800029c:	4663      	mov	r3, ip
 800029e:	4316      	orrs	r6, r2
 80002a0:	00c2      	lsls	r2, r0, #3
 80002a2:	2000      	movs	r0, #0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	9900      	ldr	r1, [sp, #0]
 80002a8:	4643      	mov	r3, r8
 80002aa:	3101      	adds	r1, #1
 80002ac:	468c      	mov	ip, r1
 80002ae:	4649      	mov	r1, r9
 80002b0:	407b      	eors	r3, r7
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	290f      	cmp	r1, #15
 80002b6:	d826      	bhi.n	8000306 <__aeabi_dmul+0xe6>
 80002b8:	4bbe      	ldr	r3, [pc, #760]	; (80005b4 <__aeabi_dmul+0x394>)
 80002ba:	0089      	lsls	r1, r1, #2
 80002bc:	5859      	ldr	r1, [r3, r1]
 80002be:	468f      	mov	pc, r1
 80002c0:	4643      	mov	r3, r8
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	0034      	movs	r4, r6
 80002c6:	0015      	movs	r5, r2
 80002c8:	4683      	mov	fp, r0
 80002ca:	465b      	mov	r3, fp
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d016      	beq.n	80002fe <__aeabi_dmul+0xde>
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d100      	bne.n	80002d6 <__aeabi_dmul+0xb6>
 80002d4:	e203      	b.n	80006de <__aeabi_dmul+0x4be>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d000      	beq.n	80002dc <__aeabi_dmul+0xbc>
 80002da:	e0cd      	b.n	8000478 <__aeabi_dmul+0x258>
 80002dc:	2200      	movs	r2, #0
 80002de:	2400      	movs	r4, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	9b01      	ldr	r3, [sp, #4]
 80002e4:	0512      	lsls	r2, r2, #20
 80002e6:	4322      	orrs	r2, r4
 80002e8:	07db      	lsls	r3, r3, #31
 80002ea:	431a      	orrs	r2, r3
 80002ec:	0028      	movs	r0, r5
 80002ee:	0011      	movs	r1, r2
 80002f0:	b007      	add	sp, #28
 80002f2:	bcf0      	pop	{r4, r5, r6, r7}
 80002f4:	46bb      	mov	fp, r7
 80002f6:	46b2      	mov	sl, r6
 80002f8:	46a9      	mov	r9, r5
 80002fa:	46a0      	mov	r8, r4
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	2400      	movs	r4, #0
 8000300:	2500      	movs	r5, #0
 8000302:	4aaa      	ldr	r2, [pc, #680]	; (80005ac <__aeabi_dmul+0x38c>)
 8000304:	e7ed      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000306:	0c28      	lsrs	r0, r5, #16
 8000308:	042d      	lsls	r5, r5, #16
 800030a:	0c2d      	lsrs	r5, r5, #16
 800030c:	002b      	movs	r3, r5
 800030e:	0c11      	lsrs	r1, r2, #16
 8000310:	0412      	lsls	r2, r2, #16
 8000312:	0c12      	lsrs	r2, r2, #16
 8000314:	4353      	muls	r3, r2
 8000316:	4698      	mov	r8, r3
 8000318:	0013      	movs	r3, r2
 800031a:	002f      	movs	r7, r5
 800031c:	4343      	muls	r3, r0
 800031e:	4699      	mov	r9, r3
 8000320:	434f      	muls	r7, r1
 8000322:	444f      	add	r7, r9
 8000324:	46bb      	mov	fp, r7
 8000326:	4647      	mov	r7, r8
 8000328:	000b      	movs	r3, r1
 800032a:	0c3f      	lsrs	r7, r7, #16
 800032c:	46ba      	mov	sl, r7
 800032e:	4343      	muls	r3, r0
 8000330:	44da      	add	sl, fp
 8000332:	9302      	str	r3, [sp, #8]
 8000334:	45d1      	cmp	r9, sl
 8000336:	d904      	bls.n	8000342 <__aeabi_dmul+0x122>
 8000338:	2780      	movs	r7, #128	; 0x80
 800033a:	027f      	lsls	r7, r7, #9
 800033c:	46b9      	mov	r9, r7
 800033e:	444b      	add	r3, r9
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	4653      	mov	r3, sl
 8000344:	0c1b      	lsrs	r3, r3, #16
 8000346:	469b      	mov	fp, r3
 8000348:	4653      	mov	r3, sl
 800034a:	041f      	lsls	r7, r3, #16
 800034c:	4643      	mov	r3, r8
 800034e:	041b      	lsls	r3, r3, #16
 8000350:	0c1b      	lsrs	r3, r3, #16
 8000352:	4698      	mov	r8, r3
 8000354:	003b      	movs	r3, r7
 8000356:	4443      	add	r3, r8
 8000358:	9304      	str	r3, [sp, #16]
 800035a:	0c33      	lsrs	r3, r6, #16
 800035c:	0436      	lsls	r6, r6, #16
 800035e:	0c36      	lsrs	r6, r6, #16
 8000360:	4698      	mov	r8, r3
 8000362:	0033      	movs	r3, r6
 8000364:	4343      	muls	r3, r0
 8000366:	4699      	mov	r9, r3
 8000368:	4643      	mov	r3, r8
 800036a:	4343      	muls	r3, r0
 800036c:	002f      	movs	r7, r5
 800036e:	469a      	mov	sl, r3
 8000370:	4643      	mov	r3, r8
 8000372:	4377      	muls	r7, r6
 8000374:	435d      	muls	r5, r3
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	444d      	add	r5, r9
 800037a:	1945      	adds	r5, r0, r5
 800037c:	45a9      	cmp	r9, r5
 800037e:	d903      	bls.n	8000388 <__aeabi_dmul+0x168>
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	025b      	lsls	r3, r3, #9
 8000384:	4699      	mov	r9, r3
 8000386:	44ca      	add	sl, r9
 8000388:	043f      	lsls	r7, r7, #16
 800038a:	0c28      	lsrs	r0, r5, #16
 800038c:	0c3f      	lsrs	r7, r7, #16
 800038e:	042d      	lsls	r5, r5, #16
 8000390:	19ed      	adds	r5, r5, r7
 8000392:	0c27      	lsrs	r7, r4, #16
 8000394:	0424      	lsls	r4, r4, #16
 8000396:	0c24      	lsrs	r4, r4, #16
 8000398:	0003      	movs	r3, r0
 800039a:	0020      	movs	r0, r4
 800039c:	4350      	muls	r0, r2
 800039e:	437a      	muls	r2, r7
 80003a0:	4691      	mov	r9, r2
 80003a2:	003a      	movs	r2, r7
 80003a4:	4453      	add	r3, sl
 80003a6:	9305      	str	r3, [sp, #20]
 80003a8:	0c03      	lsrs	r3, r0, #16
 80003aa:	469a      	mov	sl, r3
 80003ac:	434a      	muls	r2, r1
 80003ae:	4361      	muls	r1, r4
 80003b0:	4449      	add	r1, r9
 80003b2:	4451      	add	r1, sl
 80003b4:	44ab      	add	fp, r5
 80003b6:	4589      	cmp	r9, r1
 80003b8:	d903      	bls.n	80003c2 <__aeabi_dmul+0x1a2>
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	025b      	lsls	r3, r3, #9
 80003be:	4699      	mov	r9, r3
 80003c0:	444a      	add	r2, r9
 80003c2:	0400      	lsls	r0, r0, #16
 80003c4:	0c0b      	lsrs	r3, r1, #16
 80003c6:	0c00      	lsrs	r0, r0, #16
 80003c8:	0409      	lsls	r1, r1, #16
 80003ca:	1809      	adds	r1, r1, r0
 80003cc:	0020      	movs	r0, r4
 80003ce:	4699      	mov	r9, r3
 80003d0:	4643      	mov	r3, r8
 80003d2:	4370      	muls	r0, r6
 80003d4:	435c      	muls	r4, r3
 80003d6:	437e      	muls	r6, r7
 80003d8:	435f      	muls	r7, r3
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	4698      	mov	r8, r3
 80003de:	19a4      	adds	r4, r4, r6
 80003e0:	4444      	add	r4, r8
 80003e2:	444a      	add	r2, r9
 80003e4:	9703      	str	r7, [sp, #12]
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d904      	bls.n	80003f4 <__aeabi_dmul+0x1d4>
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	025b      	lsls	r3, r3, #9
 80003ee:	4698      	mov	r8, r3
 80003f0:	4447      	add	r7, r8
 80003f2:	9703      	str	r7, [sp, #12]
 80003f4:	0423      	lsls	r3, r4, #16
 80003f6:	9e02      	ldr	r6, [sp, #8]
 80003f8:	469a      	mov	sl, r3
 80003fa:	9b05      	ldr	r3, [sp, #20]
 80003fc:	445e      	add	r6, fp
 80003fe:	4698      	mov	r8, r3
 8000400:	42ae      	cmp	r6, r5
 8000402:	41ad      	sbcs	r5, r5
 8000404:	1876      	adds	r6, r6, r1
 8000406:	428e      	cmp	r6, r1
 8000408:	4189      	sbcs	r1, r1
 800040a:	0400      	lsls	r0, r0, #16
 800040c:	0c00      	lsrs	r0, r0, #16
 800040e:	4450      	add	r0, sl
 8000410:	4440      	add	r0, r8
 8000412:	426d      	negs	r5, r5
 8000414:	1947      	adds	r7, r0, r5
 8000416:	46b8      	mov	r8, r7
 8000418:	4693      	mov	fp, r2
 800041a:	4249      	negs	r1, r1
 800041c:	4689      	mov	r9, r1
 800041e:	44c3      	add	fp, r8
 8000420:	44d9      	add	r9, fp
 8000422:	4298      	cmp	r0, r3
 8000424:	4180      	sbcs	r0, r0
 8000426:	45a8      	cmp	r8, r5
 8000428:	41ad      	sbcs	r5, r5
 800042a:	4593      	cmp	fp, r2
 800042c:	4192      	sbcs	r2, r2
 800042e:	4589      	cmp	r9, r1
 8000430:	4189      	sbcs	r1, r1
 8000432:	426d      	negs	r5, r5
 8000434:	4240      	negs	r0, r0
 8000436:	4328      	orrs	r0, r5
 8000438:	0c24      	lsrs	r4, r4, #16
 800043a:	4252      	negs	r2, r2
 800043c:	4249      	negs	r1, r1
 800043e:	430a      	orrs	r2, r1
 8000440:	9b03      	ldr	r3, [sp, #12]
 8000442:	1900      	adds	r0, r0, r4
 8000444:	1880      	adds	r0, r0, r2
 8000446:	18c7      	adds	r7, r0, r3
 8000448:	464b      	mov	r3, r9
 800044a:	0ddc      	lsrs	r4, r3, #23
 800044c:	9b04      	ldr	r3, [sp, #16]
 800044e:	0275      	lsls	r5, r6, #9
 8000450:	431d      	orrs	r5, r3
 8000452:	1e6a      	subs	r2, r5, #1
 8000454:	4195      	sbcs	r5, r2
 8000456:	464b      	mov	r3, r9
 8000458:	0df6      	lsrs	r6, r6, #23
 800045a:	027f      	lsls	r7, r7, #9
 800045c:	4335      	orrs	r5, r6
 800045e:	025a      	lsls	r2, r3, #9
 8000460:	433c      	orrs	r4, r7
 8000462:	4315      	orrs	r5, r2
 8000464:	01fb      	lsls	r3, r7, #7
 8000466:	d400      	bmi.n	800046a <__aeabi_dmul+0x24a>
 8000468:	e11c      	b.n	80006a4 <__aeabi_dmul+0x484>
 800046a:	2101      	movs	r1, #1
 800046c:	086a      	lsrs	r2, r5, #1
 800046e:	400d      	ands	r5, r1
 8000470:	4315      	orrs	r5, r2
 8000472:	07e2      	lsls	r2, r4, #31
 8000474:	4315      	orrs	r5, r2
 8000476:	0864      	lsrs	r4, r4, #1
 8000478:	494f      	ldr	r1, [pc, #316]	; (80005b8 <__aeabi_dmul+0x398>)
 800047a:	4461      	add	r1, ip
 800047c:	2900      	cmp	r1, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_dmul+0x262>
 8000480:	e0b0      	b.n	80005e4 <__aeabi_dmul+0x3c4>
 8000482:	076b      	lsls	r3, r5, #29
 8000484:	d009      	beq.n	800049a <__aeabi_dmul+0x27a>
 8000486:	220f      	movs	r2, #15
 8000488:	402a      	ands	r2, r5
 800048a:	2a04      	cmp	r2, #4
 800048c:	d005      	beq.n	800049a <__aeabi_dmul+0x27a>
 800048e:	1d2a      	adds	r2, r5, #4
 8000490:	42aa      	cmp	r2, r5
 8000492:	41ad      	sbcs	r5, r5
 8000494:	426d      	negs	r5, r5
 8000496:	1964      	adds	r4, r4, r5
 8000498:	0015      	movs	r5, r2
 800049a:	01e3      	lsls	r3, r4, #7
 800049c:	d504      	bpl.n	80004a8 <__aeabi_dmul+0x288>
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	4a46      	ldr	r2, [pc, #280]	; (80005bc <__aeabi_dmul+0x39c>)
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	4014      	ands	r4, r2
 80004a6:	4461      	add	r1, ip
 80004a8:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <__aeabi_dmul+0x3a0>)
 80004aa:	4291      	cmp	r1, r2
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_dmul+0x290>
 80004ae:	e726      	b.n	80002fe <__aeabi_dmul+0xde>
 80004b0:	0762      	lsls	r2, r4, #29
 80004b2:	08ed      	lsrs	r5, r5, #3
 80004b4:	0264      	lsls	r4, r4, #9
 80004b6:	0549      	lsls	r1, r1, #21
 80004b8:	4315      	orrs	r5, r2
 80004ba:	0b24      	lsrs	r4, r4, #12
 80004bc:	0d4a      	lsrs	r2, r1, #21
 80004be:	e710      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80004c0:	4652      	mov	r2, sl
 80004c2:	4332      	orrs	r2, r6
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dmul+0x2a8>
 80004c6:	e07f      	b.n	80005c8 <__aeabi_dmul+0x3a8>
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_dmul+0x2ae>
 80004cc:	e0dc      	b.n	8000688 <__aeabi_dmul+0x468>
 80004ce:	0030      	movs	r0, r6
 80004d0:	f000 f9ca 	bl	8000868 <__clzsi2>
 80004d4:	0002      	movs	r2, r0
 80004d6:	3a0b      	subs	r2, #11
 80004d8:	231d      	movs	r3, #29
 80004da:	0001      	movs	r1, r0
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	4652      	mov	r2, sl
 80004e0:	3908      	subs	r1, #8
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	408e      	lsls	r6, r1
 80004e6:	4316      	orrs	r6, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	408a      	lsls	r2, r1
 80004ec:	9b00      	ldr	r3, [sp, #0]
 80004ee:	4935      	ldr	r1, [pc, #212]	; (80005c4 <__aeabi_dmul+0x3a4>)
 80004f0:	1a18      	subs	r0, r3, r0
 80004f2:	0003      	movs	r3, r0
 80004f4:	468c      	mov	ip, r1
 80004f6:	4463      	add	r3, ip
 80004f8:	2000      	movs	r0, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	e6d3      	b.n	80002a6 <__aeabi_dmul+0x86>
 80004fe:	0025      	movs	r5, r4
 8000500:	4305      	orrs	r5, r0
 8000502:	d04a      	beq.n	800059a <__aeabi_dmul+0x37a>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x2ea>
 8000508:	e0b0      	b.n	800066c <__aeabi_dmul+0x44c>
 800050a:	0020      	movs	r0, r4
 800050c:	f000 f9ac 	bl	8000868 <__clzsi2>
 8000510:	0001      	movs	r1, r0
 8000512:	0002      	movs	r2, r0
 8000514:	390b      	subs	r1, #11
 8000516:	231d      	movs	r3, #29
 8000518:	0010      	movs	r0, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	0031      	movs	r1, r6
 800051e:	0035      	movs	r5, r6
 8000520:	3808      	subs	r0, #8
 8000522:	4084      	lsls	r4, r0
 8000524:	40d9      	lsrs	r1, r3
 8000526:	4085      	lsls	r5, r0
 8000528:	430c      	orrs	r4, r1
 800052a:	4826      	ldr	r0, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a4>)
 800052c:	1a83      	subs	r3, r0, r2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	4699      	mov	r9, r3
 8000534:	469b      	mov	fp, r3
 8000536:	e697      	b.n	8000268 <__aeabi_dmul+0x48>
 8000538:	0005      	movs	r5, r0
 800053a:	4325      	orrs	r5, r4
 800053c:	d126      	bne.n	800058c <__aeabi_dmul+0x36c>
 800053e:	2208      	movs	r2, #8
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2400      	movs	r4, #0
 8000546:	4691      	mov	r9, r2
 8000548:	469b      	mov	fp, r3
 800054a:	e68d      	b.n	8000268 <__aeabi_dmul+0x48>
 800054c:	4652      	mov	r2, sl
 800054e:	9b00      	ldr	r3, [sp, #0]
 8000550:	4332      	orrs	r2, r6
 8000552:	d110      	bne.n	8000576 <__aeabi_dmul+0x356>
 8000554:	4915      	ldr	r1, [pc, #84]	; (80005ac <__aeabi_dmul+0x38c>)
 8000556:	2600      	movs	r6, #0
 8000558:	468c      	mov	ip, r1
 800055a:	4463      	add	r3, ip
 800055c:	4649      	mov	r1, r9
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2302      	movs	r3, #2
 8000562:	4319      	orrs	r1, r3
 8000564:	4689      	mov	r9, r1
 8000566:	2002      	movs	r0, #2
 8000568:	e69d      	b.n	80002a6 <__aeabi_dmul+0x86>
 800056a:	465b      	mov	r3, fp
 800056c:	9701      	str	r7, [sp, #4]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d000      	beq.n	8000574 <__aeabi_dmul+0x354>
 8000572:	e6ad      	b.n	80002d0 <__aeabi_dmul+0xb0>
 8000574:	e6c3      	b.n	80002fe <__aeabi_dmul+0xde>
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <__aeabi_dmul+0x38c>)
 8000578:	2003      	movs	r0, #3
 800057a:	4694      	mov	ip, r2
 800057c:	4463      	add	r3, ip
 800057e:	464a      	mov	r2, r9
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2303      	movs	r3, #3
 8000584:	431a      	orrs	r2, r3
 8000586:	4691      	mov	r9, r2
 8000588:	4652      	mov	r2, sl
 800058a:	e68c      	b.n	80002a6 <__aeabi_dmul+0x86>
 800058c:	220c      	movs	r2, #12
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2303      	movs	r3, #3
 8000592:	0005      	movs	r5, r0
 8000594:	4691      	mov	r9, r2
 8000596:	469b      	mov	fp, r3
 8000598:	e666      	b.n	8000268 <__aeabi_dmul+0x48>
 800059a:	2304      	movs	r3, #4
 800059c:	4699      	mov	r9, r3
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	2400      	movs	r4, #0
 80005a6:	469b      	mov	fp, r3
 80005a8:	e65e      	b.n	8000268 <__aeabi_dmul+0x48>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	000007ff 	.word	0x000007ff
 80005b0:	fffffc01 	.word	0xfffffc01
 80005b4:	08004214 	.word	0x08004214
 80005b8:	000003ff 	.word	0x000003ff
 80005bc:	feffffff 	.word	0xfeffffff
 80005c0:	000007fe 	.word	0x000007fe
 80005c4:	fffffc0d 	.word	0xfffffc0d
 80005c8:	4649      	mov	r1, r9
 80005ca:	2301      	movs	r3, #1
 80005cc:	4319      	orrs	r1, r3
 80005ce:	4689      	mov	r9, r1
 80005d0:	2600      	movs	r6, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	e667      	b.n	80002a6 <__aeabi_dmul+0x86>
 80005d6:	2300      	movs	r3, #0
 80005d8:	2480      	movs	r4, #128	; 0x80
 80005da:	2500      	movs	r5, #0
 80005dc:	4a43      	ldr	r2, [pc, #268]	; (80006ec <__aeabi_dmul+0x4cc>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	0324      	lsls	r4, r4, #12
 80005e2:	e67e      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80005e4:	2001      	movs	r0, #1
 80005e6:	1a40      	subs	r0, r0, r1
 80005e8:	2838      	cmp	r0, #56	; 0x38
 80005ea:	dd00      	ble.n	80005ee <__aeabi_dmul+0x3ce>
 80005ec:	e676      	b.n	80002dc <__aeabi_dmul+0xbc>
 80005ee:	281f      	cmp	r0, #31
 80005f0:	dd5b      	ble.n	80006aa <__aeabi_dmul+0x48a>
 80005f2:	221f      	movs	r2, #31
 80005f4:	0023      	movs	r3, r4
 80005f6:	4252      	negs	r2, r2
 80005f8:	1a51      	subs	r1, r2, r1
 80005fa:	40cb      	lsrs	r3, r1
 80005fc:	0019      	movs	r1, r3
 80005fe:	2820      	cmp	r0, #32
 8000600:	d003      	beq.n	800060a <__aeabi_dmul+0x3ea>
 8000602:	4a3b      	ldr	r2, [pc, #236]	; (80006f0 <__aeabi_dmul+0x4d0>)
 8000604:	4462      	add	r2, ip
 8000606:	4094      	lsls	r4, r2
 8000608:	4325      	orrs	r5, r4
 800060a:	1e6a      	subs	r2, r5, #1
 800060c:	4195      	sbcs	r5, r2
 800060e:	002a      	movs	r2, r5
 8000610:	430a      	orrs	r2, r1
 8000612:	2107      	movs	r1, #7
 8000614:	000d      	movs	r5, r1
 8000616:	2400      	movs	r4, #0
 8000618:	4015      	ands	r5, r2
 800061a:	4211      	tst	r1, r2
 800061c:	d05b      	beq.n	80006d6 <__aeabi_dmul+0x4b6>
 800061e:	210f      	movs	r1, #15
 8000620:	2400      	movs	r4, #0
 8000622:	4011      	ands	r1, r2
 8000624:	2904      	cmp	r1, #4
 8000626:	d053      	beq.n	80006d0 <__aeabi_dmul+0x4b0>
 8000628:	1d11      	adds	r1, r2, #4
 800062a:	4291      	cmp	r1, r2
 800062c:	4192      	sbcs	r2, r2
 800062e:	4252      	negs	r2, r2
 8000630:	18a4      	adds	r4, r4, r2
 8000632:	000a      	movs	r2, r1
 8000634:	0223      	lsls	r3, r4, #8
 8000636:	d54b      	bpl.n	80006d0 <__aeabi_dmul+0x4b0>
 8000638:	2201      	movs	r2, #1
 800063a:	2400      	movs	r4, #0
 800063c:	2500      	movs	r5, #0
 800063e:	e650      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	031b      	lsls	r3, r3, #12
 8000644:	421c      	tst	r4, r3
 8000646:	d009      	beq.n	800065c <__aeabi_dmul+0x43c>
 8000648:	421e      	tst	r6, r3
 800064a:	d107      	bne.n	800065c <__aeabi_dmul+0x43c>
 800064c:	4333      	orrs	r3, r6
 800064e:	031c      	lsls	r4, r3, #12
 8000650:	4643      	mov	r3, r8
 8000652:	0015      	movs	r5, r2
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	e642      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0312      	lsls	r2, r2, #12
 8000660:	4314      	orrs	r4, r2
 8000662:	0324      	lsls	r4, r4, #12
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000666:	0b24      	lsrs	r4, r4, #12
 8000668:	9701      	str	r7, [sp, #4]
 800066a:	e63a      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800066c:	f000 f8fc 	bl	8000868 <__clzsi2>
 8000670:	0001      	movs	r1, r0
 8000672:	0002      	movs	r2, r0
 8000674:	3115      	adds	r1, #21
 8000676:	3220      	adds	r2, #32
 8000678:	291c      	cmp	r1, #28
 800067a:	dc00      	bgt.n	800067e <__aeabi_dmul+0x45e>
 800067c:	e74b      	b.n	8000516 <__aeabi_dmul+0x2f6>
 800067e:	0034      	movs	r4, r6
 8000680:	3808      	subs	r0, #8
 8000682:	2500      	movs	r5, #0
 8000684:	4084      	lsls	r4, r0
 8000686:	e750      	b.n	800052a <__aeabi_dmul+0x30a>
 8000688:	f000 f8ee 	bl	8000868 <__clzsi2>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	3215      	adds	r2, #21
 8000692:	3020      	adds	r0, #32
 8000694:	2a1c      	cmp	r2, #28
 8000696:	dc00      	bgt.n	800069a <__aeabi_dmul+0x47a>
 8000698:	e71e      	b.n	80004d8 <__aeabi_dmul+0x2b8>
 800069a:	4656      	mov	r6, sl
 800069c:	3b08      	subs	r3, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	409e      	lsls	r6, r3
 80006a2:	e723      	b.n	80004ec <__aeabi_dmul+0x2cc>
 80006a4:	9b00      	ldr	r3, [sp, #0]
 80006a6:	469c      	mov	ip, r3
 80006a8:	e6e6      	b.n	8000478 <__aeabi_dmul+0x258>
 80006aa:	4912      	ldr	r1, [pc, #72]	; (80006f4 <__aeabi_dmul+0x4d4>)
 80006ac:	0022      	movs	r2, r4
 80006ae:	4461      	add	r1, ip
 80006b0:	002e      	movs	r6, r5
 80006b2:	408d      	lsls	r5, r1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	40c6      	lsrs	r6, r0
 80006b8:	1e69      	subs	r1, r5, #1
 80006ba:	418d      	sbcs	r5, r1
 80006bc:	4332      	orrs	r2, r6
 80006be:	432a      	orrs	r2, r5
 80006c0:	40c4      	lsrs	r4, r0
 80006c2:	0753      	lsls	r3, r2, #29
 80006c4:	d0b6      	beq.n	8000634 <__aeabi_dmul+0x414>
 80006c6:	210f      	movs	r1, #15
 80006c8:	4011      	ands	r1, r2
 80006ca:	2904      	cmp	r1, #4
 80006cc:	d1ac      	bne.n	8000628 <__aeabi_dmul+0x408>
 80006ce:	e7b1      	b.n	8000634 <__aeabi_dmul+0x414>
 80006d0:	0765      	lsls	r5, r4, #29
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	0b24      	lsrs	r4, r4, #12
 80006d6:	08d2      	lsrs	r2, r2, #3
 80006d8:	4315      	orrs	r5, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	e601      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0312      	lsls	r2, r2, #12
 80006e2:	4314      	orrs	r4, r2
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	4a01      	ldr	r2, [pc, #4]	; (80006ec <__aeabi_dmul+0x4cc>)
 80006e8:	0b24      	lsrs	r4, r4, #12
 80006ea:	e5fa      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006ec:	000007ff 	.word	0x000007ff
 80006f0:	0000043e 	.word	0x0000043e
 80006f4:	0000041e 	.word	0x0000041e

080006f8 <__aeabi_i2d>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d016      	beq.n	800072c <__aeabi_i2d+0x34>
 80006fe:	17c3      	asrs	r3, r0, #31
 8000700:	18c5      	adds	r5, r0, r3
 8000702:	405d      	eors	r5, r3
 8000704:	0fc4      	lsrs	r4, r0, #31
 8000706:	0028      	movs	r0, r5
 8000708:	f000 f8ae 	bl	8000868 <__clzsi2>
 800070c:	4a11      	ldr	r2, [pc, #68]	; (8000754 <__aeabi_i2d+0x5c>)
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	280a      	cmp	r0, #10
 8000712:	dc16      	bgt.n	8000742 <__aeabi_i2d+0x4a>
 8000714:	0003      	movs	r3, r0
 8000716:	002e      	movs	r6, r5
 8000718:	3315      	adds	r3, #21
 800071a:	409e      	lsls	r6, r3
 800071c:	230b      	movs	r3, #11
 800071e:	1a18      	subs	r0, r3, r0
 8000720:	40c5      	lsrs	r5, r0
 8000722:	0552      	lsls	r2, r2, #21
 8000724:	032d      	lsls	r5, r5, #12
 8000726:	0b2d      	lsrs	r5, r5, #12
 8000728:	0d53      	lsrs	r3, r2, #21
 800072a:	e003      	b.n	8000734 <__aeabi_i2d+0x3c>
 800072c:	2400      	movs	r4, #0
 800072e:	2300      	movs	r3, #0
 8000730:	2500      	movs	r5, #0
 8000732:	2600      	movs	r6, #0
 8000734:	051b      	lsls	r3, r3, #20
 8000736:	432b      	orrs	r3, r5
 8000738:	07e4      	lsls	r4, r4, #31
 800073a:	4323      	orrs	r3, r4
 800073c:	0030      	movs	r0, r6
 800073e:	0019      	movs	r1, r3
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	380b      	subs	r0, #11
 8000744:	4085      	lsls	r5, r0
 8000746:	0552      	lsls	r2, r2, #21
 8000748:	032d      	lsls	r5, r5, #12
 800074a:	2600      	movs	r6, #0
 800074c:	0b2d      	lsrs	r5, r5, #12
 800074e:	0d53      	lsrs	r3, r2, #21
 8000750:	e7f0      	b.n	8000734 <__aeabi_i2d+0x3c>
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	0000041e 	.word	0x0000041e

08000758 <__aeabi_d2f>:
 8000758:	0002      	movs	r2, r0
 800075a:	004b      	lsls	r3, r1, #1
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	0d5b      	lsrs	r3, r3, #21
 8000760:	030c      	lsls	r4, r1, #12
 8000762:	4e3d      	ldr	r6, [pc, #244]	; (8000858 <__aeabi_d2f+0x100>)
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	0f40      	lsrs	r0, r0, #29
 8000768:	1c5f      	adds	r7, r3, #1
 800076a:	0fc9      	lsrs	r1, r1, #31
 800076c:	4304      	orrs	r4, r0
 800076e:	00d5      	lsls	r5, r2, #3
 8000770:	4237      	tst	r7, r6
 8000772:	d00a      	beq.n	800078a <__aeabi_d2f+0x32>
 8000774:	4839      	ldr	r0, [pc, #228]	; (800085c <__aeabi_d2f+0x104>)
 8000776:	181e      	adds	r6, r3, r0
 8000778:	2efe      	cmp	r6, #254	; 0xfe
 800077a:	dd16      	ble.n	80007aa <__aeabi_d2f+0x52>
 800077c:	20ff      	movs	r0, #255	; 0xff
 800077e:	2400      	movs	r4, #0
 8000780:	05c0      	lsls	r0, r0, #23
 8000782:	4320      	orrs	r0, r4
 8000784:	07c9      	lsls	r1, r1, #31
 8000786:	4308      	orrs	r0, r1
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <__aeabi_d2f+0x44>
 800078e:	432c      	orrs	r4, r5
 8000790:	d026      	beq.n	80007e0 <__aeabi_d2f+0x88>
 8000792:	2205      	movs	r2, #5
 8000794:	0192      	lsls	r2, r2, #6
 8000796:	0a54      	lsrs	r4, r2, #9
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	e7f1      	b.n	8000780 <__aeabi_d2f+0x28>
 800079c:	4325      	orrs	r5, r4
 800079e:	d0ed      	beq.n	800077c <__aeabi_d2f+0x24>
 80007a0:	2080      	movs	r0, #128	; 0x80
 80007a2:	03c0      	lsls	r0, r0, #15
 80007a4:	4304      	orrs	r4, r0
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	e7ea      	b.n	8000780 <__aeabi_d2f+0x28>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	dd1b      	ble.n	80007e6 <__aeabi_d2f+0x8e>
 80007ae:	0192      	lsls	r2, r2, #6
 80007b0:	1e53      	subs	r3, r2, #1
 80007b2:	419a      	sbcs	r2, r3
 80007b4:	00e4      	lsls	r4, r4, #3
 80007b6:	0f6d      	lsrs	r5, r5, #29
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0753      	lsls	r3, r2, #29
 80007be:	d048      	beq.n	8000852 <__aeabi_d2f+0xfa>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d000      	beq.n	80007ca <__aeabi_d2f+0x72>
 80007c8:	3204      	adds	r2, #4
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	04db      	lsls	r3, r3, #19
 80007ce:	4013      	ands	r3, r2
 80007d0:	d03f      	beq.n	8000852 <__aeabi_d2f+0xfa>
 80007d2:	1c70      	adds	r0, r6, #1
 80007d4:	2efe      	cmp	r6, #254	; 0xfe
 80007d6:	d0d1      	beq.n	800077c <__aeabi_d2f+0x24>
 80007d8:	0192      	lsls	r2, r2, #6
 80007da:	0a54      	lsrs	r4, r2, #9
 80007dc:	b2c0      	uxtb	r0, r0
 80007de:	e7cf      	b.n	8000780 <__aeabi_d2f+0x28>
 80007e0:	2000      	movs	r0, #0
 80007e2:	2400      	movs	r4, #0
 80007e4:	e7cc      	b.n	8000780 <__aeabi_d2f+0x28>
 80007e6:	0032      	movs	r2, r6
 80007e8:	3217      	adds	r2, #23
 80007ea:	db22      	blt.n	8000832 <__aeabi_d2f+0xda>
 80007ec:	2080      	movs	r0, #128	; 0x80
 80007ee:	0400      	lsls	r0, r0, #16
 80007f0:	4320      	orrs	r0, r4
 80007f2:	241e      	movs	r4, #30
 80007f4:	1ba4      	subs	r4, r4, r6
 80007f6:	2c1f      	cmp	r4, #31
 80007f8:	dd1d      	ble.n	8000836 <__aeabi_d2f+0xde>
 80007fa:	2202      	movs	r2, #2
 80007fc:	4252      	negs	r2, r2
 80007fe:	1b96      	subs	r6, r2, r6
 8000800:	0002      	movs	r2, r0
 8000802:	40f2      	lsrs	r2, r6
 8000804:	0016      	movs	r6, r2
 8000806:	2c20      	cmp	r4, #32
 8000808:	d004      	beq.n	8000814 <__aeabi_d2f+0xbc>
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <__aeabi_d2f+0x108>)
 800080c:	4694      	mov	ip, r2
 800080e:	4463      	add	r3, ip
 8000810:	4098      	lsls	r0, r3
 8000812:	4305      	orrs	r5, r0
 8000814:	002a      	movs	r2, r5
 8000816:	1e53      	subs	r3, r2, #1
 8000818:	419a      	sbcs	r2, r3
 800081a:	4332      	orrs	r2, r6
 800081c:	2600      	movs	r6, #0
 800081e:	0753      	lsls	r3, r2, #29
 8000820:	d1ce      	bne.n	80007c0 <__aeabi_d2f+0x68>
 8000822:	2480      	movs	r4, #128	; 0x80
 8000824:	0013      	movs	r3, r2
 8000826:	04e4      	lsls	r4, r4, #19
 8000828:	2001      	movs	r0, #1
 800082a:	4023      	ands	r3, r4
 800082c:	4222      	tst	r2, r4
 800082e:	d1d3      	bne.n	80007d8 <__aeabi_d2f+0x80>
 8000830:	e7b0      	b.n	8000794 <__aeabi_d2f+0x3c>
 8000832:	2300      	movs	r3, #0
 8000834:	e7ad      	b.n	8000792 <__aeabi_d2f+0x3a>
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <__aeabi_d2f+0x10c>)
 8000838:	4694      	mov	ip, r2
 800083a:	002a      	movs	r2, r5
 800083c:	40e2      	lsrs	r2, r4
 800083e:	0014      	movs	r4, r2
 8000840:	002a      	movs	r2, r5
 8000842:	4463      	add	r3, ip
 8000844:	409a      	lsls	r2, r3
 8000846:	4098      	lsls	r0, r3
 8000848:	1e55      	subs	r5, r2, #1
 800084a:	41aa      	sbcs	r2, r5
 800084c:	4302      	orrs	r2, r0
 800084e:	4322      	orrs	r2, r4
 8000850:	e7e4      	b.n	800081c <__aeabi_d2f+0xc4>
 8000852:	0033      	movs	r3, r6
 8000854:	e79e      	b.n	8000794 <__aeabi_d2f+0x3c>
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	000007fe 	.word	0x000007fe
 800085c:	fffffc80 	.word	0xfffffc80
 8000860:	fffffca2 	.word	0xfffffca2
 8000864:	fffffc82 	.word	0xfffffc82

08000868 <__clzsi2>:
 8000868:	211c      	movs	r1, #28
 800086a:	2301      	movs	r3, #1
 800086c:	041b      	lsls	r3, r3, #16
 800086e:	4298      	cmp	r0, r3
 8000870:	d301      	bcc.n	8000876 <__clzsi2+0xe>
 8000872:	0c00      	lsrs	r0, r0, #16
 8000874:	3910      	subs	r1, #16
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	4298      	cmp	r0, r3
 800087a:	d301      	bcc.n	8000880 <__clzsi2+0x18>
 800087c:	0a00      	lsrs	r0, r0, #8
 800087e:	3908      	subs	r1, #8
 8000880:	091b      	lsrs	r3, r3, #4
 8000882:	4298      	cmp	r0, r3
 8000884:	d301      	bcc.n	800088a <__clzsi2+0x22>
 8000886:	0900      	lsrs	r0, r0, #4
 8000888:	3904      	subs	r1, #4
 800088a:	a202      	add	r2, pc, #8	; (adr r2, 8000894 <__clzsi2+0x2c>)
 800088c:	5c10      	ldrb	r0, [r2, r0]
 800088e:	1840      	adds	r0, r0, r1
 8000890:	4770      	bx	lr
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	02020304 	.word	0x02020304
 8000898:	01010101 	.word	0x01010101
	...

080008a4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a52      	ldr	r2, [pc, #328]	; (80009fc <HAL_UART_RxCpltCallback+0x158>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d000      	beq.n	80008b8 <HAL_UART_RxCpltCallback+0x14>
 80008b6:	e09d      	b.n	80009f4 <HAL_UART_RxCpltCallback+0x150>
		 HAL_UART_Transmit(&huart1, rx_buf, 1, 100);
 80008b8:	4951      	ldr	r1, [pc, #324]	; (8000a00 <HAL_UART_RxCpltCallback+0x15c>)
 80008ba:	4852      	ldr	r0, [pc, #328]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80008bc:	2364      	movs	r3, #100	; 0x64
 80008be:	2201      	movs	r2, #1
 80008c0:	f002 faaa 	bl	8002e18 <HAL_UART_Transmit>
		 HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80008c4:	494e      	ldr	r1, [pc, #312]	; (8000a00 <HAL_UART_RxCpltCallback+0x15c>)
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fb4d 	bl	8002f6a <HAL_UART_Receive_IT>
		 if (rx_buf[0] == 'k') {
 80008d0:	4b4b      	ldr	r3, [pc, #300]	; (8000a00 <HAL_UART_RxCpltCallback+0x15c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b6b      	cmp	r3, #107	; 0x6b
 80008d6:	d000      	beq.n	80008da <HAL_UART_RxCpltCallback+0x36>
 80008d8:	e08c      	b.n	80009f4 <HAL_UART_RxCpltCallback+0x150>
			 if (HAL_GPIO_ReadPin(gpios[gpio_count].gpio, gpios[gpio_count].pin) == GPIO_PIN_SET){
 80008da:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	58d0      	ldr	r0, [r2, r3]
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a48      	ldr	r2, [pc, #288]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	0019      	movs	r1, r3
 80008f4:	f001 fc9c 	bl	8002230 <HAL_GPIO_ReadPin>
 80008f8:	0003      	movs	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10f      	bne.n	800091e <HAL_UART_RxCpltCallback+0x7a>
				HAL_GPIO_WritePin(gpios[gpio_count].gpio, gpios[gpio_count].pin, GPIO_PIN_RESET);
 80008fe:	4b42      	ldr	r3, [pc, #264]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	58d0      	ldr	r0, [r2, r3]
 8000908:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	3304      	adds	r3, #4
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	0019      	movs	r1, r3
 800091a:	f001 fca6 	bl	800226a <HAL_GPIO_WritePin>
			 }
			 gpio_count == 7 ? gpio_count = 0 : gpio_count++;
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d103      	bne.n	800092e <HAL_UART_RxCpltCallback+0x8a>
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e004      	b.n	8000938 <HAL_UART_RxCpltCallback+0x94>
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000936:	601a      	str	r2, [r3, #0]
			 HAL_GPIO_TogglePin(gpios[gpio_count].gpio, gpios[gpio_count].pin);
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 800093e:	00d2      	lsls	r2, r2, #3
 8000940:	58d0      	ldr	r0, [r2, r3]
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <HAL_UART_RxCpltCallback+0x168>)
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	3304      	adds	r3, #4
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	0019      	movs	r1, r3
 8000952:	f001 fca7 	bl	80022a4 <HAL_GPIO_TogglePin>
			 HAL_ADC_Start_DMA(&hadc, (uint32_t *) adcResultsDMA, adcChannelCount);
 8000956:	2308      	movs	r3, #8
 8000958:	001a      	movs	r2, r3
 800095a:	492d      	ldr	r1, [pc, #180]	; (8000a10 <HAL_UART_RxCpltCallback+0x16c>)
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <HAL_UART_RxCpltCallback+0x170>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd52 	bl	8001408 <HAL_ADC_Start_DMA>
			 uint16_t adc = adcResultsDMA[gpio_count];
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	2016      	movs	r0, #22
 800096a:	183b      	adds	r3, r7, r0
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <HAL_UART_RxCpltCallback+0x16c>)
 800096e:	0049      	lsls	r1, r1, #1
 8000970:	5a8a      	ldrh	r2, [r1, r2]
 8000972:	801a      	strh	r2, [r3, #0]
			 uint8_t adcval[2];
			 adcval[0] = ((adc & 0xFF00) >> 8); // BUS_Vmon MSB
 8000974:	0001      	movs	r1, r0
 8000976:	187b      	adds	r3, r7, r1
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2da      	uxtb	r2, r3
 8000980:	2408      	movs	r4, #8
 8000982:	193b      	adds	r3, r7, r4
 8000984:	701a      	strb	r2, [r3, #0]
			 adcval[1] = (adc & 0xFF); // BUS_Vmon LSB
 8000986:	187b      	adds	r3, r7, r1
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	193b      	adds	r3, r7, r4
 800098e:	705a      	strb	r2, [r3, #1]
			 float voltage = adc * (3.3/4095);
 8000990:	187b      	adds	r3, r7, r1
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff feaf 	bl	80006f8 <__aeabi_i2d>
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_UART_RxCpltCallback+0x174>)
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_UART_RxCpltCallback+0x178>)
 800099e:	f7ff fc3f 	bl	8000220 <__aeabi_dmul>
 80009a2:	0002      	movs	r2, r0
 80009a4:	000b      	movs	r3, r1
 80009a6:	0010      	movs	r0, r2
 80009a8:	0019      	movs	r1, r3
 80009aa:	f7ff fed5 	bl	8000758 <__aeabi_d2f>
 80009ae:	1c03      	adds	r3, r0, #0
 80009b0:	613b      	str	r3, [r7, #16]
			 int c = gpio_count;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_RxCpltCallback+0x164>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	60fb      	str	r3, [r7, #12]
			 HAL_UART_Transmit(&huart1, adcval , sizeof(adcval), 100);
 80009b8:	1939      	adds	r1, r7, r4
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2202      	movs	r2, #2
 80009c0:	f002 fa2a 	bl	8002e18 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\x1B" , 1, 100);
 80009c4:	4916      	ldr	r1, [pc, #88]	; (8000a20 <HAL_UART_RxCpltCallback+0x17c>)
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	2201      	movs	r2, #1
 80009cc:	f002 fa24 	bl	8002e18 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\x5B" , 1, 100);
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <HAL_UART_RxCpltCallback+0x180>)
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80009d4:	2364      	movs	r3, #100	; 0x64
 80009d6:	2201      	movs	r2, #1
 80009d8:	f002 fa1e 	bl	8002e18 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\x32" , 1, 100);
 80009dc:	4912      	ldr	r1, [pc, #72]	; (8000a28 <HAL_UART_RxCpltCallback+0x184>)
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	2201      	movs	r2, #1
 80009e4:	f002 fa18 	bl	8002e18 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart1, "\x4A" , 1, 100);
 80009e8:	4910      	ldr	r1, [pc, #64]	; (8000a2c <HAL_UART_RxCpltCallback+0x188>)
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <HAL_UART_RxCpltCallback+0x160>)
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	f002 fa12 	bl	8002e18 <HAL_UART_Transmit>

		 }

	}
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b007      	add	sp, #28
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	20000130 	.word	0x20000130
 8000a04:	200000ac 	.word	0x200000ac
 8000a08:	20000194 	.word	0x20000194
 8000a0c:	08004254 	.word	0x08004254
 8000a10:	20000198 	.word	0x20000198
 8000a14:	20000028 	.word	0x20000028
 8000a18:	e734d9b4 	.word	0xe734d9b4
 8000a1c:	3f4a680c 	.word	0x3f4a680c
 8000a20:	080041e4 	.word	0x080041e4
 8000a24:	080041e8 	.word	0x080041e8
 8000a28:	080041ec 	.word	0x080041ec
 8000a2c:	080041f0 	.word	0x080041f0

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 fb44 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f81c 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f000 f97c 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a40:	f000 f95c 	bl	8000cfc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a44:	f000 f92a 	bl	8000c9c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000a48:	f000 f872 	bl	8000b30 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <main+0x38>)
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <main+0x3c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fa89 	bl	8002f6a <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <main+0x40>)
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 fc03 	bl	800226a <HAL_GPIO_WritePin>


  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x34>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000130 	.word	0x20000130
 8000a6c:	200000ac 	.word	0x200000ac
 8000a70:	48000800 	.word	0x48000800

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b097      	sub	sp, #92	; 0x5c
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	2428      	movs	r4, #40	; 0x28
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2330      	movs	r3, #48	; 0x30
 8000a82:	001a      	movs	r2, r3
 8000a84:	2100      	movs	r1, #0
 8000a86:	f003 fb99 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2310      	movs	r3, #16
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f003 fb91 	bl	80041bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f003 fb8a 	bl	80041bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2212      	movs	r2, #18
 8000aae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2210      	movs	r2, #16
 8000ac0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fc03 	bl	80022dc <HAL_RCC_OscConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f99f 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	2118      	movs	r1, #24
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2100      	movs	r1, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 ff07 	bl	8002910 <HAL_RCC_ClockConfig>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b06:	f000 f989 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 f84b 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b22:	f000 f97b 	bl	8000e1c <Error_Handler>
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b017      	add	sp, #92	; 0x5c
 8000b2c:	bd90      	pop	{r4, r7, pc}
	...

08000b30 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 fb3c 	bl	80041bc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b44:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b46:	4a54      	ldr	r2, [pc, #336]	; (8000c98 <MX_ADC_Init+0x168>)
 8000b48:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b4a:	4b52      	ldr	r3, [pc, #328]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b64:	2204      	movs	r2, #4
 8000b66:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b6e:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b82:	22c2      	movs	r2, #194	; 0xc2
 8000b84:	32ff      	adds	r2, #255	; 0xff
 8000b86:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b90:	2224      	movs	r2, #36	; 0x24
 8000b92:	2100      	movs	r1, #0
 8000b94:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <MX_ADC_Init+0x164>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 faf2 	bl	8001188 <HAL_ADC_Init>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f938 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	0152      	lsls	r2, r2, #5
 8000bb8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	0552      	lsls	r2, r2, #21
 8000bc0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <MX_ADC_Init+0x164>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fcb7 	bl	800153c <HAL_ADC_ConfigChannel>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000bd2:	f000 f923 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_ADC_Init+0x164>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fcaa 	bl	800153c <HAL_ADC_ConfigChannel>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000bec:	f000 f916 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf6:	1d3a      	adds	r2, r7, #4
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_ADC_Init+0x164>)
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fc9d 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000c06:	f000 f909 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c10:	1d3a      	adds	r2, r7, #4
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_ADC_Init+0x164>)
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fc90 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000c20:	f000 f8fc 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2204      	movs	r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c2a:	1d3a      	adds	r2, r7, #4
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_ADC_Init+0x164>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fc83 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000c3a:	f000 f8ef 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2205      	movs	r2, #5
 8000c42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_ADC_Init+0x164>)
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fc76 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000c54:	f000 f8e2 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_ADC_Init+0x164>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fc69 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000c6e:	f000 f8d5 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_ADC_Init+0x164>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fc5c 	bl	800153c <HAL_ADC_ConfigChannel>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000c88:	f000 f8c8 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b004      	add	sp, #16
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028
 8000c98:	40012400 	.word	0x40012400

08000c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART1_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ca8:	22e1      	movs	r2, #225	; 0xe1
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <MX_USART1_UART_Init+0x58>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f002 f845 	bl	8002d70 <HAL_UART_Init>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f897 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000ac 	.word	0x200000ac
 8000cf8:	40013800 	.word	0x40013800

08000cfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d04:	695a      	ldr	r2, [r3, #20]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DMA_Init+0x38>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2009      	movs	r0, #9
 8000d20:	f000 fece 	bl	8001ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d24:	2009      	movs	r0, #9
 8000d26:	f000 fee0 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	240c      	movs	r4, #12
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	0018      	movs	r0, r3
 8000d44:	2314      	movs	r3, #20
 8000d46:	001a      	movs	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f003 fa37 	bl	80041bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0309      	lsls	r1, r1, #12
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	031b      	lsls	r3, r3, #12
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	4013      	ands	r3, r2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	03c9      	lsls	r1, r1, #15
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_GPIO_Init+0xd8>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	03db      	lsls	r3, r3, #15
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000da2:	239f      	movs	r3, #159	; 0x9f
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	481b      	ldr	r0, [pc, #108]	; (8000e14 <MX_GPIO_Init+0xdc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	0019      	movs	r1, r3
 8000dac:	f001 fa5d 	bl	800226a <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_GPIO_Init+0xe0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	21c0      	movs	r1, #192	; 0xc0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 fa57 	bl	800226a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	229f      	movs	r2, #159	; 0x9f
 8000dc0:	0192      	lsls	r2, r2, #6
 8000dc2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <MX_GPIO_Init+0xdc>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f001 f8b7 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	0021      	movs	r1, r4
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	22c0      	movs	r2, #192	; 0xc0
 8000de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2201      	movs	r2, #1
 8000dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <MX_GPIO_Init+0xe0>)
 8000e00:	0019      	movs	r1, r3
 8000e02:	0010      	movs	r0, r2
 8000e04:	f001 f8a4 	bl	8001f50 <HAL_GPIO_Init>

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b009      	add	sp, #36	; 0x24
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48001400 	.word	0x48001400

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_MspInit+0x44>)
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_MspInit+0x44>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	619a      	str	r2, [r3, #24]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_MspInit+0x44>)
 8000e48:	69da      	ldr	r2, [r3, #28]
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	0549      	lsls	r1, r1, #21
 8000e50:	430a      	orrs	r2, r1
 8000e52:	61da      	str	r2, [r3, #28]
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_MspInit+0x44>)
 8000e56:	69da      	ldr	r2, [r3, #28]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	055b      	lsls	r3, r3, #21
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	2414      	movs	r4, #20
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	2314      	movs	r3, #20
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f003 f99a 	bl	80041bc <memset>
  if(hadc->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <HAL_ADC_MspInit+0xd4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d153      	bne.n	8000f3a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	0089      	lsls	r1, r1, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	619a      	str	r2, [r3, #24]
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0289      	lsls	r1, r1, #10
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_ADC_MspInit+0xd8>)
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	22ff      	movs	r2, #255	; 0xff
 8000ece:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	193a      	adds	r2, r7, r4
 8000ede:	2390      	movs	r3, #144	; 0x90
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 f833 	bl	8001f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_ADC_MspInit+0xe0>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f14:	2220      	movs	r2, #32
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 fdff 	bl	8001b24 <HAL_DMA_Init>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000f2a:	f7ff ff77 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_ADC_MspInit+0xdc>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b00b      	add	sp, #44	; 0x2c
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40012400 	.word	0x40012400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	20000068 	.word	0x20000068
 8000f50:	40020008 	.word	0x40020008

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2414      	movs	r4, #20
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f003 f928 	bl	80041bc <memset>
  if(huart->Instance==USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HAL_UART_MspInit+0xa4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d13b      	bne.n	8000fee <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000f78:	699a      	ldr	r2, [r3, #24]
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	01c9      	lsls	r1, r1, #7
 8000f80:	430a      	orrs	r2, r1
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	01db      	lsls	r3, r3, #7
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	0289      	lsls	r1, r1, #10
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_UART_MspInit+0xa8>)
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	029b      	lsls	r3, r3, #10
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	22c0      	movs	r2, #192	; 0xc0
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	0021      	movs	r1, r4
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2202      	movs	r2, #2
 8000fbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2201      	movs	r2, #1
 8000fce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	187a      	adds	r2, r7, r1
 8000fd2:	2390      	movs	r3, #144	; 0x90
 8000fd4:	05db      	lsls	r3, r3, #23
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 ffb9 	bl	8001f50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	201b      	movs	r0, #27
 8000fe4:	f000 fd6c 	bl	8001ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fe8:	201b      	movs	r0, #27
 8000fea:	f000 fd7e 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b00b      	add	sp, #44	; 0x2c
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f894 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <DMA1_Channel1_IRQHandler+0x14>)
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fe9f 	bl	8001d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000068 	.word	0x20000068

08001048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <USART1_IRQHandler+0x14>)
 800104e:	0018      	movs	r0, r3
 8001050:	f001 ffec 	bl	800302c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	200000ac 	.word	0x200000ac

08001060 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001096:	f7ff ffe3 	bl	8001060 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800109a:	f003 f86b 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff fcc7 	bl	8000a30 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	080042b4 	.word	0x080042b4
  ldr r2, =_sbss
 80010b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b8:	200001ac 	.word	0x200001ac

080010bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_COMP_IRQHandler>
	...

080010c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_Init+0x24>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_Init+0x24>)
 80010ca:	2110      	movs	r1, #16
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f809 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d6:	f7ff fea7 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_InitTick+0x5c>)
 80010f2:	681c      	ldr	r4, [r3, #0]
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_InitTick+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	0019      	movs	r1, r3
 80010fa:	23fa      	movs	r3, #250	; 0xfa
 80010fc:	0098      	lsls	r0, r3, #2
 80010fe:	f7ff f803 	bl	8000108 <__udivsi3>
 8001102:	0003      	movs	r3, r0
 8001104:	0019      	movs	r1, r3
 8001106:	0020      	movs	r0, r4
 8001108:	f7fe fffe 	bl	8000108 <__udivsi3>
 800110c:	0003      	movs	r3, r0
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fcfb 	bl	8001b0a <HAL_SYSTICK_Config>
 8001114:	1e03      	subs	r3, r0, #0
 8001116:	d001      	beq.n	800111c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e00f      	b.n	800113c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d80b      	bhi.n	800113a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2301      	movs	r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	2200      	movs	r2, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fcc8 	bl	8001ac0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_InitTick+0x64>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b003      	add	sp, #12
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	001a      	movs	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	18d2      	adds	r2, r2, r3
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_IncTick+0x20>)
 8001162:	601a      	str	r2, [r3, #0]
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000008 	.word	0x20000008
 8001170:	200001a8 	.word	0x200001a8

08001174 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	200001a8 	.word	0x200001a8

08001188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e125      	b.n	80013f2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10a      	bne.n	80011c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2234      	movs	r2, #52	; 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fe56 	bl	8000e70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c8:	2210      	movs	r2, #16
 80011ca:	4013      	ands	r3, r2
 80011cc:	d000      	beq.n	80011d0 <HAL_ADC_Init+0x48>
 80011ce:	e103      	b.n	80013d8 <HAL_ADC_Init+0x250>
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d000      	beq.n	80011dc <HAL_ADC_Init+0x54>
 80011da:	e0fd      	b.n	80013d8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2204      	movs	r2, #4
 80011e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011e6:	d000      	beq.n	80011ea <HAL_ADC_Init+0x62>
 80011e8:	e0f6      	b.n	80013d8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ee:	4a83      	ldr	r2, [pc, #524]	; (80013fc <HAL_ADC_Init+0x274>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	2202      	movs	r2, #2
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	2b01      	cmp	r3, #1
 8001206:	d112      	bne.n	800122e <HAL_ADC_Init+0xa6>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	2b01      	cmp	r3, #1
 8001214:	d009      	beq.n	800122a <HAL_ADC_Init+0xa2>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	401a      	ands	r2, r3
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	429a      	cmp	r2, r3
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0xa6>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_ADC_Init+0xa8>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d116      	bne.n	8001262 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2218      	movs	r2, #24
 800123c:	4393      	bics	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	0899      	lsrs	r1, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4964      	ldr	r1, [pc, #400]	; (8001400 <HAL_ADC_Init+0x278>)
 800126e:	400a      	ands	r2, r1
 8001270:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e1b      	ldrb	r3, [r3, #24]
 8001276:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e5b      	ldrb	r3, [r3, #25]
 800127c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800127e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e9b      	ldrb	r3, [r3, #26]
 8001284:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001286:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	2b01      	cmp	r3, #1
 800128e:	d002      	beq.n	8001296 <HAL_ADC_Init+0x10e>
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	e000      	b.n	8001298 <HAL_ADC_Init+0x110>
 8001296:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001298:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800129e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_Init+0x124>
 80012a8:	2304      	movs	r3, #4
 80012aa:	e000      	b.n	80012ae <HAL_ADC_Init+0x126>
 80012ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2124      	movs	r1, #36	; 0x24
 80012b4:	5c5b      	ldrb	r3, [r3, r1]
 80012b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7edb      	ldrb	r3, [r3, #27]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d115      	bne.n	80012f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7e9b      	ldrb	r3, [r3, #26]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	0252      	lsls	r2, r2, #9
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	e00b      	b.n	80012f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	2220      	movs	r2, #32
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	2201      	movs	r2, #1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	23c2      	movs	r3, #194	; 0xc2
 80012fa:	33ff      	adds	r3, #255	; 0xff
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d007      	beq.n	8001310 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001308:	4313      	orrs	r3, r2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4313      	orrs	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68d9      	ldr	r1, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	430a      	orrs	r2, r1
 800131e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	055b      	lsls	r3, r3, #21
 8001328:	429a      	cmp	r2, r3
 800132a:	d01b      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	2b01      	cmp	r3, #1
 8001332:	d017      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b02      	cmp	r3, #2
 800133a:	d013      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2b03      	cmp	r3, #3
 8001342:	d00f      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b04      	cmp	r3, #4
 800134a:	d00b      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2b05      	cmp	r3, #5
 8001352:	d007      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	2b06      	cmp	r3, #6
 800135a:	d003      	beq.n	8001364 <HAL_ADC_Init+0x1dc>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b07      	cmp	r3, #7
 8001362:	d112      	bne.n	800138a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2107      	movs	r1, #7
 8001370:	438a      	bics	r2, r1
 8001372:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6959      	ldr	r1, [r3, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	2207      	movs	r2, #7
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_ADC_Init+0x27c>)
 8001392:	4013      	ands	r3, r2
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	429a      	cmp	r2, r3
 8001398:	d10b      	bne.n	80013b2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a4:	2203      	movs	r2, #3
 80013a6:	4393      	bics	r3, r2
 80013a8:	2201      	movs	r2, #1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013b0:	e01c      	b.n	80013ec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	2212      	movs	r2, #18
 80013b8:	4393      	bics	r3, r2
 80013ba:	2210      	movs	r2, #16
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c6:	2201      	movs	r2, #1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013ce:	230f      	movs	r3, #15
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013d6:	e009      	b.n	80013ec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	2210      	movs	r2, #16
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	fffffefd 	.word	0xfffffefd
 8001400:	fffe0219 	.word	0xfffe0219
 8001404:	833fffe7 	.word	0x833fffe7

08001408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2317      	movs	r3, #23
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d15e      	bne.n	80014e6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2234      	movs	r2, #52	; 0x34
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ADC_Start_DMA+0x2e>
 8001432:	2302      	movs	r3, #2
 8001434:	e05e      	b.n	80014f4 <HAL_ADC_Start_DMA+0xec>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2234      	movs	r2, #52	; 0x34
 800143a:	2101      	movs	r1, #1
 800143c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	7e5b      	ldrb	r3, [r3, #25]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d007      	beq.n	8001456 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001446:	2317      	movs	r3, #23
 8001448:	18fc      	adds	r4, r7, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f983 	bl	8001758 <ADC_Enable>
 8001452:	0003      	movs	r3, r0
 8001454:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001456:	2317      	movs	r3, #23
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d146      	bne.n	80014ee <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_ADC_Start_DMA+0xf4>)
 8001466:	4013      	ands	r3, r2
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0052      	lsls	r2, r2, #1
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_ADC_Start_DMA+0xf8>)
 8001486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_ADC_Start_DMA+0xfc>)
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <HAL_ADC_Start_DMA+0x100>)
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	221c      	movs	r2, #28
 800149e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2110      	movs	r1, #16
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3340      	adds	r3, #64	; 0x40
 80014ca:	0019      	movs	r1, r3
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f000 fb70 	bl	8001bb4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2104      	movs	r1, #4
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	e003      	b.n	80014ee <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014e6:	2317      	movs	r3, #23
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2202      	movs	r2, #2
 80014ec:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014ee:	2317      	movs	r3, #23
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b007      	add	sp, #28
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	fffff0fe 	.word	0xfffff0fe
 8001500:	08001861 	.word	0x08001861
 8001504:	08001915 	.word	0x08001915
 8001508:	08001933 	.word	0x08001933

0800150c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001546:	230f      	movs	r3, #15
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	055b      	lsls	r3, r3, #21
 800155a:	429a      	cmp	r2, r3
 800155c:	d011      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x46>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	2b01      	cmp	r3, #1
 8001564:	d00d      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x46>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2b02      	cmp	r3, #2
 800156c:	d009      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x46>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	2b03      	cmp	r3, #3
 8001574:	d005      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x46>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	2b04      	cmp	r3, #4
 800157c:	d001      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x46>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2234      	movs	r2, #52	; 0x34
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x54>
 800158c:	2302      	movs	r3, #2
 800158e:	e0d0      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1f6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2234      	movs	r2, #52	; 0x34
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2204      	movs	r2, #4
 80015a0:	4013      	ands	r3, r2
 80015a2:	d000      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x6a>
 80015a4:	e0b4      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a64      	ldr	r2, [pc, #400]	; (800173c <HAL_ADC_ConfigChannel+0x200>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d100      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x76>
 80015b0:	e082      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	409a      	lsls	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d037      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d033      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d02f      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d02b      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d027      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d023      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b06      	cmp	r3, #6
 8001602:	d01f      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b07      	cmp	r3, #7
 800160a:	d01b      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2107      	movs	r1, #7
 8001618:	400b      	ands	r3, r1
 800161a:	429a      	cmp	r2, r3
 800161c:	d012      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2107      	movs	r1, #7
 800162a:	438a      	bics	r2, r1
 800162c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6959      	ldr	r1, [r3, #20]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2207      	movs	r2, #7
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d007      	beq.n	800165c <HAL_ADC_ConfigChannel+0x120>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b11      	cmp	r3, #17
 8001652:	d003      	beq.n	800165c <HAL_ADC_ConfigChannel+0x120>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d163      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_ADC_ConfigChannel+0x204>)
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d009      	beq.n	800167c <HAL_ADC_ConfigChannel+0x140>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b11      	cmp	r3, #17
 800166e:	d102      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x13a>
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	03db      	lsls	r3, r3, #15
 8001674:	e004      	b.n	8001680 <HAL_ADC_ConfigChannel+0x144>
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	045b      	lsls	r3, r3, #17
 800167a:	e001      	b.n	8001680 <HAL_ADC_ConfigChannel+0x144>
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_ADC_ConfigChannel+0x204>)
 8001682:	430b      	orrs	r3, r1
 8001684:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d14a      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_ADC_ConfigChannel+0x208>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	492d      	ldr	r1, [pc, #180]	; (8001748 <HAL_ADC_ConfigChannel+0x20c>)
 8001694:	0018      	movs	r0, r3
 8001696:	f7fe fd37 	bl	8000108 <__udivsi3>
 800169a:	0003      	movs	r3, r0
 800169c:	001a      	movs	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x16e>
 80016b6:	e035      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	4099      	lsls	r1, r3
 80016c6:	000b      	movs	r3, r1
 80016c8:	43d9      	mvns	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d007      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1ae>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1ae>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d11c      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_ADC_ConfigChannel+0x204>)
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d007      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x1ca>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x1c6>
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_ADC_ConfigChannel+0x210>)
 8001700:	e002      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1cc>
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_ADC_ConfigChannel+0x214>)
 8001704:	e000      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1cc>
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_ADC_ConfigChannel+0x218>)
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_ADC_ConfigChannel+0x204>)
 800170a:	400b      	ands	r3, r1
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e009      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2220      	movs	r2, #32
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2234      	movs	r2, #52	; 0x34
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	00001001 	.word	0x00001001
 8001740:	40012708 	.word	0x40012708
 8001744:	20000000 	.word	0x20000000
 8001748:	000f4240 	.word	0x000f4240
 800174c:	ffbfffff 	.word	0xffbfffff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	ff7fffff 	.word	0xff7fffff

08001758 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	2b01      	cmp	r3, #1
 8001774:	d112      	bne.n	800179c <ADC_Enable+0x44>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	2b01      	cmp	r3, #1
 8001782:	d009      	beq.n	8001798 <ADC_Enable+0x40>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	401a      	ands	r2, r3
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	429a      	cmp	r2, r3
 8001796:	d101      	bne.n	800179c <ADC_Enable+0x44>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <ADC_Enable+0x46>
 800179c:	2300      	movs	r3, #0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d152      	bne.n	8001848 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <ADC_Enable+0xfc>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	d00d      	beq.n	80017ca <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	2210      	movs	r2, #16
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017be:	2201      	movs	r2, #1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e03f      	b.n	800184a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <ADC_Enable+0x100>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	491f      	ldr	r1, [pc, #124]	; (800185c <ADC_Enable+0x104>)
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7fe fc91 	bl	8000108 <__udivsi3>
 80017e6:	0003      	movs	r3, r0
 80017e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ea:	e002      	b.n	80017f2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f9      	bne.n	80017ec <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fcbc 	bl	8001174 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001800:	e01b      	b.n	800183a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001802:	f7ff fcb7 	bl	8001174 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d914      	bls.n	800183a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	2b01      	cmp	r3, #1
 800181c:	d00d      	beq.n	800183a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	2210      	movs	r2, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2201      	movs	r2, #1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e007      	b.n	800184a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d1dc      	bne.n	8001802 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	80000017 	.word	0x80000017
 8001858:	20000000 	.word	0x20000000
 800185c:	000f4240 	.word	0x000f4240

08001860 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	2250      	movs	r2, #80	; 0x50
 8001874:	4013      	ands	r3, r2
 8001876:	d140      	bne.n	80018fa <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	431a      	orrs	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	23c0      	movs	r3, #192	; 0xc0
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d12d      	bne.n	80018f0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d129      	bne.n	80018f0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2208      	movs	r2, #8
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d122      	bne.n	80018f0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2204      	movs	r2, #4
 80018b2:	4013      	ands	r3, r2
 80018b4:	d110      	bne.n	80018d8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	210c      	movs	r1, #12
 80018c2:	438a      	bics	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <ADC_DMAConvCplt+0xb0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
 80018d6:	e00b      	b.n	80018f0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	2220      	movs	r2, #32
 80018de:	431a      	orrs	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	2201      	movs	r2, #1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7ff fe0a 	bl	800150c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80018f8:	e005      	b.n	8001906 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	0010      	movs	r0, r2
 8001904:	4798      	blx	r3
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	fffffefe 	.word	0xfffffefe

08001914 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fdf9 	bl	800151c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}

08001932 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	2204      	movs	r2, #4
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fde6 	bl	800152c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b004      	add	sp, #16
 8001966:	bd80      	pop	{r7, pc}

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	0002      	movs	r2, r0
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b7f      	cmp	r3, #127	; 0x7f
 800197a:	d809      	bhi.n	8001990 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197c:	1dfb      	adds	r3, r7, #7
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	001a      	movs	r2, r3
 8001982:	231f      	movs	r3, #31
 8001984:	401a      	ands	r2, r3
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_EnableIRQ+0x30>)
 8001988:	2101      	movs	r1, #1
 800198a:	4091      	lsls	r1, r2
 800198c:	000a      	movs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
  }
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	0002      	movs	r2, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b7f      	cmp	r3, #127	; 0x7f
 80019b0:	d828      	bhi.n	8001a04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b2:	4a2f      	ldr	r2, [pc, #188]	; (8001a70 <__NVIC_SetPriority+0xd4>)
 80019b4:	1dfb      	adds	r3, r7, #7
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	33c0      	adds	r3, #192	; 0xc0
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	589b      	ldr	r3, [r3, r2]
 80019c2:	1dfa      	adds	r2, r7, #7
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	0011      	movs	r1, r2
 80019c8:	2203      	movs	r2, #3
 80019ca:	400a      	ands	r2, r1
 80019cc:	00d2      	lsls	r2, r2, #3
 80019ce:	21ff      	movs	r1, #255	; 0xff
 80019d0:	4091      	lsls	r1, r2
 80019d2:	000a      	movs	r2, r1
 80019d4:	43d2      	mvns	r2, r2
 80019d6:	401a      	ands	r2, r3
 80019d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	22ff      	movs	r2, #255	; 0xff
 80019e0:	401a      	ands	r2, r3
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	0018      	movs	r0, r3
 80019e8:	2303      	movs	r3, #3
 80019ea:	4003      	ands	r3, r0
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <__NVIC_SetPriority+0xd4>)
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	430a      	orrs	r2, r1
 80019fc:	33c0      	adds	r3, #192	; 0xc0
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a02:	e031      	b.n	8001a68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <__NVIC_SetPriority+0xd8>)
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	400b      	ands	r3, r1
 8001a10:	3b08      	subs	r3, #8
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3306      	adds	r3, #6
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1dfa      	adds	r2, r7, #7
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	0011      	movs	r1, r2
 8001a24:	2203      	movs	r2, #3
 8001a26:	400a      	ands	r2, r1
 8001a28:	00d2      	lsls	r2, r2, #3
 8001a2a:	21ff      	movs	r1, #255	; 0xff
 8001a2c:	4091      	lsls	r1, r2
 8001a2e:	000a      	movs	r2, r1
 8001a30:	43d2      	mvns	r2, r2
 8001a32:	401a      	ands	r2, r3
 8001a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	2303      	movs	r3, #3
 8001a46:	4003      	ands	r3, r0
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <__NVIC_SetPriority+0xd8>)
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	001c      	movs	r4, r3
 8001a54:	230f      	movs	r3, #15
 8001a56:	4023      	ands	r3, r4
 8001a58:	3b08      	subs	r3, #8
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	3306      	adds	r3, #6
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	18c3      	adds	r3, r0, r3
 8001a64:	3304      	adds	r3, #4
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b003      	add	sp, #12
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	045b      	lsls	r3, r3, #17
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d301      	bcc.n	8001a90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e010      	b.n	8001ab2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <SysTick_Config+0x44>)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	3a01      	subs	r2, #1
 8001a96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a98:	2301      	movs	r3, #1
 8001a9a:	425b      	negs	r3, r3
 8001a9c:	2103      	movs	r1, #3
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff ff7c 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x44>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x44>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	210f      	movs	r1, #15
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	1c02      	adds	r2, r0, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	0011      	movs	r1, r2
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	0002      	movs	r2, r0
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff ffaf 	bl	8001a78 <SysTick_Config>
 8001b1a:	0003      	movs	r3, r0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e036      	b.n	8001ba8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2221      	movs	r2, #33	; 0x21
 8001b3e:	2102      	movs	r1, #2
 8001b40:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_DMA_Init+0x8c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f9c4 	bl	8001f18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2221      	movs	r2, #33	; 0x21
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}  
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	ffffc00f 	.word	0xffffc00f

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2317      	movs	r3, #23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Start_IT+0x24>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e04f      	b.n	8001c78 <HAL_DMA_Start_IT+0xc4>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2101      	movs	r1, #1
 8001bde:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2221      	movs	r2, #33	; 0x21
 8001be4:	5c9b      	ldrb	r3, [r3, r2]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d13a      	bne.n	8001c62 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2221      	movs	r2, #33	; 0x21
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f954 	bl	8001ebe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	210e      	movs	r1, #14
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e00f      	b.n	8001c50 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c6a:	2317      	movs	r3, #23
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2202      	movs	r2, #2
 8001c70:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001c72:	2317      	movs	r3, #23
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
} 
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b006      	add	sp, #24
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2221      	movs	r2, #33	; 0x21
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e020      	b.n	8001ce8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	210e      	movs	r1, #14
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2221      	movs	r2, #33	; 0x21
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2221      	movs	r2, #33	; 0x21
 8001d04:	5c9b      	ldrb	r3, [r3, r2]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d006      	beq.n	8001d1a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e028      	b.n	8001d6c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	210e      	movs	r1, #14
 8001d26:	438a      	bics	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	438a      	bics	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2221      	movs	r2, #33	; 0x21
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	0010      	movs	r0, r2
 8001d6a:	4798      	blx	r3
    } 
  }
  return status;
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	781b      	ldrb	r3, [r3, #0]
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b004      	add	sp, #16
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2204      	movs	r2, #4
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	0013      	movs	r3, r2
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d024      	beq.n	8001dec <HAL_DMA_IRQHandler+0x72>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2204      	movs	r2, #4
 8001da6:	4013      	ands	r3, r2
 8001da8:	d020      	beq.n	8001dec <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2220      	movs	r2, #32
 8001db2:	4013      	ands	r3, r2
 8001db4:	d107      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	2104      	movs	r1, #4
 8001dd0:	4091      	lsls	r1, r2
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d100      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x66>
 8001dde:	e06a      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	0010      	movs	r0, r2
 8001de8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dea:	e064      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2202      	movs	r2, #2
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d02b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xda>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d027      	beq.n	8001e54 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d10b      	bne.n	8001e28 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	210a      	movs	r1, #10
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2221      	movs	r2, #33	; 0x21
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2102      	movs	r1, #2
 8001e32:	4091      	lsls	r1, r2
 8001e34:	000a      	movs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d036      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	0010      	movs	r0, r2
 8001e50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e52:	e030      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2208      	movs	r2, #8
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	d028      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2208      	movs	r2, #8
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d024      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	210e      	movs	r1, #14
 8001e78:	438a      	bics	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	2101      	movs	r1, #1
 8001e86:	4091      	lsls	r1, r2
 8001e88:	000a      	movs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2221      	movs	r2, #33	; 0x21
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	4798      	blx	r3
    }
   }
}  
 8001eb4:	e7ff      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x13c>
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4091      	lsls	r1, r2
 8001ed8:	000a      	movs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d108      	bne.n	8001efe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001efc:	e007      	b.n	8001f0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <DMA_CalcBaseAndBitshift+0x30>)
 8001f26:	4694      	mov	ip, r2
 8001f28:	4463      	add	r3, ip
 8001f2a:	2114      	movs	r1, #20
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe f8eb 	bl	8000108 <__udivsi3>
 8001f32:	0003      	movs	r3, r0
 8001f34:	009a      	lsls	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <DMA_CalcBaseAndBitshift+0x34>)
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	bffdfff8 	.word	0xbffdfff8
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e14f      	b.n	8002200 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d100      	bne.n	8001f78 <HAL_GPIO_Init+0x28>
 8001f76:	e140      	b.n	80021fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	2201      	movs	r2, #1
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	409a      	lsls	r2, r3
 800200c:	0013      	movs	r3, r2
 800200e:	43da      	mvns	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	4013      	ands	r3, r2
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	58d3      	ldr	r3, [r2, r3]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2207      	movs	r2, #7
 800204c:	4013      	ands	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2107      	movs	r1, #7
 8002066:	400b      	ands	r3, r1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	6939      	ldr	r1, [r7, #16]
 8002080:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	401a      	ands	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	4013      	ands	r3, r2
 80020c0:	d100      	bne.n	80020c4 <HAL_GPIO_Init+0x174>
 80020c2:	e09a      	b.n	80021fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c4:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	619a      	str	r2, [r3, #24]
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x2cc>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	589b      	ldr	r3, [r3, r2]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	43da      	mvns	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	2390      	movs	r3, #144	; 0x90
 8002104:	05db      	lsls	r3, r3, #23
 8002106:	429a      	cmp	r2, r3
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x1e2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x1de>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a43      	ldr	r2, [pc, #268]	; (8002224 <HAL_GPIO_Init+0x2d4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_GPIO_Init+0x2d8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x1d6>
 8002122:	2303      	movs	r3, #3
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002126:	2305      	movs	r3, #5
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x1e4>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x1e4>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002132:	2300      	movs	r3, #0
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	2103      	movs	r1, #3
 8002138:	400a      	ands	r2, r1
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x2cc>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_GPIO_Init+0x2dc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43da      	mvns	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	4013      	ands	r3, r2
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2dc>)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_GPIO_Init+0x2dc>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43da      	mvns	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_GPIO_Init+0x2dc>)
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_GPIO_Init+0x2dc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	035b      	lsls	r3, r3, #13
 80021be:	4013      	ands	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_GPIO_Init+0x2dc>)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_GPIO_Init+0x2dc>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43da      	mvns	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	039b      	lsls	r3, r3, #14
 80021e8:	4013      	ands	r3, r2
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_GPIO_Init+0x2dc>)
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	40da      	lsrs	r2, r3
 8002208:	1e13      	subs	r3, r2, #0
 800220a:	d000      	beq.n	800220e <HAL_GPIO_Init+0x2be>
 800220c:	e6a8      	b.n	8001f60 <HAL_GPIO_Init+0x10>
  } 
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b006      	add	sp, #24
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	000a      	movs	r2, r1
 800223a:	1cbb      	adds	r3, r7, #2
 800223c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	1cba      	adds	r2, r7, #2
 8002244:	8812      	ldrh	r2, [r2, #0]
 8002246:	4013      	ands	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800224a:	230f      	movs	r3, #15
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e003      	b.n	800225c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002254:	230f      	movs	r3, #15
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
  }
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	0008      	movs	r0, r1
 8002274:	0011      	movs	r1, r2
 8002276:	1cbb      	adds	r3, r7, #2
 8002278:	1c02      	adds	r2, r0, #0
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	1c7b      	adds	r3, r7, #1
 800227e:	1c0a      	adds	r2, r1, #0
 8002280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002282:	1c7b      	adds	r3, r7, #1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002292:	e003      	b.n	800229c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002294:	1cbb      	adds	r3, r7, #2
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	000a      	movs	r2, r1
 80022ae:	1cbb      	adds	r3, r7, #2
 80022b0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b8:	1cbb      	adds	r3, r7, #2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	1cb9      	adds	r1, r7, #2
 80022c8:	8809      	ldrh	r1, [r1, #0]
 80022ca:	400b      	ands	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e301      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x1e>
 80022f8:	e08d      	b.n	8002416 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022fa:	4bc3      	ldr	r3, [pc, #780]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	220c      	movs	r2, #12
 8002300:	4013      	ands	r3, r2
 8002302:	2b04      	cmp	r3, #4
 8002304:	d00e      	beq.n	8002324 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002306:	4bc0      	ldr	r3, [pc, #768]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	220c      	movs	r2, #12
 800230c:	4013      	ands	r3, r2
 800230e:	2b08      	cmp	r3, #8
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x64>
 8002312:	4bbd      	ldr	r3, [pc, #756]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	401a      	ands	r2, r3
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	429a      	cmp	r2, r3
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4bb8      	ldr	r3, [pc, #736]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	4013      	ands	r3, r2
 800232e:	d100      	bne.n	8002332 <HAL_RCC_OscConfig+0x56>
 8002330:	e070      	b.n	8002414 <HAL_RCC_OscConfig+0x138>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <HAL_RCC_OscConfig+0x60>
 800233a:	e06b      	b.n	8002414 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e2d8      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x7c>
 8002348:	4baf      	ldr	r3, [pc, #700]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4bae      	ldr	r3, [pc, #696]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0249      	lsls	r1, r1, #9
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e02f      	b.n	80023b8 <HAL_RCC_OscConfig+0xdc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10c      	bne.n	800237a <HAL_RCC_OscConfig+0x9e>
 8002360:	4ba9      	ldr	r3, [pc, #676]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba8      	ldr	r3, [pc, #672]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002366:	49a9      	ldr	r1, [pc, #676]	; (800260c <HAL_RCC_OscConfig+0x330>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	4ba6      	ldr	r3, [pc, #664]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4ba5      	ldr	r3, [pc, #660]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002372:	49a7      	ldr	r1, [pc, #668]	; (8002610 <HAL_RCC_OscConfig+0x334>)
 8002374:	400a      	ands	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e01e      	b.n	80023b8 <HAL_RCC_OscConfig+0xdc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d10e      	bne.n	80023a0 <HAL_RCC_OscConfig+0xc4>
 8002382:	4ba1      	ldr	r3, [pc, #644]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	02c9      	lsls	r1, r1, #11
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b9c      	ldr	r3, [pc, #624]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xdc>
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b98      	ldr	r3, [pc, #608]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	4999      	ldr	r1, [pc, #612]	; (800260c <HAL_RCC_OscConfig+0x330>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	4b96      	ldr	r3, [pc, #600]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b95      	ldr	r3, [pc, #596]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80023b2:	4997      	ldr	r1, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x334>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d014      	beq.n	80023ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fed8 	bl	8001174 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ca:	f7fe fed3 	bl	8001174 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e28a      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023dc:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0xee>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fec3 	bl	8001174 <HAL_GetTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe febe 	bl	8001174 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e275      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b80      	ldr	r3, [pc, #512]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	4013      	ands	r3, r2
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x118>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x146>
 8002420:	e069      	b.n	80024f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002422:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	220c      	movs	r2, #12
 8002428:	4013      	ands	r3, r2
 800242a:	d00b      	beq.n	8002444 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800242c:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	220c      	movs	r2, #12
 8002432:	4013      	ands	r3, r2
 8002434:	2b08      	cmp	r3, #8
 8002436:	d11c      	bne.n	8002472 <HAL_RCC_OscConfig+0x196>
 8002438:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	025b      	lsls	r3, r3, #9
 8002440:	4013      	ands	r3, r2
 8002442:	d116      	bne.n	8002472 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002444:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2202      	movs	r2, #2
 800244a:	4013      	ands	r3, r2
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x17e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e24b      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	22f8      	movs	r2, #248	; 0xf8
 8002460:	4393      	bics	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00da      	lsls	r2, r3, #3
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002470:	e041      	b.n	80024f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fe75 	bl	8001174 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe fe70 	bl	8001174 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e227      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	22f8      	movs	r2, #248	; 0xf8
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00da      	lsls	r2, r3, #3
 80024bc:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	438a      	bics	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe50 	bl	8001174 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7fe fe4b 	bl	8001174 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e202      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ec:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d1f1      	bne.n	80024da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	4013      	ands	r3, r2
 80024fe:	d036      	beq.n	800256e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d019      	beq.n	800253c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002508:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fe fe2e 	bl	8001174 <HAL_GetTick>
 8002518:	0003      	movs	r3, r0
 800251a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251e:	f7fe fe29 	bl	8001174 <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1e0      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002530:	4b35      	ldr	r3, [pc, #212]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d0f1      	beq.n	800251e <HAL_RCC_OscConfig+0x242>
 800253a:	e018      	b.n	800256e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fe fe14 	bl	8001174 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe fe0f 	bl	8001174 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1c6      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2204      	movs	r2, #4
 8002574:	4013      	ands	r3, r2
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x29e>
 8002578:	e0b4      	b.n	80026e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	201f      	movs	r0, #31
 800257c:	183b      	adds	r3, r7, r0
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	4013      	ands	r3, r2
 800258c:	d110      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0549      	lsls	r1, r1, #21
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	055b      	lsls	r3, r3, #21
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025aa:	183b      	adds	r3, r7, r0
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d11a      	bne.n	80025f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCC_OscConfig+0x338>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_RCC_OscConfig+0x338>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fdd3 	bl	8001174 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7fe fdce 	bl	8001174 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e185      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x338>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10e      	bne.n	8002618 <HAL_RCC_OscConfig+0x33c>
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_RCC_OscConfig+0x32c>)
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	621a      	str	r2, [r3, #32]
 8002606:	e035      	b.n	8002674 <HAL_RCC_OscConfig+0x398>
 8002608:	40021000 	.word	0x40021000
 800260c:	fffeffff 	.word	0xfffeffff
 8002610:	fffbffff 	.word	0xfffbffff
 8002614:	40007000 	.word	0x40007000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x35e>
 8002620:	4bb6      	ldr	r3, [pc, #728]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	4bb5      	ldr	r3, [pc, #724]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002626:	2101      	movs	r1, #1
 8002628:	438a      	bics	r2, r1
 800262a:	621a      	str	r2, [r3, #32]
 800262c:	4bb3      	ldr	r3, [pc, #716]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	4bb2      	ldr	r3, [pc, #712]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002632:	2104      	movs	r1, #4
 8002634:	438a      	bics	r2, r1
 8002636:	621a      	str	r2, [r3, #32]
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x398>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b05      	cmp	r3, #5
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x380>
 8002642:	4bae      	ldr	r3, [pc, #696]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	4bad      	ldr	r3, [pc, #692]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002648:	2104      	movs	r1, #4
 800264a:	430a      	orrs	r2, r1
 800264c:	621a      	str	r2, [r3, #32]
 800264e:	4bab      	ldr	r3, [pc, #684]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	4baa      	ldr	r3, [pc, #680]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	621a      	str	r2, [r3, #32]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0x398>
 800265c:	4ba7      	ldr	r3, [pc, #668]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800265e:	6a1a      	ldr	r2, [r3, #32]
 8002660:	4ba6      	ldr	r3, [pc, #664]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002662:	2101      	movs	r1, #1
 8002664:	438a      	bics	r2, r1
 8002666:	621a      	str	r2, [r3, #32]
 8002668:	4ba4      	ldr	r3, [pc, #656]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	4ba3      	ldr	r3, [pc, #652]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800266e:	2104      	movs	r1, #4
 8002670:	438a      	bics	r2, r1
 8002672:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d014      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267c:	f7fe fd7a 	bl	8001174 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e009      	b.n	800269a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fd75 	bl	8001174 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a9b      	ldr	r2, [pc, #620]	; (8002900 <HAL_RCC_OscConfig+0x624>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e12b      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b98      	ldr	r3, [pc, #608]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x3aa>
 80026a4:	e013      	b.n	80026ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fd65 	bl	8001174 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ae:	e009      	b.n	80026c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fd60 	bl	8001174 <HAL_GetTick>
 80026b4:	0002      	movs	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	4a91      	ldr	r2, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x624>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e116      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b8d      	ldr	r3, [pc, #564]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	2202      	movs	r2, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ce:	231f      	movs	r3, #31
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d8:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	4b87      	ldr	r3, [pc, #540]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80026de:	4989      	ldr	r1, [pc, #548]	; (8002904 <HAL_RCC_OscConfig+0x628>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	4013      	ands	r3, r2
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d12a      	bne.n	800274c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80026f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fa:	4b80      	ldr	r3, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80026fc:	2104      	movs	r1, #4
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002702:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	4b7d      	ldr	r3, [pc, #500]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002708:	2101      	movs	r1, #1
 800270a:	430a      	orrs	r2, r1
 800270c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270e:	f7fe fd31 	bl	8001174 <HAL_GetTick>
 8002712:	0003      	movs	r3, r0
 8002714:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002718:	f7fe fd2c 	bl	8001174 <HAL_GetTick>
 800271c:	0002      	movs	r2, r0
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0e3      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800272a:	4b74      	ldr	r3, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d0f1      	beq.n	8002718 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002734:	4b71      	ldr	r3, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	22f8      	movs	r2, #248	; 0xf8
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	00da      	lsls	r2, r3, #3
 8002744:	4b6d      	ldr	r3, [pc, #436]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	e034      	b.n	80027b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	3305      	adds	r3, #5
 8002752:	d111      	bne.n	8002778 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002754:	4b69      	ldr	r3, [pc, #420]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800275a:	2104      	movs	r1, #4
 800275c:	438a      	bics	r2, r1
 800275e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	22f8      	movs	r2, #248	; 0xf8
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e01e      	b.n	80027b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002778:	4b60      	ldr	r3, [pc, #384]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800277a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277c:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800277e:	2104      	movs	r1, #4
 8002780:	430a      	orrs	r2, r1
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002784:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002788:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800278a:	2101      	movs	r1, #1
 800278c:	438a      	bics	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe fcf0 	bl	8001174 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800279a:	f7fe fceb 	bl	8001174 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0a2      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	d1f1      	bne.n	800279a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4e4>
 80027be:	e097      	b.n	80028f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c0:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	220c      	movs	r2, #12
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d100      	bne.n	80027ce <HAL_RCC_OscConfig+0x4f2>
 80027cc:	e06b      	b.n	80028a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d14c      	bne.n	8002870 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80027dc:	494a      	ldr	r1, [pc, #296]	; (8002908 <HAL_RCC_OscConfig+0x62c>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fcc7 	bl	8001174 <HAL_GetTick>
 80027e6:	0003      	movs	r3, r0
 80027e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fcc2 	bl	8001174 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e079      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	049b      	lsls	r3, r3, #18
 8002806:	4013      	ands	r3, r2
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280a:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	220f      	movs	r2, #15
 8002810:	4393      	bics	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800281a:	430a      	orrs	r2, r1
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <HAL_RCC_OscConfig+0x630>)
 8002824:	4013      	ands	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	431a      	orrs	r2, r3
 8002832:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	0449      	lsls	r1, r1, #17
 8002842:	430a      	orrs	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fc95 	bl	8001174 <HAL_GetTick>
 800284a:	0003      	movs	r3, r0
 800284c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fc90 	bl	8001174 <HAL_GetTick>
 8002854:	0002      	movs	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e047      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	049b      	lsls	r3, r3, #18
 800286a:	4013      	ands	r3, r2
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x574>
 800286e:	e03f      	b.n	80028f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 8002876:	4924      	ldr	r1, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x62c>)
 8002878:	400a      	ands	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fc7a 	bl	8001174 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fc75 	bl	8001174 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e02c      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	049b      	lsls	r3, r3, #18
 80028a0:	4013      	ands	r3, r2
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x5aa>
 80028a4:	e024      	b.n	80028f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e01f      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x620>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	025b      	lsls	r3, r3, #9
 80028c4:	401a      	ands	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10e      	bne.n	80028ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	220f      	movs	r2, #15
 80028d2:	401a      	ands	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	23f0      	movs	r3, #240	; 0xf0
 80028e0:	039b      	lsls	r3, r3, #14
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b008      	add	sp, #32
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021000 	.word	0x40021000
 8002900:	00001388 	.word	0x00001388
 8002904:	efffffff 	.word	0xefffffff
 8002908:	feffffff 	.word	0xfeffffff
 800290c:	ffc2ffff 	.word	0xffc2ffff

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b3      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d911      	bls.n	8002956 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4393      	bics	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e09a      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d015      	beq.n	800298c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	4013      	ands	r3, r2
 8002968:	d006      	beq.n	8002978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002970:	21e0      	movs	r1, #224	; 0xe0
 8002972:	00c9      	lsls	r1, r1, #3
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	22f0      	movs	r2, #240	; 0xf0
 800297e:	4393      	bics	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d040      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	029b      	lsls	r3, r3, #10
 80029a6:	4013      	ands	r3, r2
 80029a8:	d114      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06e      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	049b      	lsls	r3, r3, #18
 80029be:	4013      	ands	r3, r2
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e062      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e05b      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d4:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	4393      	bics	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fbc4 	bl	8001174 <HAL_GetTick>
 80029ec:	0003      	movs	r3, r0
 80029ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f2:	f7fe fbbf 	bl	8001174 <HAL_GetTick>
 80029f6:	0002      	movs	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x18c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e042      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1ec      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d211      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x184>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e020      	b.n	8002a8c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_RCC_ClockConfig+0x190>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a68:	f000 f820 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a6c:	0001      	movs	r1, r0
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x188>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	220f      	movs	r2, #15
 8002a76:	4013      	ands	r3, r2
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x194>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	40da      	lsrs	r2, r3
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x198>)
 8002a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f7fe fb2f 	bl	80010e8 <HAL_InitTick>
  
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	00001388 	.word	0x00001388
 8002aa0:	fffff8ff 	.word	0xfffff8ff
 8002aa4:	08004294 	.word	0x08004294
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08f      	sub	sp, #60	; 0x3c
 8002ab0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002ab2:	2314      	movs	r3, #20
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aba:	c313      	stmia	r3!, {r0, r1, r4}
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ac4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ac6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	220c      	movs	r2, #12
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d002      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x4a>
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d003      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x50>
 8002af4:	e02d      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002afa:	e02d      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	0c9b      	lsrs	r3, r3, #18
 8002b00:	220f      	movs	r2, #15
 8002b02:	4013      	ands	r3, r2
 8002b04:	2214      	movs	r2, #20
 8002b06:	18ba      	adds	r2, r7, r2
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	220f      	movs	r2, #15
 8002b12:	4013      	ands	r3, r2
 8002b14:	1d3a      	adds	r2, r7, #4
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	025b      	lsls	r3, r3, #9
 8002b20:	4013      	ands	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b26:	4812      	ldr	r0, [pc, #72]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b28:	f7fd faee 	bl	8000108 <__udivsi3>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	001a      	movs	r2, r3
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	4353      	muls	r3, r2
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	e009      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3a:	000a      	movs	r2, r1
 8002b3c:	0152      	lsls	r2, r2, #5
 8002b3e:	1a52      	subs	r2, r2, r1
 8002b40:	0193      	lsls	r3, r2, #6
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	185b      	adds	r3, r3, r1
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b50:	e002      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b00f      	add	sp, #60	; 0x3c
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	080041f4 	.word	0x080041f4
 8002b68:	08004204 	.word	0x08004204
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b8c:	f7ff fff2 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b90:	0001      	movs	r1, r0
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	40d9      	lsrs	r1, r3
 8002ba2:	000b      	movs	r3, r1
}    
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080042a4 	.word	0x080042a4

08002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002bd0:	e08e      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2017      	movs	r0, #23
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	4013      	ands	r3, r2
 8002be4:	d110      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0549      	lsls	r1, r1, #21
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	61da      	str	r2, [r3, #28]
 8002bf4:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	055b      	lsls	r3, r3, #21
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d11a      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c14:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	0049      	lsls	r1, r1, #1
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fe faa7 	bl	8001174 <HAL_GetTick>
 8002c26:	0003      	movs	r3, r0
 8002c28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe faa2 	bl	8001174 <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e087      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4a:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	23c0      	movs	r3, #192	; 0xc0
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d034      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d02c      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c78:	6a1a      	ldr	r2, [r3, #32]
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0249      	lsls	r1, r1, #9
 8002c80:	430a      	orrs	r2, r1
 8002c82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c8a:	4936      	ldr	r1, [pc, #216]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fa69 	bl	8001174 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fa64 	bl	8001174 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e048      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cea:	4920      	ldr	r1, [pc, #128]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4393      	bics	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2220      	movs	r2, #32
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4393      	bics	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	4393      	bics	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	fffffcff 	.word	0xfffffcff
 8002d64:	fffeffff 	.word	0xfffeffff
 8002d68:	00001388 	.word	0x00001388
 8002d6c:	efffffff 	.word	0xefffffff

08002d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e044      	b.n	8002e0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2274      	movs	r2, #116	; 0x74
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fe f8dd 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fc2e 	bl	8003614 <UART_SetConfig>
 8002db8:	0003      	movs	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e024      	b.n	8002e0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 fd61 	bl	8003894 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	490d      	ldr	r1, [pc, #52]	; (8002e14 <HAL_UART_Init+0xa4>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	212a      	movs	r1, #42	; 0x2a
 8002dee:	438a      	bics	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fdf9 	bl	80039fc <UART_CheckIdleState>
 8002e0a:	0003      	movs	r3, r0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffffb7ff 	.word	0xffffb7ff

08002e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d000      	beq.n	8002e32 <HAL_UART_Transmit+0x1a>
 8002e30:	e096      	b.n	8002f60 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_UART_Transmit+0x28>
 8002e38:	1dbb      	adds	r3, r7, #6
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e08e      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d109      	bne.n	8002e64 <HAL_UART_Transmit+0x4c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e07e      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2274      	movs	r2, #116	; 0x74
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Transmit+0x5a>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e077      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2274      	movs	r2, #116	; 0x74
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2221      	movs	r2, #33	; 0x21
 8002e86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e88:	f7fe f974 	bl	8001174 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1dba      	adds	r2, r7, #6
 8002e94:	2150      	movs	r1, #80	; 0x50
 8002e96:	8812      	ldrh	r2, [r2, #0]
 8002e98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1dba      	adds	r2, r7, #6
 8002e9e:	2152      	movs	r1, #82	; 0x52
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d108      	bne.n	8002ec2 <HAL_UART_Transmit+0xaa>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e003      	b.n	8002eca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2274      	movs	r2, #116	; 0x74
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002ed2:	e02d      	b.n	8002f30 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	0013      	movs	r3, r2
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	f000 fdd3 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e039      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	05d2      	lsls	r2, r2, #23
 8002efe:	0dd2      	lsrs	r2, r2, #23
 8002f00:	b292      	uxth	r2, r2
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	3302      	adds	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e008      	b.n	8002f1e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b292      	uxth	r2, r2
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2252      	movs	r2, #82	; 0x52
 8002f22:	5a9b      	ldrh	r3, [r3, r2]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b299      	uxth	r1, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2252      	movs	r2, #82	; 0x52
 8002f2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2252      	movs	r2, #82	; 0x52
 8002f34:	5a9b      	ldrh	r3, [r3, r2]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1cb      	bne.n	8002ed4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	0013      	movs	r3, r2
 8002f46:	2200      	movs	r2, #0
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	f000 fd9f 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e005      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b008      	add	sp, #32
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d150      	bne.n	8003022 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_UART_Receive_IT+0x24>
 8002f86:	1dbb      	adds	r3, r7, #6
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e048      	b.n	8003024 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d109      	bne.n	8002fb2 <HAL_UART_Receive_IT+0x48>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e038      	b.n	8003024 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2274      	movs	r2, #116	; 0x74
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Receive_IT+0x56>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e031      	b.n	8003024 <HAL_UART_Receive_IT+0xba>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2274      	movs	r2, #116	; 0x74
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d019      	beq.n	8003010 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe0:	613b      	str	r3, [r7, #16]
  return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	04c9      	lsls	r1, r1, #19
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 fdfb 	bl	8003c14 <UART_Start_Receive_IT>
 800301e:	0003      	movs	r3, r0
 8003020:	e000      	b.n	8003024 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b008      	add	sp, #32
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b0ab      	sub	sp, #172	; 0xac
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	22a4      	movs	r2, #164	; 0xa4
 800303c:	18b9      	adds	r1, r7, r2
 800303e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	20a0      	movs	r0, #160	; 0xa0
 8003048:	1839      	adds	r1, r7, r0
 800304a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	219c      	movs	r1, #156	; 0x9c
 8003054:	1879      	adds	r1, r7, r1
 8003056:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003058:	0011      	movs	r1, r2
 800305a:	18bb      	adds	r3, r7, r2
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a99      	ldr	r2, [pc, #612]	; (80032c4 <HAL_UART_IRQHandler+0x298>)
 8003060:	4013      	ands	r3, r2
 8003062:	2298      	movs	r2, #152	; 0x98
 8003064:	18bc      	adds	r4, r7, r2
 8003066:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003068:	18bb      	adds	r3, r7, r2
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d114      	bne.n	800309a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003070:	187b      	adds	r3, r7, r1
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2220      	movs	r2, #32
 8003076:	4013      	ands	r3, r2
 8003078:	d00f      	beq.n	800309a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800307a:	183b      	adds	r3, r7, r0
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	4013      	ands	r3, r2
 8003082:	d00a      	beq.n	800309a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003088:	2b00      	cmp	r3, #0
 800308a:	d100      	bne.n	800308e <HAL_UART_IRQHandler+0x62>
 800308c:	e296      	b.n	80035bc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	0010      	movs	r0, r2
 8003096:	4798      	blx	r3
      }
      return;
 8003098:	e290      	b.n	80035bc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800309a:	2398      	movs	r3, #152	; 0x98
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d100      	bne.n	80030a6 <HAL_UART_IRQHandler+0x7a>
 80030a4:	e114      	b.n	80032d0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030a6:	239c      	movs	r3, #156	; 0x9c
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030b2:	23a0      	movs	r3, #160	; 0xa0
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a83      	ldr	r2, [pc, #524]	; (80032c8 <HAL_UART_IRQHandler+0x29c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	d100      	bne.n	80030c0 <HAL_UART_IRQHandler+0x94>
 80030be:	e107      	b.n	80032d0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030c0:	23a4      	movs	r3, #164	; 0xa4
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	d012      	beq.n	80030f2 <HAL_UART_IRQHandler+0xc6>
 80030cc:	23a0      	movs	r3, #160	; 0xa0
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2201      	movs	r2, #1
 80030e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	589b      	ldr	r3, [r3, r2]
 80030e8:	2201      	movs	r2, #1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f2:	23a4      	movs	r3, #164	; 0xa4
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d011      	beq.n	8003122 <HAL_UART_IRQHandler+0xf6>
 80030fe:	239c      	movs	r3, #156	; 0x9c
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2202      	movs	r2, #2
 8003110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	589b      	ldr	r3, [r3, r2]
 8003118:	2204      	movs	r2, #4
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003122:	23a4      	movs	r3, #164	; 0xa4
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2204      	movs	r2, #4
 800312a:	4013      	ands	r3, r2
 800312c:	d011      	beq.n	8003152 <HAL_UART_IRQHandler+0x126>
 800312e:	239c      	movs	r3, #156	; 0x9c
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2204      	movs	r2, #4
 8003140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	589b      	ldr	r3, [r3, r2]
 8003148:	2202      	movs	r2, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003152:	23a4      	movs	r3, #164	; 0xa4
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2208      	movs	r2, #8
 800315a:	4013      	ands	r3, r2
 800315c:	d017      	beq.n	800318e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800315e:	23a0      	movs	r3, #160	; 0xa0
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2220      	movs	r2, #32
 8003166:	4013      	ands	r3, r2
 8003168:	d105      	bne.n	8003176 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800316a:	239c      	movs	r3, #156	; 0x9c
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003174:	d00b      	beq.n	800318e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2208      	movs	r2, #8
 800317c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	589b      	ldr	r3, [r3, r2]
 8003184:	2208      	movs	r2, #8
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800318e:	23a4      	movs	r3, #164	; 0xa4
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4013      	ands	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_UART_IRQHandler+0x198>
 800319c:	23a0      	movs	r3, #160	; 0xa0
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	04db      	lsls	r3, r3, #19
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00c      	beq.n	80031c4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	589b      	ldr	r3, [r3, r2]
 80031ba:	2220      	movs	r2, #32
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	589b      	ldr	r3, [r3, r2]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d100      	bne.n	80031d0 <HAL_UART_IRQHandler+0x1a4>
 80031ce:	e1f7      	b.n	80035c0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d0:	23a4      	movs	r3, #164	; 0xa4
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	4013      	ands	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031dc:	23a0      	movs	r3, #160	; 0xa0
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2220      	movs	r2, #32
 80031e4:	4013      	ands	r3, r2
 80031e6:	d008      	beq.n	80031fa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	0010      	movs	r0, r2
 80031f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	589b      	ldr	r3, [r3, r2]
 8003200:	2194      	movs	r1, #148	; 0x94
 8003202:	187a      	adds	r2, r7, r1
 8003204:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2240      	movs	r2, #64	; 0x40
 800320e:	4013      	ands	r3, r2
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d004      	beq.n	800321e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003214:	187b      	adds	r3, r7, r1
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2228      	movs	r2, #40	; 0x28
 800321a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321c:	d047      	beq.n	80032ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 fd93 	bl	8003d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	4013      	ands	r3, r2
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d137      	bne.n	80032a4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003234:	f3ef 8310 	mrs	r3, PRIMASK
 8003238:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800323a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323c:	2090      	movs	r0, #144	; 0x90
 800323e:	183a      	adds	r2, r7, r0
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	438a      	bics	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	183b      	adds	r3, r7, r0
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_UART_IRQHandler+0x2a0>)
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	0018      	movs	r0, r3
 8003282:	f7fe fd35 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d01a      	beq.n	80032c0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	0018      	movs	r0, r3
 8003296:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e012      	b.n	80032c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 f9a5 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	e00d      	b.n	80032c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f9a0 	bl	80035ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e008      	b.n	80032c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 f99b 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	2100      	movs	r1, #0
 80032bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032be:	e17f      	b.n	80035c0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	46c0      	nop			; (mov r8, r8)
    return;
 80032c2:	e17d      	b.n	80035c0 <HAL_UART_IRQHandler+0x594>
 80032c4:	0000080f 	.word	0x0000080f
 80032c8:	04000120 	.word	0x04000120
 80032cc:	08003e11 	.word	0x08003e11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d000      	beq.n	80032da <HAL_UART_IRQHandler+0x2ae>
 80032d8:	e131      	b.n	800353e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032da:	23a4      	movs	r3, #164	; 0xa4
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d100      	bne.n	80032e8 <HAL_UART_IRQHandler+0x2bc>
 80032e6:	e12a      	b.n	800353e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032e8:	23a0      	movs	r3, #160	; 0xa0
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	4013      	ands	r3, r2
 80032f2:	d100      	bne.n	80032f6 <HAL_UART_IRQHandler+0x2ca>
 80032f4:	e123      	b.n	800353e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2210      	movs	r2, #16
 80032fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d000      	beq.n	800330e <HAL_UART_IRQHandler+0x2e2>
 800330c:	e09b      	b.n	8003446 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	217e      	movs	r1, #126	; 0x7e
 8003318:	187b      	adds	r3, r7, r1
 800331a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800331c:	187b      	adds	r3, r7, r1
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d100      	bne.n	8003326 <HAL_UART_IRQHandler+0x2fa>
 8003324:	e14e      	b.n	80035c4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2258      	movs	r2, #88	; 0x58
 800332a:	5a9b      	ldrh	r3, [r3, r2]
 800332c:	187a      	adds	r2, r7, r1
 800332e:	8812      	ldrh	r2, [r2, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d300      	bcc.n	8003336 <HAL_UART_IRQHandler+0x30a>
 8003334:	e146      	b.n	80035c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	187a      	adds	r2, r7, r1
 800333a:	215a      	movs	r1, #90	; 0x5a
 800333c:	8812      	ldrh	r2, [r2, #0]
 800333e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b20      	cmp	r3, #32
 8003348:	d06e      	beq.n	8003428 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003352:	67bb      	str	r3, [r7, #120]	; 0x78
 8003354:	2301      	movs	r3, #1
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	499a      	ldr	r1, [pc, #616]	; (80035d4 <HAL_UART_IRQHandler+0x5a8>)
 800336c:	400a      	ands	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003372:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337c:	f3ef 8310 	mrs	r3, PRIMASK
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003384:	677b      	str	r3, [r7, #116]	; 0x74
 8003386:	2301      	movs	r3, #1
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	438a      	bics	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
 80033b8:	2301      	movs	r3, #1
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	438a      	bics	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ec:	f3ef 8310 	mrs	r3, PRIMASK
 80033f0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80033f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f6:	2301      	movs	r3, #1
 80033f8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fc:	f383 8810 	msr	PRIMASK, r3
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2110      	movs	r1, #16
 800340e:	438a      	bics	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003418:	f383 8810 	msr	PRIMASK, r3
}
 800341c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	0018      	movs	r0, r3
 8003424:	f7fe fc2c 	bl	8001c80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2258      	movs	r2, #88	; 0x58
 800342c:	5a9a      	ldrh	r2, [r3, r2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	215a      	movs	r1, #90	; 0x5a
 8003432:	5a5b      	ldrh	r3, [r3, r1]
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f8dc 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003444:	e0be      	b.n	80035c4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2258      	movs	r2, #88	; 0x58
 800344a:	5a99      	ldrh	r1, [r3, r2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	225a      	movs	r2, #90	; 0x5a
 8003450:	5a9b      	ldrh	r3, [r3, r2]
 8003452:	b29a      	uxth	r2, r3
 8003454:	208e      	movs	r0, #142	; 0x8e
 8003456:	183b      	adds	r3, r7, r0
 8003458:	1a8a      	subs	r2, r1, r2
 800345a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	225a      	movs	r2, #90	; 0x5a
 8003460:	5a9b      	ldrh	r3, [r3, r2]
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d100      	bne.n	800346a <HAL_UART_IRQHandler+0x43e>
 8003468:	e0ae      	b.n	80035c8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800346a:	183b      	adds	r3, r7, r0
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d100      	bne.n	8003474 <HAL_UART_IRQHandler+0x448>
 8003472:	e0a9      	b.n	80035c8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	60fb      	str	r3, [r7, #12]
  return(result);
 800347a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347c:	2488      	movs	r4, #136	; 0x88
 800347e:	193a      	adds	r2, r7, r4
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	494f      	ldr	r1, [pc, #316]	; (80035d8 <HAL_UART_IRQHandler+0x5ac>)
 800349a:	400a      	ands	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	193b      	adds	r3, r7, r4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80034b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	2484      	movs	r4, #132	; 0x84
 80034b6:	193a      	adds	r2, r7, r4
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	438a      	bics	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fe:	2480      	movs	r4, #128	; 0x80
 8003500:	193a      	adds	r2, r7, r4
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	2301      	movs	r3, #1
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2110      	movs	r1, #16
 800351c:	438a      	bics	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	193b      	adds	r3, r7, r4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800352e:	183b      	adds	r3, r7, r0
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f000 f860 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800353c:	e044      	b.n	80035c8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800353e:	23a4      	movs	r3, #164	; 0xa4
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	035b      	lsls	r3, r3, #13
 8003548:	4013      	ands	r3, r2
 800354a:	d010      	beq.n	800356e <HAL_UART_IRQHandler+0x542>
 800354c:	239c      	movs	r3, #156	; 0x9c
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	03db      	lsls	r3, r3, #15
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	0352      	lsls	r2, r2, #13
 8003562:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 fdfc 	bl	8004164 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800356c:	e02f      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800356e:	23a4      	movs	r3, #164	; 0xa4
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	4013      	ands	r3, r2
 8003578:	d00f      	beq.n	800359a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800357a:	23a0      	movs	r3, #160	; 0xa0
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	4013      	ands	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01e      	beq.n	80035cc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	0010      	movs	r0, r2
 8003596:	4798      	blx	r3
    }
    return;
 8003598:	e018      	b.n	80035cc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800359a:	23a4      	movs	r3, #164	; 0xa4
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	4013      	ands	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_UART_IRQHandler+0x5a2>
 80035a6:	23a0      	movs	r3, #160	; 0xa0
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fc42 	bl	8003e3e <UART_EndTransmit_IT>
    return;
 80035ba:	e008      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
      return;
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x5a2>
    return;
 80035cc:	46c0      	nop			; (mov r8, r8)
  }

}
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b02b      	add	sp, #172	; 0xac
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	fffffeff 	.word	0xfffffeff
 80035d8:	fffffedf 	.word	0xfffffedf

080035dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	000a      	movs	r2, r1
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800361c:	231e      	movs	r3, #30
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a8d      	ldr	r2, [pc, #564]	; (8003878 <UART_SetConfig+0x264>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a88      	ldr	r2, [pc, #544]	; (800387c <UART_SetConfig+0x268>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a7f      	ldr	r2, [pc, #508]	; (8003880 <UART_SetConfig+0x26c>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a7b      	ldr	r2, [pc, #492]	; (8003884 <UART_SetConfig+0x270>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d127      	bne.n	80036ea <UART_SetConfig+0xd6>
 800369a:	4b7b      	ldr	r3, [pc, #492]	; (8003888 <UART_SetConfig+0x274>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2203      	movs	r2, #3
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d00d      	beq.n	80036c2 <UART_SetConfig+0xae>
 80036a6:	d81b      	bhi.n	80036e0 <UART_SetConfig+0xcc>
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d014      	beq.n	80036d6 <UART_SetConfig+0xc2>
 80036ac:	d818      	bhi.n	80036e0 <UART_SetConfig+0xcc>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <UART_SetConfig+0xa4>
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d00a      	beq.n	80036cc <UART_SetConfig+0xb8>
 80036b6:	e013      	b.n	80036e0 <UART_SetConfig+0xcc>
 80036b8:	231f      	movs	r3, #31
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e021      	b.n	8003706 <UART_SetConfig+0xf2>
 80036c2:	231f      	movs	r3, #31
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2202      	movs	r2, #2
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e01c      	b.n	8003706 <UART_SetConfig+0xf2>
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2204      	movs	r2, #4
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e017      	b.n	8003706 <UART_SetConfig+0xf2>
 80036d6:	231f      	movs	r3, #31
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2208      	movs	r2, #8
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e012      	b.n	8003706 <UART_SetConfig+0xf2>
 80036e0:	231f      	movs	r3, #31
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2210      	movs	r2, #16
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00d      	b.n	8003706 <UART_SetConfig+0xf2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a67      	ldr	r2, [pc, #412]	; (800388c <UART_SetConfig+0x278>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0xea>
 80036f4:	231f      	movs	r3, #31
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0xf2>
 80036fe:	231f      	movs	r3, #31
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2210      	movs	r2, #16
 8003704:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	429a      	cmp	r2, r3
 8003710:	d15d      	bne.n	80037ce <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003712:	231f      	movs	r3, #31
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d015      	beq.n	8003748 <UART_SetConfig+0x134>
 800371c:	dc18      	bgt.n	8003750 <UART_SetConfig+0x13c>
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00d      	beq.n	800373e <UART_SetConfig+0x12a>
 8003722:	dc15      	bgt.n	8003750 <UART_SetConfig+0x13c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <UART_SetConfig+0x11a>
 8003728:	2b02      	cmp	r3, #2
 800372a:	d005      	beq.n	8003738 <UART_SetConfig+0x124>
 800372c:	e010      	b.n	8003750 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7ff fa2b 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8003732:	0003      	movs	r3, r0
 8003734:	61bb      	str	r3, [r7, #24]
        break;
 8003736:	e012      	b.n	800375e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b55      	ldr	r3, [pc, #340]	; (8003890 <UART_SetConfig+0x27c>)
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e00f      	b.n	800375e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7ff f9b5 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]
        break;
 8003746:	e00a      	b.n	800375e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	61bb      	str	r3, [r7, #24]
        break;
 800374e:	e006      	b.n	800375e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003754:	231e      	movs	r3, #30
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
        break;
 800375c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <UART_SetConfig+0x152>
 8003764:	e07b      	b.n	800385e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fcc5 	bl	8000108 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	b29b      	uxth	r3, r3
 8003782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d91c      	bls.n	80037c4 <UART_SetConfig+0x1b0>
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	025b      	lsls	r3, r3, #9
 8003790:	429a      	cmp	r2, r3
 8003792:	d217      	bcs.n	80037c4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	b29a      	uxth	r2, r3
 8003798:	200e      	movs	r0, #14
 800379a:	183b      	adds	r3, r7, r0
 800379c:	210f      	movs	r1, #15
 800379e:	438a      	bics	r2, r1
 80037a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2207      	movs	r2, #7
 80037aa:	4013      	ands	r3, r2
 80037ac:	b299      	uxth	r1, r3
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	183a      	adds	r2, r7, r0
 80037b2:	8812      	ldrh	r2, [r2, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	183a      	adds	r2, r7, r0
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	e04c      	b.n	800385e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80037c4:	231e      	movs	r3, #30
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e047      	b.n	800385e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ce:	231f      	movs	r3, #31
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d015      	beq.n	8003804 <UART_SetConfig+0x1f0>
 80037d8:	dc18      	bgt.n	800380c <UART_SetConfig+0x1f8>
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d00d      	beq.n	80037fa <UART_SetConfig+0x1e6>
 80037de:	dc15      	bgt.n	800380c <UART_SetConfig+0x1f8>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <UART_SetConfig+0x1d6>
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0x1e0>
 80037e8:	e010      	b.n	800380c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ea:	f7ff f9cd 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 80037ee:	0003      	movs	r3, r0
 80037f0:	61bb      	str	r3, [r7, #24]
        break;
 80037f2:	e012      	b.n	800381a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <UART_SetConfig+0x27c>)
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e00f      	b.n	800381a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fa:	f7ff f957 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80037fe:	0003      	movs	r3, r0
 8003800:	61bb      	str	r3, [r7, #24]
        break;
 8003802:	e00a      	b.n	800381a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	61bb      	str	r3, [r7, #24]
        break;
 800380a:	e006      	b.n	800381a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003810:	231e      	movs	r3, #30
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
        break;
 8003818:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01e      	beq.n	800385e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	085a      	lsrs	r2, r3, #1
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	18d2      	adds	r2, r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc69 	bl	8000108 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	b29b      	uxth	r3, r3
 800383a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d909      	bls.n	8003856 <UART_SetConfig+0x242>
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	025b      	lsls	r3, r3, #9
 8003848:	429a      	cmp	r2, r3
 800384a:	d204      	bcs.n	8003856 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e003      	b.n	800385e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003856:	231e      	movs	r3, #30
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800386a:	231e      	movs	r3, #30
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b008      	add	sp, #32
 8003876:	bd80      	pop	{r7, pc}
 8003878:	ffff69f3 	.word	0xffff69f3
 800387c:	ffffcfff 	.word	0xffffcfff
 8003880:	fffff4ff 	.word	0xfffff4ff
 8003884:	40013800 	.word	0x40013800
 8003888:	40021000 	.word	0x40021000
 800388c:	40004400 	.word	0x40004400
 8003890:	007a1200 	.word	0x007a1200

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <UART_AdvFeatureConfig+0x144>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a43      	ldr	r2, [pc, #268]	; (80039dc <UART_AdvFeatureConfig+0x148>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2204      	movs	r2, #4
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <UART_AdvFeatureConfig+0x14c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2208      	movs	r2, #8
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <UART_AdvFeatureConfig+0x150>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2210      	movs	r2, #16
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <UART_AdvFeatureConfig+0x154>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2220      	movs	r2, #32
 800394c:	4013      	ands	r3, r2
 800394e:	d00b      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <UART_AdvFeatureConfig+0x158>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	4013      	ands	r3, r2
 8003970:	d01d      	beq.n	80039ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <UART_AdvFeatureConfig+0x15c>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	035b      	lsls	r3, r3, #13
 8003992:	429a      	cmp	r2, r3
 8003994:	d10b      	bne.n	80039ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <UART_AdvFeatureConfig+0x160>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <UART_AdvFeatureConfig+0x164>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	fffdffff 	.word	0xfffdffff
 80039dc:	fffeffff 	.word	0xfffeffff
 80039e0:	fffbffff 	.word	0xfffbffff
 80039e4:	ffff7fff 	.word	0xffff7fff
 80039e8:	ffffefff 	.word	0xffffefff
 80039ec:	ffffdfff 	.word	0xffffdfff
 80039f0:	ffefffff 	.word	0xffefffff
 80039f4:	ff9fffff 	.word	0xff9fffff
 80039f8:	fff7ffff 	.word	0xfff7ffff

080039fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a0c:	f7fd fbb2 	bl	8001174 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d10c      	bne.n	8003a3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	0391      	lsls	r1, r2, #14
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <UART_CheckIdleState+0x8c>)
 8003a2c:	9200      	str	r2, [sp, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f000 f82c 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d001      	beq.n	8003a3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e021      	b.n	8003a80 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d10c      	bne.n	8003a64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	03d1      	lsls	r1, r2, #15
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <UART_CheckIdleState+0x8c>)
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f818 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00d      	b.n	8003a80 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2274      	movs	r2, #116	; 0x74
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	01ffffff 	.word	0x01ffffff

08003a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b094      	sub	sp, #80	; 0x50
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	e0a3      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d100      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003aa4:	e09f      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fd fb65 	bl	8001174 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d13d      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	494c      	ldr	r1, [pc, #304]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40
 8003af8:	2301      	movs	r3, #1
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	438a      	bics	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2274      	movs	r2, #116	; 0x74
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e067      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	d050      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	401a      	ands	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d146      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	0112      	lsls	r2, r2, #4
 8003b60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	613b      	str	r3, [r7, #16]
  return(result);
 8003b68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4923      	ldr	r1, [pc, #140]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2274      	movs	r2, #116	; 0x74
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e010      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	4153      	adcs	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d100      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c04:	e74b      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b014      	add	sp, #80	; 0x50
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffffe5f 	.word	0xfffffe5f

08003c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	; 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1dba      	adds	r2, r7, #6
 8003c2c:	2158      	movs	r1, #88	; 0x58
 8003c2e:	8812      	ldrh	r2, [r2, #0]
 8003c30:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1dba      	adds	r2, r7, #6
 8003c36:	215a      	movs	r1, #90	; 0x5a
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	015b      	lsls	r3, r3, #5
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10d      	bne.n	8003c6a <UART_Start_Receive_IT+0x56>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <UART_Start_Receive_IT+0x4c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	225c      	movs	r2, #92	; 0x5c
 8003c5a:	4939      	ldr	r1, [pc, #228]	; (8003d40 <UART_Start_Receive_IT+0x12c>)
 8003c5c:	5299      	strh	r1, [r3, r2]
 8003c5e:	e01a      	b.n	8003c96 <UART_Start_Receive_IT+0x82>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	225c      	movs	r2, #92	; 0x5c
 8003c64:	21ff      	movs	r1, #255	; 0xff
 8003c66:	5299      	strh	r1, [r3, r2]
 8003c68:	e015      	b.n	8003c96 <UART_Start_Receive_IT+0x82>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <UART_Start_Receive_IT+0x7a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <UART_Start_Receive_IT+0x70>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	225c      	movs	r2, #92	; 0x5c
 8003c7e:	21ff      	movs	r1, #255	; 0xff
 8003c80:	5299      	strh	r1, [r3, r2]
 8003c82:	e008      	b.n	8003c96 <UART_Start_Receive_IT+0x82>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	225c      	movs	r2, #92	; 0x5c
 8003c88:	217f      	movs	r1, #127	; 0x7f
 8003c8a:	5299      	strh	r1, [r3, r2]
 8003c8c:	e003      	b.n	8003c96 <UART_Start_Receive_IT+0x82>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	225c      	movs	r2, #92	; 0x5c
 8003c92:	2100      	movs	r1, #0
 8003c94:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2222      	movs	r2, #34	; 0x22
 8003ca2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003caa:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cae:	2301      	movs	r3, #1
 8003cb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d107      	bne.n	8003cf2 <UART_Start_Receive_IT+0xde>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <UART_Start_Receive_IT+0x130>)
 8003cee:	665a      	str	r2, [r3, #100]	; 0x64
 8003cf0:	e002      	b.n	8003cf8 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <UART_Start_Receive_IT+0x134>)
 8003cf6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2274      	movs	r2, #116	; 0x74
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	613b      	str	r3, [r7, #16]
  return(result);
 8003d06:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2190      	movs	r1, #144	; 0x90
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b00c      	add	sp, #48	; 0x30
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	000001ff 	.word	0x000001ff
 8003d44:	08003ffd 	.word	0x08003ffd
 8003d48:	08003e95 	.word	0x08003e95

08003d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	; 0x38
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	617b      	str	r3, [r7, #20]
  return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4925      	ldr	r1, [pc, #148]	; (8003e0c <UART_EndRxTransfer+0xc0>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d118      	bne.n	8003df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	2301      	movs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2110      	movs	r1, #16
 8003de2:	438a      	bics	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b00e      	add	sp, #56	; 0x38
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	fffffedf 	.word	0xfffffedf

08003e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	225a      	movs	r2, #90	; 0x5a
 8003e22:	2100      	movs	r1, #0
 8003e24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2252      	movs	r2, #82	; 0x52
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fbdb 	bl	80035ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e46:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	2301      	movs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2140      	movs	r1, #64	; 0x40
 8003e68:	438a      	bics	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f383 8810 	msr	PRIMASK, r3
}
 8003e76:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff fba8 	bl	80035dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b006      	add	sp, #24
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b090      	sub	sp, #64	; 0x40
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e9c:	203e      	movs	r0, #62	; 0x3e
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	215c      	movs	r1, #92	; 0x5c
 8003ea4:	5a52      	ldrh	r2, [r2, r1]
 8003ea6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eac:	2b22      	cmp	r3, #34	; 0x22
 8003eae:	d000      	beq.n	8003eb2 <UART_RxISR_8BIT+0x1e>
 8003eb0:	e095      	b.n	8003fde <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	213c      	movs	r1, #60	; 0x3c
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003ebc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	183b      	adds	r3, r7, r0
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b2d9      	uxtb	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	400a      	ands	r2, r1
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	225a      	movs	r2, #90	; 0x5a
 8003ee2:	5a9b      	ldrh	r3, [r3, r2]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	225a      	movs	r2, #90	; 0x5a
 8003eee:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	225a      	movs	r2, #90	; 0x5a
 8003ef4:	5a9b      	ldrh	r3, [r3, r2]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d178      	bne.n	8003fee <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8310 	mrs	r3, PRIMASK
 8003f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f02:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f06:	2301      	movs	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <UART_RxISR_8BIT+0x164>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d12f      	bne.n	8003fd4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f80:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
 8003f84:	2301      	movs	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2110      	movs	r1, #16
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d103      	bne.n	8003fc2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2258      	movs	r2, #88	; 0x58
 8003fc6:	5a9a      	ldrh	r2, [r3, r2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0011      	movs	r1, r2
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff fb15 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fd2:	e00c      	b.n	8003fee <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fc fc64 	bl	80008a4 <HAL_UART_RxCpltCallback>
}
 8003fdc:	e007      	b.n	8003fee <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2108      	movs	r1, #8
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b010      	add	sp, #64	; 0x40
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	fffffedf 	.word	0xfffffedf

08003ffc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b090      	sub	sp, #64	; 0x40
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004004:	203e      	movs	r0, #62	; 0x3e
 8004006:	183b      	adds	r3, r7, r0
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	215c      	movs	r1, #92	; 0x5c
 800400c:	5a52      	ldrh	r2, [r2, r1]
 800400e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	2b22      	cmp	r3, #34	; 0x22
 8004016:	d000      	beq.n	800401a <UART_RxISR_16BIT+0x1e>
 8004018:	e095      	b.n	8004146 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	213c      	movs	r1, #60	; 0x3c
 8004020:	187b      	adds	r3, r7, r1
 8004022:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004024:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800402c:	187b      	adds	r3, r7, r1
 800402e:	183a      	adds	r2, r7, r0
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	8812      	ldrh	r2, [r2, #0]
 8004034:	4013      	ands	r3, r2
 8004036:	b29a      	uxth	r2, r3
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	225a      	movs	r2, #90	; 0x5a
 800404a:	5a9b      	ldrh	r3, [r3, r2]
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b299      	uxth	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	225a      	movs	r2, #90	; 0x5a
 8004056:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	225a      	movs	r2, #90	; 0x5a
 800405c:	5a9b      	ldrh	r3, [r3, r2]
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d178      	bne.n	8004156 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004064:	f3ef 8310 	mrs	r3, PRIMASK
 8004068:	617b      	str	r3, [r7, #20]
  return(result);
 800406a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
 800406e:	2301      	movs	r3, #1
 8004070:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4936      	ldr	r1, [pc, #216]	; (8004160 <UART_RxISR_16BIT+0x164>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	623b      	str	r3, [r7, #32]
  return(result);
 800409c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
 80040a0:	2301      	movs	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f383 8810 	msr	PRIMASK, r3
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d12f      	bne.n	800413c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2110      	movs	r1, #16
 8004104:	438a      	bics	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2210      	movs	r2, #16
 800411c:	4013      	ands	r3, r2
 800411e:	2b10      	cmp	r3, #16
 8004120:	d103      	bne.n	800412a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2210      	movs	r2, #16
 8004128:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2258      	movs	r2, #88	; 0x58
 800412e:	5a9a      	ldrh	r2, [r3, r2]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0011      	movs	r1, r2
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fa61 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800413a:	e00c      	b.n	8004156 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f7fc fbb0 	bl	80008a4 <HAL_UART_RxCpltCallback>
}
 8004144:	e007      	b.n	8004156 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2108      	movs	r1, #8
 8004152:	430a      	orrs	r2, r1
 8004154:	619a      	str	r2, [r3, #24]
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b010      	add	sp, #64	; 0x40
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	fffffedf 	.word	0xfffffedf

08004164 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	2600      	movs	r6, #0
 8004178:	4d0c      	ldr	r5, [pc, #48]	; (80041ac <__libc_init_array+0x38>)
 800417a:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	2600      	movs	r6, #0
 8004186:	f000 f821 	bl	80041cc <_init>
 800418a:	4d0a      	ldr	r5, [pc, #40]	; (80041b4 <__libc_init_array+0x40>)
 800418c:	4c0a      	ldr	r4, [pc, #40]	; (80041b8 <__libc_init_array+0x44>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	00b3      	lsls	r3, r6, #2
 800419a:	58eb      	ldr	r3, [r5, r3]
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	00b3      	lsls	r3, r6, #2
 80041a4:	58eb      	ldr	r3, [r5, r3]
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	080042ac 	.word	0x080042ac
 80041b0:	080042ac 	.word	0x080042ac
 80041b4:	080042ac 	.word	0x080042ac
 80041b8:	080042b0 	.word	0x080042b0

080041bc <memset>:
 80041bc:	0003      	movs	r3, r0
 80041be:	1882      	adds	r2, r0, r2
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	7019      	strb	r1, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
